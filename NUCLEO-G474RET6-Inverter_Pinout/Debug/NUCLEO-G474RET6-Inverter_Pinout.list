
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc74  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800de58  0800de58  0000ee58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3dc  0800e3dc  000102b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3dc  0800e3dc  0000f3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3e4  0800e3e4  000102b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3e4  0800e3e4  0000f3e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3e8  0800e3e8  0000f3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  0800e3ec  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  200002b8  0800e6a4  000102b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  0800e6a4  00010828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b990  00000000  00000000  000102e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000385c  00000000  00000000  0002bc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0002f4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001127  00000000  00000000  00030b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab30  00000000  00000000  00031c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c728  00000000  00000000  0005c767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114749  00000000  00000000  00078e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018d5d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007410  00000000  00000000  0018d61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00194a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002b8 	.word	0x200002b8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800de3c 	.word	0x0800de3c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002bc 	.word	0x200002bc
 800021c:	0800de3c 	.word	0x0800de3c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	@ 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800105a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2220      	movs	r2, #32
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f009 fb2e 	bl	800a6ce <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001072:	4b33      	ldr	r3, [pc, #204]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001074:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001078:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800107a:	4b31      	ldr	r3, [pc, #196]	@ (8001140 <MX_ADC1_Init+0xec>)
 800107c:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8001080:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001082:	4b2f      	ldr	r3, [pc, #188]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001088:	4b2d      	ldr	r3, [pc, #180]	@ (8001140 <MX_ADC1_Init+0xec>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800108e:	4b2c      	ldr	r3, [pc, #176]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001094:	4b2a      	ldr	r3, [pc, #168]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <MX_ADC1_Init+0xec>)
 800109c:	2204      	movs	r2, #4
 800109e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a0:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010a6:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010ac:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 80010ba:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e0:	4817      	ldr	r0, [pc, #92]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010e2:	f001 fd5f 	bl	8002ba4 <HAL_ADC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80010ec:	f000 fb08 	bl	8001700 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4811      	ldr	r0, [pc, #68]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010fc:	f002 fd58 	bl	8003bb0 <HAL_ADCEx_MultiModeConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001106:	f000 fafb 	bl	8001700 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <MX_ADC1_Init+0xf0>)
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2306      	movs	r3, #6
 8001110:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001116:	237f      	movs	r3, #127	@ 0x7f
 8001118:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111a:	2304      	movs	r3, #4
 800111c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001128:	f001 ffe6 	bl	80030f8 <HAL_ADC_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001132:	f000 fae5 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3730      	adds	r7, #48	@ 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200002d4 	.word	0x200002d4
 8001144:	21800100 	.word	0x21800100

08001148 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114e:	463b      	mov	r3, r7
 8001150:	2220      	movs	r2, #32
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f009 faba 	bl	800a6ce <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800115a:	4b2b      	ldr	r3, [pc, #172]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800115c:	4a2b      	ldr	r2, [pc, #172]	@ (800120c <MX_ADC2_Init+0xc4>)
 800115e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001160:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001162:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8001166:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001168:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001174:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117a:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001180:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001182:	2204      	movs	r2, #4
 8001184:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001188:	2200      	movs	r2, #0
 800118a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800118c:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800118e:	2200      	movs	r2, #0
 8001190:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001192:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001194:	2201      	movs	r2, #1
 8001196:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001198:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a6:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011ac:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011c2:	4811      	ldr	r0, [pc, #68]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011c4:	f001 fcee 	bl	8002ba4 <HAL_ADC_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011ce:	f000 fa97 	bl	8001700 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <MX_ADC2_Init+0xc8>)
 80011d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d6:	2306      	movs	r3, #6
 80011d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011de:	237f      	movs	r3, #127	@ 0x7f
 80011e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e2:	2304      	movs	r3, #4
 80011e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011f0:	f001 ff82 	bl	80030f8 <HAL_ADC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011fa:	f000 fa81 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000340 	.word	0x20000340
 800120c:	50000100 	.word	0x50000100
 8001210:	19200040 	.word	0x19200040

08001214 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0a4      	sub	sp, #144	@ 0x90
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800122c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001230:	2254      	movs	r2, #84	@ 0x54
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f009 fa4a 	bl	800a6ce <memset>
  if(adcHandle->Instance==ADC1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001242:	f040 80a0 	bne.w	8001386 <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800124c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001250:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001252:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001256:	4618      	mov	r0, r3
 8001258:	f004 f99c 	bl	8005594 <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001262:	f000 fa4d 	bl	8001700 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001266:	4b79      	ldr	r3, [pc, #484]	@ (800144c <HAL_ADC_MspInit+0x238>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a77      	ldr	r2, [pc, #476]	@ (800144c <HAL_ADC_MspInit+0x238>)
 800126e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001270:	4b76      	ldr	r3, [pc, #472]	@ (800144c <HAL_ADC_MspInit+0x238>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10b      	bne.n	8001290 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001278:	4b75      	ldr	r3, [pc, #468]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127c:	4a74      	ldr	r2, [pc, #464]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 800127e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001282:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001284:	4b72      	ldr	r3, [pc, #456]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	4b6f      	ldr	r3, [pc, #444]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001294:	4a6e      	ldr	r2, [pc, #440]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129c:	4b6c      	ldr	r3, [pc, #432]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	623b      	str	r3, [r7, #32]
 80012a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b69      	ldr	r3, [pc, #420]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ac:	4a68      	ldr	r2, [pc, #416]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b4:	4b66      	ldr	r3, [pc, #408]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b63      	ldr	r3, [pc, #396]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c4:	4a62      	ldr	r2, [pc, #392]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012cc:	4b60      	ldr	r3, [pc, #384]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80012d8:	2304      	movs	r3, #4
 80012da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012dc:	2303      	movs	r3, #3
 80012de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012ec:	4619      	mov	r1, r3
 80012ee:	4859      	ldr	r0, [pc, #356]	@ (8001454 <HAL_ADC_MspInit+0x240>)
 80012f0:	f003 f978 	bl	80045e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80012f4:	2302      	movs	r3, #2
 80012f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f8:	2303      	movs	r3, #3
 80012fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001308:	4619      	mov	r1, r3
 800130a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130e:	f003 f969 	bl	80045e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001312:	2303      	movs	r3, #3
 8001314:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001326:	4619      	mov	r1, r3
 8001328:	484b      	ldr	r0, [pc, #300]	@ (8001458 <HAL_ADC_MspInit+0x244>)
 800132a:	f003 f95b 	bl	80045e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800132e:	4b4b      	ldr	r3, [pc, #300]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001330:	4a4b      	ldr	r2, [pc, #300]	@ (8001460 <HAL_ADC_MspInit+0x24c>)
 8001332:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001334:	4b49      	ldr	r3, [pc, #292]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001336:	2205      	movs	r2, #5
 8001338:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800133a:	4b48      	ldr	r3, [pc, #288]	@ (800145c <HAL_ADC_MspInit+0x248>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001340:	4b46      	ldr	r3, [pc, #280]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001346:	4b45      	ldr	r3, [pc, #276]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001348:	2280      	movs	r2, #128	@ 0x80
 800134a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800134c:	4b43      	ldr	r3, [pc, #268]	@ (800145c <HAL_ADC_MspInit+0x248>)
 800134e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001352:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001354:	4b41      	ldr	r3, [pc, #260]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001356:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800135a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800135c:	4b3f      	ldr	r3, [pc, #252]	@ (800145c <HAL_ADC_MspInit+0x248>)
 800135e:	2220      	movs	r2, #32
 8001360:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001362:	4b3e      	ldr	r3, [pc, #248]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001368:	483c      	ldr	r0, [pc, #240]	@ (800145c <HAL_ADC_MspInit+0x248>)
 800136a:	f002 fe09 	bl	8003f80 <HAL_DMA_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8001374:	f000 f9c4 	bl	8001700 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a38      	ldr	r2, [pc, #224]	@ (800145c <HAL_ADC_MspInit+0x248>)
 800137c:	655a      	str	r2, [r3, #84]	@ 0x54
 800137e:	4a37      	ldr	r2, [pc, #220]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001384:	e05e      	b.n	8001444 <HAL_ADC_MspInit+0x230>
  else if(adcHandle->Instance==ADC2)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a36      	ldr	r2, [pc, #216]	@ (8001464 <HAL_ADC_MspInit+0x250>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d159      	bne.n	8001444 <HAL_ADC_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001390:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001396:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800139a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 f8f7 	bl	8005594 <HAL_RCCEx_PeriphCLKConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_ADC_MspInit+0x19c>
      Error_Handler();
 80013ac:	f000 f9a8 	bl	8001700 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013b0:	4b26      	ldr	r3, [pc, #152]	@ (800144c <HAL_ADC_MspInit+0x238>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	4a25      	ldr	r2, [pc, #148]	@ (800144c <HAL_ADC_MspInit+0x238>)
 80013b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013ba:	4b24      	ldr	r3, [pc, #144]	@ (800144c <HAL_ADC_MspInit+0x238>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d10b      	bne.n	80013da <HAL_ADC_MspInit+0x1c6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013c2:	4b23      	ldr	r3, [pc, #140]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	4a22      	ldr	r2, [pc, #136]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ce:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	4a1c      	ldr	r2, [pc, #112]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	4a16      	ldr	r2, [pc, #88]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800140a:	230b      	movs	r3, #11
 800140c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140e:	2303      	movs	r3, #3
 8001410:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800141e:	4619      	mov	r1, r3
 8001420:	480c      	ldr	r0, [pc, #48]	@ (8001454 <HAL_ADC_MspInit+0x240>)
 8001422:	f003 f8df 	bl	80045e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8001426:	2301      	movs	r3, #1
 8001428:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142a:	2303      	movs	r3, #3
 800142c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800143a:	4619      	mov	r1, r3
 800143c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001440:	f003 f8d0 	bl	80045e4 <HAL_GPIO_Init>
}
 8001444:	bf00      	nop
 8001446:	3790      	adds	r7, #144	@ 0x90
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000040c 	.word	0x2000040c
 8001450:	40021000 	.word	0x40021000
 8001454:	48000800 	.word	0x48000800
 8001458:	48000400 	.word	0x48000400
 800145c:	200003ac 	.word	0x200003ac
 8001460:	40020008 	.word	0x40020008
 8001464:	50000100 	.word	0x50000100

08001468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <MX_DMA_Init+0x50>)
 8001470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001472:	4a11      	ldr	r2, [pc, #68]	@ (80014b8 <MX_DMA_Init+0x50>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6493      	str	r3, [r2, #72]	@ 0x48
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <MX_DMA_Init+0x50>)
 800147c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <MX_DMA_Init+0x50>)
 8001488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148a:	4a0b      	ldr	r2, [pc, #44]	@ (80014b8 <MX_DMA_Init+0x50>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6493      	str	r3, [r2, #72]	@ 0x48
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <MX_DMA_Init+0x50>)
 8001494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	200b      	movs	r0, #11
 80014a4:	f002 fd44 	bl	8003f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014a8:	200b      	movs	r0, #11
 80014aa:	f002 fd5b 	bl	8003f64 <HAL_NVIC_EnableIRQ>

}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	4b3f      	ldr	r3, [pc, #252]	@ (80015d0 <MX_GPIO_Init+0x114>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	4a3e      	ldr	r2, [pc, #248]	@ (80015d0 <MX_GPIO_Init+0x114>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014de:	4b3c      	ldr	r3, [pc, #240]	@ (80015d0 <MX_GPIO_Init+0x114>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ea:	4b39      	ldr	r3, [pc, #228]	@ (80015d0 <MX_GPIO_Init+0x114>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	4a38      	ldr	r2, [pc, #224]	@ (80015d0 <MX_GPIO_Init+0x114>)
 80014f0:	f043 0320 	orr.w	r3, r3, #32
 80014f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f6:	4b36      	ldr	r3, [pc, #216]	@ (80015d0 <MX_GPIO_Init+0x114>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	f003 0320 	and.w	r3, r3, #32
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	4b33      	ldr	r3, [pc, #204]	@ (80015d0 <MX_GPIO_Init+0x114>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	4a32      	ldr	r2, [pc, #200]	@ (80015d0 <MX_GPIO_Init+0x114>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150e:	4b30      	ldr	r3, [pc, #192]	@ (80015d0 <MX_GPIO_Init+0x114>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	4b2d      	ldr	r3, [pc, #180]	@ (80015d0 <MX_GPIO_Init+0x114>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	4a2c      	ldr	r2, [pc, #176]	@ (80015d0 <MX_GPIO_Init+0x114>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001526:	4b2a      	ldr	r3, [pc, #168]	@ (80015d0 <MX_GPIO_Init+0x114>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001532:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <MX_GPIO_Init+0x114>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4a26      	ldr	r2, [pc, #152]	@ (80015d0 <MX_GPIO_Init+0x114>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153e:	4b24      	ldr	r3, [pc, #144]	@ (80015d0 <MX_GPIO_Init+0x114>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2120      	movs	r1, #32
 800154e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001552:	f003 f9c9 	bl	80048e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2104      	movs	r1, #4
 800155a:	481e      	ldr	r0, [pc, #120]	@ (80015d4 <MX_GPIO_Init+0x118>)
 800155c:	f003 f9c4 	bl	80048e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001560:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001566:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	4818      	ldr	r0, [pc, #96]	@ (80015d8 <MX_GPIO_Init+0x11c>)
 8001578:	f003 f834 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 800157c:	2320      	movs	r3, #32
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001596:	f003 f825 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 800159a:	2304      	movs	r3, #4
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4808      	ldr	r0, [pc, #32]	@ (80015d4 <MX_GPIO_Init+0x118>)
 80015b2:	f003 f817 	bl	80045e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	2028      	movs	r0, #40	@ 0x28
 80015bc:	f002 fcb8 	bl	8003f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015c0:	2028      	movs	r0, #40	@ 0x28
 80015c2:	f002 fccf 	bl	8003f64 <HAL_NVIC_EnableIRQ>

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	@ 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000
 80015d4:	48000c00 	.word	0x48000c00
 80015d8:	48000800 	.word	0x48000800

080015dc <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80015e4:	1d39      	adds	r1, r7, #4
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	2201      	movs	r2, #1
 80015ec:	4803      	ldr	r0, [pc, #12]	@ (80015fc <__io_putchar+0x20>)
 80015ee:	f005 fff8 	bl	80075e2 <HAL_UART_Transmit>
	return ch;
 80015f2:	687b      	ldr	r3, [r7, #4]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200004f8 	.word	0x200004f8

08001600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001604:	f001 f853 	bl	80026ae <HAL_Init>
  /* USER CODE BEGIN Init */
	//Start_PWM_Signals();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001608:	f000 f81e 	bl	8001648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160c:	f7ff ff56 	bl	80014bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001610:	f7ff ff2a 	bl	8001468 <MX_DMA_Init>
  MX_ADC2_Init();
 8001614:	f7ff fd98 	bl	8001148 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001618:	f7ff fd1c 	bl	8001054 <MX_ADC1_Init>
  MX_TIM1_Init();
 800161c:	f000 fa3e 	bl	8001a9c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001620:	f000 fae8 	bl	8001bf4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001624:	f000 fc1c 	bl	8001e60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001628:	f000 fc66 	bl	8001ef8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 800162c:	f000 fd58 	bl	80020e0 <Shell_Init>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&buffer,1);
 8001630:	2201      	movs	r2, #1
 8001632:	4903      	ldr	r1, [pc, #12]	@ (8001640 <main+0x40>)
 8001634:	4803      	ldr	r0, [pc, #12]	@ (8001644 <main+0x44>)
 8001636:	f001 fc77 	bl	8002f28 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 800163a:	f000 fd91 	bl	8002160 <Shell_Loop>
 800163e:	e7fc      	b.n	800163a <main+0x3a>
 8001640:	20000000 	.word	0x20000000
 8001644:	200002d4 	.word	0x200002d4

08001648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b094      	sub	sp, #80	@ 0x50
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 0318 	add.w	r3, r7, #24
 8001652:	2238      	movs	r2, #56	@ 0x38
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f009 f839 	bl	800a6ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800166a:	2000      	movs	r0, #0
 800166c:	f003 f978 	bl	8004960 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001670:	2301      	movs	r3, #1
 8001672:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001674:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001678:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167a:	2302      	movs	r3, #2
 800167c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800167e:	2303      	movs	r3, #3
 8001680:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001682:	2306      	movs	r3, #6
 8001684:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001686:	2355      	movs	r3, #85	@ 0x55
 8001688:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800168a:	2302      	movs	r3, #2
 800168c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800168e:	2302      	movs	r3, #2
 8001690:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001692:	2302      	movs	r3, #2
 8001694:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001696:	f107 0318 	add.w	r3, r7, #24
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fa14 	bl	8004ac8 <HAL_RCC_OscConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80016a6:	f000 f82b 	bl	8001700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016aa:	230f      	movs	r3, #15
 80016ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ae:	2303      	movs	r3, #3
 80016b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2104      	movs	r1, #4
 80016c2:	4618      	mov	r0, r3
 80016c4:	f003 fd18 	bl	80050f8 <HAL_RCC_ClockConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80016ce:	f000 f817 	bl	8001700 <Error_Handler>
  }
}
 80016d2:	bf00      	nop
 80016d4:	3750      	adds	r7, #80	@ 0x50
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ee:	f000 fff7 	bl	80026e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40001000 	.word	0x40001000

08001700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001704:	b672      	cpsid	i
}
 8001706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <Error_Handler+0x8>

0800170c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <HAL_MspInit+0x44>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001716:	4a0e      	ldr	r2, [pc, #56]	@ (8001750 <HAL_MspInit+0x44>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6613      	str	r3, [r2, #96]	@ 0x60
 800171e:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <HAL_MspInit+0x44>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <HAL_MspInit+0x44>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172e:	4a08      	ldr	r2, [pc, #32]	@ (8001750 <HAL_MspInit+0x44>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001734:	6593      	str	r3, [r2, #88]	@ 0x58
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_MspInit+0x44>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001742:	f003 f9b1 	bl	8004aa8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000

08001754 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	@ 0x30
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001764:	4b2c      	ldr	r3, [pc, #176]	@ (8001818 <HAL_InitTick+0xc4>)
 8001766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001768:	4a2b      	ldr	r2, [pc, #172]	@ (8001818 <HAL_InitTick+0xc4>)
 800176a:	f043 0310 	orr.w	r3, r3, #16
 800176e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001770:	4b29      	ldr	r3, [pc, #164]	@ (8001818 <HAL_InitTick+0xc4>)
 8001772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800177c:	f107 020c 	add.w	r2, r7, #12
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f003 fe8c 	bl	80054a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800178c:	f003 fe5e 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 8001790:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001794:	4a21      	ldr	r2, [pc, #132]	@ (800181c <HAL_InitTick+0xc8>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0c9b      	lsrs	r3, r3, #18
 800179c:	3b01      	subs	r3, #1
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <HAL_InitTick+0xcc>)
 80017a2:	4a20      	ldr	r2, [pc, #128]	@ (8001824 <HAL_InitTick+0xd0>)
 80017a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <HAL_InitTick+0xcc>)
 80017a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017ac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001820 <HAL_InitTick+0xcc>)
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <HAL_InitTick+0xcc>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <HAL_InitTick+0xcc>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80017c0:	4817      	ldr	r0, [pc, #92]	@ (8001820 <HAL_InitTick+0xcc>)
 80017c2:	f004 f935 	bl	8005a30 <HAL_TIM_Base_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80017cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d11b      	bne.n	800180c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017d4:	4812      	ldr	r0, [pc, #72]	@ (8001820 <HAL_InitTick+0xcc>)
 80017d6:	f004 f98d 	bl	8005af4 <HAL_TIM_Base_Start_IT>
 80017da:	4603      	mov	r3, r0
 80017dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80017e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d111      	bne.n	800180c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017e8:	2036      	movs	r0, #54	@ 0x36
 80017ea:	f002 fbbb 	bl	8003f64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d808      	bhi.n	8001806 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	2036      	movs	r0, #54	@ 0x36
 80017fa:	f002 fb99 	bl	8003f30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <HAL_InitTick+0xd4>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e002      	b.n	800180c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800180c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001810:	4618      	mov	r0, r3
 8001812:	3730      	adds	r7, #48	@ 0x30
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	431bde83 	.word	0x431bde83
 8001820:	20000410 	.word	0x20000410
 8001824:	40001000 	.word	0x40001000
 8001828:	200000e8 	.word	0x200000e8

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <NMI_Handler+0x4>

08001834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <MemManage_Handler+0x4>

08001844 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <UsageFault_Handler+0x4>

08001854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <DMA1_Channel1_IRQHandler+0x10>)
 8001892:	f002 fd58 	bl	8004346 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200003ac 	.word	0x200003ac

080018a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <USART2_IRQHandler+0x10>)
 80018a6:	f005 ff89 	bl	80077bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200004f8 	.word	0x200004f8

080018b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018b8:	4802      	ldr	r0, [pc, #8]	@ (80018c4 <USART3_IRQHandler+0x10>)
 80018ba:	f005 ff7f 	bl	80077bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000588 	.word	0x20000588

080018c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80018cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80018d0:	f003 f822 	bl	8004918 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <TIM6_DAC_IRQHandler+0x10>)
 80018de:	f004 fb87 	bl	8005ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000410 	.word	0x20000410

080018ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return 1;
 80018f0:	2301      	movs	r3, #1
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <_kill>:

int _kill(int pid, int sig)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001906:	f008 ff91 	bl	800a82c <__errno>
 800190a:	4603      	mov	r3, r0
 800190c:	2216      	movs	r2, #22
 800190e:	601a      	str	r2, [r3, #0]
  return -1;
 8001910:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_exit>:

void _exit (int status)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ffe7 	bl	80018fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800192e:	bf00      	nop
 8001930:	e7fd      	b.n	800192e <_exit+0x12>

08001932 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e00a      	b.n	800195a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001944:	f3af 8000 	nop.w
 8001948:	4601      	mov	r1, r0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	60ba      	str	r2, [r7, #8]
 8001950:	b2ca      	uxtb	r2, r1
 8001952:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3301      	adds	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	429a      	cmp	r2, r3
 8001960:	dbf0      	blt.n	8001944 <_read+0x12>
  }

  return len;
 8001962:	687b      	ldr	r3, [r7, #4]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	e009      	b.n	8001992 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	60ba      	str	r2, [r7, #8]
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fe28 	bl	80015dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	3301      	adds	r3, #1
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	429a      	cmp	r2, r3
 8001998:	dbf1      	blt.n	800197e <_write+0x12>
  }
  return len;
 800199a:	687b      	ldr	r3, [r7, #4]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <_close>:

int _close(int file)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019cc:	605a      	str	r2, [r3, #4]
  return 0;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_isatty>:

int _isatty(int file)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b085      	sub	sp, #20
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a14:	4a14      	ldr	r2, [pc, #80]	@ (8001a68 <_sbrk+0x5c>)
 8001a16:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <_sbrk+0x60>)
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a20:	4b13      	ldr	r3, [pc, #76]	@ (8001a70 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d102      	bne.n	8001a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a28:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <_sbrk+0x64>)
 8001a2a:	4a12      	ldr	r2, [pc, #72]	@ (8001a74 <_sbrk+0x68>)
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2e:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d207      	bcs.n	8001a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a3c:	f008 fef6 	bl	800a82c <__errno>
 8001a40:	4603      	mov	r3, r0
 8001a42:	220c      	movs	r2, #12
 8001a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	e009      	b.n	8001a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a52:	4b07      	ldr	r3, [pc, #28]	@ (8001a70 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a05      	ldr	r2, [pc, #20]	@ (8001a70 <_sbrk+0x64>)
 8001a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20020000 	.word	0x20020000
 8001a6c:	00000400 	.word	0x00000400
 8001a70:	2000045c 	.word	0x2000045c
 8001a74:	20000828 	.word	0x20000828

08001a78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <SystemInit+0x20>)
 8001a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a82:	4a05      	ldr	r2, [pc, #20]	@ (8001a98 <SystemInit+0x20>)
 8001a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b098      	sub	sp, #96	@ 0x60
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]
 8001abe:	615a      	str	r2, [r3, #20]
 8001ac0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2234      	movs	r2, #52	@ 0x34
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f008 fe00 	bl	800a6ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ace:	4b47      	ldr	r3, [pc, #284]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001ad0:	4a47      	ldr	r2, [pc, #284]	@ (8001bf0 <MX_TIM1_Init+0x154>)
 8001ad2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ad4:	4b45      	ldr	r3, [pc, #276]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001ada:	4b44      	ldr	r3, [pc, #272]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001adc:	2220      	movs	r2, #32
 8001ade:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8001ae0:	4b42      	ldr	r3, [pc, #264]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001ae2:	f241 0299 	movw	r2, #4249	@ 0x1099
 8001ae6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae8:	4b40      	ldr	r3, [pc, #256]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aee:	4b3f      	ldr	r3, [pc, #252]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af4:	4b3d      	ldr	r3, [pc, #244]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001afa:	483c      	ldr	r0, [pc, #240]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001afc:	f004 f872 	bl	8005be4 <HAL_TIM_PWM_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b06:	f7ff fdfb 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001b0a:	2340      	movs	r3, #64	@ 0x40
 8001b0c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b16:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4833      	ldr	r0, [pc, #204]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001b1e:	f005 fb5d 	bl	80071dc <HAL_TIMEx_MasterConfigSynchronization>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b28:	f7ff fdea 	bl	8001700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2c:	2360      	movs	r3, #96	@ 0x60
 8001b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b34:	2300      	movs	r3, #0
 8001b36:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4826      	ldr	r0, [pc, #152]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001b52:	f004 fbcd 	bl	80062f0 <HAL_TIM_PWM_ConfigChannel>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b5c:	f7ff fdd0 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b64:	2204      	movs	r2, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	4820      	ldr	r0, [pc, #128]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001b6a:	f004 fbc1 	bl	80062f0 <HAL_TIM_PWM_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001b74:	f7ff fdc4 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b7c:	2208      	movs	r2, #8
 8001b7e:	4619      	mov	r1, r3
 8001b80:	481a      	ldr	r0, [pc, #104]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001b82:	f004 fbb5 	bl	80062f0 <HAL_TIM_PWM_ConfigChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001b8c:	f7ff fdb8 	bl	8001700 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 15;
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ba4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ba8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4807      	ldr	r0, [pc, #28]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001bce:	f005 fb9b 	bl	8007308 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001bd8:	f7ff fd92 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bdc:	4803      	ldr	r0, [pc, #12]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001bde:	f000 f8d7 	bl	8001d90 <HAL_TIM_MspPostInit>

}
 8001be2:	bf00      	nop
 8001be4:	3760      	adds	r7, #96	@ 0x60
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000460 	.word	0x20000460
 8001bf0:	40012c00 	.word	0x40012c00

08001bf4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001bfa:	f107 0310 	add.w	r3, r7, #16
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c12:	4b1c      	ldr	r3, [pc, #112]	@ (8001c84 <MX_TIM3_Init+0x90>)
 8001c14:	4a1c      	ldr	r2, [pc, #112]	@ (8001c88 <MX_TIM3_Init+0x94>)
 8001c16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c18:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <MX_TIM3_Init+0x90>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <MX_TIM3_Init+0x90>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c24:	4b17      	ldr	r3, [pc, #92]	@ (8001c84 <MX_TIM3_Init+0x90>)
 8001c26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <MX_TIM3_Init+0x90>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c32:	4b14      	ldr	r3, [pc, #80]	@ (8001c84 <MX_TIM3_Init+0x90>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480d      	ldr	r0, [pc, #52]	@ (8001c84 <MX_TIM3_Init+0x90>)
 8001c50:	f005 f8f5 	bl	8006e3e <HAL_TIMEx_HallSensor_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001c5a:	f7ff fd51 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001c5e:	2350      	movs	r3, #80	@ 0x50
 8001c60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4806      	ldr	r0, [pc, #24]	@ (8001c84 <MX_TIM3_Init+0x90>)
 8001c6c:	f005 fab6 	bl	80071dc <HAL_TIMEx_MasterConfigSynchronization>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001c76:	f7ff fd43 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	3720      	adds	r7, #32
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200004ac 	.word	0x200004ac
 8001c88:	40000400 	.word	0x40000400

08001c8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x38>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10b      	bne.n	8001cb6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca2:	4a09      	ldr	r2, [pc, #36]	@ (8001cc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ca4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ca8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001caa:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40012c00 	.word	0x40012c00
 8001cc8:	40021000 	.word	0x40021000

08001ccc <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	@ 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a26      	ldr	r2, [pc, #152]	@ (8001d84 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d145      	bne.n	8001d7a <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cee:	4b26      	ldr	r3, [pc, #152]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf2:	4a25      	ldr	r2, [pc, #148]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cfa:	4b23      	ldr	r3, [pc, #140]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b20      	ldr	r3, [pc, #128]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d12:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d22:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d2a:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001d36:	2350      	movs	r3, #80	@ 0x50
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d46:	2302      	movs	r3, #2
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d54:	f002 fc46 	bl	80045e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	4619      	mov	r1, r3
 8001d74:	4805      	ldr	r0, [pc, #20]	@ (8001d8c <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001d76:	f002 fc35 	bl	80045e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3728      	adds	r7, #40	@ 0x28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40000400 	.word	0x40000400
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	48000800 	.word	0x48000800

08001d90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	@ 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a29      	ldr	r2, [pc, #164]	@ (8001e54 <HAL_TIM_MspPostInit+0xc4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d14b      	bne.n	8001e4a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db2:	4b29      	ldr	r3, [pc, #164]	@ (8001e58 <HAL_TIM_MspPostInit+0xc8>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db6:	4a28      	ldr	r2, [pc, #160]	@ (8001e58 <HAL_TIM_MspPostInit+0xc8>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dbe:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <HAL_TIM_MspPostInit+0xc8>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b23      	ldr	r3, [pc, #140]	@ (8001e58 <HAL_TIM_MspPostInit+0xc8>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dce:	4a22      	ldr	r2, [pc, #136]	@ (8001e58 <HAL_TIM_MspPostInit+0xc8>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd6:	4b20      	ldr	r3, [pc, #128]	@ (8001e58 <HAL_TIM_MspPostInit+0xc8>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001de2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001df4:	2306      	movs	r3, #6
 8001df6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4817      	ldr	r0, [pc, #92]	@ (8001e5c <HAL_TIM_MspPostInit+0xcc>)
 8001e00:	f002 fbf0 	bl	80045e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001e04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001e16:	2304      	movs	r3, #4
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4619      	mov	r1, r3
 8001e20:	480e      	ldr	r0, [pc, #56]	@ (8001e5c <HAL_TIM_MspPostInit+0xcc>)
 8001e22:	f002 fbdf 	bl	80045e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001e26:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e38:	2306      	movs	r3, #6
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e46:	f002 fbcd 	bl	80045e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3728      	adds	r7, #40	@ 0x28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40012c00 	.word	0x40012c00
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	48000400 	.word	0x48000400

08001e60 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e64:	4b22      	ldr	r3, [pc, #136]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e66:	4a23      	ldr	r2, [pc, #140]	@ (8001ef4 <MX_USART2_UART_Init+0x94>)
 8001e68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e72:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e84:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e86:	220c      	movs	r2, #12
 8001e88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e90:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e96:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ea8:	4811      	ldr	r0, [pc, #68]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001eaa:	f005 fb4a 	bl	8007542 <HAL_UART_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001eb4:	f7ff fc24 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eb8:	2100      	movs	r1, #0
 8001eba:	480d      	ldr	r0, [pc, #52]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001ebc:	f007 faed 	bl	800949a <HAL_UARTEx_SetTxFifoThreshold>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ec6:	f7ff fc1b 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4808      	ldr	r0, [pc, #32]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001ece:	f007 fb22 	bl	8009516 <HAL_UARTEx_SetRxFifoThreshold>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ed8:	f7ff fc12 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001edc:	4804      	ldr	r0, [pc, #16]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001ede:	f007 faa3 	bl	8009428 <HAL_UARTEx_DisableFifoMode>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ee8:	f7ff fc0a 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	200004f8 	.word	0x200004f8
 8001ef4:	40004400 	.word	0x40004400

08001ef8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001efc:	4b22      	ldr	r3, [pc, #136]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001efe:	4a23      	ldr	r2, [pc, #140]	@ (8001f8c <MX_USART3_UART_Init+0x94>)
 8001f00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f02:	4b21      	ldr	r3, [pc, #132]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f10:	4b1d      	ldr	r3, [pc, #116]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f16:	4b1c      	ldr	r3, [pc, #112]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f1e:	220c      	movs	r2, #12
 8001f20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f22:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f28:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f2e:	4b16      	ldr	r3, [pc, #88]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f34:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f3a:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f40:	4811      	ldr	r0, [pc, #68]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f42:	f005 fafe 	bl	8007542 <HAL_UART_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f4c:	f7ff fbd8 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f50:	2100      	movs	r1, #0
 8001f52:	480d      	ldr	r0, [pc, #52]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f54:	f007 faa1 	bl	800949a <HAL_UARTEx_SetTxFifoThreshold>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f5e:	f7ff fbcf 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f62:	2100      	movs	r1, #0
 8001f64:	4808      	ldr	r0, [pc, #32]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f66:	f007 fad6 	bl	8009516 <HAL_UARTEx_SetRxFifoThreshold>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f70:	f7ff fbc6 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f74:	4804      	ldr	r0, [pc, #16]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f76:	f007 fa57 	bl	8009428 <HAL_UARTEx_DisableFifoMode>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f80:	f7ff fbbe 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000588 	.word	0x20000588
 8001f8c:	40004800 	.word	0x40004800

08001f90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b0a0      	sub	sp, #128	@ 0x80
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fa8:	f107 0318 	add.w	r3, r7, #24
 8001fac:	2254      	movs	r2, #84	@ 0x54
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f008 fb8c 	bl	800a6ce <memset>
  if(uartHandle->Instance==USART2)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a45      	ldr	r2, [pc, #276]	@ (80020d0 <HAL_UART_MspInit+0x140>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d13f      	bne.n	8002040 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fc8:	f107 0318 	add.w	r3, r7, #24
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 fae1 	bl	8005594 <HAL_RCCEx_PeriphCLKConfig>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fd8:	f7ff fb92 	bl	8001700 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8001fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe0:	4a3c      	ldr	r2, [pc, #240]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8001fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fe8:	4b3a      	ldr	r3, [pc, #232]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff4:	4b37      	ldr	r3, [pc, #220]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff8:	4a36      	ldr	r2, [pc, #216]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002000:	4b34      	ldr	r3, [pc, #208]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800200c:	230c      	movs	r3, #12
 800200e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002018:	2300      	movs	r3, #0
 800201a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800201c:	2307      	movs	r3, #7
 800201e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002020:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002024:	4619      	mov	r1, r3
 8002026:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800202a:	f002 fadb 	bl	80045e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	2026      	movs	r0, #38	@ 0x26
 8002034:	f001 ff7c 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002038:	2026      	movs	r0, #38	@ 0x26
 800203a:	f001 ff93 	bl	8003f64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800203e:	e043      	b.n	80020c8 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a24      	ldr	r2, [pc, #144]	@ (80020d8 <HAL_UART_MspInit+0x148>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d13e      	bne.n	80020c8 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800204a:	2304      	movs	r3, #4
 800204c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002052:	f107 0318 	add.w	r3, r7, #24
 8002056:	4618      	mov	r0, r3
 8002058:	f003 fa9c 	bl	8005594 <HAL_RCCEx_PeriphCLKConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002062:	f7ff fb4d 	bl	8001700 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002066:	4b1b      	ldr	r3, [pc, #108]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206a:	4a1a      	ldr	r2, [pc, #104]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002070:	6593      	str	r3, [r2, #88]	@ 0x58
 8002072:	4b18      	ldr	r3, [pc, #96]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800207e:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002082:	4a14      	ldr	r2, [pc, #80]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800208a:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002096:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800209a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020a8:	2307      	movs	r3, #7
 80020aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80020b0:	4619      	mov	r1, r3
 80020b2:	480a      	ldr	r0, [pc, #40]	@ (80020dc <HAL_UART_MspInit+0x14c>)
 80020b4:	f002 fa96 	bl	80045e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	2027      	movs	r0, #39	@ 0x27
 80020be:	f001 ff37 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020c2:	2027      	movs	r0, #39	@ 0x27
 80020c4:	f001 ff4e 	bl	8003f64 <HAL_NVIC_EnableIRQ>
}
 80020c8:	bf00      	nop
 80020ca:	3780      	adds	r7, #128	@ 0x80
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40004400 	.word	0x40004400
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40004800 	.word	0x40004800
 80020dc:	48000800 	.word	0x48000800

080020e0 <Shell_Init>:
int 		pas = 1;
int 		delai = 100;
int 		trigger = 50; //valeur du rapport après start
int 		percentage = 50;

void Shell_Init(void){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS*sizeof(char*));
 80020e4:	2224      	movs	r2, #36	@ 0x24
 80020e6:	2100      	movs	r1, #0
 80020e8:	4816      	ldr	r0, [pc, #88]	@ (8002144 <Shell_Init+0x64>)
 80020ea:	f008 faf0 	bl	800a6ce <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE*sizeof(char));
 80020ee:	2240      	movs	r2, #64	@ 0x40
 80020f0:	2100      	movs	r1, #0
 80020f2:	4815      	ldr	r0, [pc, #84]	@ (8002148 <Shell_Init+0x68>)
 80020f4:	f008 faeb 	bl	800a6ce <memset>
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE*sizeof(char));
 80020f8:	4b14      	ldr	r3, [pc, #80]	@ (800214c <Shell_Init+0x6c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE*sizeof(char));
 80020fe:	2240      	movs	r2, #64	@ 0x40
 8002100:	2100      	movs	r1, #0
 8002102:	4813      	ldr	r0, [pc, #76]	@ (8002150 <Shell_Init+0x70>)
 8002104:	f008 fae3 	bl	800a6ce <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002108:	2201      	movs	r2, #1
 800210a:	4910      	ldr	r1, [pc, #64]	@ (800214c <Shell_Init+0x6c>)
 800210c:	4811      	ldr	r0, [pc, #68]	@ (8002154 <Shell_Init+0x74>)
 800210e:	f005 faff 	bl	8007710 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8002112:	4811      	ldr	r0, [pc, #68]	@ (8002158 <Shell_Init+0x78>)
 8002114:	f7fe f8e4 	bl	80002e0 <strlen>
 8002118:	4603      	mov	r3, r0
 800211a:	b29a      	uxth	r2, r3
 800211c:	f04f 33ff 	mov.w	r3, #4294967295
 8002120:	490d      	ldr	r1, [pc, #52]	@ (8002158 <Shell_Init+0x78>)
 8002122:	480c      	ldr	r0, [pc, #48]	@ (8002154 <Shell_Init+0x74>)
 8002124:	f005 fa5d 	bl	80075e2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8002128:	480c      	ldr	r0, [pc, #48]	@ (800215c <Shell_Init+0x7c>)
 800212a:	f7fe f8d9 	bl	80002e0 <strlen>
 800212e:	4603      	mov	r3, r0
 8002130:	b29a      	uxth	r2, r3
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	4909      	ldr	r1, [pc, #36]	@ (800215c <Shell_Init+0x7c>)
 8002138:	4806      	ldr	r0, [pc, #24]	@ (8002154 <Shell_Init+0x74>)
 800213a:	f005 fa52 	bl	80075e2 <HAL_UART_Transmit>
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200006a8 	.word	0x200006a8
 8002148:	20000664 	.word	0x20000664
 800214c:	2000061c 	.word	0x2000061c
 8002150:	20000620 	.word	0x20000620
 8002154:	200004f8 	.word	0x200004f8
 8002158:	20000024 	.word	0x20000024
 800215c:	20000008 	.word	0x20000008

08002160 <Shell_Loop>:

void Shell_Loop(void){
 8002160:	b580      	push	{r7, lr}
 8002162:	b08e      	sub	sp, #56	@ 0x38
 8002164:	af04      	add	r7, sp, #16
	if(uartRxReceived){
 8002166:	4b95      	ldr	r3, [pc, #596]	@ (80023bc <Shell_Loop+0x25c>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d05b      	beq.n	8002226 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 800216e:	4b94      	ldr	r3, [pc, #592]	@ (80023c0 <Shell_Loop+0x260>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b08      	cmp	r3, #8
 8002174:	d034      	beq.n	80021e0 <Shell_Loop+0x80>
 8002176:	2b0d      	cmp	r3, #13
 8002178:	d142      	bne.n	8002200 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
 800217e:	2203      	movs	r2, #3
 8002180:	4990      	ldr	r1, [pc, #576]	@ (80023c4 <Shell_Loop+0x264>)
 8002182:	4891      	ldr	r0, [pc, #580]	@ (80023c8 <Shell_Loop+0x268>)
 8002184:	f005 fa2d 	bl	80075e2 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8002188:	4b90      	ldr	r3, [pc, #576]	@ (80023cc <Shell_Loop+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a90      	ldr	r2, [pc, #576]	@ (80023d0 <Shell_Loop+0x270>)
 800218e:	2100      	movs	r1, #0
 8002190:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8002192:	4b90      	ldr	r3, [pc, #576]	@ (80023d4 <Shell_Loop+0x274>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8002198:	498f      	ldr	r1, [pc, #572]	@ (80023d8 <Shell_Loop+0x278>)
 800219a:	488d      	ldr	r0, [pc, #564]	@ (80023d0 <Shell_Loop+0x270>)
 800219c:	f008 faa0 	bl	800a6e0 <strtok>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4a8e      	ldr	r2, [pc, #568]	@ (80023dc <Shell_Loop+0x27c>)
 80021a4:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80021a6:	e010      	b.n	80021ca <Shell_Loop+0x6a>
				argv[argc++] = token;
 80021a8:	4b8a      	ldr	r3, [pc, #552]	@ (80023d4 <Shell_Loop+0x274>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	4989      	ldr	r1, [pc, #548]	@ (80023d4 <Shell_Loop+0x274>)
 80021b0:	600a      	str	r2, [r1, #0]
 80021b2:	4a8a      	ldr	r2, [pc, #552]	@ (80023dc <Shell_Loop+0x27c>)
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	498a      	ldr	r1, [pc, #552]	@ (80023e0 <Shell_Loop+0x280>)
 80021b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 80021bc:	4986      	ldr	r1, [pc, #536]	@ (80023d8 <Shell_Loop+0x278>)
 80021be:	2000      	movs	r0, #0
 80021c0:	f008 fa8e 	bl	800a6e0 <strtok>
 80021c4:	4603      	mov	r3, r0
 80021c6:	4a85      	ldr	r2, [pc, #532]	@ (80023dc <Shell_Loop+0x27c>)
 80021c8:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80021ca:	4b84      	ldr	r3, [pc, #528]	@ (80023dc <Shell_Loop+0x27c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1ea      	bne.n	80021a8 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 80021d2:	4b7e      	ldr	r3, [pc, #504]	@ (80023cc <Shell_Loop+0x26c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 80021d8:	4b82      	ldr	r3, [pc, #520]	@ (80023e4 <Shell_Loop+0x284>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
			break;
 80021de:	e01f      	b.n	8002220 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 80021e0:	4b7a      	ldr	r3, [pc, #488]	@ (80023cc <Shell_Loop+0x26c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	1e5a      	subs	r2, r3, #1
 80021e6:	4979      	ldr	r1, [pc, #484]	@ (80023cc <Shell_Loop+0x26c>)
 80021e8:	600a      	str	r2, [r1, #0]
 80021ea:	4a79      	ldr	r2, [pc, #484]	@ (80023d0 <Shell_Loop+0x270>)
 80021ec:	2100      	movs	r1, #0
 80021ee:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 80021f0:	f04f 33ff 	mov.w	r3, #4294967295
 80021f4:	2204      	movs	r2, #4
 80021f6:	497c      	ldr	r1, [pc, #496]	@ (80023e8 <Shell_Loop+0x288>)
 80021f8:	4873      	ldr	r0, [pc, #460]	@ (80023c8 <Shell_Loop+0x268>)
 80021fa:	f005 f9f2 	bl	80075e2 <HAL_UART_Transmit>
			break;
 80021fe:	e00f      	b.n	8002220 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8002200:	4b72      	ldr	r3, [pc, #456]	@ (80023cc <Shell_Loop+0x26c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	4971      	ldr	r1, [pc, #452]	@ (80023cc <Shell_Loop+0x26c>)
 8002208:	600a      	str	r2, [r1, #0]
 800220a:	4a6d      	ldr	r2, [pc, #436]	@ (80023c0 <Shell_Loop+0x260>)
 800220c:	7811      	ldrb	r1, [r2, #0]
 800220e:	4a70      	ldr	r2, [pc, #448]	@ (80023d0 <Shell_Loop+0x270>)
 8002210:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	2201      	movs	r2, #1
 8002218:	4969      	ldr	r1, [pc, #420]	@ (80023c0 <Shell_Loop+0x260>)
 800221a:	486b      	ldr	r0, [pc, #428]	@ (80023c8 <Shell_Loop+0x268>)
 800221c:	f005 f9e1 	bl	80075e2 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8002220:	4b66      	ldr	r3, [pc, #408]	@ (80023bc <Shell_Loop+0x25c>)
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8002226:	4b6f      	ldr	r3, [pc, #444]	@ (80023e4 <Shell_Loop+0x284>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 81a1 	beq.w	8002572 <Shell_Loop+0x412>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8002230:	4b6b      	ldr	r3, [pc, #428]	@ (80023e0 <Shell_Loop+0x280>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	496d      	ldr	r1, [pc, #436]	@ (80023ec <Shell_Loop+0x28c>)
 8002236:	4618      	mov	r0, r3
 8002238:	f7fd fff2 	bl	8000220 <strcmp>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d107      	bne.n	8002252 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	221a      	movs	r2, #26
 8002248:	4969      	ldr	r1, [pc, #420]	@ (80023f0 <Shell_Loop+0x290>)
 800224a:	485f      	ldr	r0, [pc, #380]	@ (80023c8 <Shell_Loop+0x268>)
 800224c:	f005 f9c9 	bl	80075e2 <HAL_UART_Transmit>
 8002250:	e185      	b.n	800255e <Shell_Loop+0x3fe>
		}
		else if(strcmp(argv[0],"help")==0){
 8002252:	4b63      	ldr	r3, [pc, #396]	@ (80023e0 <Shell_Loop+0x280>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4967      	ldr	r1, [pc, #412]	@ (80023f4 <Shell_Loop+0x294>)
 8002258:	4618      	mov	r0, r3
 800225a:	f7fd ffe1 	bl	8000220 <strcmp>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d12c      	bne.n	80022be <Shell_Loop+0x15e>

			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 8002264:	4a64      	ldr	r2, [pc, #400]	@ (80023f8 <Shell_Loop+0x298>)
 8002266:	2140      	movs	r1, #64	@ 0x40
 8002268:	4864      	ldr	r0, [pc, #400]	@ (80023fc <Shell_Loop+0x29c>)
 800226a:	f008 f999 	bl	800a5a0 <sniprintf>
 800226e:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	b29a      	uxth	r2, r3
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
 8002278:	4960      	ldr	r1, [pc, #384]	@ (80023fc <Shell_Loop+0x29c>)
 800227a:	4853      	ldr	r0, [pc, #332]	@ (80023c8 <Shell_Loop+0x268>)
 800227c:	f005 f9b1 	bl	80075e2 <HAL_UART_Transmit>

			for (size_t i = 0; i < nbcommand; i++) {
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	@ 0x24
 8002284:	e014      	b.n	80022b0 <Shell_Loop+0x150>
				// Convertir l'élément du tableau en chaîne de caractères
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "%s\r\n", command[i]);
 8002286:	4a5e      	ldr	r2, [pc, #376]	@ (8002400 <Shell_Loop+0x2a0>)
 8002288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228e:	4a5d      	ldr	r2, [pc, #372]	@ (8002404 <Shell_Loop+0x2a4>)
 8002290:	2140      	movs	r1, #64	@ 0x40
 8002292:	485a      	ldr	r0, [pc, #360]	@ (80023fc <Shell_Loop+0x29c>)
 8002294:	f008 f984 	bl	800a5a0 <sniprintf>
 8002298:	6078      	str	r0, [r7, #4]
				// Transmettre le texte via UART
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	b29a      	uxth	r2, r3
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	4956      	ldr	r1, [pc, #344]	@ (80023fc <Shell_Loop+0x29c>)
 80022a4:	4848      	ldr	r0, [pc, #288]	@ (80023c8 <Shell_Loop+0x268>)
 80022a6:	f005 f99c 	bl	80075e2 <HAL_UART_Transmit>
			for (size_t i = 0; i < nbcommand; i++) {
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	3301      	adds	r3, #1
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80022b0:	4b55      	ldr	r3, [pc, #340]	@ (8002408 <Shell_Loop+0x2a8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d3e4      	bcc.n	8002286 <Shell_Loop+0x126>
 80022bc:	e14f      	b.n	800255e <Shell_Loop+0x3fe>
			}

		}

		else if(strcmp(argv[0],"start")==0){
 80022be:	4b48      	ldr	r3, [pc, #288]	@ (80023e0 <Shell_Loop+0x280>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4952      	ldr	r1, [pc, #328]	@ (800240c <Shell_Loop+0x2ac>)
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fd ffab 	bl	8000220 <strcmp>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d121      	bne.n	8002314 <Shell_Loop+0x1b4>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Power on\r\n");
 80022d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002410 <Shell_Loop+0x2b0>)
 80022d2:	2140      	movs	r1, #64	@ 0x40
 80022d4:	4849      	ldr	r0, [pc, #292]	@ (80023fc <Shell_Loop+0x29c>)
 80022d6:	f008 f963 	bl	800a5a0 <sniprintf>
 80022da:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	b29a      	uxth	r2, r3
 80022e0:	f04f 33ff 	mov.w	r3, #4294967295
 80022e4:	4945      	ldr	r1, [pc, #276]	@ (80023fc <Shell_Loop+0x29c>)
 80022e6:	4838      	ldr	r0, [pc, #224]	@ (80023c8 <Shell_Loop+0x268>)
 80022e8:	f005 f97b 	bl	80075e2 <HAL_UART_Transmit>
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80022ec:	2100      	movs	r1, #0
 80022ee:	4849      	ldr	r0, [pc, #292]	@ (8002414 <Shell_Loop+0x2b4>)
 80022f0:	f003 fcd0 	bl	8005c94 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80022f4:	2100      	movs	r1, #0
 80022f6:	4847      	ldr	r0, [pc, #284]	@ (8002414 <Shell_Loop+0x2b4>)
 80022f8:	f004 fe50 	bl	8006f9c <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80022fc:	2104      	movs	r1, #4
 80022fe:	4845      	ldr	r0, [pc, #276]	@ (8002414 <Shell_Loop+0x2b4>)
 8002300:	f003 fcc8 	bl	8005c94 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002304:	2104      	movs	r1, #4
 8002306:	4843      	ldr	r0, [pc, #268]	@ (8002414 <Shell_Loop+0x2b4>)
 8002308:	f004 fe48 	bl	8006f9c <HAL_TIMEx_PWMN_Start>
			setPWM(NULL_SPEED);
 800230c:	2032      	movs	r0, #50	@ 0x32
 800230e:	f000 f983 	bl	8002618 <setPWM>
 8002312:	e124      	b.n	800255e <Shell_Loop+0x3fe>
		}
		else if(strcmp(argv[0],"stop")==0){
 8002314:	4b32      	ldr	r3, [pc, #200]	@ (80023e0 <Shell_Loop+0x280>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	493f      	ldr	r1, [pc, #252]	@ (8002418 <Shell_Loop+0x2b8>)
 800231a:	4618      	mov	r0, r3
 800231c:	f7fd ff80 	bl	8000220 <strcmp>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 8082 	bne.w	800242c <Shell_Loop+0x2cc>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Power off\r\n");
 8002328:	4a3c      	ldr	r2, [pc, #240]	@ (800241c <Shell_Loop+0x2bc>)
 800232a:	2140      	movs	r1, #64	@ 0x40
 800232c:	4833      	ldr	r0, [pc, #204]	@ (80023fc <Shell_Loop+0x29c>)
 800232e:	f008 f937 	bl	800a5a0 <sniprintf>
 8002332:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	b29a      	uxth	r2, r3
 8002338:	f04f 33ff 	mov.w	r3, #4294967295
 800233c:	492f      	ldr	r1, [pc, #188]	@ (80023fc <Shell_Loop+0x29c>)
 800233e:	4822      	ldr	r0, [pc, #136]	@ (80023c8 <Shell_Loop+0x268>)
 8002340:	f005 f94f 	bl	80075e2 <HAL_UART_Transmit>
			if(percentage != NULL_SPEED){
 8002344:	4b36      	ldr	r3, [pc, #216]	@ (8002420 <Shell_Loop+0x2c0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b32      	cmp	r3, #50	@ 0x32
 800234a:	d026      	beq.n	800239a <Shell_Loop+0x23a>
				while(percentage != NULL_SPEED){
 800234c:	e021      	b.n	8002392 <Shell_Loop+0x232>
					if(percentage > NULL_SPEED){
 800234e:	4b34      	ldr	r3, [pc, #208]	@ (8002420 <Shell_Loop+0x2c0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b32      	cmp	r3, #50	@ 0x32
 8002354:	dd0c      	ble.n	8002370 <Shell_Loop+0x210>
						percentage -= pas;
 8002356:	4b32      	ldr	r3, [pc, #200]	@ (8002420 <Shell_Loop+0x2c0>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4b32      	ldr	r3, [pc, #200]	@ (8002424 <Shell_Loop+0x2c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	4a2f      	ldr	r2, [pc, #188]	@ (8002420 <Shell_Loop+0x2c0>)
 8002362:	6013      	str	r3, [r2, #0]
						setPWM(percentage);
 8002364:	4b2e      	ldr	r3, [pc, #184]	@ (8002420 <Shell_Loop+0x2c0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f955 	bl	8002618 <setPWM>
 800236e:	e00b      	b.n	8002388 <Shell_Loop+0x228>
					}
					else{
						percentage += pas;
 8002370:	4b2b      	ldr	r3, [pc, #172]	@ (8002420 <Shell_Loop+0x2c0>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b2b      	ldr	r3, [pc, #172]	@ (8002424 <Shell_Loop+0x2c4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4413      	add	r3, r2
 800237a:	4a29      	ldr	r2, [pc, #164]	@ (8002420 <Shell_Loop+0x2c0>)
 800237c:	6013      	str	r3, [r2, #0]
						setPWM(percentage);
 800237e:	4b28      	ldr	r3, [pc, #160]	@ (8002420 <Shell_Loop+0x2c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f948 	bl	8002618 <setPWM>
					}
					HAL_Delay(delai);
 8002388:	4b27      	ldr	r3, [pc, #156]	@ (8002428 <Shell_Loop+0x2c8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f000 f9c5 	bl	800271c <HAL_Delay>
				while(percentage != NULL_SPEED){
 8002392:	4b23      	ldr	r3, [pc, #140]	@ (8002420 <Shell_Loop+0x2c0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b32      	cmp	r3, #50	@ 0x32
 8002398:	d1d9      	bne.n	800234e <Shell_Loop+0x1ee>
				}
			}
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 800239a:	2100      	movs	r1, #0
 800239c:	481d      	ldr	r0, [pc, #116]	@ (8002414 <Shell_Loop+0x2b4>)
 800239e:	f003 fd8b 	bl	8005eb8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80023a2:	2100      	movs	r1, #0
 80023a4:	481b      	ldr	r0, [pc, #108]	@ (8002414 <Shell_Loop+0x2b4>)
 80023a6:	f004 febb 	bl	8007120 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 80023aa:	2104      	movs	r1, #4
 80023ac:	4819      	ldr	r0, [pc, #100]	@ (8002414 <Shell_Loop+0x2b4>)
 80023ae:	f003 fd83 	bl	8005eb8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80023b2:	2104      	movs	r1, #4
 80023b4:	4817      	ldr	r0, [pc, #92]	@ (8002414 <Shell_Loop+0x2b4>)
 80023b6:	f004 feb3 	bl	8007120 <HAL_TIMEx_PWMN_Stop>
 80023ba:	e0d0      	b.n	800255e <Shell_Loop+0x3fe>
 80023bc:	20000618 	.word	0x20000618
 80023c0:	2000061c 	.word	0x2000061c
 80023c4:	2000008c 	.word	0x2000008c
 80023c8:	200004f8 	.word	0x200004f8
 80023cc:	200006a4 	.word	0x200006a4
 80023d0:	20000664 	.word	0x20000664
 80023d4:	200006cc 	.word	0x200006cc
 80023d8:	0800de80 	.word	0x0800de80
 80023dc:	200006d0 	.word	0x200006d0
 80023e0:	200006a8 	.word	0x200006a8
 80023e4:	200006d4 	.word	0x200006d4
 80023e8:	20000090 	.word	0x20000090
 80023ec:	0800de58 	.word	0x0800de58
 80023f0:	200000a8 	.word	0x200000a8
 80023f4:	0800de84 	.word	0x0800de84
 80023f8:	0800de8c 	.word	0x0800de8c
 80023fc:	20000620 	.word	0x20000620
 8002400:	200000c4 	.word	0x200000c4
 8002404:	0800deb4 	.word	0x0800deb4
 8002408:	200000d4 	.word	0x200000d4
 800240c:	0800de68 	.word	0x0800de68
 8002410:	0800debc 	.word	0x0800debc
 8002414:	20000460 	.word	0x20000460
 8002418:	0800de70 	.word	0x0800de70
 800241c:	0800dec8 	.word	0x0800dec8
 8002420:	200000e4 	.word	0x200000e4
 8002424:	200000d8 	.word	0x200000d8
 8002428:	200000dc 	.word	0x200000dc
		}

		else if(argc == 2 && strcmp(argv[0], "speed") == 0){
 800242c:	4b53      	ldr	r3, [pc, #332]	@ (800257c <Shell_Loop+0x41c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d153      	bne.n	80024dc <Shell_Loop+0x37c>
 8002434:	4b52      	ldr	r3, [pc, #328]	@ (8002580 <Shell_Loop+0x420>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4952      	ldr	r1, [pc, #328]	@ (8002584 <Shell_Loop+0x424>)
 800243a:	4618      	mov	r0, r3
 800243c:	f7fd fef0 	bl	8000220 <strcmp>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d14a      	bne.n	80024dc <Shell_Loop+0x37c>
			percentage = atoi(argv[1]);  // Convertit l'argument en pourcentage
 8002446:	4b4e      	ldr	r3, [pc, #312]	@ (8002580 <Shell_Loop+0x420>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4618      	mov	r0, r3
 800244c:	f007 f8f0 	bl	8009630 <atoi>
 8002450:	4603      	mov	r3, r0
 8002452:	4a4d      	ldr	r2, [pc, #308]	@ (8002588 <Shell_Loop+0x428>)
 8002454:	6013      	str	r3, [r2, #0]

			if(percentage>=0 && percentage<=100){
 8002456:	4b4c      	ldr	r3, [pc, #304]	@ (8002588 <Shell_Loop+0x428>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db2f      	blt.n	80024be <Shell_Loop+0x35e>
 800245e:	4b4a      	ldr	r3, [pc, #296]	@ (8002588 <Shell_Loop+0x428>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b64      	cmp	r3, #100	@ 0x64
 8002464:	dc2b      	bgt.n	80024be <Shell_Loop+0x35e>

				while(trigger!=percentage){
 8002466:	e023      	b.n	80024b0 <Shell_Loop+0x350>
					if(trigger>percentage){
 8002468:	4b48      	ldr	r3, [pc, #288]	@ (800258c <Shell_Loop+0x42c>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b46      	ldr	r3, [pc, #280]	@ (8002588 <Shell_Loop+0x428>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	dd0c      	ble.n	800248e <Shell_Loop+0x32e>
						trigger -= pas;
 8002474:	4b45      	ldr	r3, [pc, #276]	@ (800258c <Shell_Loop+0x42c>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b45      	ldr	r3, [pc, #276]	@ (8002590 <Shell_Loop+0x430>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	4a43      	ldr	r2, [pc, #268]	@ (800258c <Shell_Loop+0x42c>)
 8002480:	6013      	str	r3, [r2, #0]
						setPWM(trigger);
 8002482:	4b42      	ldr	r3, [pc, #264]	@ (800258c <Shell_Loop+0x42c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f8c6 	bl	8002618 <setPWM>
 800248c:	e00b      	b.n	80024a6 <Shell_Loop+0x346>
					}
					else{
						trigger += pas;
 800248e:	4b3f      	ldr	r3, [pc, #252]	@ (800258c <Shell_Loop+0x42c>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b3f      	ldr	r3, [pc, #252]	@ (8002590 <Shell_Loop+0x430>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4413      	add	r3, r2
 8002498:	4a3c      	ldr	r2, [pc, #240]	@ (800258c <Shell_Loop+0x42c>)
 800249a:	6013      	str	r3, [r2, #0]
						setPWM(trigger);
 800249c:	4b3b      	ldr	r3, [pc, #236]	@ (800258c <Shell_Loop+0x42c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 f8b9 	bl	8002618 <setPWM>
					}
					HAL_Delay(delai);
 80024a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002594 <Shell_Loop+0x434>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f936 	bl	800271c <HAL_Delay>
				while(trigger!=percentage){
 80024b0:	4b36      	ldr	r3, [pc, #216]	@ (800258c <Shell_Loop+0x42c>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b34      	ldr	r3, [pc, #208]	@ (8002588 <Shell_Loop+0x428>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d1d5      	bne.n	8002468 <Shell_Loop+0x308>
			if(percentage>=0 && percentage<=100){
 80024bc:	e04f      	b.n	800255e <Shell_Loop+0x3fe>
				}
			}
			else{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Value must be between 0 and 100\r\n");
 80024be:	4a36      	ldr	r2, [pc, #216]	@ (8002598 <Shell_Loop+0x438>)
 80024c0:	2140      	movs	r1, #64	@ 0x40
 80024c2:	4836      	ldr	r0, [pc, #216]	@ (800259c <Shell_Loop+0x43c>)
 80024c4:	f008 f86c 	bl	800a5a0 <sniprintf>
 80024c8:	6238      	str	r0, [r7, #32]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
 80024d2:	4932      	ldr	r1, [pc, #200]	@ (800259c <Shell_Loop+0x43c>)
 80024d4:	4832      	ldr	r0, [pc, #200]	@ (80025a0 <Shell_Loop+0x440>)
 80024d6:	f005 f884 	bl	80075e2 <HAL_UART_Transmit>
			if(percentage>=0 && percentage<=100){
 80024da:	e040      	b.n	800255e <Shell_Loop+0x3fe>
			}
		}
		else if(strcmp(argv[0],"current")==0){
 80024dc:	4b28      	ldr	r3, [pc, #160]	@ (8002580 <Shell_Loop+0x420>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4930      	ldr	r1, [pc, #192]	@ (80025a4 <Shell_Loop+0x444>)
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fd fe9c 	bl	8000220 <strcmp>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d130      	bne.n	8002550 <Shell_Loop+0x3f0>
			float voltage = V_REF * adc_val  / ADC_RESOLUTION;
 80024ee:	4b2e      	ldr	r3, [pc, #184]	@ (80025a8 <Shell_Loop+0x448>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fa:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80025ac <Shell_Loop+0x44c>
 80024fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002502:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80025b0 <Shell_Loop+0x450>
 8002506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800250a:	edc7 7a07 	vstr	s15, [r7, #28]
			float current = voltage - OFFSET / PRECISION;
 800250e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002512:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80025b4 <Shell_Loop+0x454>
 8002516:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800251a:	edc7 7a06 	vstr	s15, [r7, #24]
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "current : %f  %lu\r\n", current, adc_val);
 800251e:	69b8      	ldr	r0, [r7, #24]
 8002520:	f7fe f84a 	bl	80005b8 <__aeabi_f2d>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	491f      	ldr	r1, [pc, #124]	@ (80025a8 <Shell_Loop+0x448>)
 800252a:	6809      	ldr	r1, [r1, #0]
 800252c:	9102      	str	r1, [sp, #8]
 800252e:	e9cd 2300 	strd	r2, r3, [sp]
 8002532:	4a21      	ldr	r2, [pc, #132]	@ (80025b8 <Shell_Loop+0x458>)
 8002534:	2140      	movs	r1, #64	@ 0x40
 8002536:	4819      	ldr	r0, [pc, #100]	@ (800259c <Shell_Loop+0x43c>)
 8002538:	f008 f832 	bl	800a5a0 <sniprintf>
 800253c:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	b29a      	uxth	r2, r3
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
 8002546:	4915      	ldr	r1, [pc, #84]	@ (800259c <Shell_Loop+0x43c>)
 8002548:	4815      	ldr	r0, [pc, #84]	@ (80025a0 <Shell_Loop+0x440>)
 800254a:	f005 f84a 	bl	80075e2 <HAL_UART_Transmit>
 800254e:	e006      	b.n	800255e <Shell_Loop+0x3fe>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8002550:	f04f 33ff 	mov.w	r3, #4294967295
 8002554:	2214      	movs	r2, #20
 8002556:	4919      	ldr	r1, [pc, #100]	@ (80025bc <Shell_Loop+0x45c>)
 8002558:	4811      	ldr	r0, [pc, #68]	@ (80025a0 <Shell_Loop+0x440>)
 800255a:	f005 f842 	bl	80075e2 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800255e:	f04f 33ff 	mov.w	r3, #4294967295
 8002562:	221c      	movs	r2, #28
 8002564:	4916      	ldr	r1, [pc, #88]	@ (80025c0 <Shell_Loop+0x460>)
 8002566:	480e      	ldr	r0, [pc, #56]	@ (80025a0 <Shell_Loop+0x440>)
 8002568:	f005 f83b 	bl	80075e2 <HAL_UART_Transmit>
		newCmdReady = 0;
 800256c:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <Shell_Loop+0x464>)
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
	}
}
 8002572:	bf00      	nop
 8002574:	3728      	adds	r7, #40	@ 0x28
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200006cc 	.word	0x200006cc
 8002580:	200006a8 	.word	0x200006a8
 8002584:	0800de78 	.word	0x0800de78
 8002588:	200000e4 	.word	0x200000e4
 800258c:	200000e0 	.word	0x200000e0
 8002590:	200000d8 	.word	0x200000d8
 8002594:	200000dc 	.word	0x200000dc
 8002598:	0800ded4 	.word	0x0800ded4
 800259c:	20000620 	.word	0x20000620
 80025a0:	200004f8 	.word	0x200004f8
 80025a4:	0800def8 	.word	0x0800def8
 80025a8:	20000660 	.word	0x20000660
 80025ac:	40533333 	.word	0x40533333
 80025b0:	45800000 	.word	0x45800000
 80025b4:	42040000 	.word	0x42040000
 80025b8:	0800df00 	.word	0x0800df00
 80025bc:	20000094 	.word	0x20000094
 80025c0:	20000008 	.word	0x20000008
 80025c4:	200006d4 	.word	0x200006d4

080025c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80025d0:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <HAL_UART_RxCpltCallback+0x20>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80025d6:	2201      	movs	r2, #1
 80025d8:	4904      	ldr	r1, [pc, #16]	@ (80025ec <HAL_UART_RxCpltCallback+0x24>)
 80025da:	4805      	ldr	r0, [pc, #20]	@ (80025f0 <HAL_UART_RxCpltCallback+0x28>)
 80025dc:	f005 f898 	bl	8007710 <HAL_UART_Receive_IT>
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000618 	.word	0x20000618
 80025ec:	2000061c 	.word	0x2000061c
 80025f0:	200004f8 	.word	0x200004f8

080025f4 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	adc_val = buffer;
 80025fc:	4b04      	ldr	r3, [pc, #16]	@ (8002610 <HAL_ADC_ConvCpltCallback+0x1c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a04      	ldr	r2, [pc, #16]	@ (8002614 <HAL_ADC_ConvCpltCallback+0x20>)
 8002602:	6013      	str	r3, [r2, #0]
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	20000000 	.word	0x20000000
 8002614:	20000660 	.word	0x20000660

08002618 <setPWM>:

void setPWM(int dutycycle){
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	int val_CCR = (TIM1->ARR*dutycycle)/100;
 8002620:	4b0c      	ldr	r3, [pc, #48]	@ (8002654 <setPWM+0x3c>)
 8002622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	4a0b      	ldr	r2, [pc, #44]	@ (8002658 <setPWM+0x40>)
 800262c:	fba2 2303 	umull	r2, r3, r2, r3
 8002630:	095b      	lsrs	r3, r3, #5
 8002632:	60fb      	str	r3, [r7, #12]
	TIM1->CCR1=val_CCR;
 8002634:	4a07      	ldr	r2, [pc, #28]	@ (8002654 <setPWM+0x3c>)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->CCR2=TIM1->ARR-val_CCR;
 800263a:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <setPWM+0x3c>)
 800263c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4904      	ldr	r1, [pc, #16]	@ (8002654 <setPWM+0x3c>)
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40012c00 	.word	0x40012c00
 8002658:	51eb851f 	.word	0x51eb851f

0800265c <Reset_Handler>:
 800265c:	480d      	ldr	r0, [pc, #52]	@ (8002694 <LoopForever+0x2>)
 800265e:	4685      	mov	sp, r0
 8002660:	480d      	ldr	r0, [pc, #52]	@ (8002698 <LoopForever+0x6>)
 8002662:	490e      	ldr	r1, [pc, #56]	@ (800269c <LoopForever+0xa>)
 8002664:	4a0e      	ldr	r2, [pc, #56]	@ (80026a0 <LoopForever+0xe>)
 8002666:	2300      	movs	r3, #0
 8002668:	e002      	b.n	8002670 <LoopCopyDataInit>

0800266a <CopyDataInit>:
 800266a:	58d4      	ldr	r4, [r2, r3]
 800266c:	50c4      	str	r4, [r0, r3]
 800266e:	3304      	adds	r3, #4

08002670 <LoopCopyDataInit>:
 8002670:	18c4      	adds	r4, r0, r3
 8002672:	428c      	cmp	r4, r1
 8002674:	d3f9      	bcc.n	800266a <CopyDataInit>
 8002676:	4a0b      	ldr	r2, [pc, #44]	@ (80026a4 <LoopForever+0x12>)
 8002678:	4c0b      	ldr	r4, [pc, #44]	@ (80026a8 <LoopForever+0x16>)
 800267a:	2300      	movs	r3, #0
 800267c:	e001      	b.n	8002682 <LoopFillZerobss>

0800267e <FillZerobss>:
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	3204      	adds	r2, #4

08002682 <LoopFillZerobss>:
 8002682:	42a2      	cmp	r2, r4
 8002684:	d3fb      	bcc.n	800267e <FillZerobss>
 8002686:	f7ff f9f7 	bl	8001a78 <SystemInit>
 800268a:	f008 f8d5 	bl	800a838 <__libc_init_array>
 800268e:	f7fe ffb7 	bl	8001600 <main>

08002692 <LoopForever>:
 8002692:	e7fe      	b.n	8002692 <LoopForever>
 8002694:	20020000 	.word	0x20020000
 8002698:	20000000 	.word	0x20000000
 800269c:	200002b8 	.word	0x200002b8
 80026a0:	0800e3ec 	.word	0x0800e3ec
 80026a4:	200002b8 	.word	0x200002b8
 80026a8:	20000828 	.word	0x20000828

080026ac <ADC1_2_IRQHandler>:
 80026ac:	e7fe      	b.n	80026ac <ADC1_2_IRQHandler>

080026ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b8:	2003      	movs	r0, #3
 80026ba:	f001 fc2e 	bl	8003f1a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026be:	200f      	movs	r0, #15
 80026c0:	f7ff f848 	bl	8001754 <HAL_InitTick>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	71fb      	strb	r3, [r7, #7]
 80026ce:	e001      	b.n	80026d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026d0:	f7ff f81c 	bl	800170c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026d4:	79fb      	ldrb	r3, [r7, #7]

}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e4:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <HAL_IncTick+0x1c>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b05      	ldr	r3, [pc, #20]	@ (8002700 <HAL_IncTick+0x20>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a03      	ldr	r2, [pc, #12]	@ (80026fc <HAL_IncTick+0x1c>)
 80026f0:	6013      	str	r3, [r2, #0]
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	200006d8 	.word	0x200006d8
 8002700:	200000ec 	.word	0x200000ec

08002704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return uwTick;
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <HAL_GetTick+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	200006d8 	.word	0x200006d8

0800271c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002724:	f7ff ffee 	bl	8002704 <HAL_GetTick>
 8002728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d004      	beq.n	8002740 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002736:	4b09      	ldr	r3, [pc, #36]	@ (800275c <HAL_Delay+0x40>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4413      	add	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002740:	bf00      	nop
 8002742:	f7ff ffdf 	bl	8002704 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	429a      	cmp	r2, r3
 8002750:	d8f7      	bhi.n	8002742 <HAL_Delay+0x26>
  {
  }
}
 8002752:	bf00      	nop
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	200000ec 	.word	0x200000ec

08002760 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	609a      	str	r2, [r3, #8]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	609a      	str	r2, [r3, #8]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3360      	adds	r3, #96	@ 0x60
 80027da:	461a      	mov	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b08      	ldr	r3, [pc, #32]	@ (800280c <LL_ADC_SetOffset+0x44>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002800:	bf00      	nop
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	03fff000 	.word	0x03fff000

08002810 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3360      	adds	r3, #96	@ 0x60
 800281e:	461a      	mov	r2, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3360      	adds	r3, #96	@ 0x60
 800284c:	461a      	mov	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	431a      	orrs	r2, r3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002872:	b480      	push	{r7}
 8002874:	b087      	sub	sp, #28
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3360      	adds	r3, #96	@ 0x60
 8002882:	461a      	mov	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	431a      	orrs	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800289c:	bf00      	nop
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3360      	adds	r3, #96	@ 0x60
 80028b8:	461a      	mov	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80028d2:	bf00      	nop
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	615a      	str	r2, [r3, #20]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800292a:	b480      	push	{r7}
 800292c:	b087      	sub	sp, #28
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3330      	adds	r3, #48	@ 0x30
 800293a:	461a      	mov	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	0a1b      	lsrs	r3, r3, #8
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	4413      	add	r3, r2
 8002948:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	211f      	movs	r1, #31
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	401a      	ands	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	0e9b      	lsrs	r3, r3, #26
 8002962:	f003 011f 	and.w	r1, r3, #31
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	431a      	orrs	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002976:	bf00      	nop
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002982:	b480      	push	{r7}
 8002984:	b087      	sub	sp, #28
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	3314      	adds	r3, #20
 8002992:	461a      	mov	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	0e5b      	lsrs	r3, r3, #25
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	4413      	add	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	0d1b      	lsrs	r3, r3, #20
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	2107      	movs	r1, #7
 80029b0:	fa01 f303 	lsl.w	r3, r1, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	401a      	ands	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	0d1b      	lsrs	r3, r3, #20
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	431a      	orrs	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002a24 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d10a      	bne.n	8002a02 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f8:	431a      	orrs	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002a00:	e00a      	b.n	8002a18 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	401a      	ands	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	407f0000 	.word	0x407f0000

08002a28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 031f 	and.w	r3, r3, #31
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002a54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6093      	str	r3, [r2, #8]
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a7c:	d101      	bne.n	8002a82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002aa0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002aa4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002acc:	d101      	bne.n	8002ad2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002af0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002af4:	f043 0201 	orr.w	r2, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <LL_ADC_IsEnabled+0x18>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <LL_ADC_IsEnabled+0x1a>
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b3e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b42:	f043 0204 	orr.w	r2, r3, #4
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d101      	bne.n	8002b6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d101      	bne.n	8002b94 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ba4:	b590      	push	{r4, r7, lr}
 8002ba6:	b089      	sub	sp, #36	@ 0x24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e1af      	b.n	8002f1e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d109      	bne.n	8002be0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7fe fb21 	bl	8001214 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff3f 	bl	8002a68 <LL_ADC_IsDeepPowerDownEnabled>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d004      	beq.n	8002bfa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff25 	bl	8002a44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ff5a 	bl	8002ab8 <LL_ADC_IsInternalRegulatorEnabled>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d115      	bne.n	8002c36 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff ff3e 	bl	8002a90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c14:	4b9f      	ldr	r3, [pc, #636]	@ (8002e94 <HAL_ADC_Init+0x2f0>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	099b      	lsrs	r3, r3, #6
 8002c1a:	4a9f      	ldr	r2, [pc, #636]	@ (8002e98 <HAL_ADC_Init+0x2f4>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	099b      	lsrs	r3, r3, #6
 8002c22:	3301      	adds	r3, #1
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c28:	e002      	b.n	8002c30 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f9      	bne.n	8002c2a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff ff3c 	bl	8002ab8 <LL_ADC_IsInternalRegulatorEnabled>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10d      	bne.n	8002c62 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4a:	f043 0210 	orr.w	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c56:	f043 0201 	orr.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff ff75 	bl	8002b56 <LL_ADC_REG_IsConversionOngoing>
 8002c6c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 8148 	bne.w	8002f0c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 8144 	bne.w	8002f0c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c88:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c8c:	f043 0202 	orr.w	r2, r3, #2
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff35 	bl	8002b08 <LL_ADC_IsEnabled>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d141      	bne.n	8002d28 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cac:	d004      	beq.n	8002cb8 <HAL_ADC_Init+0x114>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a7a      	ldr	r2, [pc, #488]	@ (8002e9c <HAL_ADC_Init+0x2f8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d10f      	bne.n	8002cd8 <HAL_ADC_Init+0x134>
 8002cb8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002cbc:	f7ff ff24 	bl	8002b08 <LL_ADC_IsEnabled>
 8002cc0:	4604      	mov	r4, r0
 8002cc2:	4876      	ldr	r0, [pc, #472]	@ (8002e9c <HAL_ADC_Init+0x2f8>)
 8002cc4:	f7ff ff20 	bl	8002b08 <LL_ADC_IsEnabled>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4323      	orrs	r3, r4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf0c      	ite	eq
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	e012      	b.n	8002cfe <HAL_ADC_Init+0x15a>
 8002cd8:	4871      	ldr	r0, [pc, #452]	@ (8002ea0 <HAL_ADC_Init+0x2fc>)
 8002cda:	f7ff ff15 	bl	8002b08 <LL_ADC_IsEnabled>
 8002cde:	4604      	mov	r4, r0
 8002ce0:	4870      	ldr	r0, [pc, #448]	@ (8002ea4 <HAL_ADC_Init+0x300>)
 8002ce2:	f7ff ff11 	bl	8002b08 <LL_ADC_IsEnabled>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	431c      	orrs	r4, r3
 8002cea:	486f      	ldr	r0, [pc, #444]	@ (8002ea8 <HAL_ADC_Init+0x304>)
 8002cec:	f7ff ff0c 	bl	8002b08 <LL_ADC_IsEnabled>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4323      	orrs	r3, r4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d012      	beq.n	8002d28 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d0a:	d004      	beq.n	8002d16 <HAL_ADC_Init+0x172>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a62      	ldr	r2, [pc, #392]	@ (8002e9c <HAL_ADC_Init+0x2f8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d101      	bne.n	8002d1a <HAL_ADC_Init+0x176>
 8002d16:	4a65      	ldr	r2, [pc, #404]	@ (8002eac <HAL_ADC_Init+0x308>)
 8002d18:	e000      	b.n	8002d1c <HAL_ADC_Init+0x178>
 8002d1a:	4a65      	ldr	r2, [pc, #404]	@ (8002eb0 <HAL_ADC_Init+0x30c>)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f7ff fd1c 	bl	8002760 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	7f5b      	ldrb	r3, [r3, #29]
 8002d2c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d32:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d38:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d3e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d46:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d106      	bne.n	8002d64 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	045b      	lsls	r3, r3, #17
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d009      	beq.n	8002d80 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d78:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	4b4b      	ldr	r3, [pc, #300]	@ (8002eb4 <HAL_ADC_Init+0x310>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	69b9      	ldr	r1, [r7, #24]
 8002d90:	430b      	orrs	r3, r1
 8002d92:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fed1 	bl	8002b56 <LL_ADC_REG_IsConversionOngoing>
 8002db4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fede 	bl	8002b7c <LL_ADC_INJ_IsConversionOngoing>
 8002dc0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d17f      	bne.n	8002ec8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d17c      	bne.n	8002ec8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dd2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002dda:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dea:	f023 0302 	bic.w	r3, r3, #2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	69b9      	ldr	r1, [r7, #24]
 8002df4:	430b      	orrs	r3, r1
 8002df6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d017      	beq.n	8002e30 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002e0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e18:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6911      	ldr	r1, [r2, #16]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002e2e:	e013      	b.n	8002e58 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691a      	ldr	r2, [r3, #16]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002e3e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e54:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d12a      	bne.n	8002eb8 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002e6c:	f023 0304 	bic.w	r3, r3, #4
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e78:	4311      	orrs	r1, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002e7e:	4311      	orrs	r1, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e84:	430a      	orrs	r2, r1
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0201 	orr.w	r2, r2, #1
 8002e90:	611a      	str	r2, [r3, #16]
 8002e92:	e019      	b.n	8002ec8 <HAL_ADC_Init+0x324>
 8002e94:	20000004 	.word	0x20000004
 8002e98:	053e2d63 	.word	0x053e2d63
 8002e9c:	50000100 	.word	0x50000100
 8002ea0:	50000400 	.word	0x50000400
 8002ea4:	50000500 	.word	0x50000500
 8002ea8:	50000600 	.word	0x50000600
 8002eac:	50000300 	.word	0x50000300
 8002eb0:	50000700 	.word	0x50000700
 8002eb4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d10c      	bne.n	8002eea <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	f023 010f 	bic.w	r1, r3, #15
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	1e5a      	subs	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ee8:	e007      	b.n	8002efa <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 020f 	bic.w	r2, r2, #15
 8002ef8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efe:	f023 0303 	bic.w	r3, r3, #3
 8002f02:	f043 0201 	orr.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f0a:	e007      	b.n	8002f1c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f10:	f043 0210 	orr.w	r2, r3, #16
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3724      	adds	r7, #36	@ 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd90      	pop	{r4, r7, pc}
 8002f26:	bf00      	nop

08002f28 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f3c:	d004      	beq.n	8002f48 <HAL_ADC_Start_DMA+0x20>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a5a      	ldr	r2, [pc, #360]	@ (80030ac <HAL_ADC_Start_DMA+0x184>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d101      	bne.n	8002f4c <HAL_ADC_Start_DMA+0x24>
 8002f48:	4b59      	ldr	r3, [pc, #356]	@ (80030b0 <HAL_ADC_Start_DMA+0x188>)
 8002f4a:	e000      	b.n	8002f4e <HAL_ADC_Start_DMA+0x26>
 8002f4c:	4b59      	ldr	r3, [pc, #356]	@ (80030b4 <HAL_ADC_Start_DMA+0x18c>)
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fd6a 	bl	8002a28 <LL_ADC_GetMultimode>
 8002f54:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fdfb 	bl	8002b56 <LL_ADC_REG_IsConversionOngoing>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f040 809b 	bne.w	800309e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_ADC_Start_DMA+0x4e>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e096      	b.n	80030a4 <HAL_ADC_Start_DMA+0x17c>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a4d      	ldr	r2, [pc, #308]	@ (80030b8 <HAL_ADC_Start_DMA+0x190>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d008      	beq.n	8002f9a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b05      	cmp	r3, #5
 8002f92:	d002      	beq.n	8002f9a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b09      	cmp	r3, #9
 8002f98:	d17a      	bne.n	8003090 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fcec 	bl	8003978 <ADC_Enable>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d16d      	bne.n	8003086 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a3a      	ldr	r2, [pc, #232]	@ (80030ac <HAL_ADC_Start_DMA+0x184>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d009      	beq.n	8002fdc <HAL_ADC_Start_DMA+0xb4>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a3b      	ldr	r2, [pc, #236]	@ (80030bc <HAL_ADC_Start_DMA+0x194>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d002      	beq.n	8002fd8 <HAL_ADC_Start_DMA+0xb0>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	e003      	b.n	8002fe0 <HAL_ADC_Start_DMA+0xb8>
 8002fd8:	4b39      	ldr	r3, [pc, #228]	@ (80030c0 <HAL_ADC_Start_DMA+0x198>)
 8002fda:	e001      	b.n	8002fe0 <HAL_ADC_Start_DMA+0xb8>
 8002fdc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d002      	beq.n	8002fee <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d006      	beq.n	8003014 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300a:	f023 0206 	bic.w	r2, r3, #6
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	661a      	str	r2, [r3, #96]	@ 0x60
 8003012:	e002      	b.n	800301a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301e:	4a29      	ldr	r2, [pc, #164]	@ (80030c4 <HAL_ADC_Start_DMA+0x19c>)
 8003020:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003026:	4a28      	ldr	r2, [pc, #160]	@ (80030c8 <HAL_ADC_Start_DMA+0x1a0>)
 8003028:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302e:	4a27      	ldr	r2, [pc, #156]	@ (80030cc <HAL_ADC_Start_DMA+0x1a4>)
 8003030:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	221c      	movs	r2, #28
 8003038:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0210 	orr.w	r2, r2, #16
 8003050:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0201 	orr.w	r2, r2, #1
 8003060:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3340      	adds	r3, #64	@ 0x40
 800306c:	4619      	mov	r1, r3
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f001 f82d 	bl	80040d0 <HAL_DMA_Start_IT>
 8003076:	4603      	mov	r3, r0
 8003078:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fd55 	bl	8002b2e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003084:	e00d      	b.n	80030a2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800308e:	e008      	b.n	80030a2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800309c:	e001      	b.n	80030a2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800309e:	2302      	movs	r3, #2
 80030a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80030a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	50000100 	.word	0x50000100
 80030b0:	50000300 	.word	0x50000300
 80030b4:	50000700 	.word	0x50000700
 80030b8:	50000600 	.word	0x50000600
 80030bc:	50000500 	.word	0x50000500
 80030c0:	50000400 	.word	0x50000400
 80030c4:	08003a3d 	.word	0x08003a3d
 80030c8:	08003b15 	.word	0x08003b15
 80030cc:	08003b31 	.word	0x08003b31

080030d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b0b6      	sub	sp, #216	@ 0xd8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003112:	2b01      	cmp	r3, #1
 8003114:	d102      	bne.n	800311c <HAL_ADC_ConfigChannel+0x24>
 8003116:	2302      	movs	r3, #2
 8003118:	f000 bc13 	b.w	8003942 <HAL_ADC_ConfigChannel+0x84a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fd14 	bl	8002b56 <LL_ADC_REG_IsConversionOngoing>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 83f3 	bne.w	800391c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	f7ff fbf1 	bl	800292a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fd02 	bl	8002b56 <LL_ADC_REG_IsConversionOngoing>
 8003152:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fd0e 	bl	8002b7c <LL_ADC_INJ_IsConversionOngoing>
 8003160:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003164:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003168:	2b00      	cmp	r3, #0
 800316a:	f040 81d9 	bne.w	8003520 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800316e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003172:	2b00      	cmp	r3, #0
 8003174:	f040 81d4 	bne.w	8003520 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003180:	d10f      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2200      	movs	r2, #0
 800318c:	4619      	mov	r1, r3
 800318e:	f7ff fbf8 	bl	8002982 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fb9f 	bl	80028de <LL_ADC_SetSamplingTimeCommonConfig>
 80031a0:	e00e      	b.n	80031c0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6819      	ldr	r1, [r3, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	461a      	mov	r2, r3
 80031b0:	f7ff fbe7 	bl	8002982 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fb8f 	bl	80028de <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	08db      	lsrs	r3, r3, #3
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d022      	beq.n	8003228 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6919      	ldr	r1, [r3, #16]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031f2:	f7ff fae9 	bl	80027c8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6919      	ldr	r1, [r3, #16]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	461a      	mov	r2, r3
 8003204:	f7ff fb35 	bl	8002872 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	6919      	ldr	r1, [r3, #16]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	7f1b      	ldrb	r3, [r3, #28]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d102      	bne.n	800321e <HAL_ADC_ConfigChannel+0x126>
 8003218:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800321c:	e000      	b.n	8003220 <HAL_ADC_ConfigChannel+0x128>
 800321e:	2300      	movs	r3, #0
 8003220:	461a      	mov	r2, r3
 8003222:	f7ff fb41 	bl	80028a8 <LL_ADC_SetOffsetSaturation>
 8003226:	e17b      	b.n	8003520 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2100      	movs	r1, #0
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff faee 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003234:	4603      	mov	r3, r0
 8003236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x15c>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fae3 	bl	8002810 <LL_ADC_GetOffsetChannel>
 800324a:	4603      	mov	r3, r0
 800324c:	0e9b      	lsrs	r3, r3, #26
 800324e:	f003 021f 	and.w	r2, r3, #31
 8003252:	e01e      	b.n	8003292 <HAL_ADC_ConfigChannel+0x19a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2100      	movs	r1, #0
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fad8 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003260:	4603      	mov	r3, r0
 8003262:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800326a:	fa93 f3a3 	rbit	r3, r3
 800326e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003272:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003276:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800327a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003282:	2320      	movs	r3, #32
 8003284:	e004      	b.n	8003290 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003286:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800328a:	fab3 f383 	clz	r3, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x1b2>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	0e9b      	lsrs	r3, r3, #26
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	e018      	b.n	80032dc <HAL_ADC_ConfigChannel+0x1e4>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80032be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80032c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80032ce:	2320      	movs	r3, #32
 80032d0:	e004      	b.n	80032dc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80032d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032dc:	429a      	cmp	r2, r3
 80032de:	d106      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2200      	movs	r2, #0
 80032e6:	2100      	movs	r1, #0
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff faa7 	bl	800283c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2101      	movs	r1, #1
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fa8b 	bl	8002810 <LL_ADC_GetOffsetChannel>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10a      	bne.n	800331a <HAL_ADC_ConfigChannel+0x222>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2101      	movs	r1, #1
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fa80 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003310:	4603      	mov	r3, r0
 8003312:	0e9b      	lsrs	r3, r3, #26
 8003314:	f003 021f 	and.w	r2, r3, #31
 8003318:	e01e      	b.n	8003358 <HAL_ADC_ConfigChannel+0x260>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2101      	movs	r1, #1
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fa75 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003326:	4603      	mov	r3, r0
 8003328:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003338:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800333c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003340:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003348:	2320      	movs	r3, #32
 800334a:	e004      	b.n	8003356 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800334c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003350:	fab3 f383 	clz	r3, r3
 8003354:	b2db      	uxtb	r3, r3
 8003356:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003360:	2b00      	cmp	r3, #0
 8003362:	d105      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x278>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	0e9b      	lsrs	r3, r3, #26
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	e018      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x2aa>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003378:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003384:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003388:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800338c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003394:	2320      	movs	r3, #32
 8003396:	e004      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003398:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d106      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2200      	movs	r2, #0
 80033ac:	2101      	movs	r1, #1
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fa44 	bl	800283c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2102      	movs	r1, #2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fa28 	bl	8002810 <LL_ADC_GetOffsetChannel>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10a      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x2e8>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2102      	movs	r1, #2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff fa1d 	bl	8002810 <LL_ADC_GetOffsetChannel>
 80033d6:	4603      	mov	r3, r0
 80033d8:	0e9b      	lsrs	r3, r3, #26
 80033da:	f003 021f 	and.w	r2, r3, #31
 80033de:	e01e      	b.n	800341e <HAL_ADC_ConfigChannel+0x326>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2102      	movs	r1, #2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fa12 	bl	8002810 <LL_ADC_GetOffsetChannel>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033f6:	fa93 f3a3 	rbit	r3, r3
 80033fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80033fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003402:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003406:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800340e:	2320      	movs	r3, #32
 8003410:	e004      	b.n	800341c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003412:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003416:	fab3 f383 	clz	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003426:	2b00      	cmp	r3, #0
 8003428:	d105      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x33e>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	0e9b      	lsrs	r3, r3, #26
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	e016      	b.n	8003464 <HAL_ADC_ConfigChannel+0x36c>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003448:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800344a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800344e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003456:	2320      	movs	r3, #32
 8003458:	e004      	b.n	8003464 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800345a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003464:	429a      	cmp	r2, r3
 8003466:	d106      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2200      	movs	r2, #0
 800346e:	2102      	movs	r1, #2
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff f9e3 	bl	800283c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2103      	movs	r1, #3
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff f9c7 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003482:	4603      	mov	r3, r0
 8003484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10a      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x3aa>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2103      	movs	r1, #3
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff f9bc 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003498:	4603      	mov	r3, r0
 800349a:	0e9b      	lsrs	r3, r3, #26
 800349c:	f003 021f 	and.w	r2, r3, #31
 80034a0:	e017      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x3da>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2103      	movs	r1, #3
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff f9b1 	bl	8002810 <LL_ADC_GetOffsetChannel>
 80034ae:	4603      	mov	r3, r0
 80034b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034b4:	fa93 f3a3 	rbit	r3, r3
 80034b8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80034ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034bc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80034be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80034c4:	2320      	movs	r3, #32
 80034c6:	e003      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80034c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d105      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x3f2>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	0e9b      	lsrs	r3, r3, #26
 80034e4:	f003 031f 	and.w	r3, r3, #31
 80034e8:	e011      	b.n	800350e <HAL_ADC_ConfigChannel+0x416>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80034f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80034fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003502:	2320      	movs	r3, #32
 8003504:	e003      	b.n	800350e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003506:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003508:	fab3 f383 	clz	r3, r3
 800350c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800350e:	429a      	cmp	r2, r3
 8003510:	d106      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2200      	movs	r2, #0
 8003518:	2103      	movs	r1, #3
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff f98e 	bl	800283c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff faef 	bl	8002b08 <LL_ADC_IsEnabled>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	f040 813d 	bne.w	80037ac <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6819      	ldr	r1, [r3, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	461a      	mov	r2, r3
 8003540:	f7ff fa4a 	bl	80029d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4aa2      	ldr	r2, [pc, #648]	@ (80037d4 <HAL_ADC_ConfigChannel+0x6dc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	f040 812e 	bne.w	80037ac <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x480>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	0e9b      	lsrs	r3, r3, #26
 8003566:	3301      	adds	r3, #1
 8003568:	f003 031f 	and.w	r3, r3, #31
 800356c:	2b09      	cmp	r3, #9
 800356e:	bf94      	ite	ls
 8003570:	2301      	movls	r3, #1
 8003572:	2300      	movhi	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	e019      	b.n	80035ac <HAL_ADC_ConfigChannel+0x4b4>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003580:	fa93 f3a3 	rbit	r3, r3
 8003584:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003586:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003588:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800358a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003590:	2320      	movs	r3, #32
 8003592:	e003      	b.n	800359c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	3301      	adds	r3, #1
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	2b09      	cmp	r3, #9
 80035a4:	bf94      	ite	ls
 80035a6:	2301      	movls	r3, #1
 80035a8:	2300      	movhi	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d079      	beq.n	80036a4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d107      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x4d4>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	0e9b      	lsrs	r3, r3, #26
 80035c2:	3301      	adds	r3, #1
 80035c4:	069b      	lsls	r3, r3, #26
 80035c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035ca:	e015      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x500>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035d4:	fa93 f3a3 	rbit	r3, r3
 80035d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80035da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035dc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80035de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80035e4:	2320      	movs	r3, #32
 80035e6:	e003      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80035e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	3301      	adds	r3, #1
 80035f2:	069b      	lsls	r3, r3, #26
 80035f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x520>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	0e9b      	lsrs	r3, r3, #26
 800360a:	3301      	adds	r3, #1
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	2101      	movs	r1, #1
 8003612:	fa01 f303 	lsl.w	r3, r1, r3
 8003616:	e017      	b.n	8003648 <HAL_ADC_ConfigChannel+0x550>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003628:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800362a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003630:	2320      	movs	r3, #32
 8003632:	e003      	b.n	800363c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003634:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	3301      	adds	r3, #1
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	2101      	movs	r1, #1
 8003644:	fa01 f303 	lsl.w	r3, r1, r3
 8003648:	ea42 0103 	orr.w	r1, r2, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <HAL_ADC_ConfigChannel+0x576>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	0e9b      	lsrs	r3, r3, #26
 800365e:	3301      	adds	r3, #1
 8003660:	f003 021f 	and.w	r2, r3, #31
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	051b      	lsls	r3, r3, #20
 800366c:	e018      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x5a8>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800367c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800367e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003686:	2320      	movs	r3, #32
 8003688:	e003      	b.n	8003692 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800368a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800368c:	fab3 f383 	clz	r3, r3
 8003690:	b2db      	uxtb	r3, r3
 8003692:	3301      	adds	r3, #1
 8003694:	f003 021f 	and.w	r2, r3, #31
 8003698:	4613      	mov	r3, r2
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	4413      	add	r3, r2
 800369e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036a0:	430b      	orrs	r3, r1
 80036a2:	e07e      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d107      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x5c8>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	3301      	adds	r3, #1
 80036b8:	069b      	lsls	r3, r3, #26
 80036ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036be:	e015      	b.n	80036ec <HAL_ADC_ConfigChannel+0x5f4>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80036ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80036d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80036d8:	2320      	movs	r3, #32
 80036da:	e003      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80036dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	3301      	adds	r3, #1
 80036e6:	069b      	lsls	r3, r3, #26
 80036e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d109      	bne.n	800370c <HAL_ADC_ConfigChannel+0x614>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	0e9b      	lsrs	r3, r3, #26
 80036fe:	3301      	adds	r3, #1
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	2101      	movs	r1, #1
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	e017      	b.n	800373c <HAL_ADC_ConfigChannel+0x644>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	61fb      	str	r3, [r7, #28]
  return result;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003724:	2320      	movs	r3, #32
 8003726:	e003      	b.n	8003730 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372a:	fab3 f383 	clz	r3, r3
 800372e:	b2db      	uxtb	r3, r3
 8003730:	3301      	adds	r3, #1
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	2101      	movs	r1, #1
 8003738:	fa01 f303 	lsl.w	r3, r1, r3
 800373c:	ea42 0103 	orr.w	r1, r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10d      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x670>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	0e9b      	lsrs	r3, r3, #26
 8003752:	3301      	adds	r3, #1
 8003754:	f003 021f 	and.w	r2, r3, #31
 8003758:	4613      	mov	r3, r2
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	4413      	add	r3, r2
 800375e:	3b1e      	subs	r3, #30
 8003760:	051b      	lsls	r3, r3, #20
 8003762:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003766:	e01b      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x6a8>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	613b      	str	r3, [r7, #16]
  return result;
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003780:	2320      	movs	r3, #32
 8003782:	e003      	b.n	800378c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	3301      	adds	r3, #1
 800378e:	f003 021f 	and.w	r2, r3, #31
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	3b1e      	subs	r3, #30
 800379a:	051b      	lsls	r3, r3, #20
 800379c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037a0:	430b      	orrs	r3, r1
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	6892      	ldr	r2, [r2, #8]
 80037a6:	4619      	mov	r1, r3
 80037a8:	f7ff f8eb 	bl	8002982 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4b09      	ldr	r3, [pc, #36]	@ (80037d8 <HAL_ADC_ConfigChannel+0x6e0>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80be 	beq.w	8003936 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037c2:	d004      	beq.n	80037ce <HAL_ADC_ConfigChannel+0x6d6>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a04      	ldr	r2, [pc, #16]	@ (80037dc <HAL_ADC_ConfigChannel+0x6e4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d10a      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x6ec>
 80037ce:	4b04      	ldr	r3, [pc, #16]	@ (80037e0 <HAL_ADC_ConfigChannel+0x6e8>)
 80037d0:	e009      	b.n	80037e6 <HAL_ADC_ConfigChannel+0x6ee>
 80037d2:	bf00      	nop
 80037d4:	407f0000 	.word	0x407f0000
 80037d8:	80080000 	.word	0x80080000
 80037dc:	50000100 	.word	0x50000100
 80037e0:	50000300 	.word	0x50000300
 80037e4:	4b59      	ldr	r3, [pc, #356]	@ (800394c <HAL_ADC_ConfigChannel+0x854>)
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe ffe0 	bl	80027ac <LL_ADC_GetCommonPathInternalCh>
 80037ec:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a56      	ldr	r2, [pc, #344]	@ (8003950 <HAL_ADC_ConfigChannel+0x858>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d004      	beq.n	8003804 <HAL_ADC_ConfigChannel+0x70c>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a55      	ldr	r2, [pc, #340]	@ (8003954 <HAL_ADC_ConfigChannel+0x85c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d13a      	bne.n	800387a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003804:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003808:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d134      	bne.n	800387a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003818:	d005      	beq.n	8003826 <HAL_ADC_ConfigChannel+0x72e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a4e      	ldr	r2, [pc, #312]	@ (8003958 <HAL_ADC_ConfigChannel+0x860>)
 8003820:	4293      	cmp	r3, r2
 8003822:	f040 8085 	bne.w	8003930 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800382e:	d004      	beq.n	800383a <HAL_ADC_ConfigChannel+0x742>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a49      	ldr	r2, [pc, #292]	@ (800395c <HAL_ADC_ConfigChannel+0x864>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d101      	bne.n	800383e <HAL_ADC_ConfigChannel+0x746>
 800383a:	4a49      	ldr	r2, [pc, #292]	@ (8003960 <HAL_ADC_ConfigChannel+0x868>)
 800383c:	e000      	b.n	8003840 <HAL_ADC_ConfigChannel+0x748>
 800383e:	4a43      	ldr	r2, [pc, #268]	@ (800394c <HAL_ADC_ConfigChannel+0x854>)
 8003840:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003844:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003848:	4619      	mov	r1, r3
 800384a:	4610      	mov	r0, r2
 800384c:	f7fe ff9b 	bl	8002786 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003850:	4b44      	ldr	r3, [pc, #272]	@ (8003964 <HAL_ADC_ConfigChannel+0x86c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	099b      	lsrs	r3, r3, #6
 8003856:	4a44      	ldr	r2, [pc, #272]	@ (8003968 <HAL_ADC_ConfigChannel+0x870>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	099b      	lsrs	r3, r3, #6
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	4613      	mov	r3, r2
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800386a:	e002      	b.n	8003872 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3b01      	subs	r3, #1
 8003870:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f9      	bne.n	800386c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003878:	e05a      	b.n	8003930 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a3b      	ldr	r2, [pc, #236]	@ (800396c <HAL_ADC_ConfigChannel+0x874>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d125      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x7d8>
 8003884:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003888:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d11f      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a31      	ldr	r2, [pc, #196]	@ (800395c <HAL_ADC_ConfigChannel+0x864>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d104      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x7ac>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a34      	ldr	r2, [pc, #208]	@ (8003970 <HAL_ADC_ConfigChannel+0x878>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d047      	beq.n	8003934 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ac:	d004      	beq.n	80038b8 <HAL_ADC_ConfigChannel+0x7c0>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2a      	ldr	r2, [pc, #168]	@ (800395c <HAL_ADC_ConfigChannel+0x864>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d101      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x7c4>
 80038b8:	4a29      	ldr	r2, [pc, #164]	@ (8003960 <HAL_ADC_ConfigChannel+0x868>)
 80038ba:	e000      	b.n	80038be <HAL_ADC_ConfigChannel+0x7c6>
 80038bc:	4a23      	ldr	r2, [pc, #140]	@ (800394c <HAL_ADC_ConfigChannel+0x854>)
 80038be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038c6:	4619      	mov	r1, r3
 80038c8:	4610      	mov	r0, r2
 80038ca:	f7fe ff5c 	bl	8002786 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038ce:	e031      	b.n	8003934 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a27      	ldr	r2, [pc, #156]	@ (8003974 <HAL_ADC_ConfigChannel+0x87c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d12d      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d127      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1c      	ldr	r2, [pc, #112]	@ (800395c <HAL_ADC_ConfigChannel+0x864>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d022      	beq.n	8003936 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f8:	d004      	beq.n	8003904 <HAL_ADC_ConfigChannel+0x80c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a17      	ldr	r2, [pc, #92]	@ (800395c <HAL_ADC_ConfigChannel+0x864>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d101      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x810>
 8003904:	4a16      	ldr	r2, [pc, #88]	@ (8003960 <HAL_ADC_ConfigChannel+0x868>)
 8003906:	e000      	b.n	800390a <HAL_ADC_ConfigChannel+0x812>
 8003908:	4a10      	ldr	r2, [pc, #64]	@ (800394c <HAL_ADC_ConfigChannel+0x854>)
 800390a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800390e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003912:	4619      	mov	r1, r3
 8003914:	4610      	mov	r0, r2
 8003916:	f7fe ff36 	bl	8002786 <LL_ADC_SetCommonPathInternalCh>
 800391a:	e00c      	b.n	8003936 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003920:	f043 0220 	orr.w	r2, r3, #32
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800392e:	e002      	b.n	8003936 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003930:	bf00      	nop
 8003932:	e000      	b.n	8003936 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003934:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800393e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003942:	4618      	mov	r0, r3
 8003944:	37d8      	adds	r7, #216	@ 0xd8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	50000700 	.word	0x50000700
 8003950:	c3210000 	.word	0xc3210000
 8003954:	90c00010 	.word	0x90c00010
 8003958:	50000600 	.word	0x50000600
 800395c:	50000100 	.word	0x50000100
 8003960:	50000300 	.word	0x50000300
 8003964:	20000004 	.word	0x20000004
 8003968:	053e2d63 	.word	0x053e2d63
 800396c:	c7520000 	.word	0xc7520000
 8003970:	50000500 	.word	0x50000500
 8003974:	cb840000 	.word	0xcb840000

08003978 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff f8bf 	bl	8002b08 <LL_ADC_IsEnabled>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d14d      	bne.n	8003a2c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	4b28      	ldr	r3, [pc, #160]	@ (8003a38 <ADC_Enable+0xc0>)
 8003998:	4013      	ands	r3, r2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00d      	beq.n	80039ba <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a2:	f043 0210 	orr.w	r2, r3, #16
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ae:	f043 0201 	orr.w	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e039      	b.n	8003a2e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff f88e 	bl	8002ae0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039c4:	f7fe fe9e 	bl	8002704 <HAL_GetTick>
 80039c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039ca:	e028      	b.n	8003a1e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff f899 	bl	8002b08 <LL_ADC_IsEnabled>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d104      	bne.n	80039e6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff f87d 	bl	8002ae0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039e6:	f7fe fe8d 	bl	8002704 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d914      	bls.n	8003a1e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d00d      	beq.n	8003a1e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a06:	f043 0210 	orr.w	r2, r3, #16
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a12:	f043 0201 	orr.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e007      	b.n	8003a2e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d1cf      	bne.n	80039cc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	8000003f 	.word	0x8000003f

08003a3c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d14b      	bne.n	8003aee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d021      	beq.n	8003ab4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe ff45 	bl	8002904 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d032      	beq.n	8003ae6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d12b      	bne.n	8003ae6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d11f      	bne.n	8003ae6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aaa:	f043 0201 	orr.w	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ab2:	e018      	b.n	8003ae6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d111      	bne.n	8003ae6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d105      	bne.n	8003ae6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ade:	f043 0201 	orr.w	r2, r3, #1
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f7fe fd84 	bl	80025f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003aec:	e00e      	b.n	8003b0c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f7ff faf2 	bl	80030e4 <HAL_ADC_ErrorCallback>
}
 8003b00:	e004      	b.n	8003b0c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f7ff fad4 	bl	80030d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b4e:	f043 0204 	orr.w	r2, r3, #4
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f7ff fac4 	bl	80030e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <LL_ADC_IsEnabled>:
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <LL_ADC_IsEnabled+0x18>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <LL_ADC_IsEnabled+0x1a>
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <LL_ADC_REG_IsConversionOngoing>:
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d101      	bne.n	8003ba2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003bb0:	b590      	push	{r4, r7, lr}
 8003bb2:	b0a1      	sub	sp, #132	@ 0x84
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e0e7      	b.n	8003d9e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003be6:	d102      	bne.n	8003bee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003be8:	4b6f      	ldr	r3, [pc, #444]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bea:	60bb      	str	r3, [r7, #8]
 8003bec:	e009      	b.n	8003c02 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a6e      	ldr	r2, [pc, #440]	@ (8003dac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d102      	bne.n	8003bfe <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003bf8:	4b6d      	ldr	r3, [pc, #436]	@ (8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	e001      	b.n	8003c02 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10b      	bne.n	8003c20 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0c:	f043 0220 	orr.w	r2, r3, #32
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e0be      	b.n	8003d9e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff ffb1 	bl	8003b8a <LL_ADC_REG_IsConversionOngoing>
 8003c28:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff ffab 	bl	8003b8a <LL_ADC_REG_IsConversionOngoing>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f040 80a0 	bne.w	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f040 809c 	bne.w	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c4c:	d004      	beq.n	8003c58 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a55      	ldr	r2, [pc, #340]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d101      	bne.n	8003c5c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003c58:	4b56      	ldr	r3, [pc, #344]	@ (8003db4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003c5a:	e000      	b.n	8003c5e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003c5c:	4b56      	ldr	r3, [pc, #344]	@ (8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003c5e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d04b      	beq.n	8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	6859      	ldr	r1, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c7a:	035b      	lsls	r3, r3, #13
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c8c:	d004      	beq.n	8003c98 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a45      	ldr	r2, [pc, #276]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d10f      	bne.n	8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003c98:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c9c:	f7ff ff62 	bl	8003b64 <LL_ADC_IsEnabled>
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	4841      	ldr	r0, [pc, #260]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ca4:	f7ff ff5e 	bl	8003b64 <LL_ADC_IsEnabled>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4323      	orrs	r3, r4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e012      	b.n	8003cde <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003cb8:	483c      	ldr	r0, [pc, #240]	@ (8003dac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003cba:	f7ff ff53 	bl	8003b64 <LL_ADC_IsEnabled>
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	483b      	ldr	r0, [pc, #236]	@ (8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003cc2:	f7ff ff4f 	bl	8003b64 <LL_ADC_IsEnabled>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	431c      	orrs	r4, r3
 8003cca:	483c      	ldr	r0, [pc, #240]	@ (8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ccc:	f7ff ff4a 	bl	8003b64 <LL_ADC_IsEnabled>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	4323      	orrs	r3, r4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d056      	beq.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ce2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003cea:	f023 030f 	bic.w	r3, r3, #15
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	6811      	ldr	r1, [r2, #0]
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	6892      	ldr	r2, [r2, #8]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cfc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cfe:	e047      	b.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d0a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d14:	d004      	beq.n	8003d20 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a23      	ldr	r2, [pc, #140]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d10f      	bne.n	8003d40 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003d20:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d24:	f7ff ff1e 	bl	8003b64 <LL_ADC_IsEnabled>
 8003d28:	4604      	mov	r4, r0
 8003d2a:	481f      	ldr	r0, [pc, #124]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d2c:	f7ff ff1a 	bl	8003b64 <LL_ADC_IsEnabled>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4323      	orrs	r3, r4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	e012      	b.n	8003d66 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003d40:	481a      	ldr	r0, [pc, #104]	@ (8003dac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d42:	f7ff ff0f 	bl	8003b64 <LL_ADC_IsEnabled>
 8003d46:	4604      	mov	r4, r0
 8003d48:	4819      	ldr	r0, [pc, #100]	@ (8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d4a:	f7ff ff0b 	bl	8003b64 <LL_ADC_IsEnabled>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	431c      	orrs	r4, r3
 8003d52:	481a      	ldr	r0, [pc, #104]	@ (8003dbc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003d54:	f7ff ff06 	bl	8003b64 <LL_ADC_IsEnabled>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	4323      	orrs	r3, r4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d012      	beq.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d72:	f023 030f 	bic.w	r3, r3, #15
 8003d76:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003d78:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d7a:	e009      	b.n	8003d90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003d8e:	e000      	b.n	8003d92 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d9a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3784      	adds	r7, #132	@ 0x84
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd90      	pop	{r4, r7, pc}
 8003da6:	bf00      	nop
 8003da8:	50000100 	.word	0x50000100
 8003dac:	50000400 	.word	0x50000400
 8003db0:	50000500 	.word	0x50000500
 8003db4:	50000300 	.word	0x50000300
 8003db8:	50000700 	.word	0x50000700
 8003dbc:	50000600 	.word	0x50000600

08003dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e04 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003df2:	4a04      	ldr	r2, [pc, #16]	@ (8003e04 <__NVIC_SetPriorityGrouping+0x44>)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	60d3      	str	r3, [r2, #12]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e0c:	4b04      	ldr	r3, [pc, #16]	@ (8003e20 <__NVIC_GetPriorityGrouping+0x18>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	f003 0307 	and.w	r3, r3, #7
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	e000ed00 	.word	0xe000ed00

08003e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	db0b      	blt.n	8003e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	f003 021f 	and.w	r2, r3, #31
 8003e3c:	4907      	ldr	r1, [pc, #28]	@ (8003e5c <__NVIC_EnableIRQ+0x38>)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2001      	movs	r0, #1
 8003e46:	fa00 f202 	lsl.w	r2, r0, r2
 8003e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	e000e100 	.word	0xe000e100

08003e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	6039      	str	r1, [r7, #0]
 8003e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	db0a      	blt.n	8003e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	490c      	ldr	r1, [pc, #48]	@ (8003eac <__NVIC_SetPriority+0x4c>)
 8003e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7e:	0112      	lsls	r2, r2, #4
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	440b      	add	r3, r1
 8003e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e88:	e00a      	b.n	8003ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	4908      	ldr	r1, [pc, #32]	@ (8003eb0 <__NVIC_SetPriority+0x50>)
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	3b04      	subs	r3, #4
 8003e98:	0112      	lsls	r2, r2, #4
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	761a      	strb	r2, [r3, #24]
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	e000e100 	.word	0xe000e100
 8003eb0:	e000ed00 	.word	0xe000ed00

08003eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b089      	sub	sp, #36	@ 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f1c3 0307 	rsb	r3, r3, #7
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	bf28      	it	cs
 8003ed2:	2304      	movcs	r3, #4
 8003ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	2b06      	cmp	r3, #6
 8003edc:	d902      	bls.n	8003ee4 <NVIC_EncodePriority+0x30>
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	3b03      	subs	r3, #3
 8003ee2:	e000      	b.n	8003ee6 <NVIC_EncodePriority+0x32>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43da      	mvns	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	401a      	ands	r2, r3
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003efc:	f04f 31ff 	mov.w	r1, #4294967295
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	fa01 f303 	lsl.w	r3, r1, r3
 8003f06:	43d9      	mvns	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f0c:	4313      	orrs	r3, r2
         );
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3724      	adds	r7, #36	@ 0x24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff ff4c 	bl	8003dc0 <__NVIC_SetPriorityGrouping>
}
 8003f28:	bf00      	nop
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f3e:	f7ff ff63 	bl	8003e08 <__NVIC_GetPriorityGrouping>
 8003f42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	6978      	ldr	r0, [r7, #20]
 8003f4a:	f7ff ffb3 	bl	8003eb4 <NVIC_EncodePriority>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f54:	4611      	mov	r1, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff ff82 	bl	8003e60 <__NVIC_SetPriority>
}
 8003f5c:	bf00      	nop
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ff56 	bl	8003e24 <__NVIC_EnableIRQ>
}
 8003f78:	bf00      	nop
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e08d      	b.n	80040ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	4b47      	ldr	r3, [pc, #284]	@ (80040b8 <HAL_DMA_Init+0x138>)
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d80f      	bhi.n	8003fbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4b45      	ldr	r3, [pc, #276]	@ (80040bc <HAL_DMA_Init+0x13c>)
 8003fa6:	4413      	add	r3, r2
 8003fa8:	4a45      	ldr	r2, [pc, #276]	@ (80040c0 <HAL_DMA_Init+0x140>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	091b      	lsrs	r3, r3, #4
 8003fb0:	009a      	lsls	r2, r3, #2
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a42      	ldr	r2, [pc, #264]	@ (80040c4 <HAL_DMA_Init+0x144>)
 8003fba:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fbc:	e00e      	b.n	8003fdc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4b40      	ldr	r3, [pc, #256]	@ (80040c8 <HAL_DMA_Init+0x148>)
 8003fc6:	4413      	add	r3, r2
 8003fc8:	4a3d      	ldr	r2, [pc, #244]	@ (80040c0 <HAL_DMA_Init+0x140>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	091b      	lsrs	r3, r3, #4
 8003fd0:	009a      	lsls	r2, r3, #2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a3c      	ldr	r2, [pc, #240]	@ (80040cc <HAL_DMA_Init+0x14c>)
 8003fda:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ff6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004000:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800400c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004018:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fa76 	bl	8004520 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800403c:	d102      	bne.n	8004044 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004058:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d010      	beq.n	8004084 <HAL_DMA_Init+0x104>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b04      	cmp	r3, #4
 8004068:	d80c      	bhi.n	8004084 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fa96 	bl	800459c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	e008      	b.n	8004096 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40020407 	.word	0x40020407
 80040bc:	bffdfff8 	.word	0xbffdfff8
 80040c0:	cccccccd 	.word	0xcccccccd
 80040c4:	40020000 	.word	0x40020000
 80040c8:	bffdfbf8 	.word	0xbffdfbf8
 80040cc:	40020400 	.word	0x40020400

080040d0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_DMA_Start_IT+0x20>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e066      	b.n	80041be <HAL_DMA_Start_IT+0xee>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b01      	cmp	r3, #1
 8004102:	d155      	bne.n	80041b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0201 	bic.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f9bb 	bl	80044a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 020e 	orr.w	r2, r2, #14
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	e00f      	b.n	8004168 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0204 	bic.w	r2, r2, #4
 8004156:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 020a 	orr.w	r2, r2, #10
 8004166:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d007      	beq.n	8004186 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004180:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004184:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004198:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800419c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e005      	b.n	80041bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
 80041ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d005      	beq.n	80041ea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2204      	movs	r2, #4
 80041e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
 80041e8:	e037      	b.n	800425a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 020e 	bic.w	r2, r2, #14
 80041f8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004204:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004208:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0201 	bic.w	r2, r2, #1
 8004218:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421e:	f003 021f 	and.w	r2, r3, #31
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	2101      	movs	r1, #1
 8004228:	fa01 f202 	lsl.w	r2, r1, r2
 800422c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004236:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00c      	beq.n	800425a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800424e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004258:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800426a:	7bfb      	ldrb	r3, [r7, #15]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d00d      	beq.n	80042ac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2204      	movs	r2, #4
 8004294:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
 80042aa:	e047      	b.n	800433c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 020e 	bic.w	r2, r2, #14
 80042ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0201 	bic.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e0:	f003 021f 	and.w	r2, r3, #31
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e8:	2101      	movs	r1, #1
 80042ea:	fa01 f202 	lsl.w	r2, r1, r2
 80042ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00c      	beq.n	800431c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800430c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004310:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800431a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	4798      	blx	r3
    }
  }
  return status;
 800433c:	7bfb      	ldrb	r3, [r7, #15]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004362:	f003 031f 	and.w	r3, r3, #31
 8004366:	2204      	movs	r2, #4
 8004368:	409a      	lsls	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d026      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x7a>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d021      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	d107      	bne.n	800439a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0204 	bic.w	r2, r2, #4
 8004398:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439e:	f003 021f 	and.w	r2, r3, #31
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	2104      	movs	r1, #4
 80043a8:	fa01 f202 	lsl.w	r2, r1, r2
 80043ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d071      	beq.n	800449a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80043be:	e06c      	b.n	800449a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	2202      	movs	r2, #2
 80043ca:	409a      	lsls	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d02e      	beq.n	8004432 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d029      	beq.n	8004432 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0320 	and.w	r3, r3, #32
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 020a 	bic.w	r2, r2, #10
 80043fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004408:	f003 021f 	and.w	r2, r3, #31
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004410:	2102      	movs	r1, #2
 8004412:	fa01 f202 	lsl.w	r2, r1, r2
 8004416:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d038      	beq.n	800449a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004430:	e033      	b.n	800449a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004436:	f003 031f 	and.w	r3, r3, #31
 800443a:	2208      	movs	r2, #8
 800443c:	409a      	lsls	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02a      	beq.n	800449c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d025      	beq.n	800449c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 020e 	bic.w	r2, r2, #14
 800445e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004464:	f003 021f 	and.w	r2, r3, #31
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446c:	2101      	movs	r1, #1
 800446e:	fa01 f202 	lsl.w	r2, r1, r2
 8004472:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800448e:	2b00      	cmp	r3, #0
 8004490:	d004      	beq.n	800449c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800449a:	bf00      	nop
 800449c:	bf00      	nop
}
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d004      	beq.n	80044ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80044cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d2:	f003 021f 	and.w	r2, r3, #31
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	2101      	movs	r1, #1
 80044dc:	fa01 f202 	lsl.w	r2, r1, r2
 80044e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d108      	bne.n	8004504 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004502:	e007      	b.n	8004514 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	461a      	mov	r2, r3
 800452e:	4b16      	ldr	r3, [pc, #88]	@ (8004588 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004530:	429a      	cmp	r2, r3
 8004532:	d802      	bhi.n	800453a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004534:	4b15      	ldr	r3, [pc, #84]	@ (800458c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	e001      	b.n	800453e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800453a:	4b15      	ldr	r3, [pc, #84]	@ (8004590 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800453c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	3b08      	subs	r3, #8
 800454a:	4a12      	ldr	r2, [pc, #72]	@ (8004594 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004558:	089b      	lsrs	r3, r3, #2
 800455a:	009a      	lsls	r2, r3, #2
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4413      	add	r3, r2
 8004560:	461a      	mov	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a0b      	ldr	r2, [pc, #44]	@ (8004598 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800456a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	2201      	movs	r2, #1
 8004574:	409a      	lsls	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800457a:	bf00      	nop
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40020407 	.word	0x40020407
 800458c:	40020800 	.word	0x40020800
 8004590:	40020820 	.word	0x40020820
 8004594:	cccccccd 	.word	0xcccccccd
 8004598:	40020880 	.word	0x40020880

0800459c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	461a      	mov	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a08      	ldr	r2, [pc, #32]	@ (80045e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80045be:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	2201      	movs	r2, #1
 80045ca:	409a      	lsls	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	1000823f 	.word	0x1000823f
 80045e0:	40020940 	.word	0x40020940

080045e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045f2:	e15a      	b.n	80048aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	2101      	movs	r1, #1
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004600:	4013      	ands	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 814c 	beq.w	80048a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b01      	cmp	r3, #1
 8004616:	d005      	beq.n	8004624 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004620:	2b02      	cmp	r3, #2
 8004622:	d130      	bne.n	8004686 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	2203      	movs	r2, #3
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	43db      	mvns	r3, r3
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4013      	ands	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800465a:	2201      	movs	r2, #1
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4013      	ands	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	f003 0201 	and.w	r2, r3, #1
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	2b03      	cmp	r3, #3
 8004690:	d017      	beq.n	80046c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	2203      	movs	r2, #3
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43db      	mvns	r3, r3
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4013      	ands	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d123      	bne.n	8004716 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	08da      	lsrs	r2, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3208      	adds	r2, #8
 80046d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	220f      	movs	r2, #15
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43db      	mvns	r3, r3
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4013      	ands	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	08da      	lsrs	r2, r3, #3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3208      	adds	r2, #8
 8004710:	6939      	ldr	r1, [r7, #16]
 8004712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	2203      	movs	r2, #3
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43db      	mvns	r3, r3
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4013      	ands	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f003 0203 	and.w	r2, r3, #3
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80a6 	beq.w	80048a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004758:	4b5b      	ldr	r3, [pc, #364]	@ (80048c8 <HAL_GPIO_Init+0x2e4>)
 800475a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800475c:	4a5a      	ldr	r2, [pc, #360]	@ (80048c8 <HAL_GPIO_Init+0x2e4>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6613      	str	r3, [r2, #96]	@ 0x60
 8004764:	4b58      	ldr	r3, [pc, #352]	@ (80048c8 <HAL_GPIO_Init+0x2e4>)
 8004766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004770:	4a56      	ldr	r2, [pc, #344]	@ (80048cc <HAL_GPIO_Init+0x2e8>)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	089b      	lsrs	r3, r3, #2
 8004776:	3302      	adds	r3, #2
 8004778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	220f      	movs	r2, #15
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	43db      	mvns	r3, r3
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4013      	ands	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800479a:	d01f      	beq.n	80047dc <HAL_GPIO_Init+0x1f8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a4c      	ldr	r2, [pc, #304]	@ (80048d0 <HAL_GPIO_Init+0x2ec>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d019      	beq.n	80047d8 <HAL_GPIO_Init+0x1f4>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a4b      	ldr	r2, [pc, #300]	@ (80048d4 <HAL_GPIO_Init+0x2f0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d013      	beq.n	80047d4 <HAL_GPIO_Init+0x1f0>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a4a      	ldr	r2, [pc, #296]	@ (80048d8 <HAL_GPIO_Init+0x2f4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00d      	beq.n	80047d0 <HAL_GPIO_Init+0x1ec>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a49      	ldr	r2, [pc, #292]	@ (80048dc <HAL_GPIO_Init+0x2f8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d007      	beq.n	80047cc <HAL_GPIO_Init+0x1e8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a48      	ldr	r2, [pc, #288]	@ (80048e0 <HAL_GPIO_Init+0x2fc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d101      	bne.n	80047c8 <HAL_GPIO_Init+0x1e4>
 80047c4:	2305      	movs	r3, #5
 80047c6:	e00a      	b.n	80047de <HAL_GPIO_Init+0x1fa>
 80047c8:	2306      	movs	r3, #6
 80047ca:	e008      	b.n	80047de <HAL_GPIO_Init+0x1fa>
 80047cc:	2304      	movs	r3, #4
 80047ce:	e006      	b.n	80047de <HAL_GPIO_Init+0x1fa>
 80047d0:	2303      	movs	r3, #3
 80047d2:	e004      	b.n	80047de <HAL_GPIO_Init+0x1fa>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e002      	b.n	80047de <HAL_GPIO_Init+0x1fa>
 80047d8:	2301      	movs	r3, #1
 80047da:	e000      	b.n	80047de <HAL_GPIO_Init+0x1fa>
 80047dc:	2300      	movs	r3, #0
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	f002 0203 	and.w	r2, r2, #3
 80047e4:	0092      	lsls	r2, r2, #2
 80047e6:	4093      	lsls	r3, r2
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047ee:	4937      	ldr	r1, [pc, #220]	@ (80048cc <HAL_GPIO_Init+0x2e8>)
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	089b      	lsrs	r3, r3, #2
 80047f4:	3302      	adds	r3, #2
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047fc:	4b39      	ldr	r3, [pc, #228]	@ (80048e4 <HAL_GPIO_Init+0x300>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	43db      	mvns	r3, r3
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4013      	ands	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004820:	4a30      	ldr	r2, [pc, #192]	@ (80048e4 <HAL_GPIO_Init+0x300>)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004826:	4b2f      	ldr	r3, [pc, #188]	@ (80048e4 <HAL_GPIO_Init+0x300>)
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	43db      	mvns	r3, r3
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4013      	ands	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800484a:	4a26      	ldr	r2, [pc, #152]	@ (80048e4 <HAL_GPIO_Init+0x300>)
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004850:	4b24      	ldr	r3, [pc, #144]	@ (80048e4 <HAL_GPIO_Init+0x300>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	43db      	mvns	r3, r3
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4013      	ands	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004874:	4a1b      	ldr	r2, [pc, #108]	@ (80048e4 <HAL_GPIO_Init+0x300>)
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800487a:	4b1a      	ldr	r3, [pc, #104]	@ (80048e4 <HAL_GPIO_Init+0x300>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	43db      	mvns	r3, r3
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4013      	ands	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800489e:	4a11      	ldr	r2, [pc, #68]	@ (80048e4 <HAL_GPIO_Init+0x300>)
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	3301      	adds	r3, #1
 80048a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f47f ae9d 	bne.w	80045f4 <HAL_GPIO_Init+0x10>
  }
}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	40021000 	.word	0x40021000
 80048cc:	40010000 	.word	0x40010000
 80048d0:	48000400 	.word	0x48000400
 80048d4:	48000800 	.word	0x48000800
 80048d8:	48000c00 	.word	0x48000c00
 80048dc:	48001000 	.word	0x48001000
 80048e0:	48001400 	.word	0x48001400
 80048e4:	40010400 	.word	0x40010400

080048e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	807b      	strh	r3, [r7, #2]
 80048f4:	4613      	mov	r3, r2
 80048f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048f8:	787b      	ldrb	r3, [r7, #1]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048fe:	887a      	ldrh	r2, [r7, #2]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004904:	e002      	b.n	800490c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004906:	887a      	ldrh	r2, [r7, #2]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004922:	4b08      	ldr	r3, [pc, #32]	@ (8004944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d006      	beq.n	800493c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800492e:	4a05      	ldr	r2, [pc, #20]	@ (8004944 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f806 	bl	8004948 <HAL_GPIO_EXTI_Callback>
  }
}
 800493c:	bf00      	nop
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40010400 	.word	0x40010400

08004948 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
	...

08004960 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d141      	bne.n	80049f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800496e:	4b4b      	ldr	r3, [pc, #300]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497a:	d131      	bne.n	80049e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800497c:	4b47      	ldr	r3, [pc, #284]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004982:	4a46      	ldr	r2, [pc, #280]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004988:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800498c:	4b43      	ldr	r3, [pc, #268]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004994:	4a41      	ldr	r2, [pc, #260]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004996:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800499a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800499c:	4b40      	ldr	r3, [pc, #256]	@ (8004aa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2232      	movs	r2, #50	@ 0x32
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	4a3f      	ldr	r2, [pc, #252]	@ (8004aa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049a8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ac:	0c9b      	lsrs	r3, r3, #18
 80049ae:	3301      	adds	r3, #1
 80049b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049b2:	e002      	b.n	80049ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049ba:	4b38      	ldr	r3, [pc, #224]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c6:	d102      	bne.n	80049ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f2      	bne.n	80049b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049ce:	4b33      	ldr	r3, [pc, #204]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049da:	d158      	bne.n	8004a8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e057      	b.n	8004a90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049e0:	4b2e      	ldr	r3, [pc, #184]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049e6:	4a2d      	ldr	r2, [pc, #180]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80049f0:	e04d      	b.n	8004a8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049f8:	d141      	bne.n	8004a7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049fa:	4b28      	ldr	r3, [pc, #160]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a06:	d131      	bne.n	8004a6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a08:	4b24      	ldr	r3, [pc, #144]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a0e:	4a23      	ldr	r2, [pc, #140]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a18:	4b20      	ldr	r3, [pc, #128]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a20:	4a1e      	ldr	r2, [pc, #120]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a28:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2232      	movs	r2, #50	@ 0x32
 8004a2e:	fb02 f303 	mul.w	r3, r2, r3
 8004a32:	4a1c      	ldr	r2, [pc, #112]	@ (8004aa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a34:	fba2 2303 	umull	r2, r3, r2, r3
 8004a38:	0c9b      	lsrs	r3, r3, #18
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a3e:	e002      	b.n	8004a46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a46:	4b15      	ldr	r3, [pc, #84]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a52:	d102      	bne.n	8004a5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f2      	bne.n	8004a40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a5a:	4b10      	ldr	r3, [pc, #64]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a66:	d112      	bne.n	8004a8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e011      	b.n	8004a90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a72:	4a0a      	ldr	r2, [pc, #40]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a7c:	e007      	b.n	8004a8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a7e:	4b07      	ldr	r3, [pc, #28]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a86:	4a05      	ldr	r2, [pc, #20]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	40007000 	.word	0x40007000
 8004aa0:	20000004 	.word	0x20000004
 8004aa4:	431bde83 	.word	0x431bde83

08004aa8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004aac:	4b05      	ldr	r3, [pc, #20]	@ (8004ac4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	4a04      	ldr	r2, [pc, #16]	@ (8004ac4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ab2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ab6:	6093      	str	r3, [r2, #8]
}
 8004ab8:	bf00      	nop
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40007000 	.word	0x40007000

08004ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e306      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d075      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ae6:	4b97      	ldr	r3, [pc, #604]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
 8004aee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004af0:	4b94      	ldr	r3, [pc, #592]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b0c      	cmp	r3, #12
 8004afe:	d102      	bne.n	8004b06 <HAL_RCC_OscConfig+0x3e>
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d002      	beq.n	8004b0c <HAL_RCC_OscConfig+0x44>
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d10b      	bne.n	8004b24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0c:	4b8d      	ldr	r3, [pc, #564]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d05b      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x108>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d157      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e2e1      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b2c:	d106      	bne.n	8004b3c <HAL_RCC_OscConfig+0x74>
 8004b2e:	4b85      	ldr	r3, [pc, #532]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a84      	ldr	r2, [pc, #528]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e01d      	b.n	8004b78 <HAL_RCC_OscConfig+0xb0>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCC_OscConfig+0x98>
 8004b46:	4b7f      	ldr	r3, [pc, #508]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004b4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	4b7c      	ldr	r3, [pc, #496]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a7b      	ldr	r2, [pc, #492]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	e00b      	b.n	8004b78 <HAL_RCC_OscConfig+0xb0>
 8004b60:	4b78      	ldr	r3, [pc, #480]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a77      	ldr	r2, [pc, #476]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	4b75      	ldr	r3, [pc, #468]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a74      	ldr	r2, [pc, #464]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004b72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d013      	beq.n	8004ba8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7fd fdc0 	bl	8002704 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b88:	f7fd fdbc 	bl	8002704 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	@ 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e2a6      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0xc0>
 8004ba6:	e014      	b.n	8004bd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7fd fdac 	bl	8002704 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb0:	f7fd fda8 	bl	8002704 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	@ 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e292      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bc2:	4b60      	ldr	r3, [pc, #384]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0xe8>
 8004bce:	e000      	b.n	8004bd2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d075      	beq.n	8004cca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bde:	4b59      	ldr	r3, [pc, #356]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004be8:	4b56      	ldr	r3, [pc, #344]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	2b0c      	cmp	r3, #12
 8004bf6:	d102      	bne.n	8004bfe <HAL_RCC_OscConfig+0x136>
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d002      	beq.n	8004c04 <HAL_RCC_OscConfig+0x13c>
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d11f      	bne.n	8004c44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c04:	4b4f      	ldr	r3, [pc, #316]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_RCC_OscConfig+0x154>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e265      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1c:	4b49      	ldr	r3, [pc, #292]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	061b      	lsls	r3, r3, #24
 8004c2a:	4946      	ldr	r1, [pc, #280]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c30:	4b45      	ldr	r3, [pc, #276]	@ (8004d48 <HAL_RCC_OscConfig+0x280>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fc fd8d 	bl	8001754 <HAL_InitTick>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d043      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e251      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d023      	beq.n	8004c94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a3c      	ldr	r2, [pc, #240]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fd fd54 	bl	8002704 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c60:	f7fd fd50 	bl	8002704 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e23a      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c72:	4b34      	ldr	r3, [pc, #208]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7e:	4b31      	ldr	r3, [pc, #196]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	061b      	lsls	r3, r3, #24
 8004c8c:	492d      	ldr	r1, [pc, #180]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	604b      	str	r3, [r1, #4]
 8004c92:	e01a      	b.n	8004cca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c94:	4b2b      	ldr	r3, [pc, #172]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a2a      	ldr	r2, [pc, #168]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004c9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fd fd30 	bl	8002704 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca8:	f7fd fd2c 	bl	8002704 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e216      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cba:	4b22      	ldr	r3, [pc, #136]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f0      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x1e0>
 8004cc6:	e000      	b.n	8004cca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d041      	beq.n	8004d5a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01c      	beq.n	8004d18 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cde:	4b19      	ldr	r3, [pc, #100]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ce4:	4a17      	ldr	r2, [pc, #92]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cee:	f7fd fd09 	bl	8002704 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cf6:	f7fd fd05 	bl	8002704 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e1ef      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d08:	4b0e      	ldr	r3, [pc, #56]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0ef      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x22e>
 8004d16:	e020      	b.n	8004d5a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d18:	4b0a      	ldr	r3, [pc, #40]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d1e:	4a09      	ldr	r2, [pc, #36]	@ (8004d44 <HAL_RCC_OscConfig+0x27c>)
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d28:	f7fd fcec 	bl	8002704 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d2e:	e00d      	b.n	8004d4c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d30:	f7fd fce8 	bl	8002704 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d906      	bls.n	8004d4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e1d2      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
 8004d42:	bf00      	nop
 8004d44:	40021000 	.word	0x40021000
 8004d48:	200000e8 	.word	0x200000e8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d4c:	4b8c      	ldr	r3, [pc, #560]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1ea      	bne.n	8004d30 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 80a6 	beq.w	8004eb4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d6c:	4b84      	ldr	r3, [pc, #528]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_RCC_OscConfig+0x2b4>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <HAL_RCC_OscConfig+0x2b6>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00d      	beq.n	8004d9e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d82:	4b7f      	ldr	r3, [pc, #508]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d86:	4a7e      	ldr	r2, [pc, #504]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d8e:	4b7c      	ldr	r3, [pc, #496]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d9e:	4b79      	ldr	r3, [pc, #484]	@ (8004f84 <HAL_RCC_OscConfig+0x4bc>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d118      	bne.n	8004ddc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004daa:	4b76      	ldr	r3, [pc, #472]	@ (8004f84 <HAL_RCC_OscConfig+0x4bc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a75      	ldr	r2, [pc, #468]	@ (8004f84 <HAL_RCC_OscConfig+0x4bc>)
 8004db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004db6:	f7fd fca5 	bl	8002704 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dbe:	f7fd fca1 	bl	8002704 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e18b      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dd0:	4b6c      	ldr	r3, [pc, #432]	@ (8004f84 <HAL_RCC_OscConfig+0x4bc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0f0      	beq.n	8004dbe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d108      	bne.n	8004df6 <HAL_RCC_OscConfig+0x32e>
 8004de4:	4b66      	ldr	r3, [pc, #408]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dea:	4a65      	ldr	r2, [pc, #404]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004df4:	e024      	b.n	8004e40 <HAL_RCC_OscConfig+0x378>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b05      	cmp	r3, #5
 8004dfc:	d110      	bne.n	8004e20 <HAL_RCC_OscConfig+0x358>
 8004dfe:	4b60      	ldr	r3, [pc, #384]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e04:	4a5e      	ldr	r2, [pc, #376]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004e06:	f043 0304 	orr.w	r3, r3, #4
 8004e0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e0e:	4b5c      	ldr	r3, [pc, #368]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e14:	4a5a      	ldr	r2, [pc, #360]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e1e:	e00f      	b.n	8004e40 <HAL_RCC_OscConfig+0x378>
 8004e20:	4b57      	ldr	r3, [pc, #348]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e26:	4a56      	ldr	r2, [pc, #344]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e30:	4b53      	ldr	r3, [pc, #332]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e36:	4a52      	ldr	r2, [pc, #328]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004e38:	f023 0304 	bic.w	r3, r3, #4
 8004e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d016      	beq.n	8004e76 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e48:	f7fd fc5c 	bl	8002704 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e4e:	e00a      	b.n	8004e66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e50:	f7fd fc58 	bl	8002704 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e140      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e66:	4b46      	ldr	r3, [pc, #280]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0ed      	beq.n	8004e50 <HAL_RCC_OscConfig+0x388>
 8004e74:	e015      	b.n	8004ea2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e76:	f7fd fc45 	bl	8002704 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e7c:	e00a      	b.n	8004e94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7e:	f7fd fc41 	bl	8002704 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e129      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e94:	4b3a      	ldr	r3, [pc, #232]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1ed      	bne.n	8004e7e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ea2:	7ffb      	ldrb	r3, [r7, #31]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d105      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea8:	4b35      	ldr	r3, [pc, #212]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eac:	4a34      	ldr	r2, [pc, #208]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eb2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d03c      	beq.n	8004f3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01c      	beq.n	8004f02 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004eca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ece:	4a2c      	ldr	r2, [pc, #176]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed8:	f7fd fc14 	bl	8002704 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ee0:	f7fd fc10 	bl	8002704 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e0fa      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ef2:	4b23      	ldr	r3, [pc, #140]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004ef4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0ef      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x418>
 8004f00:	e01b      	b.n	8004f3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f02:	4b1f      	ldr	r3, [pc, #124]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004f04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f08:	4a1d      	ldr	r2, [pc, #116]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004f0a:	f023 0301 	bic.w	r3, r3, #1
 8004f0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f12:	f7fd fbf7 	bl	8002704 <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f1a:	f7fd fbf3 	bl	8002704 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e0dd      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f2c:	4b14      	ldr	r3, [pc, #80]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1ef      	bne.n	8004f1a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 80d1 	beq.w	80050e6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f44:	4b0e      	ldr	r3, [pc, #56]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 030c 	and.w	r3, r3, #12
 8004f4c:	2b0c      	cmp	r3, #12
 8004f4e:	f000 808b 	beq.w	8005068 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d15e      	bne.n	8005018 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f5a:	4b09      	ldr	r3, [pc, #36]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a08      	ldr	r2, [pc, #32]	@ (8004f80 <HAL_RCC_OscConfig+0x4b8>)
 8004f60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f66:	f7fd fbcd 	bl	8002704 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f6c:	e00c      	b.n	8004f88 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6e:	f7fd fbc9 	bl	8002704 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d905      	bls.n	8004f88 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e0b3      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
 8004f80:	40021000 	.word	0x40021000
 8004f84:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f88:	4b59      	ldr	r3, [pc, #356]	@ (80050f0 <HAL_RCC_OscConfig+0x628>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1ec      	bne.n	8004f6e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f94:	4b56      	ldr	r3, [pc, #344]	@ (80050f0 <HAL_RCC_OscConfig+0x628>)
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	4b56      	ldr	r3, [pc, #344]	@ (80050f4 <HAL_RCC_OscConfig+0x62c>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6a11      	ldr	r1, [r2, #32]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fa4:	3a01      	subs	r2, #1
 8004fa6:	0112      	lsls	r2, r2, #4
 8004fa8:	4311      	orrs	r1, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004fae:	0212      	lsls	r2, r2, #8
 8004fb0:	4311      	orrs	r1, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004fb6:	0852      	lsrs	r2, r2, #1
 8004fb8:	3a01      	subs	r2, #1
 8004fba:	0552      	lsls	r2, r2, #21
 8004fbc:	4311      	orrs	r1, r2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004fc2:	0852      	lsrs	r2, r2, #1
 8004fc4:	3a01      	subs	r2, #1
 8004fc6:	0652      	lsls	r2, r2, #25
 8004fc8:	4311      	orrs	r1, r2
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004fce:	06d2      	lsls	r2, r2, #27
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	4947      	ldr	r1, [pc, #284]	@ (80050f0 <HAL_RCC_OscConfig+0x628>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fd8:	4b45      	ldr	r3, [pc, #276]	@ (80050f0 <HAL_RCC_OscConfig+0x628>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a44      	ldr	r2, [pc, #272]	@ (80050f0 <HAL_RCC_OscConfig+0x628>)
 8004fde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fe2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fe4:	4b42      	ldr	r3, [pc, #264]	@ (80050f0 <HAL_RCC_OscConfig+0x628>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4a41      	ldr	r2, [pc, #260]	@ (80050f0 <HAL_RCC_OscConfig+0x628>)
 8004fea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff0:	f7fd fb88 	bl	8002704 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff8:	f7fd fb84 	bl	8002704 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e06e      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800500a:	4b39      	ldr	r3, [pc, #228]	@ (80050f0 <HAL_RCC_OscConfig+0x628>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0f0      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x530>
 8005016:	e066      	b.n	80050e6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005018:	4b35      	ldr	r3, [pc, #212]	@ (80050f0 <HAL_RCC_OscConfig+0x628>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a34      	ldr	r2, [pc, #208]	@ (80050f0 <HAL_RCC_OscConfig+0x628>)
 800501e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005022:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005024:	4b32      	ldr	r3, [pc, #200]	@ (80050f0 <HAL_RCC_OscConfig+0x628>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	4a31      	ldr	r2, [pc, #196]	@ (80050f0 <HAL_RCC_OscConfig+0x628>)
 800502a:	f023 0303 	bic.w	r3, r3, #3
 800502e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005030:	4b2f      	ldr	r3, [pc, #188]	@ (80050f0 <HAL_RCC_OscConfig+0x628>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4a2e      	ldr	r2, [pc, #184]	@ (80050f0 <HAL_RCC_OscConfig+0x628>)
 8005036:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800503a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800503e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fd fb60 	bl	8002704 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005048:	f7fd fb5c 	bl	8002704 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e046      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800505a:	4b25      	ldr	r3, [pc, #148]	@ (80050f0 <HAL_RCC_OscConfig+0x628>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x580>
 8005066:	e03e      	b.n	80050e6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e039      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005074:	4b1e      	ldr	r3, [pc, #120]	@ (80050f0 <HAL_RCC_OscConfig+0x628>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f003 0203 	and.w	r2, r3, #3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	429a      	cmp	r2, r3
 8005086:	d12c      	bne.n	80050e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005092:	3b01      	subs	r3, #1
 8005094:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005096:	429a      	cmp	r2, r3
 8005098:	d123      	bne.n	80050e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d11b      	bne.n	80050e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d113      	bne.n	80050e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c4:	085b      	lsrs	r3, r3, #1
 80050c6:	3b01      	subs	r3, #1
 80050c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d109      	bne.n	80050e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	3b01      	subs	r3, #1
 80050dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050de:	429a      	cmp	r2, r3
 80050e0:	d001      	beq.n	80050e6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3720      	adds	r7, #32
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40021000 	.word	0x40021000
 80050f4:	019f800c 	.word	0x019f800c

080050f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e11e      	b.n	800534e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005110:	4b91      	ldr	r3, [pc, #580]	@ (8005358 <HAL_RCC_ClockConfig+0x260>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d910      	bls.n	8005140 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511e:	4b8e      	ldr	r3, [pc, #568]	@ (8005358 <HAL_RCC_ClockConfig+0x260>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f023 020f 	bic.w	r2, r3, #15
 8005126:	498c      	ldr	r1, [pc, #560]	@ (8005358 <HAL_RCC_ClockConfig+0x260>)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	4313      	orrs	r3, r2
 800512c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800512e:	4b8a      	ldr	r3, [pc, #552]	@ (8005358 <HAL_RCC_ClockConfig+0x260>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d001      	beq.n	8005140 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e106      	b.n	800534e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d073      	beq.n	8005234 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b03      	cmp	r3, #3
 8005152:	d129      	bne.n	80051a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005154:	4b81      	ldr	r3, [pc, #516]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e0f4      	b.n	800534e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005164:	f000 f9d0 	bl	8005508 <RCC_GetSysClockFreqFromPLLSource>
 8005168:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4a7c      	ldr	r2, [pc, #496]	@ (8005360 <HAL_RCC_ClockConfig+0x268>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d93f      	bls.n	80051f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005172:	4b7a      	ldr	r3, [pc, #488]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005186:	2b00      	cmp	r3, #0
 8005188:	d033      	beq.n	80051f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800518e:	2b00      	cmp	r3, #0
 8005190:	d12f      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005192:	4b72      	ldr	r3, [pc, #456]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800519a:	4a70      	ldr	r2, [pc, #448]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 800519c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80051a2:	2380      	movs	r3, #128	@ 0x80
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	e024      	b.n	80051f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d107      	bne.n	80051c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051b0:	4b6a      	ldr	r3, [pc, #424]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d109      	bne.n	80051d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0c6      	b.n	800534e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051c0:	4b66      	ldr	r3, [pc, #408]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0be      	b.n	800534e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80051d0:	f000 f8ce 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 80051d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4a61      	ldr	r2, [pc, #388]	@ (8005360 <HAL_RCC_ClockConfig+0x268>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d909      	bls.n	80051f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051de:	4b5f      	ldr	r3, [pc, #380]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051e6:	4a5d      	ldr	r2, [pc, #372]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 80051e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80051ee:	2380      	movs	r3, #128	@ 0x80
 80051f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051f2:	4b5a      	ldr	r3, [pc, #360]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f023 0203 	bic.w	r2, r3, #3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	4957      	ldr	r1, [pc, #348]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 8005200:	4313      	orrs	r3, r2
 8005202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005204:	f7fd fa7e 	bl	8002704 <HAL_GetTick>
 8005208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520a:	e00a      	b.n	8005222 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800520c:	f7fd fa7a 	bl	8002704 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800521a:	4293      	cmp	r3, r2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e095      	b.n	800534e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005222:	4b4e      	ldr	r3, [pc, #312]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 020c 	and.w	r2, r3, #12
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	429a      	cmp	r2, r3
 8005232:	d1eb      	bne.n	800520c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d023      	beq.n	8005288 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d005      	beq.n	8005258 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800524c:	4b43      	ldr	r3, [pc, #268]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	4a42      	ldr	r2, [pc, #264]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 8005252:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005256:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b00      	cmp	r3, #0
 8005262:	d007      	beq.n	8005274 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005264:	4b3d      	ldr	r3, [pc, #244]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800526c:	4a3b      	ldr	r2, [pc, #236]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 800526e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005272:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005274:	4b39      	ldr	r3, [pc, #228]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	4936      	ldr	r1, [pc, #216]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 8005282:	4313      	orrs	r3, r2
 8005284:	608b      	str	r3, [r1, #8]
 8005286:	e008      	b.n	800529a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b80      	cmp	r3, #128	@ 0x80
 800528c:	d105      	bne.n	800529a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800528e:	4b33      	ldr	r3, [pc, #204]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	4a32      	ldr	r2, [pc, #200]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 8005294:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005298:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800529a:	4b2f      	ldr	r3, [pc, #188]	@ (8005358 <HAL_RCC_ClockConfig+0x260>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d21d      	bcs.n	80052e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005358 <HAL_RCC_ClockConfig+0x260>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f023 020f 	bic.w	r2, r3, #15
 80052b0:	4929      	ldr	r1, [pc, #164]	@ (8005358 <HAL_RCC_ClockConfig+0x260>)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80052b8:	f7fd fa24 	bl	8002704 <HAL_GetTick>
 80052bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052be:	e00a      	b.n	80052d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c0:	f7fd fa20 	bl	8002704 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e03b      	b.n	800534e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d6:	4b20      	ldr	r3, [pc, #128]	@ (8005358 <HAL_RCC_ClockConfig+0x260>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d1ed      	bne.n	80052c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052f0:	4b1a      	ldr	r3, [pc, #104]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4917      	ldr	r1, [pc, #92]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800530e:	4b13      	ldr	r3, [pc, #76]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	490f      	ldr	r1, [pc, #60]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 800531e:	4313      	orrs	r3, r2
 8005320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005322:	f000 f825 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 8005326:	4602      	mov	r2, r0
 8005328:	4b0c      	ldr	r3, [pc, #48]	@ (800535c <HAL_RCC_ClockConfig+0x264>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	091b      	lsrs	r3, r3, #4
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	490c      	ldr	r1, [pc, #48]	@ (8005364 <HAL_RCC_ClockConfig+0x26c>)
 8005334:	5ccb      	ldrb	r3, [r1, r3]
 8005336:	f003 031f 	and.w	r3, r3, #31
 800533a:	fa22 f303 	lsr.w	r3, r2, r3
 800533e:	4a0a      	ldr	r2, [pc, #40]	@ (8005368 <HAL_RCC_ClockConfig+0x270>)
 8005340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005342:	4b0a      	ldr	r3, [pc, #40]	@ (800536c <HAL_RCC_ClockConfig+0x274>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4618      	mov	r0, r3
 8005348:	f7fc fa04 	bl	8001754 <HAL_InitTick>
 800534c:	4603      	mov	r3, r0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	40022000 	.word	0x40022000
 800535c:	40021000 	.word	0x40021000
 8005360:	04c4b400 	.word	0x04c4b400
 8005364:	0800df14 	.word	0x0800df14
 8005368:	20000004 	.word	0x20000004
 800536c:	200000e8 	.word	0x200000e8

08005370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005376:	4b2c      	ldr	r3, [pc, #176]	@ (8005428 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
 800537e:	2b04      	cmp	r3, #4
 8005380:	d102      	bne.n	8005388 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005382:	4b2a      	ldr	r3, [pc, #168]	@ (800542c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	e047      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005388:	4b27      	ldr	r3, [pc, #156]	@ (8005428 <HAL_RCC_GetSysClockFreq+0xb8>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 030c 	and.w	r3, r3, #12
 8005390:	2b08      	cmp	r3, #8
 8005392:	d102      	bne.n	800539a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005394:	4b26      	ldr	r3, [pc, #152]	@ (8005430 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	e03e      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800539a:	4b23      	ldr	r3, [pc, #140]	@ (8005428 <HAL_RCC_GetSysClockFreq+0xb8>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
 80053a2:	2b0c      	cmp	r3, #12
 80053a4:	d136      	bne.n	8005414 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053a6:	4b20      	ldr	r3, [pc, #128]	@ (8005428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	091b      	lsrs	r3, r3, #4
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	3301      	adds	r3, #1
 80053bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d10c      	bne.n	80053de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005430 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053cc:	4a16      	ldr	r2, [pc, #88]	@ (8005428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053ce:	68d2      	ldr	r2, [r2, #12]
 80053d0:	0a12      	lsrs	r2, r2, #8
 80053d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053d6:	fb02 f303 	mul.w	r3, r2, r3
 80053da:	617b      	str	r3, [r7, #20]
      break;
 80053dc:	e00c      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053de:	4a13      	ldr	r2, [pc, #76]	@ (800542c <HAL_RCC_GetSysClockFreq+0xbc>)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e6:	4a10      	ldr	r2, [pc, #64]	@ (8005428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053e8:	68d2      	ldr	r2, [r2, #12]
 80053ea:	0a12      	lsrs	r2, r2, #8
 80053ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053f0:	fb02 f303 	mul.w	r3, r2, r3
 80053f4:	617b      	str	r3, [r7, #20]
      break;
 80053f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	0e5b      	lsrs	r3, r3, #25
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	3301      	adds	r3, #1
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	e001      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005418:	693b      	ldr	r3, [r7, #16]
}
 800541a:	4618      	mov	r0, r3
 800541c:	371c      	adds	r7, #28
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40021000 	.word	0x40021000
 800542c:	00f42400 	.word	0x00f42400
 8005430:	016e3600 	.word	0x016e3600

08005434 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005438:	4b03      	ldr	r3, [pc, #12]	@ (8005448 <HAL_RCC_GetHCLKFreq+0x14>)
 800543a:	681b      	ldr	r3, [r3, #0]
}
 800543c:	4618      	mov	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000004 	.word	0x20000004

0800544c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005450:	f7ff fff0 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b06      	ldr	r3, [pc, #24]	@ (8005470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	0a1b      	lsrs	r3, r3, #8
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	4904      	ldr	r1, [pc, #16]	@ (8005474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800546c:	4618      	mov	r0, r3
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40021000 	.word	0x40021000
 8005474:	0800df24 	.word	0x0800df24

08005478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800547c:	f7ff ffda 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 8005480:	4602      	mov	r2, r0
 8005482:	4b06      	ldr	r3, [pc, #24]	@ (800549c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	0adb      	lsrs	r3, r3, #11
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	4904      	ldr	r1, [pc, #16]	@ (80054a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800548e:	5ccb      	ldrb	r3, [r1, r3]
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005498:	4618      	mov	r0, r3
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40021000 	.word	0x40021000
 80054a0:	0800df24 	.word	0x0800df24

080054a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	220f      	movs	r2, #15
 80054b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80054b4:	4b12      	ldr	r3, [pc, #72]	@ (8005500 <HAL_RCC_GetClockConfig+0x5c>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 0203 	and.w	r2, r3, #3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80054c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005500 <HAL_RCC_GetClockConfig+0x5c>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80054cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005500 <HAL_RCC_GetClockConfig+0x5c>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80054d8:	4b09      	ldr	r3, [pc, #36]	@ (8005500 <HAL_RCC_GetClockConfig+0x5c>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	08db      	lsrs	r3, r3, #3
 80054de:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80054e6:	4b07      	ldr	r3, [pc, #28]	@ (8005504 <HAL_RCC_GetClockConfig+0x60>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 020f 	and.w	r2, r3, #15
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	601a      	str	r2, [r3, #0]
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40021000 	.word	0x40021000
 8005504:	40022000 	.word	0x40022000

08005508 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800550e:	4b1e      	ldr	r3, [pc, #120]	@ (8005588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005518:	4b1b      	ldr	r3, [pc, #108]	@ (8005588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	091b      	lsrs	r3, r3, #4
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	3301      	adds	r3, #1
 8005524:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	2b03      	cmp	r3, #3
 800552a:	d10c      	bne.n	8005546 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800552c:	4a17      	ldr	r2, [pc, #92]	@ (800558c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	fbb2 f3f3 	udiv	r3, r2, r3
 8005534:	4a14      	ldr	r2, [pc, #80]	@ (8005588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005536:	68d2      	ldr	r2, [r2, #12]
 8005538:	0a12      	lsrs	r2, r2, #8
 800553a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800553e:	fb02 f303 	mul.w	r3, r2, r3
 8005542:	617b      	str	r3, [r7, #20]
    break;
 8005544:	e00c      	b.n	8005560 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005546:	4a12      	ldr	r2, [pc, #72]	@ (8005590 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	fbb2 f3f3 	udiv	r3, r2, r3
 800554e:	4a0e      	ldr	r2, [pc, #56]	@ (8005588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005550:	68d2      	ldr	r2, [r2, #12]
 8005552:	0a12      	lsrs	r2, r2, #8
 8005554:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005558:	fb02 f303 	mul.w	r3, r2, r3
 800555c:	617b      	str	r3, [r7, #20]
    break;
 800555e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005560:	4b09      	ldr	r3, [pc, #36]	@ (8005588 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	0e5b      	lsrs	r3, r3, #25
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	3301      	adds	r3, #1
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	fbb2 f3f3 	udiv	r3, r2, r3
 8005578:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800557a:	687b      	ldr	r3, [r7, #4]
}
 800557c:	4618      	mov	r0, r3
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	40021000 	.word	0x40021000
 800558c:	016e3600 	.word	0x016e3600
 8005590:	00f42400 	.word	0x00f42400

08005594 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800559c:	2300      	movs	r3, #0
 800559e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055a0:	2300      	movs	r3, #0
 80055a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 8098 	beq.w	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055b2:	2300      	movs	r3, #0
 80055b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055b6:	4b43      	ldr	r3, [pc, #268]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10d      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c2:	4b40      	ldr	r3, [pc, #256]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c6:	4a3f      	ldr	r2, [pc, #252]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80055ce:	4b3d      	ldr	r3, [pc, #244]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055d6:	60bb      	str	r3, [r7, #8]
 80055d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055da:	2301      	movs	r3, #1
 80055dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055de:	4b3a      	ldr	r3, [pc, #232]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a39      	ldr	r2, [pc, #228]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055ea:	f7fd f88b 	bl	8002704 <HAL_GetTick>
 80055ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055f0:	e009      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055f2:	f7fd f887 	bl	8002704 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d902      	bls.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	74fb      	strb	r3, [r7, #19]
        break;
 8005604:	e005      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005606:	4b30      	ldr	r3, [pc, #192]	@ (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0ef      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005612:	7cfb      	ldrb	r3, [r7, #19]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d159      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005618:	4b2a      	ldr	r3, [pc, #168]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800561a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800561e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005622:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d01e      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	429a      	cmp	r2, r3
 8005632:	d019      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005634:	4b23      	ldr	r3, [pc, #140]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800563e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005640:	4b20      	ldr	r3, [pc, #128]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005646:	4a1f      	ldr	r2, [pc, #124]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800564c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005650:	4b1c      	ldr	r3, [pc, #112]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005656:	4a1b      	ldr	r2, [pc, #108]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005658:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800565c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005660:	4a18      	ldr	r2, [pc, #96]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d016      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005672:	f7fd f847 	bl	8002704 <HAL_GetTick>
 8005676:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005678:	e00b      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800567a:	f7fd f843 	bl	8002704 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005688:	4293      	cmp	r3, r2
 800568a:	d902      	bls.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	74fb      	strb	r3, [r7, #19]
            break;
 8005690:	e006      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005692:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0ec      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80056a0:	7cfb      	ldrb	r3, [r7, #19]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10b      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056a6:	4b07      	ldr	r3, [pc, #28]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056b4:	4903      	ldr	r1, [pc, #12]	@ (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80056bc:	e008      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056be:	7cfb      	ldrb	r3, [r7, #19]
 80056c0:	74bb      	strb	r3, [r7, #18]
 80056c2:	e005      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80056c4:	40021000 	.word	0x40021000
 80056c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056cc:	7cfb      	ldrb	r3, [r7, #19]
 80056ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056d0:	7c7b      	ldrb	r3, [r7, #17]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d105      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056d6:	4ba7      	ldr	r3, [pc, #668]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056da:	4aa6      	ldr	r2, [pc, #664]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056ee:	4ba1      	ldr	r3, [pc, #644]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f4:	f023 0203 	bic.w	r2, r3, #3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	499d      	ldr	r1, [pc, #628]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005710:	4b98      	ldr	r3, [pc, #608]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005716:	f023 020c 	bic.w	r2, r3, #12
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	4995      	ldr	r1, [pc, #596]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005732:	4b90      	ldr	r3, [pc, #576]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005738:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	498c      	ldr	r1, [pc, #560]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0308 	and.w	r3, r3, #8
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005754:	4b87      	ldr	r3, [pc, #540]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800575a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	4984      	ldr	r1, [pc, #528]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005764:	4313      	orrs	r3, r2
 8005766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005776:	4b7f      	ldr	r3, [pc, #508]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	497b      	ldr	r1, [pc, #492]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005798:	4b76      	ldr	r3, [pc, #472]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	4973      	ldr	r1, [pc, #460]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057ba:	4b6e      	ldr	r3, [pc, #440]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	496a      	ldr	r1, [pc, #424]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057dc:	4b65      	ldr	r3, [pc, #404]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	4962      	ldr	r1, [pc, #392]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057fe:	4b5d      	ldr	r3, [pc, #372]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005804:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580c:	4959      	ldr	r1, [pc, #356]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005820:	4b54      	ldr	r3, [pc, #336]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005822:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005826:	f023 0203 	bic.w	r2, r3, #3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582e:	4951      	ldr	r1, [pc, #324]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005842:	4b4c      	ldr	r3, [pc, #304]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005848:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005850:	4948      	ldr	r1, [pc, #288]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005860:	2b00      	cmp	r3, #0
 8005862:	d015      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005864:	4b43      	ldr	r3, [pc, #268]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005872:	4940      	ldr	r1, [pc, #256]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005882:	d105      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005884:	4b3b      	ldr	r3, [pc, #236]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	4a3a      	ldr	r2, [pc, #232]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800588a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800588e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005898:	2b00      	cmp	r3, #0
 800589a:	d015      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800589c:	4b35      	ldr	r3, [pc, #212]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800589e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058aa:	4932      	ldr	r1, [pc, #200]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058ba:	d105      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058c6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d015      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80058d4:	4b27      	ldr	r3, [pc, #156]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e2:	4924      	ldr	r1, [pc, #144]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058f2:	d105      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058fe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d015      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800590c:	4b19      	ldr	r3, [pc, #100]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800590e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005912:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591a:	4916      	ldr	r1, [pc, #88]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800591c:	4313      	orrs	r3, r2
 800591e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005926:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800592a:	d105      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800592c:	4b11      	ldr	r3, [pc, #68]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	4a10      	ldr	r2, [pc, #64]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005932:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005936:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d019      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005944:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800594a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005952:	4908      	ldr	r1, [pc, #32]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005962:	d109      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005964:	4b03      	ldr	r3, [pc, #12]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	4a02      	ldr	r2, [pc, #8]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800596a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800596e:	60d3      	str	r3, [r2, #12]
 8005970:	e002      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005972:	bf00      	nop
 8005974:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d015      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005984:	4b29      	ldr	r3, [pc, #164]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005992:	4926      	ldr	r1, [pc, #152]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059a2:	d105      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059a4:	4b21      	ldr	r3, [pc, #132]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4a20      	ldr	r2, [pc, #128]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059ae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d015      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80059bc:	4b1b      	ldr	r3, [pc, #108]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059ca:	4918      	ldr	r1, [pc, #96]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059da:	d105      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059dc:	4b13      	ldr	r3, [pc, #76]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	4a12      	ldr	r2, [pc, #72]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059e6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d015      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80059f4:	4b0d      	ldr	r3, [pc, #52]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a02:	490a      	ldr	r1, [pc, #40]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a12:	d105      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a14:	4b05      	ldr	r3, [pc, #20]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	4a04      	ldr	r2, [pc, #16]	@ (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005a20:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40021000 	.word	0x40021000

08005a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e049      	b.n	8005ad6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f841 	bl	8005ade <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f000 fd7a 	bl	8006568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
	...

08005af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d001      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e054      	b.n	8005bb6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a26      	ldr	r2, [pc, #152]	@ (8005bc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d022      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x80>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b36:	d01d      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x80>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a22      	ldr	r2, [pc, #136]	@ (8005bc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d018      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x80>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a21      	ldr	r2, [pc, #132]	@ (8005bcc <HAL_TIM_Base_Start_IT+0xd8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d013      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x80>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1f      	ldr	r2, [pc, #124]	@ (8005bd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00e      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x80>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8005bd4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d009      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x80>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1c      	ldr	r2, [pc, #112]	@ (8005bd8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x80>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8005bdc <HAL_TIM_Base_Start_IT+0xe8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d115      	bne.n	8005ba0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	4b19      	ldr	r3, [pc, #100]	@ (8005be0 <HAL_TIM_Base_Start_IT+0xec>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b06      	cmp	r3, #6
 8005b84:	d015      	beq.n	8005bb2 <HAL_TIM_Base_Start_IT+0xbe>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b8c:	d011      	beq.n	8005bb2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b9e:	e008      	b.n	8005bb2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0201 	orr.w	r2, r2, #1
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	e000      	b.n	8005bb4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40012c00 	.word	0x40012c00
 8005bc8:	40000400 	.word	0x40000400
 8005bcc:	40000800 	.word	0x40000800
 8005bd0:	40000c00 	.word	0x40000c00
 8005bd4:	40013400 	.word	0x40013400
 8005bd8:	40014000 	.word	0x40014000
 8005bdc:	40015000 	.word	0x40015000
 8005be0:	00010007 	.word	0x00010007

08005be4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e049      	b.n	8005c8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fc f83e 	bl	8001c8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	4619      	mov	r1, r3
 8005c22:	4610      	mov	r0, r2
 8005c24:	f000 fca0 	bl	8006568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d109      	bne.n	8005cb8 <HAL_TIM_PWM_Start+0x24>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	bf14      	ite	ne
 8005cb0:	2301      	movne	r3, #1
 8005cb2:	2300      	moveq	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	e03c      	b.n	8005d32 <HAL_TIM_PWM_Start+0x9e>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d109      	bne.n	8005cd2 <HAL_TIM_PWM_Start+0x3e>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	bf14      	ite	ne
 8005cca:	2301      	movne	r3, #1
 8005ccc:	2300      	moveq	r3, #0
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	e02f      	b.n	8005d32 <HAL_TIM_PWM_Start+0x9e>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	d109      	bne.n	8005cec <HAL_TIM_PWM_Start+0x58>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	bf14      	ite	ne
 8005ce4:	2301      	movne	r3, #1
 8005ce6:	2300      	moveq	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	e022      	b.n	8005d32 <HAL_TIM_PWM_Start+0x9e>
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2b0c      	cmp	r3, #12
 8005cf0:	d109      	bne.n	8005d06 <HAL_TIM_PWM_Start+0x72>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	bf14      	ite	ne
 8005cfe:	2301      	movne	r3, #1
 8005d00:	2300      	moveq	r3, #0
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	e015      	b.n	8005d32 <HAL_TIM_PWM_Start+0x9e>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b10      	cmp	r3, #16
 8005d0a:	d109      	bne.n	8005d20 <HAL_TIM_PWM_Start+0x8c>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	bf14      	ite	ne
 8005d18:	2301      	movne	r3, #1
 8005d1a:	2300      	moveq	r3, #0
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	e008      	b.n	8005d32 <HAL_TIM_PWM_Start+0x9e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	bf14      	ite	ne
 8005d2c:	2301      	movne	r3, #1
 8005d2e:	2300      	moveq	r3, #0
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e0a6      	b.n	8005e88 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d104      	bne.n	8005d4a <HAL_TIM_PWM_Start+0xb6>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d48:	e023      	b.n	8005d92 <HAL_TIM_PWM_Start+0xfe>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b04      	cmp	r3, #4
 8005d4e:	d104      	bne.n	8005d5a <HAL_TIM_PWM_Start+0xc6>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d58:	e01b      	b.n	8005d92 <HAL_TIM_PWM_Start+0xfe>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d104      	bne.n	8005d6a <HAL_TIM_PWM_Start+0xd6>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d68:	e013      	b.n	8005d92 <HAL_TIM_PWM_Start+0xfe>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b0c      	cmp	r3, #12
 8005d6e:	d104      	bne.n	8005d7a <HAL_TIM_PWM_Start+0xe6>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d78:	e00b      	b.n	8005d92 <HAL_TIM_PWM_Start+0xfe>
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b10      	cmp	r3, #16
 8005d7e:	d104      	bne.n	8005d8a <HAL_TIM_PWM_Start+0xf6>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d88:	e003      	b.n	8005d92 <HAL_TIM_PWM_Start+0xfe>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2201      	movs	r2, #1
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 f82a 	bl	8006df4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a3a      	ldr	r2, [pc, #232]	@ (8005e90 <HAL_TIM_PWM_Start+0x1fc>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d018      	beq.n	8005ddc <HAL_TIM_PWM_Start+0x148>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a39      	ldr	r2, [pc, #228]	@ (8005e94 <HAL_TIM_PWM_Start+0x200>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d013      	beq.n	8005ddc <HAL_TIM_PWM_Start+0x148>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a37      	ldr	r2, [pc, #220]	@ (8005e98 <HAL_TIM_PWM_Start+0x204>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00e      	beq.n	8005ddc <HAL_TIM_PWM_Start+0x148>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a36      	ldr	r2, [pc, #216]	@ (8005e9c <HAL_TIM_PWM_Start+0x208>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d009      	beq.n	8005ddc <HAL_TIM_PWM_Start+0x148>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a34      	ldr	r2, [pc, #208]	@ (8005ea0 <HAL_TIM_PWM_Start+0x20c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_TIM_PWM_Start+0x148>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a33      	ldr	r2, [pc, #204]	@ (8005ea4 <HAL_TIM_PWM_Start+0x210>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d101      	bne.n	8005de0 <HAL_TIM_PWM_Start+0x14c>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <HAL_TIM_PWM_Start+0x14e>
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005df4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a25      	ldr	r2, [pc, #148]	@ (8005e90 <HAL_TIM_PWM_Start+0x1fc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d022      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x1b2>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e08:	d01d      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x1b2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a26      	ldr	r2, [pc, #152]	@ (8005ea8 <HAL_TIM_PWM_Start+0x214>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d018      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x1b2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a24      	ldr	r2, [pc, #144]	@ (8005eac <HAL_TIM_PWM_Start+0x218>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d013      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x1b2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a23      	ldr	r2, [pc, #140]	@ (8005eb0 <HAL_TIM_PWM_Start+0x21c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d00e      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x1b2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a19      	ldr	r2, [pc, #100]	@ (8005e94 <HAL_TIM_PWM_Start+0x200>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d009      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x1b2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a18      	ldr	r2, [pc, #96]	@ (8005e98 <HAL_TIM_PWM_Start+0x204>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d004      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x1b2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a18      	ldr	r2, [pc, #96]	@ (8005ea4 <HAL_TIM_PWM_Start+0x210>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d115      	bne.n	8005e72 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	4b19      	ldr	r3, [pc, #100]	@ (8005eb4 <HAL_TIM_PWM_Start+0x220>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b06      	cmp	r3, #6
 8005e56:	d015      	beq.n	8005e84 <HAL_TIM_PWM_Start+0x1f0>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e5e:	d011      	beq.n	8005e84 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e70:	e008      	b.n	8005e84 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f042 0201 	orr.w	r2, r2, #1
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	e000      	b.n	8005e86 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40012c00 	.word	0x40012c00
 8005e94:	40013400 	.word	0x40013400
 8005e98:	40014000 	.word	0x40014000
 8005e9c:	40014400 	.word	0x40014400
 8005ea0:	40014800 	.word	0x40014800
 8005ea4:	40015000 	.word	0x40015000
 8005ea8:	40000400 	.word	0x40000400
 8005eac:	40000800 	.word	0x40000800
 8005eb0:	40000c00 	.word	0x40000c00
 8005eb4:	00010007 	.word	0x00010007

08005eb8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 ff92 	bl	8006df4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a40      	ldr	r2, [pc, #256]	@ (8005fd8 <HAL_TIM_PWM_Stop+0x120>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d018      	beq.n	8005f0c <HAL_TIM_PWM_Stop+0x54>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a3f      	ldr	r2, [pc, #252]	@ (8005fdc <HAL_TIM_PWM_Stop+0x124>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d013      	beq.n	8005f0c <HAL_TIM_PWM_Stop+0x54>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a3d      	ldr	r2, [pc, #244]	@ (8005fe0 <HAL_TIM_PWM_Stop+0x128>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d00e      	beq.n	8005f0c <HAL_TIM_PWM_Stop+0x54>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a3c      	ldr	r2, [pc, #240]	@ (8005fe4 <HAL_TIM_PWM_Stop+0x12c>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d009      	beq.n	8005f0c <HAL_TIM_PWM_Stop+0x54>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a3a      	ldr	r2, [pc, #232]	@ (8005fe8 <HAL_TIM_PWM_Stop+0x130>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d004      	beq.n	8005f0c <HAL_TIM_PWM_Stop+0x54>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a39      	ldr	r2, [pc, #228]	@ (8005fec <HAL_TIM_PWM_Stop+0x134>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIM_PWM_Stop+0x58>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <HAL_TIM_PWM_Stop+0x5a>
 8005f10:	2300      	movs	r3, #0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d017      	beq.n	8005f46 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6a1a      	ldr	r2, [r3, #32]
 8005f1c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f20:	4013      	ands	r3, r2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10f      	bne.n	8005f46 <HAL_TIM_PWM_Stop+0x8e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6a1a      	ldr	r2, [r3, #32]
 8005f2c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005f30:	4013      	ands	r3, r2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d107      	bne.n	8005f46 <HAL_TIM_PWM_Stop+0x8e>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6a1a      	ldr	r2, [r3, #32]
 8005f4c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f50:	4013      	ands	r3, r2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10f      	bne.n	8005f76 <HAL_TIM_PWM_Stop+0xbe>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6a1a      	ldr	r2, [r3, #32]
 8005f5c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005f60:	4013      	ands	r3, r2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d107      	bne.n	8005f76 <HAL_TIM_PWM_Stop+0xbe>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0201 	bic.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d104      	bne.n	8005f86 <HAL_TIM_PWM_Stop+0xce>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f84:	e023      	b.n	8005fce <HAL_TIM_PWM_Stop+0x116>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d104      	bne.n	8005f96 <HAL_TIM_PWM_Stop+0xde>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f94:	e01b      	b.n	8005fce <HAL_TIM_PWM_Stop+0x116>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d104      	bne.n	8005fa6 <HAL_TIM_PWM_Stop+0xee>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fa4:	e013      	b.n	8005fce <HAL_TIM_PWM_Stop+0x116>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b0c      	cmp	r3, #12
 8005faa:	d104      	bne.n	8005fb6 <HAL_TIM_PWM_Stop+0xfe>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fb4:	e00b      	b.n	8005fce <HAL_TIM_PWM_Stop+0x116>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b10      	cmp	r3, #16
 8005fba:	d104      	bne.n	8005fc6 <HAL_TIM_PWM_Stop+0x10e>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fc4:	e003      	b.n	8005fce <HAL_TIM_PWM_Stop+0x116>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	40012c00 	.word	0x40012c00
 8005fdc:	40013400 	.word	0x40013400
 8005fe0:	40014000 	.word	0x40014000
 8005fe4:	40014400 	.word	0x40014400
 8005fe8:	40014800 	.word	0x40014800
 8005fec:	40015000 	.word	0x40015000

08005ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b02      	cmp	r3, #2
 8006004:	d122      	bne.n	800604c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b02      	cmp	r3, #2
 8006012:	d11b      	bne.n	800604c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0202 	mvn.w	r2, #2
 800601c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	f003 0303 	and.w	r3, r3, #3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fa7a 	bl	800652c <HAL_TIM_IC_CaptureCallback>
 8006038:	e005      	b.n	8006046 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fa6c 	bl	8006518 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fa7d 	bl	8006540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	2b04      	cmp	r3, #4
 8006058:	d122      	bne.n	80060a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b04      	cmp	r3, #4
 8006066:	d11b      	bne.n	80060a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0204 	mvn.w	r2, #4
 8006070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2202      	movs	r2, #2
 8006076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fa50 	bl	800652c <HAL_TIM_IC_CaptureCallback>
 800608c:	e005      	b.n	800609a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fa42 	bl	8006518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fa53 	bl	8006540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	2b08      	cmp	r3, #8
 80060ac:	d122      	bne.n	80060f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d11b      	bne.n	80060f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f06f 0208 	mvn.w	r2, #8
 80060c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2204      	movs	r2, #4
 80060ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fa26 	bl	800652c <HAL_TIM_IC_CaptureCallback>
 80060e0:	e005      	b.n	80060ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fa18 	bl	8006518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fa29 	bl	8006540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f003 0310 	and.w	r3, r3, #16
 80060fe:	2b10      	cmp	r3, #16
 8006100:	d122      	bne.n	8006148 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	2b10      	cmp	r3, #16
 800610e:	d11b      	bne.n	8006148 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0210 	mvn.w	r2, #16
 8006118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2208      	movs	r2, #8
 800611e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f9fc 	bl	800652c <HAL_TIM_IC_CaptureCallback>
 8006134:	e005      	b.n	8006142 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f9ee 	bl	8006518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f9ff 	bl	8006540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b01      	cmp	r3, #1
 8006154:	d10e      	bne.n	8006174 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b01      	cmp	r3, #1
 8006162:	d107      	bne.n	8006174 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f06f 0201 	mvn.w	r2, #1
 800616c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fb fab4 	bl	80016dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800617e:	2b80      	cmp	r3, #128	@ 0x80
 8006180:	d10e      	bne.n	80061a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800618c:	2b80      	cmp	r3, #128	@ 0x80
 800618e:	d107      	bne.n	80061a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 f970 	bl	8007480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061ae:	d10e      	bne.n	80061ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ba:	2b80      	cmp	r3, #128	@ 0x80
 80061bc:	d107      	bne.n	80061ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80061c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 f963 	bl	8007494 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d8:	2b40      	cmp	r3, #64	@ 0x40
 80061da:	d10e      	bne.n	80061fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e6:	2b40      	cmp	r3, #64	@ 0x40
 80061e8:	d107      	bne.n	80061fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f9ad 	bl	8006554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b20      	cmp	r3, #32
 8006206:	d10e      	bne.n	8006226 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b20      	cmp	r3, #32
 8006214:	d107      	bne.n	8006226 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f06f 0220 	mvn.w	r2, #32
 800621e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f001 f923 	bl	800746c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006230:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006234:	d10f      	bne.n	8006256 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006240:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006244:	d107      	bne.n	8006256 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800624e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 f929 	bl	80074a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006260:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006264:	d10f      	bne.n	8006286 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006270:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006274:	d107      	bne.n	8006286 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800627e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f001 f91b 	bl	80074bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006290:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006294:	d10f      	bne.n	80062b6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062a4:	d107      	bne.n	80062b6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80062ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 f90d 	bl	80074d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062c4:	d10f      	bne.n	80062e6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062d4:	d107      	bne.n	80062e6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80062de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 f8ff 	bl	80074e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062e6:	bf00      	nop
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800630a:	2302      	movs	r3, #2
 800630c:	e0ff      	b.n	800650e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b14      	cmp	r3, #20
 800631a:	f200 80f0 	bhi.w	80064fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800631e:	a201      	add	r2, pc, #4	@ (adr r2, 8006324 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	08006379 	.word	0x08006379
 8006328:	080064ff 	.word	0x080064ff
 800632c:	080064ff 	.word	0x080064ff
 8006330:	080064ff 	.word	0x080064ff
 8006334:	080063b9 	.word	0x080063b9
 8006338:	080064ff 	.word	0x080064ff
 800633c:	080064ff 	.word	0x080064ff
 8006340:	080064ff 	.word	0x080064ff
 8006344:	080063fb 	.word	0x080063fb
 8006348:	080064ff 	.word	0x080064ff
 800634c:	080064ff 	.word	0x080064ff
 8006350:	080064ff 	.word	0x080064ff
 8006354:	0800643b 	.word	0x0800643b
 8006358:	080064ff 	.word	0x080064ff
 800635c:	080064ff 	.word	0x080064ff
 8006360:	080064ff 	.word	0x080064ff
 8006364:	0800647d 	.word	0x0800647d
 8006368:	080064ff 	.word	0x080064ff
 800636c:	080064ff 	.word	0x080064ff
 8006370:	080064ff 	.word	0x080064ff
 8006374:	080064bd 	.word	0x080064bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68b9      	ldr	r1, [r7, #8]
 800637e:	4618      	mov	r0, r3
 8006380:	f000 f99a 	bl	80066b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0208 	orr.w	r2, r2, #8
 8006392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0204 	bic.w	r2, r2, #4
 80063a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6999      	ldr	r1, [r3, #24]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	691a      	ldr	r2, [r3, #16]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	619a      	str	r2, [r3, #24]
      break;
 80063b6:	e0a5      	b.n	8006504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fa14 	bl	80067ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6999      	ldr	r1, [r3, #24]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	021a      	lsls	r2, r3, #8
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	619a      	str	r2, [r3, #24]
      break;
 80063f8:	e084      	b.n	8006504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	4618      	mov	r0, r3
 8006402:	f000 fa87 	bl	8006914 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69da      	ldr	r2, [r3, #28]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f042 0208 	orr.w	r2, r2, #8
 8006414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69da      	ldr	r2, [r3, #28]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0204 	bic.w	r2, r2, #4
 8006424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69d9      	ldr	r1, [r3, #28]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	691a      	ldr	r2, [r3, #16]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	61da      	str	r2, [r3, #28]
      break;
 8006438:	e064      	b.n	8006504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	4618      	mov	r0, r3
 8006442:	f000 faf9 	bl	8006a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69da      	ldr	r2, [r3, #28]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69d9      	ldr	r1, [r3, #28]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	021a      	lsls	r2, r3, #8
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	61da      	str	r2, [r3, #28]
      break;
 800647a:	e043      	b.n	8006504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68b9      	ldr	r1, [r7, #8]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fb6c 	bl	8006b60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0208 	orr.w	r2, r2, #8
 8006496:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0204 	bic.w	r2, r2, #4
 80064a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	691a      	ldr	r2, [r3, #16]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80064ba:	e023      	b.n	8006504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fbb6 	bl	8006c34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	021a      	lsls	r2, r3, #8
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80064fc:	e002      	b.n	8006504 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	75fb      	strb	r3, [r7, #23]
      break;
 8006502:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800650c:	7dfb      	ldrb	r3, [r7, #23]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop

08006518 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a46      	ldr	r2, [pc, #280]	@ (8006694 <TIM_Base_SetConfig+0x12c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d017      	beq.n	80065b0 <TIM_Base_SetConfig+0x48>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006586:	d013      	beq.n	80065b0 <TIM_Base_SetConfig+0x48>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a43      	ldr	r2, [pc, #268]	@ (8006698 <TIM_Base_SetConfig+0x130>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00f      	beq.n	80065b0 <TIM_Base_SetConfig+0x48>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a42      	ldr	r2, [pc, #264]	@ (800669c <TIM_Base_SetConfig+0x134>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d00b      	beq.n	80065b0 <TIM_Base_SetConfig+0x48>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a41      	ldr	r2, [pc, #260]	@ (80066a0 <TIM_Base_SetConfig+0x138>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d007      	beq.n	80065b0 <TIM_Base_SetConfig+0x48>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a40      	ldr	r2, [pc, #256]	@ (80066a4 <TIM_Base_SetConfig+0x13c>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d003      	beq.n	80065b0 <TIM_Base_SetConfig+0x48>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a3f      	ldr	r2, [pc, #252]	@ (80066a8 <TIM_Base_SetConfig+0x140>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d108      	bne.n	80065c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a33      	ldr	r2, [pc, #204]	@ (8006694 <TIM_Base_SetConfig+0x12c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d023      	beq.n	8006612 <TIM_Base_SetConfig+0xaa>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065d0:	d01f      	beq.n	8006612 <TIM_Base_SetConfig+0xaa>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a30      	ldr	r2, [pc, #192]	@ (8006698 <TIM_Base_SetConfig+0x130>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d01b      	beq.n	8006612 <TIM_Base_SetConfig+0xaa>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a2f      	ldr	r2, [pc, #188]	@ (800669c <TIM_Base_SetConfig+0x134>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d017      	beq.n	8006612 <TIM_Base_SetConfig+0xaa>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a2e      	ldr	r2, [pc, #184]	@ (80066a0 <TIM_Base_SetConfig+0x138>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d013      	beq.n	8006612 <TIM_Base_SetConfig+0xaa>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a2d      	ldr	r2, [pc, #180]	@ (80066a4 <TIM_Base_SetConfig+0x13c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d00f      	beq.n	8006612 <TIM_Base_SetConfig+0xaa>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a2d      	ldr	r2, [pc, #180]	@ (80066ac <TIM_Base_SetConfig+0x144>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00b      	beq.n	8006612 <TIM_Base_SetConfig+0xaa>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a2c      	ldr	r2, [pc, #176]	@ (80066b0 <TIM_Base_SetConfig+0x148>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d007      	beq.n	8006612 <TIM_Base_SetConfig+0xaa>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a2b      	ldr	r2, [pc, #172]	@ (80066b4 <TIM_Base_SetConfig+0x14c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d003      	beq.n	8006612 <TIM_Base_SetConfig+0xaa>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a26      	ldr	r2, [pc, #152]	@ (80066a8 <TIM_Base_SetConfig+0x140>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d108      	bne.n	8006624 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a12      	ldr	r2, [pc, #72]	@ (8006694 <TIM_Base_SetConfig+0x12c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d013      	beq.n	8006678 <TIM_Base_SetConfig+0x110>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a14      	ldr	r2, [pc, #80]	@ (80066a4 <TIM_Base_SetConfig+0x13c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00f      	beq.n	8006678 <TIM_Base_SetConfig+0x110>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a14      	ldr	r2, [pc, #80]	@ (80066ac <TIM_Base_SetConfig+0x144>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00b      	beq.n	8006678 <TIM_Base_SetConfig+0x110>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a13      	ldr	r2, [pc, #76]	@ (80066b0 <TIM_Base_SetConfig+0x148>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d007      	beq.n	8006678 <TIM_Base_SetConfig+0x110>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a12      	ldr	r2, [pc, #72]	@ (80066b4 <TIM_Base_SetConfig+0x14c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d003      	beq.n	8006678 <TIM_Base_SetConfig+0x110>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a0d      	ldr	r2, [pc, #52]	@ (80066a8 <TIM_Base_SetConfig+0x140>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d103      	bne.n	8006680 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	691a      	ldr	r2, [r3, #16]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	615a      	str	r2, [r3, #20]
}
 8006686:	bf00      	nop
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40012c00 	.word	0x40012c00
 8006698:	40000400 	.word	0x40000400
 800669c:	40000800 	.word	0x40000800
 80066a0:	40000c00 	.word	0x40000c00
 80066a4:	40013400 	.word	0x40013400
 80066a8:	40015000 	.word	0x40015000
 80066ac:	40014000 	.word	0x40014000
 80066b0:	40014400 	.word	0x40014400
 80066b4:	40014800 	.word	0x40014800

080066b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	f023 0201 	bic.w	r2, r3, #1
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 0303 	bic.w	r3, r3, #3
 80066f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f023 0302 	bic.w	r3, r3, #2
 8006704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a30      	ldr	r2, [pc, #192]	@ (80067d4 <TIM_OC1_SetConfig+0x11c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d013      	beq.n	8006740 <TIM_OC1_SetConfig+0x88>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a2f      	ldr	r2, [pc, #188]	@ (80067d8 <TIM_OC1_SetConfig+0x120>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00f      	beq.n	8006740 <TIM_OC1_SetConfig+0x88>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a2e      	ldr	r2, [pc, #184]	@ (80067dc <TIM_OC1_SetConfig+0x124>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00b      	beq.n	8006740 <TIM_OC1_SetConfig+0x88>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a2d      	ldr	r2, [pc, #180]	@ (80067e0 <TIM_OC1_SetConfig+0x128>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d007      	beq.n	8006740 <TIM_OC1_SetConfig+0x88>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a2c      	ldr	r2, [pc, #176]	@ (80067e4 <TIM_OC1_SetConfig+0x12c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_OC1_SetConfig+0x88>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a2b      	ldr	r2, [pc, #172]	@ (80067e8 <TIM_OC1_SetConfig+0x130>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d10c      	bne.n	800675a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f023 0308 	bic.w	r3, r3, #8
 8006746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	4313      	orrs	r3, r2
 8006750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f023 0304 	bic.w	r3, r3, #4
 8006758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a1d      	ldr	r2, [pc, #116]	@ (80067d4 <TIM_OC1_SetConfig+0x11c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d013      	beq.n	800678a <TIM_OC1_SetConfig+0xd2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a1c      	ldr	r2, [pc, #112]	@ (80067d8 <TIM_OC1_SetConfig+0x120>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00f      	beq.n	800678a <TIM_OC1_SetConfig+0xd2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a1b      	ldr	r2, [pc, #108]	@ (80067dc <TIM_OC1_SetConfig+0x124>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00b      	beq.n	800678a <TIM_OC1_SetConfig+0xd2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a1a      	ldr	r2, [pc, #104]	@ (80067e0 <TIM_OC1_SetConfig+0x128>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d007      	beq.n	800678a <TIM_OC1_SetConfig+0xd2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a19      	ldr	r2, [pc, #100]	@ (80067e4 <TIM_OC1_SetConfig+0x12c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d003      	beq.n	800678a <TIM_OC1_SetConfig+0xd2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a18      	ldr	r2, [pc, #96]	@ (80067e8 <TIM_OC1_SetConfig+0x130>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d111      	bne.n	80067ae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	621a      	str	r2, [r3, #32]
}
 80067c8:	bf00      	nop
 80067ca:	371c      	adds	r7, #28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	40012c00 	.word	0x40012c00
 80067d8:	40013400 	.word	0x40013400
 80067dc:	40014000 	.word	0x40014000
 80067e0:	40014400 	.word	0x40014400
 80067e4:	40014800 	.word	0x40014800
 80067e8:	40015000 	.word	0x40015000

080067ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	f023 0210 	bic.w	r2, r3, #16
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800681a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800681e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	021b      	lsls	r3, r3, #8
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	4313      	orrs	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f023 0320 	bic.w	r3, r3, #32
 800683a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	011b      	lsls	r3, r3, #4
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	4313      	orrs	r3, r2
 8006846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a2c      	ldr	r2, [pc, #176]	@ (80068fc <TIM_OC2_SetConfig+0x110>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d007      	beq.n	8006860 <TIM_OC2_SetConfig+0x74>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a2b      	ldr	r2, [pc, #172]	@ (8006900 <TIM_OC2_SetConfig+0x114>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d003      	beq.n	8006860 <TIM_OC2_SetConfig+0x74>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a2a      	ldr	r2, [pc, #168]	@ (8006904 <TIM_OC2_SetConfig+0x118>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d10d      	bne.n	800687c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4313      	orrs	r3, r2
 8006872:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800687a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a1f      	ldr	r2, [pc, #124]	@ (80068fc <TIM_OC2_SetConfig+0x110>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d013      	beq.n	80068ac <TIM_OC2_SetConfig+0xc0>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a1e      	ldr	r2, [pc, #120]	@ (8006900 <TIM_OC2_SetConfig+0x114>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00f      	beq.n	80068ac <TIM_OC2_SetConfig+0xc0>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a1e      	ldr	r2, [pc, #120]	@ (8006908 <TIM_OC2_SetConfig+0x11c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00b      	beq.n	80068ac <TIM_OC2_SetConfig+0xc0>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a1d      	ldr	r2, [pc, #116]	@ (800690c <TIM_OC2_SetConfig+0x120>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d007      	beq.n	80068ac <TIM_OC2_SetConfig+0xc0>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a1c      	ldr	r2, [pc, #112]	@ (8006910 <TIM_OC2_SetConfig+0x124>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d003      	beq.n	80068ac <TIM_OC2_SetConfig+0xc0>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a17      	ldr	r2, [pc, #92]	@ (8006904 <TIM_OC2_SetConfig+0x118>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d113      	bne.n	80068d4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	621a      	str	r2, [r3, #32]
}
 80068ee:	bf00      	nop
 80068f0:	371c      	adds	r7, #28
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	40012c00 	.word	0x40012c00
 8006900:	40013400 	.word	0x40013400
 8006904:	40015000 	.word	0x40015000
 8006908:	40014000 	.word	0x40014000
 800690c:	40014400 	.word	0x40014400
 8006910:	40014800 	.word	0x40014800

08006914 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0303 	bic.w	r3, r3, #3
 800694e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a2b      	ldr	r2, [pc, #172]	@ (8006a20 <TIM_OC3_SetConfig+0x10c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d007      	beq.n	8006986 <TIM_OC3_SetConfig+0x72>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a2a      	ldr	r2, [pc, #168]	@ (8006a24 <TIM_OC3_SetConfig+0x110>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <TIM_OC3_SetConfig+0x72>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a29      	ldr	r2, [pc, #164]	@ (8006a28 <TIM_OC3_SetConfig+0x114>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d10d      	bne.n	80069a2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800698c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	021b      	lsls	r3, r3, #8
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	4313      	orrs	r3, r2
 8006998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a1e      	ldr	r2, [pc, #120]	@ (8006a20 <TIM_OC3_SetConfig+0x10c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d013      	beq.n	80069d2 <TIM_OC3_SetConfig+0xbe>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006a24 <TIM_OC3_SetConfig+0x110>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00f      	beq.n	80069d2 <TIM_OC3_SetConfig+0xbe>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a2c <TIM_OC3_SetConfig+0x118>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d00b      	beq.n	80069d2 <TIM_OC3_SetConfig+0xbe>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006a30 <TIM_OC3_SetConfig+0x11c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d007      	beq.n	80069d2 <TIM_OC3_SetConfig+0xbe>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a34 <TIM_OC3_SetConfig+0x120>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d003      	beq.n	80069d2 <TIM_OC3_SetConfig+0xbe>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a16      	ldr	r2, [pc, #88]	@ (8006a28 <TIM_OC3_SetConfig+0x114>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d113      	bne.n	80069fa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	621a      	str	r2, [r3, #32]
}
 8006a14:	bf00      	nop
 8006a16:	371c      	adds	r7, #28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	40012c00 	.word	0x40012c00
 8006a24:	40013400 	.word	0x40013400
 8006a28:	40015000 	.word	0x40015000
 8006a2c:	40014000 	.word	0x40014000
 8006a30:	40014400 	.word	0x40014400
 8006a34:	40014800 	.word	0x40014800

08006a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	021b      	lsls	r3, r3, #8
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	031b      	lsls	r3, r3, #12
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a2c      	ldr	r2, [pc, #176]	@ (8006b48 <TIM_OC4_SetConfig+0x110>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d007      	beq.n	8006aac <TIM_OC4_SetConfig+0x74>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a2b      	ldr	r2, [pc, #172]	@ (8006b4c <TIM_OC4_SetConfig+0x114>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d003      	beq.n	8006aac <TIM_OC4_SetConfig+0x74>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8006b50 <TIM_OC4_SetConfig+0x118>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d10d      	bne.n	8006ac8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	031b      	lsls	r3, r3, #12
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ac6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a1f      	ldr	r2, [pc, #124]	@ (8006b48 <TIM_OC4_SetConfig+0x110>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d013      	beq.n	8006af8 <TIM_OC4_SetConfig+0xc0>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8006b4c <TIM_OC4_SetConfig+0x114>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00f      	beq.n	8006af8 <TIM_OC4_SetConfig+0xc0>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a1e      	ldr	r2, [pc, #120]	@ (8006b54 <TIM_OC4_SetConfig+0x11c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00b      	beq.n	8006af8 <TIM_OC4_SetConfig+0xc0>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8006b58 <TIM_OC4_SetConfig+0x120>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d007      	beq.n	8006af8 <TIM_OC4_SetConfig+0xc0>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a1c      	ldr	r2, [pc, #112]	@ (8006b5c <TIM_OC4_SetConfig+0x124>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d003      	beq.n	8006af8 <TIM_OC4_SetConfig+0xc0>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a17      	ldr	r2, [pc, #92]	@ (8006b50 <TIM_OC4_SetConfig+0x118>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d113      	bne.n	8006b20 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006afe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b06:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	019b      	lsls	r3, r3, #6
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	019b      	lsls	r3, r3, #6
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40012c00 	.word	0x40012c00
 8006b4c:	40013400 	.word	0x40013400
 8006b50:	40015000 	.word	0x40015000
 8006b54:	40014000 	.word	0x40014000
 8006b58:	40014400 	.word	0x40014400
 8006b5c:	40014800 	.word	0x40014800

08006b60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006ba4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	041b      	lsls	r3, r3, #16
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a19      	ldr	r2, [pc, #100]	@ (8006c1c <TIM_OC5_SetConfig+0xbc>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d013      	beq.n	8006be2 <TIM_OC5_SetConfig+0x82>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a18      	ldr	r2, [pc, #96]	@ (8006c20 <TIM_OC5_SetConfig+0xc0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00f      	beq.n	8006be2 <TIM_OC5_SetConfig+0x82>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a17      	ldr	r2, [pc, #92]	@ (8006c24 <TIM_OC5_SetConfig+0xc4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d00b      	beq.n	8006be2 <TIM_OC5_SetConfig+0x82>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a16      	ldr	r2, [pc, #88]	@ (8006c28 <TIM_OC5_SetConfig+0xc8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d007      	beq.n	8006be2 <TIM_OC5_SetConfig+0x82>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a15      	ldr	r2, [pc, #84]	@ (8006c2c <TIM_OC5_SetConfig+0xcc>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d003      	beq.n	8006be2 <TIM_OC5_SetConfig+0x82>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a14      	ldr	r2, [pc, #80]	@ (8006c30 <TIM_OC5_SetConfig+0xd0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d109      	bne.n	8006bf6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006be8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	021b      	lsls	r3, r3, #8
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	621a      	str	r2, [r3, #32]
}
 8006c10:	bf00      	nop
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	40012c00 	.word	0x40012c00
 8006c20:	40013400 	.word	0x40013400
 8006c24:	40014000 	.word	0x40014000
 8006c28:	40014400 	.word	0x40014400
 8006c2c:	40014800 	.word	0x40014800
 8006c30:	40015000 	.word	0x40015000

08006c34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	021b      	lsls	r3, r3, #8
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	051b      	lsls	r3, r3, #20
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a1a      	ldr	r2, [pc, #104]	@ (8006cf4 <TIM_OC6_SetConfig+0xc0>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d013      	beq.n	8006cb8 <TIM_OC6_SetConfig+0x84>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a19      	ldr	r2, [pc, #100]	@ (8006cf8 <TIM_OC6_SetConfig+0xc4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00f      	beq.n	8006cb8 <TIM_OC6_SetConfig+0x84>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a18      	ldr	r2, [pc, #96]	@ (8006cfc <TIM_OC6_SetConfig+0xc8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00b      	beq.n	8006cb8 <TIM_OC6_SetConfig+0x84>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a17      	ldr	r2, [pc, #92]	@ (8006d00 <TIM_OC6_SetConfig+0xcc>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d007      	beq.n	8006cb8 <TIM_OC6_SetConfig+0x84>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a16      	ldr	r2, [pc, #88]	@ (8006d04 <TIM_OC6_SetConfig+0xd0>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d003      	beq.n	8006cb8 <TIM_OC6_SetConfig+0x84>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a15      	ldr	r2, [pc, #84]	@ (8006d08 <TIM_OC6_SetConfig+0xd4>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d109      	bne.n	8006ccc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	029b      	lsls	r3, r3, #10
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	621a      	str	r2, [r3, #32]
}
 8006ce6:	bf00      	nop
 8006ce8:	371c      	adds	r7, #28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	40012c00 	.word	0x40012c00
 8006cf8:	40013400 	.word	0x40013400
 8006cfc:	40014000 	.word	0x40014000
 8006d00:	40014400 	.word	0x40014400
 8006d04:	40014800 	.word	0x40014800
 8006d08:	40015000 	.word	0x40015000

08006d0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	f023 0201 	bic.w	r2, r3, #1
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4a28      	ldr	r2, [pc, #160]	@ (8006dd8 <TIM_TI1_SetConfig+0xcc>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d01b      	beq.n	8006d72 <TIM_TI1_SetConfig+0x66>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d40:	d017      	beq.n	8006d72 <TIM_TI1_SetConfig+0x66>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4a25      	ldr	r2, [pc, #148]	@ (8006ddc <TIM_TI1_SetConfig+0xd0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d013      	beq.n	8006d72 <TIM_TI1_SetConfig+0x66>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4a24      	ldr	r2, [pc, #144]	@ (8006de0 <TIM_TI1_SetConfig+0xd4>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00f      	beq.n	8006d72 <TIM_TI1_SetConfig+0x66>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4a23      	ldr	r2, [pc, #140]	@ (8006de4 <TIM_TI1_SetConfig+0xd8>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d00b      	beq.n	8006d72 <TIM_TI1_SetConfig+0x66>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4a22      	ldr	r2, [pc, #136]	@ (8006de8 <TIM_TI1_SetConfig+0xdc>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d007      	beq.n	8006d72 <TIM_TI1_SetConfig+0x66>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4a21      	ldr	r2, [pc, #132]	@ (8006dec <TIM_TI1_SetConfig+0xe0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d003      	beq.n	8006d72 <TIM_TI1_SetConfig+0x66>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	4a20      	ldr	r2, [pc, #128]	@ (8006df0 <TIM_TI1_SetConfig+0xe4>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d101      	bne.n	8006d76 <TIM_TI1_SetConfig+0x6a>
 8006d72:	2301      	movs	r3, #1
 8006d74:	e000      	b.n	8006d78 <TIM_TI1_SetConfig+0x6c>
 8006d76:	2300      	movs	r3, #0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d008      	beq.n	8006d8e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f023 0303 	bic.w	r3, r3, #3
 8006d82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	e003      	b.n	8006d96 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f043 0301 	orr.w	r3, r3, #1
 8006d94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f023 030a 	bic.w	r3, r3, #10
 8006db0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f003 030a 	and.w	r3, r3, #10
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	621a      	str	r2, [r3, #32]
}
 8006dca:	bf00      	nop
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40012c00 	.word	0x40012c00
 8006ddc:	40000400 	.word	0x40000400
 8006de0:	40000800 	.word	0x40000800
 8006de4:	40000c00 	.word	0x40000c00
 8006de8:	40013400 	.word	0x40013400
 8006dec:	40014000 	.word	0x40014000
 8006df0:	40015000 	.word	0x40015000

08006df4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f003 031f 	and.w	r3, r3, #31
 8006e06:	2201      	movs	r2, #1
 8006e08:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6a1a      	ldr	r2, [r3, #32]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	43db      	mvns	r3, r3
 8006e16:	401a      	ands	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a1a      	ldr	r2, [r3, #32]
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f003 031f 	and.w	r3, r3, #31
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	621a      	str	r2, [r3, #32]
}
 8006e32:	bf00      	nop
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b08a      	sub	sp, #40	@ 0x28
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e0a0      	b.n	8006f94 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7fa ff30 	bl	8001ccc <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4610      	mov	r0, r2
 8006e80:	f7ff fb72 	bl	8006568 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6818      	ldr	r0, [r3, #0]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	6819      	ldr	r1, [r3, #0]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	2203      	movs	r2, #3
 8006e92:	f7ff ff3b 	bl	8006d0c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	699a      	ldr	r2, [r3, #24]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f022 020c 	bic.w	r2, r2, #12
 8006ea4:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6999      	ldr	r1, [r3, #24]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ec6:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6812      	ldr	r2, [r2, #0]
 8006ed2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eda:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689a      	ldr	r2, [r3, #8]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006eea:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	6812      	ldr	r2, [r2, #0]
 8006ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006efa:	f023 0307 	bic.w	r3, r3, #7
 8006efe:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f042 0204 	orr.w	r2, r2, #4
 8006f0e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006f10:	2300      	movs	r3, #0
 8006f12:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006f14:	2300      	movs	r3, #0
 8006f16:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006f18:	2370      	movs	r3, #112	@ 0x70
 8006f1a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006f20:	2300      	movs	r3, #0
 8006f22:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f107 020c 	add.w	r2, r7, #12
 8006f36:	4611      	mov	r1, r2
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7ff fc57 	bl	80067ec <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6812      	ldr	r2, [r2, #0]
 8006f48:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006f4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f50:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8006f60:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3728      	adds	r7, #40	@ 0x28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d109      	bne.n	8006fc0 <HAL_TIMEx_PWMN_Start+0x24>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	bf14      	ite	ne
 8006fb8:	2301      	movne	r3, #1
 8006fba:	2300      	moveq	r3, #0
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	e022      	b.n	8007006 <HAL_TIMEx_PWMN_Start+0x6a>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d109      	bne.n	8006fda <HAL_TIMEx_PWMN_Start+0x3e>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	bf14      	ite	ne
 8006fd2:	2301      	movne	r3, #1
 8006fd4:	2300      	moveq	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	e015      	b.n	8007006 <HAL_TIMEx_PWMN_Start+0x6a>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	d109      	bne.n	8006ff4 <HAL_TIMEx_PWMN_Start+0x58>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	bf14      	ite	ne
 8006fec:	2301      	movne	r3, #1
 8006fee:	2300      	moveq	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	e008      	b.n	8007006 <HAL_TIMEx_PWMN_Start+0x6a>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	bf14      	ite	ne
 8007000:	2301      	movne	r3, #1
 8007002:	2300      	moveq	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e073      	b.n	80070f6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d104      	bne.n	800701e <HAL_TIMEx_PWMN_Start+0x82>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800701c:	e013      	b.n	8007046 <HAL_TIMEx_PWMN_Start+0xaa>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b04      	cmp	r3, #4
 8007022:	d104      	bne.n	800702e <HAL_TIMEx_PWMN_Start+0x92>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2202      	movs	r2, #2
 8007028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800702c:	e00b      	b.n	8007046 <HAL_TIMEx_PWMN_Start+0xaa>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b08      	cmp	r3, #8
 8007032:	d104      	bne.n	800703e <HAL_TIMEx_PWMN_Start+0xa2>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800703c:	e003      	b.n	8007046 <HAL_TIMEx_PWMN_Start+0xaa>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2202      	movs	r2, #2
 8007042:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2204      	movs	r2, #4
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fa52 	bl	80074f8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007062:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a25      	ldr	r2, [pc, #148]	@ (8007100 <HAL_TIMEx_PWMN_Start+0x164>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d022      	beq.n	80070b4 <HAL_TIMEx_PWMN_Start+0x118>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007076:	d01d      	beq.n	80070b4 <HAL_TIMEx_PWMN_Start+0x118>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a21      	ldr	r2, [pc, #132]	@ (8007104 <HAL_TIMEx_PWMN_Start+0x168>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d018      	beq.n	80070b4 <HAL_TIMEx_PWMN_Start+0x118>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a20      	ldr	r2, [pc, #128]	@ (8007108 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d013      	beq.n	80070b4 <HAL_TIMEx_PWMN_Start+0x118>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a1e      	ldr	r2, [pc, #120]	@ (800710c <HAL_TIMEx_PWMN_Start+0x170>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00e      	beq.n	80070b4 <HAL_TIMEx_PWMN_Start+0x118>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a1d      	ldr	r2, [pc, #116]	@ (8007110 <HAL_TIMEx_PWMN_Start+0x174>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d009      	beq.n	80070b4 <HAL_TIMEx_PWMN_Start+0x118>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007114 <HAL_TIMEx_PWMN_Start+0x178>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d004      	beq.n	80070b4 <HAL_TIMEx_PWMN_Start+0x118>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007118 <HAL_TIMEx_PWMN_Start+0x17c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d115      	bne.n	80070e0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	4b18      	ldr	r3, [pc, #96]	@ (800711c <HAL_TIMEx_PWMN_Start+0x180>)
 80070bc:	4013      	ands	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b06      	cmp	r3, #6
 80070c4:	d015      	beq.n	80070f2 <HAL_TIMEx_PWMN_Start+0x156>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070cc:	d011      	beq.n	80070f2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f042 0201 	orr.w	r2, r2, #1
 80070dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070de:	e008      	b.n	80070f2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0201 	orr.w	r2, r2, #1
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	e000      	b.n	80070f4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	40012c00 	.word	0x40012c00
 8007104:	40000400 	.word	0x40000400
 8007108:	40000800 	.word	0x40000800
 800710c:	40000c00 	.word	0x40000c00
 8007110:	40013400 	.word	0x40013400
 8007114:	40014000 	.word	0x40014000
 8007118:	40015000 	.word	0x40015000
 800711c:	00010007 	.word	0x00010007

08007120 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2200      	movs	r2, #0
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	4618      	mov	r0, r3
 8007134:	f000 f9e0 	bl	80074f8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6a1a      	ldr	r2, [r3, #32]
 800713e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007142:	4013      	ands	r3, r2
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10f      	bne.n	8007168 <HAL_TIMEx_PWMN_Stop+0x48>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6a1a      	ldr	r2, [r3, #32]
 800714e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007152:	4013      	ands	r3, r2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d107      	bne.n	8007168 <HAL_TIMEx_PWMN_Stop+0x48>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007166:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6a1a      	ldr	r2, [r3, #32]
 800716e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007172:	4013      	ands	r3, r2
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10f      	bne.n	8007198 <HAL_TIMEx_PWMN_Stop+0x78>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6a1a      	ldr	r2, [r3, #32]
 800717e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007182:	4013      	ands	r3, r2
 8007184:	2b00      	cmp	r3, #0
 8007186:	d107      	bne.n	8007198 <HAL_TIMEx_PWMN_Stop+0x78>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0201 	bic.w	r2, r2, #1
 8007196:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d104      	bne.n	80071a8 <HAL_TIMEx_PWMN_Stop+0x88>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071a6:	e013      	b.n	80071d0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d104      	bne.n	80071b8 <HAL_TIMEx_PWMN_Stop+0x98>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071b6:	e00b      	b.n	80071d0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2b08      	cmp	r3, #8
 80071bc:	d104      	bne.n	80071c8 <HAL_TIMEx_PWMN_Stop+0xa8>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071c6:	e003      	b.n	80071d0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d101      	bne.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071f0:	2302      	movs	r3, #2
 80071f2:	e074      	b.n	80072de <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a34      	ldr	r2, [pc, #208]	@ (80072ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d009      	beq.n	8007232 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a33      	ldr	r2, [pc, #204]	@ (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d004      	beq.n	8007232 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a31      	ldr	r2, [pc, #196]	@ (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d108      	bne.n	8007244 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007238:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	4313      	orrs	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800724a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800724e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a21      	ldr	r2, [pc, #132]	@ (80072ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d022      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007274:	d01d      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a1f      	ldr	r2, [pc, #124]	@ (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d018      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a1d      	ldr	r2, [pc, #116]	@ (80072fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d013      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a1c      	ldr	r2, [pc, #112]	@ (8007300 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d00e      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a15      	ldr	r2, [pc, #84]	@ (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d009      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a18      	ldr	r2, [pc, #96]	@ (8007304 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d004      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a11      	ldr	r2, [pc, #68]	@ (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d10c      	bne.n	80072cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	40012c00 	.word	0x40012c00
 80072f0:	40013400 	.word	0x40013400
 80072f4:	40015000 	.word	0x40015000
 80072f8:	40000400 	.word	0x40000400
 80072fc:	40000800 	.word	0x40000800
 8007300:	40000c00 	.word	0x40000c00
 8007304:	40014000 	.word	0x40014000

08007308 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800731c:	2b01      	cmp	r3, #1
 800731e:	d101      	bne.n	8007324 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007320:	2302      	movs	r3, #2
 8007322:	e096      	b.n	8007452 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	4313      	orrs	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	4313      	orrs	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4313      	orrs	r3, r2
 8007362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	4313      	orrs	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	4313      	orrs	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738a:	4313      	orrs	r3, r2
 800738c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	041b      	lsls	r3, r3, #16
 800739a:	4313      	orrs	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a2f      	ldr	r2, [pc, #188]	@ (8007460 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d009      	beq.n	80073bc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a2d      	ldr	r2, [pc, #180]	@ (8007464 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d004      	beq.n	80073bc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a2c      	ldr	r2, [pc, #176]	@ (8007468 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d106      	bne.n	80073ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a24      	ldr	r2, [pc, #144]	@ (8007460 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d009      	beq.n	80073e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a22      	ldr	r2, [pc, #136]	@ (8007464 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d004      	beq.n	80073e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a21      	ldr	r2, [pc, #132]	@ (8007468 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d12b      	bne.n	8007440 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f2:	051b      	lsls	r3, r3, #20
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007410:	4313      	orrs	r3, r2
 8007412:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a11      	ldr	r2, [pc, #68]	@ (8007460 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d009      	beq.n	8007432 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a10      	ldr	r2, [pc, #64]	@ (8007464 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d004      	beq.n	8007432 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a0e      	ldr	r2, [pc, #56]	@ (8007468 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d106      	bne.n	8007440 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743c:	4313      	orrs	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	40012c00 	.word	0x40012c00
 8007464:	40013400 	.word	0x40013400
 8007468:	40015000 	.word	0x40015000

0800746c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f003 031f 	and.w	r3, r3, #31
 800750a:	2204      	movs	r2, #4
 800750c:	fa02 f303 	lsl.w	r3, r2, r3
 8007510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a1a      	ldr	r2, [r3, #32]
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	43db      	mvns	r3, r3
 800751a:	401a      	ands	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a1a      	ldr	r2, [r3, #32]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f003 031f 	and.w	r3, r3, #31
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	fa01 f303 	lsl.w	r3, r1, r3
 8007530:	431a      	orrs	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	621a      	str	r2, [r3, #32]
}
 8007536:	bf00      	nop
 8007538:	371c      	adds	r7, #28
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e042      	b.n	80075da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800755a:	2b00      	cmp	r3, #0
 800755c:	d106      	bne.n	800756c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7fa fd12 	bl	8001f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2224      	movs	r2, #36	@ 0x24
 8007570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 0201 	bic.w	r2, r2, #1
 8007582:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fc51 	bl	8007e2c <UART_SetConfig>
 800758a:	4603      	mov	r3, r0
 800758c:	2b01      	cmp	r3, #1
 800758e:	d101      	bne.n	8007594 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e022      	b.n	80075da <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007598:	2b00      	cmp	r3, #0
 800759a:	d002      	beq.n	80075a2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 ff41 	bl	8008424 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689a      	ldr	r2, [r3, #8]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f042 0201 	orr.w	r2, r2, #1
 80075d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 ffc8 	bl	8008568 <UART_CheckIdleState>
 80075d8:	4603      	mov	r3, r0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b08a      	sub	sp, #40	@ 0x28
 80075e6:	af02      	add	r7, sp, #8
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	60b9      	str	r1, [r7, #8]
 80075ec:	603b      	str	r3, [r7, #0]
 80075ee:	4613      	mov	r3, r2
 80075f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075f8:	2b20      	cmp	r3, #32
 80075fa:	f040 8083 	bne.w	8007704 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <HAL_UART_Transmit+0x28>
 8007604:	88fb      	ldrh	r3, [r7, #6]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e07b      	b.n	8007706 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <HAL_UART_Transmit+0x3a>
 8007618:	2302      	movs	r3, #2
 800761a:	e074      	b.n	8007706 <HAL_UART_Transmit+0x124>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2221      	movs	r2, #33	@ 0x21
 8007630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007634:	f7fb f866 	bl	8002704 <HAL_GetTick>
 8007638:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	88fa      	ldrh	r2, [r7, #6]
 800763e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	88fa      	ldrh	r2, [r7, #6]
 8007646:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007652:	d108      	bne.n	8007666 <HAL_UART_Transmit+0x84>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d104      	bne.n	8007666 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800765c:	2300      	movs	r3, #0
 800765e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	61bb      	str	r3, [r7, #24]
 8007664:	e003      	b.n	800766e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800766a:	2300      	movs	r3, #0
 800766c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8007676:	e02c      	b.n	80076d2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2200      	movs	r2, #0
 8007680:	2180      	movs	r1, #128	@ 0x80
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 ffbb 	bl	80085fe <UART_WaitOnFlagUntilTimeout>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e039      	b.n	8007706 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10b      	bne.n	80076b0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	461a      	mov	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	3302      	adds	r3, #2
 80076ac:	61bb      	str	r3, [r7, #24]
 80076ae:	e007      	b.n	80076c0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	781a      	ldrb	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	3301      	adds	r3, #1
 80076be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1cc      	bne.n	8007678 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2200      	movs	r2, #0
 80076e6:	2140      	movs	r1, #64	@ 0x40
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 ff88 	bl	80085fe <UART_WaitOnFlagUntilTimeout>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e006      	b.n	8007706 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	e000      	b.n	8007706 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007704:	2302      	movs	r3, #2
  }
}
 8007706:	4618      	mov	r0, r3
 8007708:	3720      	adds	r7, #32
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
	...

08007710 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08a      	sub	sp, #40	@ 0x28
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	4613      	mov	r3, r2
 800771c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007724:	2b20      	cmp	r3, #32
 8007726:	d142      	bne.n	80077ae <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d002      	beq.n	8007734 <HAL_UART_Receive_IT+0x24>
 800772e:	88fb      	ldrh	r3, [r7, #6]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e03b      	b.n	80077b0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800773e:	2b01      	cmp	r3, #1
 8007740:	d101      	bne.n	8007746 <HAL_UART_Receive_IT+0x36>
 8007742:	2302      	movs	r3, #2
 8007744:	e034      	b.n	80077b0 <HAL_UART_Receive_IT+0xa0>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a17      	ldr	r2, [pc, #92]	@ (80077b8 <HAL_UART_Receive_IT+0xa8>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d01f      	beq.n	800779e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d018      	beq.n	800779e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	613b      	str	r3, [r7, #16]
   return(result);
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007780:	627b      	str	r3, [r7, #36]	@ 0x24
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778a:	623b      	str	r3, [r7, #32]
 800778c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	69f9      	ldr	r1, [r7, #28]
 8007790:	6a3a      	ldr	r2, [r7, #32]
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	61bb      	str	r3, [r7, #24]
   return(result);
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e6      	bne.n	800776c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800779e:	88fb      	ldrh	r3, [r7, #6]
 80077a0:	461a      	mov	r2, r3
 80077a2:	68b9      	ldr	r1, [r7, #8]
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 fff3 	bl	8008790 <UART_Start_Receive_IT>
 80077aa:	4603      	mov	r3, r0
 80077ac:	e000      	b.n	80077b0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80077ae:	2302      	movs	r3, #2
  }
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3728      	adds	r7, #40	@ 0x28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	40008000 	.word	0x40008000

080077bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b0ba      	sub	sp, #232	@ 0xe8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80077e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80077ea:	4013      	ands	r3, r2
 80077ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80077f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d11b      	bne.n	8007830 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077fc:	f003 0320 	and.w	r3, r3, #32
 8007800:	2b00      	cmp	r3, #0
 8007802:	d015      	beq.n	8007830 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007808:	f003 0320 	and.w	r3, r3, #32
 800780c:	2b00      	cmp	r3, #0
 800780e:	d105      	bne.n	800781c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d009      	beq.n	8007830 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 82d6 	beq.w	8007dd2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
      }
      return;
 800782e:	e2d0      	b.n	8007dd2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007830:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 811f 	beq.w	8007a78 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800783a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800783e:	4b8b      	ldr	r3, [pc, #556]	@ (8007a6c <HAL_UART_IRQHandler+0x2b0>)
 8007840:	4013      	ands	r3, r2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d106      	bne.n	8007854 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007846:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800784a:	4b89      	ldr	r3, [pc, #548]	@ (8007a70 <HAL_UART_IRQHandler+0x2b4>)
 800784c:	4013      	ands	r3, r2
 800784e:	2b00      	cmp	r3, #0
 8007850:	f000 8112 	beq.w	8007a78 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	d011      	beq.n	8007884 <HAL_UART_IRQHandler+0xc8>
 8007860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00b      	beq.n	8007884 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2201      	movs	r2, #1
 8007872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800787a:	f043 0201 	orr.w	r2, r3, #1
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d011      	beq.n	80078b4 <HAL_UART_IRQHandler+0xf8>
 8007890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00b      	beq.n	80078b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2202      	movs	r2, #2
 80078a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078aa:	f043 0204 	orr.w	r2, r3, #4
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078b8:	f003 0304 	and.w	r3, r3, #4
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d011      	beq.n	80078e4 <HAL_UART_IRQHandler+0x128>
 80078c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00b      	beq.n	80078e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2204      	movs	r2, #4
 80078d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078da:	f043 0202 	orr.w	r2, r3, #2
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078e8:	f003 0308 	and.w	r3, r3, #8
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d017      	beq.n	8007920 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078f4:	f003 0320 	and.w	r3, r3, #32
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d105      	bne.n	8007908 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80078fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007900:	4b5a      	ldr	r3, [pc, #360]	@ (8007a6c <HAL_UART_IRQHandler+0x2b0>)
 8007902:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00b      	beq.n	8007920 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2208      	movs	r2, #8
 800790e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007916:	f043 0208 	orr.w	r2, r3, #8
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007924:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007928:	2b00      	cmp	r3, #0
 800792a:	d012      	beq.n	8007952 <HAL_UART_IRQHandler+0x196>
 800792c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007930:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00c      	beq.n	8007952 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007940:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007948:	f043 0220 	orr.w	r2, r3, #32
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 823c 	beq.w	8007dd6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800795e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007962:	f003 0320 	and.w	r3, r3, #32
 8007966:	2b00      	cmp	r3, #0
 8007968:	d013      	beq.n	8007992 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800796a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800796e:	f003 0320 	and.w	r3, r3, #32
 8007972:	2b00      	cmp	r3, #0
 8007974:	d105      	bne.n	8007982 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800797a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d007      	beq.n	8007992 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007998:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a6:	2b40      	cmp	r3, #64	@ 0x40
 80079a8:	d005      	beq.n	80079b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d04f      	beq.n	8007a56 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 f814 	bl	80089e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c6:	2b40      	cmp	r3, #64	@ 0x40
 80079c8:	d141      	bne.n	8007a4e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3308      	adds	r3, #8
 80079d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80079e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3308      	adds	r3, #8
 80079f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80079f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80079fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a06:	e841 2300 	strex	r3, r2, [r1]
 8007a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1d9      	bne.n	80079ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d013      	beq.n	8007a46 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a22:	4a14      	ldr	r2, [pc, #80]	@ (8007a74 <HAL_UART_IRQHandler+0x2b8>)
 8007a24:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fc fc24 	bl	8004278 <HAL_DMA_Abort_IT>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d017      	beq.n	8007a66 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8007a40:	4610      	mov	r0, r2
 8007a42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a44:	e00f      	b.n	8007a66 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f9da 	bl	8007e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a4c:	e00b      	b.n	8007a66 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f9d6 	bl	8007e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a54:	e007      	b.n	8007a66 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f9d2 	bl	8007e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8007a64:	e1b7      	b.n	8007dd6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a66:	bf00      	nop
    return;
 8007a68:	e1b5      	b.n	8007dd6 <HAL_UART_IRQHandler+0x61a>
 8007a6a:	bf00      	nop
 8007a6c:	10000001 	.word	0x10000001
 8007a70:	04000120 	.word	0x04000120
 8007a74:	08008ab1 	.word	0x08008ab1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	f040 814a 	bne.w	8007d16 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a86:	f003 0310 	and.w	r3, r3, #16
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 8143 	beq.w	8007d16 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a94:	f003 0310 	and.w	r3, r3, #16
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 813c 	beq.w	8007d16 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2210      	movs	r2, #16
 8007aa4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ab0:	2b40      	cmp	r3, #64	@ 0x40
 8007ab2:	f040 80b5 	bne.w	8007c20 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ac2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 8187 	beq.w	8007dda <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	f080 817f 	bcs.w	8007dda <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ae2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f040 8086 	bne.w	8007c04 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007b2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1da      	bne.n	8007af8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3308      	adds	r3, #8
 8007b48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b54:	f023 0301 	bic.w	r3, r3, #1
 8007b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3308      	adds	r3, #8
 8007b62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e1      	bne.n	8007b42 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3308      	adds	r3, #8
 8007b84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ba2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ba8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007bb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e3      	bne.n	8007b7e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bd4:	f023 0310 	bic.w	r3, r3, #16
 8007bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	461a      	mov	r2, r3
 8007be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007be6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007be8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bee:	e841 2300 	strex	r3, r2, [r1]
 8007bf2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007bf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1e4      	bne.n	8007bc4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fc fae1 	bl	80041c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	4619      	mov	r1, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f8fb 	bl	8007e14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c1e:	e0dc      	b.n	8007dda <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 80ce 	beq.w	8007dde <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007c42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 80c9 	beq.w	8007dde <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c54:	e853 3f00 	ldrex	r3, [r3]
 8007c58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c70:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e4      	bne.n	8007c4c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3308      	adds	r3, #8
 8007c88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8c:	e853 3f00 	ldrex	r3, [r3]
 8007c90:	623b      	str	r3, [r7, #32]
   return(result);
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c98:	f023 0301 	bic.w	r3, r3, #1
 8007c9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007caa:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e1      	bne.n	8007c82 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	e853 3f00 	ldrex	r3, [r3]
 8007cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 0310 	bic.w	r3, r3, #16
 8007ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007cf4:	61fb      	str	r3, [r7, #28]
 8007cf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf8:	69b9      	ldr	r1, [r7, #24]
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	e841 2300 	strex	r3, r2, [r1]
 8007d00:	617b      	str	r3, [r7, #20]
   return(result);
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1e4      	bne.n	8007cd2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f880 	bl	8007e14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d14:	e063      	b.n	8007dde <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00e      	beq.n	8007d40 <HAL_UART_IRQHandler+0x584>
 8007d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d008      	beq.n	8007d40 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007d36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f001 fb57 	bl	80093ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d3e:	e051      	b.n	8007de4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d014      	beq.n	8007d76 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d105      	bne.n	8007d64 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d008      	beq.n	8007d76 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d03a      	beq.n	8007de2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	4798      	blx	r3
    }
    return;
 8007d74:	e035      	b.n	8007de2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d009      	beq.n	8007d96 <HAL_UART_IRQHandler+0x5da>
 8007d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fea4 	bl	8008adc <UART_EndTransmit_IT>
    return;
 8007d94:	e026      	b.n	8007de4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d009      	beq.n	8007db6 <HAL_UART_IRQHandler+0x5fa>
 8007da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007da6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f001 fb30 	bl	8009414 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007db4:	e016      	b.n	8007de4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d010      	beq.n	8007de4 <HAL_UART_IRQHandler+0x628>
 8007dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	da0c      	bge.n	8007de4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f001 fb18 	bl	8009400 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dd0:	e008      	b.n	8007de4 <HAL_UART_IRQHandler+0x628>
      return;
 8007dd2:	bf00      	nop
 8007dd4:	e006      	b.n	8007de4 <HAL_UART_IRQHandler+0x628>
    return;
 8007dd6:	bf00      	nop
 8007dd8:	e004      	b.n	8007de4 <HAL_UART_IRQHandler+0x628>
      return;
 8007dda:	bf00      	nop
 8007ddc:	e002      	b.n	8007de4 <HAL_UART_IRQHandler+0x628>
      return;
 8007dde:	bf00      	nop
 8007de0:	e000      	b.n	8007de4 <HAL_UART_IRQHandler+0x628>
    return;
 8007de2:	bf00      	nop
  }
}
 8007de4:	37e8      	adds	r7, #232	@ 0xe8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop

08007dec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e30:	b08c      	sub	sp, #48	@ 0x30
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	689a      	ldr	r2, [r3, #8]
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	431a      	orrs	r2, r3
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	4baa      	ldr	r3, [pc, #680]	@ (8008104 <UART_SetConfig+0x2d8>)
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	6812      	ldr	r2, [r2, #0]
 8007e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e64:	430b      	orrs	r3, r1
 8007e66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	68da      	ldr	r2, [r3, #12]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a9f      	ldr	r2, [pc, #636]	@ (8008108 <UART_SetConfig+0x2dc>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d004      	beq.n	8007e98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e94:	4313      	orrs	r3, r2
 8007e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007ea2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	6812      	ldr	r2, [r2, #0]
 8007eaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007eac:	430b      	orrs	r3, r1
 8007eae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb6:	f023 010f 	bic.w	r1, r3, #15
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a90      	ldr	r2, [pc, #576]	@ (800810c <UART_SetConfig+0x2e0>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d125      	bne.n	8007f1c <UART_SetConfig+0xf0>
 8007ed0:	4b8f      	ldr	r3, [pc, #572]	@ (8008110 <UART_SetConfig+0x2e4>)
 8007ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ed6:	f003 0303 	and.w	r3, r3, #3
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	d81a      	bhi.n	8007f14 <UART_SetConfig+0xe8>
 8007ede:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee4 <UART_SetConfig+0xb8>)
 8007ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee4:	08007ef5 	.word	0x08007ef5
 8007ee8:	08007f05 	.word	0x08007f05
 8007eec:	08007efd 	.word	0x08007efd
 8007ef0:	08007f0d 	.word	0x08007f0d
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007efa:	e116      	b.n	800812a <UART_SetConfig+0x2fe>
 8007efc:	2302      	movs	r3, #2
 8007efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f02:	e112      	b.n	800812a <UART_SetConfig+0x2fe>
 8007f04:	2304      	movs	r3, #4
 8007f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f0a:	e10e      	b.n	800812a <UART_SetConfig+0x2fe>
 8007f0c:	2308      	movs	r3, #8
 8007f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f12:	e10a      	b.n	800812a <UART_SetConfig+0x2fe>
 8007f14:	2310      	movs	r3, #16
 8007f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f1a:	e106      	b.n	800812a <UART_SetConfig+0x2fe>
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a7c      	ldr	r2, [pc, #496]	@ (8008114 <UART_SetConfig+0x2e8>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d138      	bne.n	8007f98 <UART_SetConfig+0x16c>
 8007f26:	4b7a      	ldr	r3, [pc, #488]	@ (8008110 <UART_SetConfig+0x2e4>)
 8007f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f2c:	f003 030c 	and.w	r3, r3, #12
 8007f30:	2b0c      	cmp	r3, #12
 8007f32:	d82d      	bhi.n	8007f90 <UART_SetConfig+0x164>
 8007f34:	a201      	add	r2, pc, #4	@ (adr r2, 8007f3c <UART_SetConfig+0x110>)
 8007f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3a:	bf00      	nop
 8007f3c:	08007f71 	.word	0x08007f71
 8007f40:	08007f91 	.word	0x08007f91
 8007f44:	08007f91 	.word	0x08007f91
 8007f48:	08007f91 	.word	0x08007f91
 8007f4c:	08007f81 	.word	0x08007f81
 8007f50:	08007f91 	.word	0x08007f91
 8007f54:	08007f91 	.word	0x08007f91
 8007f58:	08007f91 	.word	0x08007f91
 8007f5c:	08007f79 	.word	0x08007f79
 8007f60:	08007f91 	.word	0x08007f91
 8007f64:	08007f91 	.word	0x08007f91
 8007f68:	08007f91 	.word	0x08007f91
 8007f6c:	08007f89 	.word	0x08007f89
 8007f70:	2300      	movs	r3, #0
 8007f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f76:	e0d8      	b.n	800812a <UART_SetConfig+0x2fe>
 8007f78:	2302      	movs	r3, #2
 8007f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f7e:	e0d4      	b.n	800812a <UART_SetConfig+0x2fe>
 8007f80:	2304      	movs	r3, #4
 8007f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f86:	e0d0      	b.n	800812a <UART_SetConfig+0x2fe>
 8007f88:	2308      	movs	r3, #8
 8007f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8e:	e0cc      	b.n	800812a <UART_SetConfig+0x2fe>
 8007f90:	2310      	movs	r3, #16
 8007f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f96:	e0c8      	b.n	800812a <UART_SetConfig+0x2fe>
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a5e      	ldr	r2, [pc, #376]	@ (8008118 <UART_SetConfig+0x2ec>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d125      	bne.n	8007fee <UART_SetConfig+0x1c2>
 8007fa2:	4b5b      	ldr	r3, [pc, #364]	@ (8008110 <UART_SetConfig+0x2e4>)
 8007fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fa8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007fac:	2b30      	cmp	r3, #48	@ 0x30
 8007fae:	d016      	beq.n	8007fde <UART_SetConfig+0x1b2>
 8007fb0:	2b30      	cmp	r3, #48	@ 0x30
 8007fb2:	d818      	bhi.n	8007fe6 <UART_SetConfig+0x1ba>
 8007fb4:	2b20      	cmp	r3, #32
 8007fb6:	d00a      	beq.n	8007fce <UART_SetConfig+0x1a2>
 8007fb8:	2b20      	cmp	r3, #32
 8007fba:	d814      	bhi.n	8007fe6 <UART_SetConfig+0x1ba>
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <UART_SetConfig+0x19a>
 8007fc0:	2b10      	cmp	r3, #16
 8007fc2:	d008      	beq.n	8007fd6 <UART_SetConfig+0x1aa>
 8007fc4:	e00f      	b.n	8007fe6 <UART_SetConfig+0x1ba>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fcc:	e0ad      	b.n	800812a <UART_SetConfig+0x2fe>
 8007fce:	2302      	movs	r3, #2
 8007fd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fd4:	e0a9      	b.n	800812a <UART_SetConfig+0x2fe>
 8007fd6:	2304      	movs	r3, #4
 8007fd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fdc:	e0a5      	b.n	800812a <UART_SetConfig+0x2fe>
 8007fde:	2308      	movs	r3, #8
 8007fe0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fe4:	e0a1      	b.n	800812a <UART_SetConfig+0x2fe>
 8007fe6:	2310      	movs	r3, #16
 8007fe8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fec:	e09d      	b.n	800812a <UART_SetConfig+0x2fe>
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a4a      	ldr	r2, [pc, #296]	@ (800811c <UART_SetConfig+0x2f0>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d125      	bne.n	8008044 <UART_SetConfig+0x218>
 8007ff8:	4b45      	ldr	r3, [pc, #276]	@ (8008110 <UART_SetConfig+0x2e4>)
 8007ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ffe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008002:	2bc0      	cmp	r3, #192	@ 0xc0
 8008004:	d016      	beq.n	8008034 <UART_SetConfig+0x208>
 8008006:	2bc0      	cmp	r3, #192	@ 0xc0
 8008008:	d818      	bhi.n	800803c <UART_SetConfig+0x210>
 800800a:	2b80      	cmp	r3, #128	@ 0x80
 800800c:	d00a      	beq.n	8008024 <UART_SetConfig+0x1f8>
 800800e:	2b80      	cmp	r3, #128	@ 0x80
 8008010:	d814      	bhi.n	800803c <UART_SetConfig+0x210>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <UART_SetConfig+0x1f0>
 8008016:	2b40      	cmp	r3, #64	@ 0x40
 8008018:	d008      	beq.n	800802c <UART_SetConfig+0x200>
 800801a:	e00f      	b.n	800803c <UART_SetConfig+0x210>
 800801c:	2300      	movs	r3, #0
 800801e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008022:	e082      	b.n	800812a <UART_SetConfig+0x2fe>
 8008024:	2302      	movs	r3, #2
 8008026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800802a:	e07e      	b.n	800812a <UART_SetConfig+0x2fe>
 800802c:	2304      	movs	r3, #4
 800802e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008032:	e07a      	b.n	800812a <UART_SetConfig+0x2fe>
 8008034:	2308      	movs	r3, #8
 8008036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800803a:	e076      	b.n	800812a <UART_SetConfig+0x2fe>
 800803c:	2310      	movs	r3, #16
 800803e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008042:	e072      	b.n	800812a <UART_SetConfig+0x2fe>
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a35      	ldr	r2, [pc, #212]	@ (8008120 <UART_SetConfig+0x2f4>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d12a      	bne.n	80080a4 <UART_SetConfig+0x278>
 800804e:	4b30      	ldr	r3, [pc, #192]	@ (8008110 <UART_SetConfig+0x2e4>)
 8008050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008054:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008058:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800805c:	d01a      	beq.n	8008094 <UART_SetConfig+0x268>
 800805e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008062:	d81b      	bhi.n	800809c <UART_SetConfig+0x270>
 8008064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008068:	d00c      	beq.n	8008084 <UART_SetConfig+0x258>
 800806a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800806e:	d815      	bhi.n	800809c <UART_SetConfig+0x270>
 8008070:	2b00      	cmp	r3, #0
 8008072:	d003      	beq.n	800807c <UART_SetConfig+0x250>
 8008074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008078:	d008      	beq.n	800808c <UART_SetConfig+0x260>
 800807a:	e00f      	b.n	800809c <UART_SetConfig+0x270>
 800807c:	2300      	movs	r3, #0
 800807e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008082:	e052      	b.n	800812a <UART_SetConfig+0x2fe>
 8008084:	2302      	movs	r3, #2
 8008086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800808a:	e04e      	b.n	800812a <UART_SetConfig+0x2fe>
 800808c:	2304      	movs	r3, #4
 800808e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008092:	e04a      	b.n	800812a <UART_SetConfig+0x2fe>
 8008094:	2308      	movs	r3, #8
 8008096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800809a:	e046      	b.n	800812a <UART_SetConfig+0x2fe>
 800809c:	2310      	movs	r3, #16
 800809e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080a2:	e042      	b.n	800812a <UART_SetConfig+0x2fe>
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a17      	ldr	r2, [pc, #92]	@ (8008108 <UART_SetConfig+0x2dc>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d13a      	bne.n	8008124 <UART_SetConfig+0x2f8>
 80080ae:	4b18      	ldr	r3, [pc, #96]	@ (8008110 <UART_SetConfig+0x2e4>)
 80080b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80080b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080bc:	d01a      	beq.n	80080f4 <UART_SetConfig+0x2c8>
 80080be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080c2:	d81b      	bhi.n	80080fc <UART_SetConfig+0x2d0>
 80080c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080c8:	d00c      	beq.n	80080e4 <UART_SetConfig+0x2b8>
 80080ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080ce:	d815      	bhi.n	80080fc <UART_SetConfig+0x2d0>
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <UART_SetConfig+0x2b0>
 80080d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080d8:	d008      	beq.n	80080ec <UART_SetConfig+0x2c0>
 80080da:	e00f      	b.n	80080fc <UART_SetConfig+0x2d0>
 80080dc:	2300      	movs	r3, #0
 80080de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080e2:	e022      	b.n	800812a <UART_SetConfig+0x2fe>
 80080e4:	2302      	movs	r3, #2
 80080e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ea:	e01e      	b.n	800812a <UART_SetConfig+0x2fe>
 80080ec:	2304      	movs	r3, #4
 80080ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080f2:	e01a      	b.n	800812a <UART_SetConfig+0x2fe>
 80080f4:	2308      	movs	r3, #8
 80080f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080fa:	e016      	b.n	800812a <UART_SetConfig+0x2fe>
 80080fc:	2310      	movs	r3, #16
 80080fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008102:	e012      	b.n	800812a <UART_SetConfig+0x2fe>
 8008104:	cfff69f3 	.word	0xcfff69f3
 8008108:	40008000 	.word	0x40008000
 800810c:	40013800 	.word	0x40013800
 8008110:	40021000 	.word	0x40021000
 8008114:	40004400 	.word	0x40004400
 8008118:	40004800 	.word	0x40004800
 800811c:	40004c00 	.word	0x40004c00
 8008120:	40005000 	.word	0x40005000
 8008124:	2310      	movs	r3, #16
 8008126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4aae      	ldr	r2, [pc, #696]	@ (80083e8 <UART_SetConfig+0x5bc>)
 8008130:	4293      	cmp	r3, r2
 8008132:	f040 8097 	bne.w	8008264 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008136:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800813a:	2b08      	cmp	r3, #8
 800813c:	d823      	bhi.n	8008186 <UART_SetConfig+0x35a>
 800813e:	a201      	add	r2, pc, #4	@ (adr r2, 8008144 <UART_SetConfig+0x318>)
 8008140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008144:	08008169 	.word	0x08008169
 8008148:	08008187 	.word	0x08008187
 800814c:	08008171 	.word	0x08008171
 8008150:	08008187 	.word	0x08008187
 8008154:	08008177 	.word	0x08008177
 8008158:	08008187 	.word	0x08008187
 800815c:	08008187 	.word	0x08008187
 8008160:	08008187 	.word	0x08008187
 8008164:	0800817f 	.word	0x0800817f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008168:	f7fd f970 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 800816c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800816e:	e010      	b.n	8008192 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008170:	4b9e      	ldr	r3, [pc, #632]	@ (80083ec <UART_SetConfig+0x5c0>)
 8008172:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008174:	e00d      	b.n	8008192 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008176:	f7fd f8fb 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 800817a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800817c:	e009      	b.n	8008192 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800817e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008182:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008184:	e005      	b.n	8008192 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008186:	2300      	movs	r3, #0
 8008188:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008190:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 8130 	beq.w	80083fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800819e:	4a94      	ldr	r2, [pc, #592]	@ (80083f0 <UART_SetConfig+0x5c4>)
 80081a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081a4:	461a      	mov	r2, r3
 80081a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	4613      	mov	r3, r2
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	4413      	add	r3, r2
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d305      	bcc.n	80081ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d903      	bls.n	80081d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80081d0:	e113      	b.n	80083fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d4:	2200      	movs	r2, #0
 80081d6:	60bb      	str	r3, [r7, #8]
 80081d8:	60fa      	str	r2, [r7, #12]
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081de:	4a84      	ldr	r2, [pc, #528]	@ (80083f0 <UART_SetConfig+0x5c4>)
 80081e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	2200      	movs	r2, #0
 80081e8:	603b      	str	r3, [r7, #0]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081f4:	f7f8 fd80 	bl	8000cf8 <__aeabi_uldivmod>
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	4610      	mov	r0, r2
 80081fe:	4619      	mov	r1, r3
 8008200:	f04f 0200 	mov.w	r2, #0
 8008204:	f04f 0300 	mov.w	r3, #0
 8008208:	020b      	lsls	r3, r1, #8
 800820a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800820e:	0202      	lsls	r2, r0, #8
 8008210:	6979      	ldr	r1, [r7, #20]
 8008212:	6849      	ldr	r1, [r1, #4]
 8008214:	0849      	lsrs	r1, r1, #1
 8008216:	2000      	movs	r0, #0
 8008218:	460c      	mov	r4, r1
 800821a:	4605      	mov	r5, r0
 800821c:	eb12 0804 	adds.w	r8, r2, r4
 8008220:	eb43 0905 	adc.w	r9, r3, r5
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	469a      	mov	sl, r3
 800822c:	4693      	mov	fp, r2
 800822e:	4652      	mov	r2, sl
 8008230:	465b      	mov	r3, fp
 8008232:	4640      	mov	r0, r8
 8008234:	4649      	mov	r1, r9
 8008236:	f7f8 fd5f 	bl	8000cf8 <__aeabi_uldivmod>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	4613      	mov	r3, r2
 8008240:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008248:	d308      	bcc.n	800825c <UART_SetConfig+0x430>
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008250:	d204      	bcs.n	800825c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6a3a      	ldr	r2, [r7, #32]
 8008258:	60da      	str	r2, [r3, #12]
 800825a:	e0ce      	b.n	80083fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008262:	e0ca      	b.n	80083fa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800826c:	d166      	bne.n	800833c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800826e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008272:	2b08      	cmp	r3, #8
 8008274:	d827      	bhi.n	80082c6 <UART_SetConfig+0x49a>
 8008276:	a201      	add	r2, pc, #4	@ (adr r2, 800827c <UART_SetConfig+0x450>)
 8008278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827c:	080082a1 	.word	0x080082a1
 8008280:	080082a9 	.word	0x080082a9
 8008284:	080082b1 	.word	0x080082b1
 8008288:	080082c7 	.word	0x080082c7
 800828c:	080082b7 	.word	0x080082b7
 8008290:	080082c7 	.word	0x080082c7
 8008294:	080082c7 	.word	0x080082c7
 8008298:	080082c7 	.word	0x080082c7
 800829c:	080082bf 	.word	0x080082bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082a0:	f7fd f8d4 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 80082a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082a6:	e014      	b.n	80082d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082a8:	f7fd f8e6 	bl	8005478 <HAL_RCC_GetPCLK2Freq>
 80082ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082ae:	e010      	b.n	80082d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082b0:	4b4e      	ldr	r3, [pc, #312]	@ (80083ec <UART_SetConfig+0x5c0>)
 80082b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082b4:	e00d      	b.n	80082d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082b6:	f7fd f85b 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 80082ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082bc:	e009      	b.n	80082d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082c4:	e005      	b.n	80082d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 8090 	beq.w	80083fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082de:	4a44      	ldr	r2, [pc, #272]	@ (80083f0 <UART_SetConfig+0x5c4>)
 80082e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082e4:	461a      	mov	r2, r3
 80082e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80082ec:	005a      	lsls	r2, r3, #1
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	085b      	lsrs	r3, r3, #1
 80082f4:	441a      	add	r2, r3
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80082fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008300:	6a3b      	ldr	r3, [r7, #32]
 8008302:	2b0f      	cmp	r3, #15
 8008304:	d916      	bls.n	8008334 <UART_SetConfig+0x508>
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800830c:	d212      	bcs.n	8008334 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	b29b      	uxth	r3, r3
 8008312:	f023 030f 	bic.w	r3, r3, #15
 8008316:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	085b      	lsrs	r3, r3, #1
 800831c:	b29b      	uxth	r3, r3
 800831e:	f003 0307 	and.w	r3, r3, #7
 8008322:	b29a      	uxth	r2, r3
 8008324:	8bfb      	ldrh	r3, [r7, #30]
 8008326:	4313      	orrs	r3, r2
 8008328:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	8bfa      	ldrh	r2, [r7, #30]
 8008330:	60da      	str	r2, [r3, #12]
 8008332:	e062      	b.n	80083fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800833a:	e05e      	b.n	80083fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800833c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008340:	2b08      	cmp	r3, #8
 8008342:	d828      	bhi.n	8008396 <UART_SetConfig+0x56a>
 8008344:	a201      	add	r2, pc, #4	@ (adr r2, 800834c <UART_SetConfig+0x520>)
 8008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834a:	bf00      	nop
 800834c:	08008371 	.word	0x08008371
 8008350:	08008379 	.word	0x08008379
 8008354:	08008381 	.word	0x08008381
 8008358:	08008397 	.word	0x08008397
 800835c:	08008387 	.word	0x08008387
 8008360:	08008397 	.word	0x08008397
 8008364:	08008397 	.word	0x08008397
 8008368:	08008397 	.word	0x08008397
 800836c:	0800838f 	.word	0x0800838f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008370:	f7fd f86c 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 8008374:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008376:	e014      	b.n	80083a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008378:	f7fd f87e 	bl	8005478 <HAL_RCC_GetPCLK2Freq>
 800837c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800837e:	e010      	b.n	80083a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008380:	4b1a      	ldr	r3, [pc, #104]	@ (80083ec <UART_SetConfig+0x5c0>)
 8008382:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008384:	e00d      	b.n	80083a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008386:	f7fc fff3 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 800838a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800838c:	e009      	b.n	80083a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800838e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008392:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008394:	e005      	b.n	80083a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80083a0:	bf00      	nop
    }

    if (pclk != 0U)
 80083a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d028      	beq.n	80083fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ac:	4a10      	ldr	r2, [pc, #64]	@ (80083f0 <UART_SetConfig+0x5c4>)
 80083ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083b2:	461a      	mov	r2, r3
 80083b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	085b      	lsrs	r3, r3, #1
 80083c0:	441a      	add	r2, r3
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	2b0f      	cmp	r3, #15
 80083d0:	d910      	bls.n	80083f4 <UART_SetConfig+0x5c8>
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083d8:	d20c      	bcs.n	80083f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	b29a      	uxth	r2, r3
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60da      	str	r2, [r3, #12]
 80083e4:	e009      	b.n	80083fa <UART_SetConfig+0x5ce>
 80083e6:	bf00      	nop
 80083e8:	40008000 	.word	0x40008000
 80083ec:	00f42400 	.word	0x00f42400
 80083f0:	0800df2c 	.word	0x0800df2c
      }
      else
      {
        ret = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2201      	movs	r2, #1
 8008406:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2200      	movs	r2, #0
 800840e:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	2200      	movs	r2, #0
 8008414:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8008416:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800841a:	4618      	mov	r0, r3
 800841c:	3730      	adds	r7, #48	@ 0x30
 800841e:	46bd      	mov	sp, r7
 8008420:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008424 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00a      	beq.n	800844e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	430a      	orrs	r2, r1
 800844c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00a      	beq.n	8008470 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	430a      	orrs	r2, r1
 800846e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008474:	f003 0304 	and.w	r3, r3, #4
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00a      	beq.n	8008492 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	430a      	orrs	r2, r1
 8008490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008496:	f003 0308 	and.w	r3, r3, #8
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00a      	beq.n	80084b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	430a      	orrs	r2, r1
 80084b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b8:	f003 0310 	and.w	r3, r3, #16
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00a      	beq.n	80084d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	430a      	orrs	r2, r1
 80084d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084da:	f003 0320 	and.w	r3, r3, #32
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00a      	beq.n	80084f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	430a      	orrs	r2, r1
 80084f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008500:	2b00      	cmp	r3, #0
 8008502:	d01a      	beq.n	800853a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800851e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008522:	d10a      	bne.n	800853a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800853e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00a      	beq.n	800855c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	430a      	orrs	r2, r1
 800855a:	605a      	str	r2, [r3, #4]
  }
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af02      	add	r7, sp, #8
 800856e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008578:	f7fa f8c4 	bl	8002704 <HAL_GetTick>
 800857c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0308 	and.w	r3, r3, #8
 8008588:	2b08      	cmp	r3, #8
 800858a:	d10e      	bne.n	80085aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800858c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f82f 	bl	80085fe <UART_WaitOnFlagUntilTimeout>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e025      	b.n	80085f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0304 	and.w	r3, r3, #4
 80085b4:	2b04      	cmp	r3, #4
 80085b6:	d10e      	bne.n	80085d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f819 	bl	80085fe <UART_WaitOnFlagUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e00f      	b.n	80085f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2220      	movs	r2, #32
 80085da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2220      	movs	r2, #32
 80085e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b09c      	sub	sp, #112	@ 0x70
 8008602:	af00      	add	r7, sp, #0
 8008604:	60f8      	str	r0, [r7, #12]
 8008606:	60b9      	str	r1, [r7, #8]
 8008608:	603b      	str	r3, [r7, #0]
 800860a:	4613      	mov	r3, r2
 800860c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800860e:	e0a9      	b.n	8008764 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008610:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008616:	f000 80a5 	beq.w	8008764 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800861a:	f7fa f873 	bl	8002704 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008626:	429a      	cmp	r2, r3
 8008628:	d302      	bcc.n	8008630 <UART_WaitOnFlagUntilTimeout+0x32>
 800862a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800862c:	2b00      	cmp	r3, #0
 800862e:	d140      	bne.n	80086b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008638:	e853 3f00 	ldrex	r3, [r3]
 800863c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800863e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008640:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008644:	667b      	str	r3, [r7, #100]	@ 0x64
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800864e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008650:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008652:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008654:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008656:	e841 2300 	strex	r3, r2, [r1]
 800865a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800865c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1e6      	bne.n	8008630 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3308      	adds	r3, #8
 8008668:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008674:	f023 0301 	bic.w	r3, r3, #1
 8008678:	663b      	str	r3, [r7, #96]	@ 0x60
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3308      	adds	r3, #8
 8008680:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008682:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008684:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008686:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008688:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800868a:	e841 2300 	strex	r3, r2, [r1]
 800868e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1e5      	bne.n	8008662 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2220      	movs	r2, #32
 800869a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2220      	movs	r2, #32
 80086a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	e069      	b.n	8008786 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0304 	and.w	r3, r3, #4
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d051      	beq.n	8008764 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086ce:	d149      	bne.n	8008764 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e2:	e853 3f00 	ldrex	r3, [r3]
 80086e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ea:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80086ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80086fa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80086fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008700:	e841 2300 	strex	r3, r2, [r1]
 8008704:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e6      	bne.n	80086da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3308      	adds	r3, #8
 8008712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	613b      	str	r3, [r7, #16]
   return(result);
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	f023 0301 	bic.w	r3, r3, #1
 8008722:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3308      	adds	r3, #8
 800872a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800872c:	623a      	str	r2, [r7, #32]
 800872e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	69f9      	ldr	r1, [r7, #28]
 8008732:	6a3a      	ldr	r2, [r7, #32]
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	61bb      	str	r3, [r7, #24]
   return(result);
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e5      	bne.n	800870c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2220      	movs	r2, #32
 8008744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2220      	movs	r2, #32
 800874c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2220      	movs	r2, #32
 8008754:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e010      	b.n	8008786 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	69da      	ldr	r2, [r3, #28]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	4013      	ands	r3, r2
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	429a      	cmp	r2, r3
 8008772:	bf0c      	ite	eq
 8008774:	2301      	moveq	r3, #1
 8008776:	2300      	movne	r3, #0
 8008778:	b2db      	uxtb	r3, r3
 800877a:	461a      	mov	r2, r3
 800877c:	79fb      	ldrb	r3, [r7, #7]
 800877e:	429a      	cmp	r2, r3
 8008780:	f43f af46 	beq.w	8008610 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3770      	adds	r7, #112	@ 0x70
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
	...

08008790 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008790:	b480      	push	{r7}
 8008792:	b0a3      	sub	sp, #140	@ 0x8c
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	4613      	mov	r3, r2
 800879c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	88fa      	ldrh	r2, [r7, #6]
 80087a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	88fa      	ldrh	r2, [r7, #6]
 80087b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087c2:	d10e      	bne.n	80087e2 <UART_Start_Receive_IT+0x52>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d105      	bne.n	80087d8 <UART_Start_Receive_IT+0x48>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80087d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087d6:	e02d      	b.n	8008834 <UART_Start_Receive_IT+0xa4>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	22ff      	movs	r2, #255	@ 0xff
 80087dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087e0:	e028      	b.n	8008834 <UART_Start_Receive_IT+0xa4>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10d      	bne.n	8008806 <UART_Start_Receive_IT+0x76>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d104      	bne.n	80087fc <UART_Start_Receive_IT+0x6c>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	22ff      	movs	r2, #255	@ 0xff
 80087f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087fa:	e01b      	b.n	8008834 <UART_Start_Receive_IT+0xa4>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	227f      	movs	r2, #127	@ 0x7f
 8008800:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008804:	e016      	b.n	8008834 <UART_Start_Receive_IT+0xa4>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800880e:	d10d      	bne.n	800882c <UART_Start_Receive_IT+0x9c>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d104      	bne.n	8008822 <UART_Start_Receive_IT+0x92>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	227f      	movs	r2, #127	@ 0x7f
 800881c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008820:	e008      	b.n	8008834 <UART_Start_Receive_IT+0xa4>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	223f      	movs	r2, #63	@ 0x3f
 8008826:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800882a:	e003      	b.n	8008834 <UART_Start_Receive_IT+0xa4>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2222      	movs	r2, #34	@ 0x22
 8008840:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3308      	adds	r3, #8
 800884a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800884e:	e853 3f00 	ldrex	r3, [r3]
 8008852:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008854:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008856:	f043 0301 	orr.w	r3, r3, #1
 800885a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3308      	adds	r3, #8
 8008864:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008868:	673a      	str	r2, [r7, #112]	@ 0x70
 800886a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800886e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008870:	e841 2300 	strex	r3, r2, [r1]
 8008874:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008876:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1e3      	bne.n	8008844 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008880:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008884:	d153      	bne.n	800892e <UART_Start_Receive_IT+0x19e>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800888c:	88fa      	ldrh	r2, [r7, #6]
 800888e:	429a      	cmp	r2, r3
 8008890:	d34d      	bcc.n	800892e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800889a:	d107      	bne.n	80088ac <UART_Start_Receive_IT+0x11c>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d103      	bne.n	80088ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4a4b      	ldr	r2, [pc, #300]	@ (80089d4 <UART_Start_Receive_IT+0x244>)
 80088a8:	671a      	str	r2, [r3, #112]	@ 0x70
 80088aa:	e002      	b.n	80088b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4a4a      	ldr	r2, [pc, #296]	@ (80089d8 <UART_Start_Receive_IT+0x248>)
 80088b0:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d01a      	beq.n	80088f8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088ca:	e853 3f00 	ldrex	r3, [r3]
 80088ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80088d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80088e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088e6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80088ea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80088ec:	e841 2300 	strex	r3, r2, [r1]
 80088f0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80088f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1e4      	bne.n	80088c2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3308      	adds	r3, #8
 80088fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008902:	e853 3f00 	ldrex	r3, [r3]
 8008906:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800890e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3308      	adds	r3, #8
 8008916:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008918:	64ba      	str	r2, [r7, #72]	@ 0x48
 800891a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800891e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008920:	e841 2300 	strex	r3, r2, [r1]
 8008924:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1e5      	bne.n	80088f8 <UART_Start_Receive_IT+0x168>
 800892c:	e04a      	b.n	80089c4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008936:	d107      	bne.n	8008948 <UART_Start_Receive_IT+0x1b8>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d103      	bne.n	8008948 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4a26      	ldr	r2, [pc, #152]	@ (80089dc <UART_Start_Receive_IT+0x24c>)
 8008944:	671a      	str	r2, [r3, #112]	@ 0x70
 8008946:	e002      	b.n	800894e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4a25      	ldr	r2, [pc, #148]	@ (80089e0 <UART_Start_Receive_IT+0x250>)
 800894c:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d019      	beq.n	8008992 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800896c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008972:	677b      	str	r3, [r7, #116]	@ 0x74
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800897c:	637b      	str	r3, [r7, #52]	@ 0x34
 800897e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008982:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008984:	e841 2300 	strex	r3, r2, [r1]
 8008988:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800898a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e6      	bne.n	800895e <UART_Start_Receive_IT+0x1ce>
 8008990:	e018      	b.n	80089c4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	e853 3f00 	ldrex	r3, [r3]
 800899e:	613b      	str	r3, [r7, #16]
   return(result);
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f043 0320 	orr.w	r3, r3, #32
 80089a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	461a      	mov	r2, r3
 80089ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089b0:	623b      	str	r3, [r7, #32]
 80089b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b4:	69f9      	ldr	r1, [r7, #28]
 80089b6:	6a3a      	ldr	r2, [r7, #32]
 80089b8:	e841 2300 	strex	r3, r2, [r1]
 80089bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e6      	bne.n	8008992 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	378c      	adds	r7, #140	@ 0x8c
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	080090ed 	.word	0x080090ed
 80089d8:	08008df5 	.word	0x08008df5
 80089dc:	08008c93 	.word	0x08008c93
 80089e0:	08008b33 	.word	0x08008b33

080089e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b095      	sub	sp, #84	@ 0x54
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f4:	e853 3f00 	ldrex	r3, [r3]
 80089f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	461a      	mov	r2, r3
 8008a08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a12:	e841 2300 	strex	r3, r2, [r1]
 8008a16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1e6      	bne.n	80089ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3308      	adds	r3, #8
 8008a24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a34:	f023 0301 	bic.w	r3, r3, #1
 8008a38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3308      	adds	r3, #8
 8008a40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e3      	bne.n	8008a1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d118      	bne.n	8008a90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	e853 3f00 	ldrex	r3, [r3]
 8008a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f023 0310 	bic.w	r3, r3, #16
 8008a72:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a7c:	61bb      	str	r3, [r7, #24]
 8008a7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a80:	6979      	ldr	r1, [r7, #20]
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	e841 2300 	strex	r3, r2, [r1]
 8008a88:	613b      	str	r3, [r7, #16]
   return(result);
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e6      	bne.n	8008a5e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8008aa4:	bf00      	nop
 8008aa6:	3754      	adds	r7, #84	@ 0x54
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008abc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f7ff f996 	bl	8007e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ad4:	bf00      	nop
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b088      	sub	sp, #32
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	e853 3f00 	ldrex	r3, [r3]
 8008af0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008af8:	61fb      	str	r3, [r7, #28]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	461a      	mov	r2, r3
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	61bb      	str	r3, [r7, #24]
 8008b04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b06:	6979      	ldr	r1, [r7, #20]
 8008b08:	69ba      	ldr	r2, [r7, #24]
 8008b0a:	e841 2300 	strex	r3, r2, [r1]
 8008b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1e6      	bne.n	8008ae4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2220      	movs	r2, #32
 8008b1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7ff f961 	bl	8007dec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b2a:	bf00      	nop
 8008b2c:	3720      	adds	r7, #32
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b096      	sub	sp, #88	@ 0x58
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b40:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b4a:	2b22      	cmp	r3, #34	@ 0x22
 8008b4c:	f040 8095 	bne.w	8008c7a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b56:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b5a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8008b5e:	b2d9      	uxtb	r1, r3
 8008b60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008b64:	b2da      	uxtb	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b6a:	400a      	ands	r2, r1
 8008b6c:	b2d2      	uxtb	r2, r2
 8008b6e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	3b01      	subs	r3, #1
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d178      	bne.n	8008c8a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba0:	e853 3f00 	ldrex	r3, [r3]
 8008ba4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bac:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bb8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008bbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bbe:	e841 2300 	strex	r3, r2, [r1]
 8008bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1e6      	bne.n	8008b98 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3308      	adds	r3, #8
 8008bd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd4:	e853 3f00 	ldrex	r3, [r3]
 8008bd8:	623b      	str	r3, [r7, #32]
   return(result);
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	f023 0301 	bic.w	r3, r3, #1
 8008be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3308      	adds	r3, #8
 8008be8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008bea:	633a      	str	r2, [r7, #48]	@ 0x30
 8008bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bf2:	e841 2300 	strex	r3, r2, [r1]
 8008bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1e5      	bne.n	8008bca <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2220      	movs	r2, #32
 8008c02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d12e      	bne.n	8008c72 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	e853 3f00 	ldrex	r3, [r3]
 8008c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f023 0310 	bic.w	r3, r3, #16
 8008c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	461a      	mov	r2, r3
 8008c36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c38:	61fb      	str	r3, [r7, #28]
 8008c3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3c:	69b9      	ldr	r1, [r7, #24]
 8008c3e:	69fa      	ldr	r2, [r7, #28]
 8008c40:	e841 2300 	strex	r3, r2, [r1]
 8008c44:	617b      	str	r3, [r7, #20]
   return(result);
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1e6      	bne.n	8008c1a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	f003 0310 	and.w	r3, r3, #16
 8008c56:	2b10      	cmp	r3, #16
 8008c58:	d103      	bne.n	8008c62 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2210      	movs	r2, #16
 8008c60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7ff f8d2 	bl	8007e14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c70:	e00b      	b.n	8008c8a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f7f9 fca8 	bl	80025c8 <HAL_UART_RxCpltCallback>
}
 8008c78:	e007      	b.n	8008c8a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	699a      	ldr	r2, [r3, #24]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f042 0208 	orr.w	r2, r2, #8
 8008c88:	619a      	str	r2, [r3, #24]
}
 8008c8a:	bf00      	nop
 8008c8c:	3758      	adds	r7, #88	@ 0x58
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b096      	sub	sp, #88	@ 0x58
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008ca0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008caa:	2b22      	cmp	r3, #34	@ 0x22
 8008cac:	f040 8095 	bne.w	8008dda <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb6:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cbe:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008cc0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8008cc4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008cc8:	4013      	ands	r3, r2
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cd4:	1c9a      	adds	r2, r3, #2
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d178      	bne.n	8008dea <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d00:	e853 3f00 	ldrex	r3, [r3]
 8008d04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	461a      	mov	r2, r3
 8008d14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d16:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d1e:	e841 2300 	strex	r3, r2, [r1]
 8008d22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1e6      	bne.n	8008cf8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	3308      	adds	r3, #8
 8008d30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d32:	6a3b      	ldr	r3, [r7, #32]
 8008d34:	e853 3f00 	ldrex	r3, [r3]
 8008d38:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	f023 0301 	bic.w	r3, r3, #1
 8008d40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3308      	adds	r3, #8
 8008d48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d52:	e841 2300 	strex	r3, r2, [r1]
 8008d56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1e5      	bne.n	8008d2a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2220      	movs	r2, #32
 8008d62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d12e      	bne.n	8008dd2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	e853 3f00 	ldrex	r3, [r3]
 8008d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	f023 0310 	bic.w	r3, r3, #16
 8008d8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	461a      	mov	r2, r3
 8008d96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d98:	61bb      	str	r3, [r7, #24]
 8008d9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9c:	6979      	ldr	r1, [r7, #20]
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	e841 2300 	strex	r3, r2, [r1]
 8008da4:	613b      	str	r3, [r7, #16]
   return(result);
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1e6      	bne.n	8008d7a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	f003 0310 	and.w	r3, r3, #16
 8008db6:	2b10      	cmp	r3, #16
 8008db8:	d103      	bne.n	8008dc2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2210      	movs	r2, #16
 8008dc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008dc8:	4619      	mov	r1, r3
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7ff f822 	bl	8007e14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dd0:	e00b      	b.n	8008dea <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7f9 fbf8 	bl	80025c8 <HAL_UART_RxCpltCallback>
}
 8008dd8:	e007      	b.n	8008dea <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	699a      	ldr	r2, [r3, #24]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f042 0208 	orr.w	r2, r2, #8
 8008de8:	619a      	str	r2, [r3, #24]
}
 8008dea:	bf00      	nop
 8008dec:	3758      	adds	r7, #88	@ 0x58
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
	...

08008df4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b0a6      	sub	sp, #152	@ 0x98
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e02:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e2a:	2b22      	cmp	r3, #34	@ 0x22
 8008e2c:	f040 814f 	bne.w	80090ce <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e36:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e3a:	e0f6      	b.n	800902a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e42:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e46:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8008e4a:	b2d9      	uxtb	r1, r3
 8008e4c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008e50:	b2da      	uxtb	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e56:	400a      	ands	r2, r1
 8008e58:	b2d2      	uxtb	r2, r2
 8008e5a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e60:	1c5a      	adds	r2, r3, #1
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d053      	beq.n	8008f36 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d011      	beq.n	8008ebe <UART_RxISR_8BIT_FIFOEN+0xca>
 8008e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00b      	beq.n	8008ebe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008eb4:	f043 0201 	orr.w	r2, r3, #1
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ebe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008ec2:	f003 0302 	and.w	r3, r3, #2
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d011      	beq.n	8008eee <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008eca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00b      	beq.n	8008eee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2202      	movs	r2, #2
 8008edc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ee4:	f043 0204 	orr.w	r2, r3, #4
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008eee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008ef2:	f003 0304 	and.w	r3, r3, #4
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d011      	beq.n	8008f1e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008efa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00b      	beq.n	8008f1e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2204      	movs	r2, #4
 8008f0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f14:	f043 0202 	orr.w	r2, r3, #2
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d006      	beq.n	8008f36 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7fe ff69 	bl	8007e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d173      	bne.n	800902a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f4a:	e853 3f00 	ldrex	r3, [r3]
 8008f4e:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008f50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008f64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f66:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f68:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008f6a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f6c:	e841 2300 	strex	r3, r2, [r1]
 8008f70:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008f72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1e4      	bne.n	8008f42 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3308      	adds	r3, #8
 8008f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f82:	e853 3f00 	ldrex	r3, [r3]
 8008f86:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f8e:	f023 0301 	bic.w	r3, r3, #1
 8008f92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	3308      	adds	r3, #8
 8008f9a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008f9c:	657a      	str	r2, [r7, #84]	@ 0x54
 8008f9e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fa2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008fa4:	e841 2300 	strex	r3, r2, [r1]
 8008fa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1e3      	bne.n	8008f78 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2220      	movs	r2, #32
 8008fb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d12e      	bne.n	8009024 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd4:	e853 3f00 	ldrex	r3, [r3]
 8008fd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fdc:	f023 0310 	bic.w	r3, r3, #16
 8008fe0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fea:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ff0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ff2:	e841 2300 	strex	r3, r2, [r1]
 8008ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1e6      	bne.n	8008fcc <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	69db      	ldr	r3, [r3, #28]
 8009004:	f003 0310 	and.w	r3, r3, #16
 8009008:	2b10      	cmp	r3, #16
 800900a:	d103      	bne.n	8009014 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2210      	movs	r2, #16
 8009012:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7fe fef9 	bl	8007e14 <HAL_UARTEx_RxEventCallback>
 8009022:	e002      	b.n	800902a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7f9 facf 	bl	80025c8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800902a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800902e:	2b00      	cmp	r3, #0
 8009030:	d006      	beq.n	8009040 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009032:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b00      	cmp	r3, #0
 800903c:	f47f aefe 	bne.w	8008e3c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009046:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800904a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800904e:	2b00      	cmp	r3, #0
 8009050:	d045      	beq.n	80090de <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009058:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800905c:	429a      	cmp	r2, r3
 800905e:	d23e      	bcs.n	80090de <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3308      	adds	r3, #8
 8009066:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009068:	6a3b      	ldr	r3, [r7, #32]
 800906a:	e853 3f00 	ldrex	r3, [r3]
 800906e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009076:	673b      	str	r3, [r7, #112]	@ 0x70
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3308      	adds	r3, #8
 800907e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009080:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009082:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009084:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009086:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009088:	e841 2300 	strex	r3, r2, [r1]
 800908c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800908e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1e5      	bne.n	8009060 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a14      	ldr	r2, [pc, #80]	@ (80090e8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009098:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	e853 3f00 	ldrex	r3, [r3]
 80090a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	f043 0320 	orr.w	r3, r3, #32
 80090ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	461a      	mov	r2, r3
 80090b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090b8:	61bb      	str	r3, [r7, #24]
 80090ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090bc:	6979      	ldr	r1, [r7, #20]
 80090be:	69ba      	ldr	r2, [r7, #24]
 80090c0:	e841 2300 	strex	r3, r2, [r1]
 80090c4:	613b      	str	r3, [r7, #16]
   return(result);
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1e6      	bne.n	800909a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090cc:	e007      	b.n	80090de <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	699a      	ldr	r2, [r3, #24]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f042 0208 	orr.w	r2, r2, #8
 80090dc:	619a      	str	r2, [r3, #24]
}
 80090de:	bf00      	nop
 80090e0:	3798      	adds	r7, #152	@ 0x98
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	08008b33 	.word	0x08008b33

080090ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b0a8      	sub	sp, #160	@ 0xa0
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80090fa:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	69db      	ldr	r3, [r3, #28]
 8009104:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009122:	2b22      	cmp	r3, #34	@ 0x22
 8009124:	f040 8153 	bne.w	80093ce <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800912e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009132:	e0fa      	b.n	800932a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800913a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009142:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009146:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 800914a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800914e:	4013      	ands	r3, r2
 8009150:	b29a      	uxth	r2, r3
 8009152:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009156:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800915c:	1c9a      	adds	r2, r3, #2
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009168:	b29b      	uxth	r3, r3
 800916a:	3b01      	subs	r3, #1
 800916c:	b29a      	uxth	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	69db      	ldr	r3, [r3, #28]
 800917a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800917e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009182:	f003 0307 	and.w	r3, r3, #7
 8009186:	2b00      	cmp	r3, #0
 8009188:	d053      	beq.n	8009232 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800918a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	d011      	beq.n	80091ba <UART_RxISR_16BIT_FIFOEN+0xce>
 8009196:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800919a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00b      	beq.n	80091ba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2201      	movs	r2, #1
 80091a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091b0:	f043 0201 	orr.w	r2, r3, #1
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80091be:	f003 0302 	and.w	r3, r3, #2
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d011      	beq.n	80091ea <UART_RxISR_16BIT_FIFOEN+0xfe>
 80091c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00b      	beq.n	80091ea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2202      	movs	r2, #2
 80091d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091e0:	f043 0204 	orr.w	r2, r3, #4
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80091ee:	f003 0304 	and.w	r3, r3, #4
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d011      	beq.n	800921a <UART_RxISR_16BIT_FIFOEN+0x12e>
 80091f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00b      	beq.n	800921a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2204      	movs	r2, #4
 8009208:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009210:	f043 0202 	orr.w	r2, r3, #2
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009220:	2b00      	cmp	r3, #0
 8009222:	d006      	beq.n	8009232 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7fe fdeb 	bl	8007e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009238:	b29b      	uxth	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d175      	bne.n	800932a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800924c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800924e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009252:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	461a      	mov	r2, r3
 800925c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009260:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009262:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009264:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009266:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009268:	e841 2300 	strex	r3, r2, [r1]
 800926c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800926e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e4      	bne.n	800923e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3308      	adds	r3, #8
 800927a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800927e:	e853 3f00 	ldrex	r3, [r3]
 8009282:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009286:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800928a:	f023 0301 	bic.w	r3, r3, #1
 800928e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3308      	adds	r3, #8
 8009298:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800929c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800929e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80092a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092a4:	e841 2300 	strex	r3, r2, [r1]
 80092a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80092aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1e1      	bne.n	8009274 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2220      	movs	r2, #32
 80092b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d12e      	bne.n	8009324 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d4:	e853 3f00 	ldrex	r3, [r3]
 80092d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092dc:	f023 0310 	bic.w	r3, r3, #16
 80092e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80092ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80092ec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092f2:	e841 2300 	strex	r3, r2, [r1]
 80092f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e6      	bne.n	80092cc <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	f003 0310 	and.w	r3, r3, #16
 8009308:	2b10      	cmp	r3, #16
 800930a:	d103      	bne.n	8009314 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2210      	movs	r2, #16
 8009312:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f7fe fd79 	bl	8007e14 <HAL_UARTEx_RxEventCallback>
 8009322:	e002      	b.n	800932a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f7f9 f94f 	bl	80025c8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800932a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800932e:	2b00      	cmp	r3, #0
 8009330:	d006      	beq.n	8009340 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009332:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	f47f aefa 	bne.w	8009134 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009346:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800934a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800934e:	2b00      	cmp	r3, #0
 8009350:	d045      	beq.n	80093de <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009358:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 800935c:	429a      	cmp	r2, r3
 800935e:	d23e      	bcs.n	80093de <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3308      	adds	r3, #8
 8009366:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936a:	e853 3f00 	ldrex	r3, [r3]
 800936e:	623b      	str	r3, [r7, #32]
   return(result);
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009376:	677b      	str	r3, [r7, #116]	@ 0x74
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3308      	adds	r3, #8
 800937e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009380:	633a      	str	r2, [r7, #48]	@ 0x30
 8009382:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009384:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009388:	e841 2300 	strex	r3, r2, [r1]
 800938c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800938e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1e5      	bne.n	8009360 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a14      	ldr	r2, [pc, #80]	@ (80093e8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009398:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f043 0320 	orr.w	r3, r3, #32
 80093ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80093b8:	61fb      	str	r3, [r7, #28]
 80093ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	69b9      	ldr	r1, [r7, #24]
 80093be:	69fa      	ldr	r2, [r7, #28]
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	617b      	str	r3, [r7, #20]
   return(result);
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e6      	bne.n	800939a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093cc:	e007      	b.n	80093de <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	699a      	ldr	r2, [r3, #24]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f042 0208 	orr.w	r2, r2, #8
 80093dc:	619a      	str	r2, [r3, #24]
}
 80093de:	bf00      	nop
 80093e0:	37a0      	adds	r7, #160	@ 0xa0
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	08008c93 	.word	0x08008c93

080093ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009436:	2b01      	cmp	r3, #1
 8009438:	d101      	bne.n	800943e <HAL_UARTEx_DisableFifoMode+0x16>
 800943a:	2302      	movs	r3, #2
 800943c:	e027      	b.n	800948e <HAL_UARTEx_DisableFifoMode+0x66>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2224      	movs	r2, #36	@ 0x24
 800944a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f022 0201 	bic.w	r2, r2, #1
 8009464:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800946c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2220      	movs	r2, #32
 8009480:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d101      	bne.n	80094b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094ae:	2302      	movs	r3, #2
 80094b0:	e02d      	b.n	800950e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2224      	movs	r2, #36	@ 0x24
 80094be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f022 0201 	bic.w	r2, r2, #1
 80094d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	683a      	ldr	r2, [r7, #0]
 80094ea:	430a      	orrs	r2, r1
 80094ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f850 	bl	8009594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2220      	movs	r2, #32
 8009500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b084      	sub	sp, #16
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009526:	2b01      	cmp	r3, #1
 8009528:	d101      	bne.n	800952e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800952a:	2302      	movs	r3, #2
 800952c:	e02d      	b.n	800958a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2224      	movs	r2, #36	@ 0x24
 800953a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f022 0201 	bic.w	r2, r2, #1
 8009554:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	683a      	ldr	r2, [r7, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f812 	bl	8009594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2220      	movs	r2, #32
 800957c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
	...

08009594 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d108      	bne.n	80095b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095b4:	e031      	b.n	800961a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095b6:	2308      	movs	r3, #8
 80095b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095ba:	2308      	movs	r3, #8
 80095bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	0e5b      	lsrs	r3, r3, #25
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	f003 0307 	and.w	r3, r3, #7
 80095cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	0f5b      	lsrs	r3, r3, #29
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	f003 0307 	and.w	r3, r3, #7
 80095dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095de:	7bbb      	ldrb	r3, [r7, #14]
 80095e0:	7b3a      	ldrb	r2, [r7, #12]
 80095e2:	4911      	ldr	r1, [pc, #68]	@ (8009628 <UARTEx_SetNbDataToProcess+0x94>)
 80095e4:	5c8a      	ldrb	r2, [r1, r2]
 80095e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095ea:	7b3a      	ldrb	r2, [r7, #12]
 80095ec:	490f      	ldr	r1, [pc, #60]	@ (800962c <UARTEx_SetNbDataToProcess+0x98>)
 80095ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
 80095fe:	7b7a      	ldrb	r2, [r7, #13]
 8009600:	4909      	ldr	r1, [pc, #36]	@ (8009628 <UARTEx_SetNbDataToProcess+0x94>)
 8009602:	5c8a      	ldrb	r2, [r1, r2]
 8009604:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009608:	7b7a      	ldrb	r2, [r7, #13]
 800960a:	4908      	ldr	r1, [pc, #32]	@ (800962c <UARTEx_SetNbDataToProcess+0x98>)
 800960c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800960e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009612:	b29a      	uxth	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800961a:	bf00      	nop
 800961c:	3714      	adds	r7, #20
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	0800df44 	.word	0x0800df44
 800962c:	0800df4c 	.word	0x0800df4c

08009630 <atoi>:
 8009630:	220a      	movs	r2, #10
 8009632:	2100      	movs	r1, #0
 8009634:	f000 b87c 	b.w	8009730 <strtol>

08009638 <_strtol_l.constprop.0>:
 8009638:	2b24      	cmp	r3, #36	@ 0x24
 800963a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800963e:	4686      	mov	lr, r0
 8009640:	4690      	mov	r8, r2
 8009642:	d801      	bhi.n	8009648 <_strtol_l.constprop.0+0x10>
 8009644:	2b01      	cmp	r3, #1
 8009646:	d106      	bne.n	8009656 <_strtol_l.constprop.0+0x1e>
 8009648:	f001 f8f0 	bl	800a82c <__errno>
 800964c:	2316      	movs	r3, #22
 800964e:	6003      	str	r3, [r0, #0]
 8009650:	2000      	movs	r0, #0
 8009652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009656:	4834      	ldr	r0, [pc, #208]	@ (8009728 <_strtol_l.constprop.0+0xf0>)
 8009658:	460d      	mov	r5, r1
 800965a:	462a      	mov	r2, r5
 800965c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009660:	5d06      	ldrb	r6, [r0, r4]
 8009662:	f016 0608 	ands.w	r6, r6, #8
 8009666:	d1f8      	bne.n	800965a <_strtol_l.constprop.0+0x22>
 8009668:	2c2d      	cmp	r4, #45	@ 0x2d
 800966a:	d12d      	bne.n	80096c8 <_strtol_l.constprop.0+0x90>
 800966c:	782c      	ldrb	r4, [r5, #0]
 800966e:	2601      	movs	r6, #1
 8009670:	1c95      	adds	r5, r2, #2
 8009672:	f033 0210 	bics.w	r2, r3, #16
 8009676:	d109      	bne.n	800968c <_strtol_l.constprop.0+0x54>
 8009678:	2c30      	cmp	r4, #48	@ 0x30
 800967a:	d12a      	bne.n	80096d2 <_strtol_l.constprop.0+0x9a>
 800967c:	782a      	ldrb	r2, [r5, #0]
 800967e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009682:	2a58      	cmp	r2, #88	@ 0x58
 8009684:	d125      	bne.n	80096d2 <_strtol_l.constprop.0+0x9a>
 8009686:	786c      	ldrb	r4, [r5, #1]
 8009688:	2310      	movs	r3, #16
 800968a:	3502      	adds	r5, #2
 800968c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009690:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009694:	2200      	movs	r2, #0
 8009696:	fbbc f9f3 	udiv	r9, ip, r3
 800969a:	4610      	mov	r0, r2
 800969c:	fb03 ca19 	mls	sl, r3, r9, ip
 80096a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80096a4:	2f09      	cmp	r7, #9
 80096a6:	d81b      	bhi.n	80096e0 <_strtol_l.constprop.0+0xa8>
 80096a8:	463c      	mov	r4, r7
 80096aa:	42a3      	cmp	r3, r4
 80096ac:	dd27      	ble.n	80096fe <_strtol_l.constprop.0+0xc6>
 80096ae:	1c57      	adds	r7, r2, #1
 80096b0:	d007      	beq.n	80096c2 <_strtol_l.constprop.0+0x8a>
 80096b2:	4581      	cmp	r9, r0
 80096b4:	d320      	bcc.n	80096f8 <_strtol_l.constprop.0+0xc0>
 80096b6:	d101      	bne.n	80096bc <_strtol_l.constprop.0+0x84>
 80096b8:	45a2      	cmp	sl, r4
 80096ba:	db1d      	blt.n	80096f8 <_strtol_l.constprop.0+0xc0>
 80096bc:	fb00 4003 	mla	r0, r0, r3, r4
 80096c0:	2201      	movs	r2, #1
 80096c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096c6:	e7eb      	b.n	80096a0 <_strtol_l.constprop.0+0x68>
 80096c8:	2c2b      	cmp	r4, #43	@ 0x2b
 80096ca:	bf04      	itt	eq
 80096cc:	782c      	ldrbeq	r4, [r5, #0]
 80096ce:	1c95      	addeq	r5, r2, #2
 80096d0:	e7cf      	b.n	8009672 <_strtol_l.constprop.0+0x3a>
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1da      	bne.n	800968c <_strtol_l.constprop.0+0x54>
 80096d6:	2c30      	cmp	r4, #48	@ 0x30
 80096d8:	bf0c      	ite	eq
 80096da:	2308      	moveq	r3, #8
 80096dc:	230a      	movne	r3, #10
 80096de:	e7d5      	b.n	800968c <_strtol_l.constprop.0+0x54>
 80096e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80096e4:	2f19      	cmp	r7, #25
 80096e6:	d801      	bhi.n	80096ec <_strtol_l.constprop.0+0xb4>
 80096e8:	3c37      	subs	r4, #55	@ 0x37
 80096ea:	e7de      	b.n	80096aa <_strtol_l.constprop.0+0x72>
 80096ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80096f0:	2f19      	cmp	r7, #25
 80096f2:	d804      	bhi.n	80096fe <_strtol_l.constprop.0+0xc6>
 80096f4:	3c57      	subs	r4, #87	@ 0x57
 80096f6:	e7d8      	b.n	80096aa <_strtol_l.constprop.0+0x72>
 80096f8:	f04f 32ff 	mov.w	r2, #4294967295
 80096fc:	e7e1      	b.n	80096c2 <_strtol_l.constprop.0+0x8a>
 80096fe:	1c53      	adds	r3, r2, #1
 8009700:	d108      	bne.n	8009714 <_strtol_l.constprop.0+0xdc>
 8009702:	2322      	movs	r3, #34	@ 0x22
 8009704:	f8ce 3000 	str.w	r3, [lr]
 8009708:	4660      	mov	r0, ip
 800970a:	f1b8 0f00 	cmp.w	r8, #0
 800970e:	d0a0      	beq.n	8009652 <_strtol_l.constprop.0+0x1a>
 8009710:	1e69      	subs	r1, r5, #1
 8009712:	e006      	b.n	8009722 <_strtol_l.constprop.0+0xea>
 8009714:	b106      	cbz	r6, 8009718 <_strtol_l.constprop.0+0xe0>
 8009716:	4240      	negs	r0, r0
 8009718:	f1b8 0f00 	cmp.w	r8, #0
 800971c:	d099      	beq.n	8009652 <_strtol_l.constprop.0+0x1a>
 800971e:	2a00      	cmp	r2, #0
 8009720:	d1f6      	bne.n	8009710 <_strtol_l.constprop.0+0xd8>
 8009722:	f8c8 1000 	str.w	r1, [r8]
 8009726:	e794      	b.n	8009652 <_strtol_l.constprop.0+0x1a>
 8009728:	0800df55 	.word	0x0800df55

0800972c <_strtol_r>:
 800972c:	f7ff bf84 	b.w	8009638 <_strtol_l.constprop.0>

08009730 <strtol>:
 8009730:	4613      	mov	r3, r2
 8009732:	460a      	mov	r2, r1
 8009734:	4601      	mov	r1, r0
 8009736:	4802      	ldr	r0, [pc, #8]	@ (8009740 <strtol+0x10>)
 8009738:	6800      	ldr	r0, [r0, #0]
 800973a:	f7ff bf7d 	b.w	8009638 <_strtol_l.constprop.0>
 800973e:	bf00      	nop
 8009740:	200000fc 	.word	0x200000fc

08009744 <__cvt>:
 8009744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009748:	ec57 6b10 	vmov	r6, r7, d0
 800974c:	2f00      	cmp	r7, #0
 800974e:	460c      	mov	r4, r1
 8009750:	4619      	mov	r1, r3
 8009752:	463b      	mov	r3, r7
 8009754:	bfbb      	ittet	lt
 8009756:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800975a:	461f      	movlt	r7, r3
 800975c:	2300      	movge	r3, #0
 800975e:	232d      	movlt	r3, #45	@ 0x2d
 8009760:	700b      	strb	r3, [r1, #0]
 8009762:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009764:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009768:	4691      	mov	r9, r2
 800976a:	f023 0820 	bic.w	r8, r3, #32
 800976e:	bfbc      	itt	lt
 8009770:	4632      	movlt	r2, r6
 8009772:	4616      	movlt	r6, r2
 8009774:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009778:	d005      	beq.n	8009786 <__cvt+0x42>
 800977a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800977e:	d100      	bne.n	8009782 <__cvt+0x3e>
 8009780:	3401      	adds	r4, #1
 8009782:	2102      	movs	r1, #2
 8009784:	e000      	b.n	8009788 <__cvt+0x44>
 8009786:	2103      	movs	r1, #3
 8009788:	ab03      	add	r3, sp, #12
 800978a:	9301      	str	r3, [sp, #4]
 800978c:	ab02      	add	r3, sp, #8
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	ec47 6b10 	vmov	d0, r6, r7
 8009794:	4653      	mov	r3, sl
 8009796:	4622      	mov	r2, r4
 8009798:	f001 f922 	bl	800a9e0 <_dtoa_r>
 800979c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80097a0:	4605      	mov	r5, r0
 80097a2:	d119      	bne.n	80097d8 <__cvt+0x94>
 80097a4:	f019 0f01 	tst.w	r9, #1
 80097a8:	d00e      	beq.n	80097c8 <__cvt+0x84>
 80097aa:	eb00 0904 	add.w	r9, r0, r4
 80097ae:	2200      	movs	r2, #0
 80097b0:	2300      	movs	r3, #0
 80097b2:	4630      	mov	r0, r6
 80097b4:	4639      	mov	r1, r7
 80097b6:	f7f7 f9bf 	bl	8000b38 <__aeabi_dcmpeq>
 80097ba:	b108      	cbz	r0, 80097c0 <__cvt+0x7c>
 80097bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80097c0:	2230      	movs	r2, #48	@ 0x30
 80097c2:	9b03      	ldr	r3, [sp, #12]
 80097c4:	454b      	cmp	r3, r9
 80097c6:	d31e      	bcc.n	8009806 <__cvt+0xc2>
 80097c8:	9b03      	ldr	r3, [sp, #12]
 80097ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097cc:	1b5b      	subs	r3, r3, r5
 80097ce:	4628      	mov	r0, r5
 80097d0:	6013      	str	r3, [r2, #0]
 80097d2:	b004      	add	sp, #16
 80097d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80097dc:	eb00 0904 	add.w	r9, r0, r4
 80097e0:	d1e5      	bne.n	80097ae <__cvt+0x6a>
 80097e2:	7803      	ldrb	r3, [r0, #0]
 80097e4:	2b30      	cmp	r3, #48	@ 0x30
 80097e6:	d10a      	bne.n	80097fe <__cvt+0xba>
 80097e8:	2200      	movs	r2, #0
 80097ea:	2300      	movs	r3, #0
 80097ec:	4630      	mov	r0, r6
 80097ee:	4639      	mov	r1, r7
 80097f0:	f7f7 f9a2 	bl	8000b38 <__aeabi_dcmpeq>
 80097f4:	b918      	cbnz	r0, 80097fe <__cvt+0xba>
 80097f6:	f1c4 0401 	rsb	r4, r4, #1
 80097fa:	f8ca 4000 	str.w	r4, [sl]
 80097fe:	f8da 3000 	ldr.w	r3, [sl]
 8009802:	4499      	add	r9, r3
 8009804:	e7d3      	b.n	80097ae <__cvt+0x6a>
 8009806:	1c59      	adds	r1, r3, #1
 8009808:	9103      	str	r1, [sp, #12]
 800980a:	701a      	strb	r2, [r3, #0]
 800980c:	e7d9      	b.n	80097c2 <__cvt+0x7e>

0800980e <__exponent>:
 800980e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009810:	2900      	cmp	r1, #0
 8009812:	bfba      	itte	lt
 8009814:	4249      	neglt	r1, r1
 8009816:	232d      	movlt	r3, #45	@ 0x2d
 8009818:	232b      	movge	r3, #43	@ 0x2b
 800981a:	2909      	cmp	r1, #9
 800981c:	7002      	strb	r2, [r0, #0]
 800981e:	7043      	strb	r3, [r0, #1]
 8009820:	dd29      	ble.n	8009876 <__exponent+0x68>
 8009822:	f10d 0307 	add.w	r3, sp, #7
 8009826:	461d      	mov	r5, r3
 8009828:	270a      	movs	r7, #10
 800982a:	461a      	mov	r2, r3
 800982c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009830:	fb07 1416 	mls	r4, r7, r6, r1
 8009834:	3430      	adds	r4, #48	@ 0x30
 8009836:	f802 4c01 	strb.w	r4, [r2, #-1]
 800983a:	460c      	mov	r4, r1
 800983c:	2c63      	cmp	r4, #99	@ 0x63
 800983e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009842:	4631      	mov	r1, r6
 8009844:	dcf1      	bgt.n	800982a <__exponent+0x1c>
 8009846:	3130      	adds	r1, #48	@ 0x30
 8009848:	1e94      	subs	r4, r2, #2
 800984a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800984e:	1c41      	adds	r1, r0, #1
 8009850:	4623      	mov	r3, r4
 8009852:	42ab      	cmp	r3, r5
 8009854:	d30a      	bcc.n	800986c <__exponent+0x5e>
 8009856:	f10d 0309 	add.w	r3, sp, #9
 800985a:	1a9b      	subs	r3, r3, r2
 800985c:	42ac      	cmp	r4, r5
 800985e:	bf88      	it	hi
 8009860:	2300      	movhi	r3, #0
 8009862:	3302      	adds	r3, #2
 8009864:	4403      	add	r3, r0
 8009866:	1a18      	subs	r0, r3, r0
 8009868:	b003      	add	sp, #12
 800986a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800986c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009870:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009874:	e7ed      	b.n	8009852 <__exponent+0x44>
 8009876:	2330      	movs	r3, #48	@ 0x30
 8009878:	3130      	adds	r1, #48	@ 0x30
 800987a:	7083      	strb	r3, [r0, #2]
 800987c:	70c1      	strb	r1, [r0, #3]
 800987e:	1d03      	adds	r3, r0, #4
 8009880:	e7f1      	b.n	8009866 <__exponent+0x58>
	...

08009884 <_printf_float>:
 8009884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009888:	b08d      	sub	sp, #52	@ 0x34
 800988a:	460c      	mov	r4, r1
 800988c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009890:	4616      	mov	r6, r2
 8009892:	461f      	mov	r7, r3
 8009894:	4605      	mov	r5, r0
 8009896:	f000 ff7f 	bl	800a798 <_localeconv_r>
 800989a:	6803      	ldr	r3, [r0, #0]
 800989c:	9304      	str	r3, [sp, #16]
 800989e:	4618      	mov	r0, r3
 80098a0:	f7f6 fd1e 	bl	80002e0 <strlen>
 80098a4:	2300      	movs	r3, #0
 80098a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80098a8:	f8d8 3000 	ldr.w	r3, [r8]
 80098ac:	9005      	str	r0, [sp, #20]
 80098ae:	3307      	adds	r3, #7
 80098b0:	f023 0307 	bic.w	r3, r3, #7
 80098b4:	f103 0208 	add.w	r2, r3, #8
 80098b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80098bc:	f8d4 b000 	ldr.w	fp, [r4]
 80098c0:	f8c8 2000 	str.w	r2, [r8]
 80098c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80098cc:	9307      	str	r3, [sp, #28]
 80098ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80098d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80098d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098da:	4b9c      	ldr	r3, [pc, #624]	@ (8009b4c <_printf_float+0x2c8>)
 80098dc:	f04f 32ff 	mov.w	r2, #4294967295
 80098e0:	f7f7 f95c 	bl	8000b9c <__aeabi_dcmpun>
 80098e4:	bb70      	cbnz	r0, 8009944 <_printf_float+0xc0>
 80098e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098ea:	4b98      	ldr	r3, [pc, #608]	@ (8009b4c <_printf_float+0x2c8>)
 80098ec:	f04f 32ff 	mov.w	r2, #4294967295
 80098f0:	f7f7 f936 	bl	8000b60 <__aeabi_dcmple>
 80098f4:	bb30      	cbnz	r0, 8009944 <_printf_float+0xc0>
 80098f6:	2200      	movs	r2, #0
 80098f8:	2300      	movs	r3, #0
 80098fa:	4640      	mov	r0, r8
 80098fc:	4649      	mov	r1, r9
 80098fe:	f7f7 f925 	bl	8000b4c <__aeabi_dcmplt>
 8009902:	b110      	cbz	r0, 800990a <_printf_float+0x86>
 8009904:	232d      	movs	r3, #45	@ 0x2d
 8009906:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800990a:	4a91      	ldr	r2, [pc, #580]	@ (8009b50 <_printf_float+0x2cc>)
 800990c:	4b91      	ldr	r3, [pc, #580]	@ (8009b54 <_printf_float+0x2d0>)
 800990e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009912:	bf94      	ite	ls
 8009914:	4690      	movls	r8, r2
 8009916:	4698      	movhi	r8, r3
 8009918:	2303      	movs	r3, #3
 800991a:	6123      	str	r3, [r4, #16]
 800991c:	f02b 0304 	bic.w	r3, fp, #4
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	f04f 0900 	mov.w	r9, #0
 8009926:	9700      	str	r7, [sp, #0]
 8009928:	4633      	mov	r3, r6
 800992a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800992c:	4621      	mov	r1, r4
 800992e:	4628      	mov	r0, r5
 8009930:	f000 f9d2 	bl	8009cd8 <_printf_common>
 8009934:	3001      	adds	r0, #1
 8009936:	f040 808d 	bne.w	8009a54 <_printf_float+0x1d0>
 800993a:	f04f 30ff 	mov.w	r0, #4294967295
 800993e:	b00d      	add	sp, #52	@ 0x34
 8009940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009944:	4642      	mov	r2, r8
 8009946:	464b      	mov	r3, r9
 8009948:	4640      	mov	r0, r8
 800994a:	4649      	mov	r1, r9
 800994c:	f7f7 f926 	bl	8000b9c <__aeabi_dcmpun>
 8009950:	b140      	cbz	r0, 8009964 <_printf_float+0xe0>
 8009952:	464b      	mov	r3, r9
 8009954:	2b00      	cmp	r3, #0
 8009956:	bfbc      	itt	lt
 8009958:	232d      	movlt	r3, #45	@ 0x2d
 800995a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800995e:	4a7e      	ldr	r2, [pc, #504]	@ (8009b58 <_printf_float+0x2d4>)
 8009960:	4b7e      	ldr	r3, [pc, #504]	@ (8009b5c <_printf_float+0x2d8>)
 8009962:	e7d4      	b.n	800990e <_printf_float+0x8a>
 8009964:	6863      	ldr	r3, [r4, #4]
 8009966:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800996a:	9206      	str	r2, [sp, #24]
 800996c:	1c5a      	adds	r2, r3, #1
 800996e:	d13b      	bne.n	80099e8 <_printf_float+0x164>
 8009970:	2306      	movs	r3, #6
 8009972:	6063      	str	r3, [r4, #4]
 8009974:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009978:	2300      	movs	r3, #0
 800997a:	6022      	str	r2, [r4, #0]
 800997c:	9303      	str	r3, [sp, #12]
 800997e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009980:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009984:	ab09      	add	r3, sp, #36	@ 0x24
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	6861      	ldr	r1, [r4, #4]
 800998a:	ec49 8b10 	vmov	d0, r8, r9
 800998e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009992:	4628      	mov	r0, r5
 8009994:	f7ff fed6 	bl	8009744 <__cvt>
 8009998:	9b06      	ldr	r3, [sp, #24]
 800999a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800999c:	2b47      	cmp	r3, #71	@ 0x47
 800999e:	4680      	mov	r8, r0
 80099a0:	d129      	bne.n	80099f6 <_printf_float+0x172>
 80099a2:	1cc8      	adds	r0, r1, #3
 80099a4:	db02      	blt.n	80099ac <_printf_float+0x128>
 80099a6:	6863      	ldr	r3, [r4, #4]
 80099a8:	4299      	cmp	r1, r3
 80099aa:	dd41      	ble.n	8009a30 <_printf_float+0x1ac>
 80099ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80099b0:	fa5f fa8a 	uxtb.w	sl, sl
 80099b4:	3901      	subs	r1, #1
 80099b6:	4652      	mov	r2, sl
 80099b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80099bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80099be:	f7ff ff26 	bl	800980e <__exponent>
 80099c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099c4:	1813      	adds	r3, r2, r0
 80099c6:	2a01      	cmp	r2, #1
 80099c8:	4681      	mov	r9, r0
 80099ca:	6123      	str	r3, [r4, #16]
 80099cc:	dc02      	bgt.n	80099d4 <_printf_float+0x150>
 80099ce:	6822      	ldr	r2, [r4, #0]
 80099d0:	07d2      	lsls	r2, r2, #31
 80099d2:	d501      	bpl.n	80099d8 <_printf_float+0x154>
 80099d4:	3301      	adds	r3, #1
 80099d6:	6123      	str	r3, [r4, #16]
 80099d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d0a2      	beq.n	8009926 <_printf_float+0xa2>
 80099e0:	232d      	movs	r3, #45	@ 0x2d
 80099e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099e6:	e79e      	b.n	8009926 <_printf_float+0xa2>
 80099e8:	9a06      	ldr	r2, [sp, #24]
 80099ea:	2a47      	cmp	r2, #71	@ 0x47
 80099ec:	d1c2      	bne.n	8009974 <_printf_float+0xf0>
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1c0      	bne.n	8009974 <_printf_float+0xf0>
 80099f2:	2301      	movs	r3, #1
 80099f4:	e7bd      	b.n	8009972 <_printf_float+0xee>
 80099f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80099fa:	d9db      	bls.n	80099b4 <_printf_float+0x130>
 80099fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009a00:	d118      	bne.n	8009a34 <_printf_float+0x1b0>
 8009a02:	2900      	cmp	r1, #0
 8009a04:	6863      	ldr	r3, [r4, #4]
 8009a06:	dd0b      	ble.n	8009a20 <_printf_float+0x19c>
 8009a08:	6121      	str	r1, [r4, #16]
 8009a0a:	b913      	cbnz	r3, 8009a12 <_printf_float+0x18e>
 8009a0c:	6822      	ldr	r2, [r4, #0]
 8009a0e:	07d0      	lsls	r0, r2, #31
 8009a10:	d502      	bpl.n	8009a18 <_printf_float+0x194>
 8009a12:	3301      	adds	r3, #1
 8009a14:	440b      	add	r3, r1
 8009a16:	6123      	str	r3, [r4, #16]
 8009a18:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009a1a:	f04f 0900 	mov.w	r9, #0
 8009a1e:	e7db      	b.n	80099d8 <_printf_float+0x154>
 8009a20:	b913      	cbnz	r3, 8009a28 <_printf_float+0x1a4>
 8009a22:	6822      	ldr	r2, [r4, #0]
 8009a24:	07d2      	lsls	r2, r2, #31
 8009a26:	d501      	bpl.n	8009a2c <_printf_float+0x1a8>
 8009a28:	3302      	adds	r3, #2
 8009a2a:	e7f4      	b.n	8009a16 <_printf_float+0x192>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e7f2      	b.n	8009a16 <_printf_float+0x192>
 8009a30:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009a34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a36:	4299      	cmp	r1, r3
 8009a38:	db05      	blt.n	8009a46 <_printf_float+0x1c2>
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	6121      	str	r1, [r4, #16]
 8009a3e:	07d8      	lsls	r0, r3, #31
 8009a40:	d5ea      	bpl.n	8009a18 <_printf_float+0x194>
 8009a42:	1c4b      	adds	r3, r1, #1
 8009a44:	e7e7      	b.n	8009a16 <_printf_float+0x192>
 8009a46:	2900      	cmp	r1, #0
 8009a48:	bfd4      	ite	le
 8009a4a:	f1c1 0202 	rsble	r2, r1, #2
 8009a4e:	2201      	movgt	r2, #1
 8009a50:	4413      	add	r3, r2
 8009a52:	e7e0      	b.n	8009a16 <_printf_float+0x192>
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	055a      	lsls	r2, r3, #21
 8009a58:	d407      	bmi.n	8009a6a <_printf_float+0x1e6>
 8009a5a:	6923      	ldr	r3, [r4, #16]
 8009a5c:	4642      	mov	r2, r8
 8009a5e:	4631      	mov	r1, r6
 8009a60:	4628      	mov	r0, r5
 8009a62:	47b8      	blx	r7
 8009a64:	3001      	adds	r0, #1
 8009a66:	d12b      	bne.n	8009ac0 <_printf_float+0x23c>
 8009a68:	e767      	b.n	800993a <_printf_float+0xb6>
 8009a6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a6e:	f240 80dd 	bls.w	8009c2c <_printf_float+0x3a8>
 8009a72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a76:	2200      	movs	r2, #0
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f7f7 f85d 	bl	8000b38 <__aeabi_dcmpeq>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d033      	beq.n	8009aea <_printf_float+0x266>
 8009a82:	4a37      	ldr	r2, [pc, #220]	@ (8009b60 <_printf_float+0x2dc>)
 8009a84:	2301      	movs	r3, #1
 8009a86:	4631      	mov	r1, r6
 8009a88:	4628      	mov	r0, r5
 8009a8a:	47b8      	blx	r7
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	f43f af54 	beq.w	800993a <_printf_float+0xb6>
 8009a92:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009a96:	4543      	cmp	r3, r8
 8009a98:	db02      	blt.n	8009aa0 <_printf_float+0x21c>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	07d8      	lsls	r0, r3, #31
 8009a9e:	d50f      	bpl.n	8009ac0 <_printf_float+0x23c>
 8009aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	47b8      	blx	r7
 8009aaa:	3001      	adds	r0, #1
 8009aac:	f43f af45 	beq.w	800993a <_printf_float+0xb6>
 8009ab0:	f04f 0900 	mov.w	r9, #0
 8009ab4:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ab8:	f104 0a1a 	add.w	sl, r4, #26
 8009abc:	45c8      	cmp	r8, r9
 8009abe:	dc09      	bgt.n	8009ad4 <_printf_float+0x250>
 8009ac0:	6823      	ldr	r3, [r4, #0]
 8009ac2:	079b      	lsls	r3, r3, #30
 8009ac4:	f100 8103 	bmi.w	8009cce <_printf_float+0x44a>
 8009ac8:	68e0      	ldr	r0, [r4, #12]
 8009aca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009acc:	4298      	cmp	r0, r3
 8009ace:	bfb8      	it	lt
 8009ad0:	4618      	movlt	r0, r3
 8009ad2:	e734      	b.n	800993e <_printf_float+0xba>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	4652      	mov	r2, sl
 8009ad8:	4631      	mov	r1, r6
 8009ada:	4628      	mov	r0, r5
 8009adc:	47b8      	blx	r7
 8009ade:	3001      	adds	r0, #1
 8009ae0:	f43f af2b 	beq.w	800993a <_printf_float+0xb6>
 8009ae4:	f109 0901 	add.w	r9, r9, #1
 8009ae8:	e7e8      	b.n	8009abc <_printf_float+0x238>
 8009aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	dc39      	bgt.n	8009b64 <_printf_float+0x2e0>
 8009af0:	4a1b      	ldr	r2, [pc, #108]	@ (8009b60 <_printf_float+0x2dc>)
 8009af2:	2301      	movs	r3, #1
 8009af4:	4631      	mov	r1, r6
 8009af6:	4628      	mov	r0, r5
 8009af8:	47b8      	blx	r7
 8009afa:	3001      	adds	r0, #1
 8009afc:	f43f af1d 	beq.w	800993a <_printf_float+0xb6>
 8009b00:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009b04:	ea59 0303 	orrs.w	r3, r9, r3
 8009b08:	d102      	bne.n	8009b10 <_printf_float+0x28c>
 8009b0a:	6823      	ldr	r3, [r4, #0]
 8009b0c:	07d9      	lsls	r1, r3, #31
 8009b0e:	d5d7      	bpl.n	8009ac0 <_printf_float+0x23c>
 8009b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b14:	4631      	mov	r1, r6
 8009b16:	4628      	mov	r0, r5
 8009b18:	47b8      	blx	r7
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	f43f af0d 	beq.w	800993a <_printf_float+0xb6>
 8009b20:	f04f 0a00 	mov.w	sl, #0
 8009b24:	f104 0b1a 	add.w	fp, r4, #26
 8009b28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b2a:	425b      	negs	r3, r3
 8009b2c:	4553      	cmp	r3, sl
 8009b2e:	dc01      	bgt.n	8009b34 <_printf_float+0x2b0>
 8009b30:	464b      	mov	r3, r9
 8009b32:	e793      	b.n	8009a5c <_printf_float+0x1d8>
 8009b34:	2301      	movs	r3, #1
 8009b36:	465a      	mov	r2, fp
 8009b38:	4631      	mov	r1, r6
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	47b8      	blx	r7
 8009b3e:	3001      	adds	r0, #1
 8009b40:	f43f aefb 	beq.w	800993a <_printf_float+0xb6>
 8009b44:	f10a 0a01 	add.w	sl, sl, #1
 8009b48:	e7ee      	b.n	8009b28 <_printf_float+0x2a4>
 8009b4a:	bf00      	nop
 8009b4c:	7fefffff 	.word	0x7fefffff
 8009b50:	0800e055 	.word	0x0800e055
 8009b54:	0800e059 	.word	0x0800e059
 8009b58:	0800e05d 	.word	0x0800e05d
 8009b5c:	0800e061 	.word	0x0800e061
 8009b60:	0800e065 	.word	0x0800e065
 8009b64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009b66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009b6a:	4553      	cmp	r3, sl
 8009b6c:	bfa8      	it	ge
 8009b6e:	4653      	movge	r3, sl
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	4699      	mov	r9, r3
 8009b74:	dc36      	bgt.n	8009be4 <_printf_float+0x360>
 8009b76:	f04f 0b00 	mov.w	fp, #0
 8009b7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b7e:	f104 021a 	add.w	r2, r4, #26
 8009b82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009b84:	9306      	str	r3, [sp, #24]
 8009b86:	eba3 0309 	sub.w	r3, r3, r9
 8009b8a:	455b      	cmp	r3, fp
 8009b8c:	dc31      	bgt.n	8009bf2 <_printf_float+0x36e>
 8009b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b90:	459a      	cmp	sl, r3
 8009b92:	dc3a      	bgt.n	8009c0a <_printf_float+0x386>
 8009b94:	6823      	ldr	r3, [r4, #0]
 8009b96:	07da      	lsls	r2, r3, #31
 8009b98:	d437      	bmi.n	8009c0a <_printf_float+0x386>
 8009b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b9c:	ebaa 0903 	sub.w	r9, sl, r3
 8009ba0:	9b06      	ldr	r3, [sp, #24]
 8009ba2:	ebaa 0303 	sub.w	r3, sl, r3
 8009ba6:	4599      	cmp	r9, r3
 8009ba8:	bfa8      	it	ge
 8009baa:	4699      	movge	r9, r3
 8009bac:	f1b9 0f00 	cmp.w	r9, #0
 8009bb0:	dc33      	bgt.n	8009c1a <_printf_float+0x396>
 8009bb2:	f04f 0800 	mov.w	r8, #0
 8009bb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bba:	f104 0b1a 	add.w	fp, r4, #26
 8009bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bc0:	ebaa 0303 	sub.w	r3, sl, r3
 8009bc4:	eba3 0309 	sub.w	r3, r3, r9
 8009bc8:	4543      	cmp	r3, r8
 8009bca:	f77f af79 	ble.w	8009ac0 <_printf_float+0x23c>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	465a      	mov	r2, fp
 8009bd2:	4631      	mov	r1, r6
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	47b8      	blx	r7
 8009bd8:	3001      	adds	r0, #1
 8009bda:	f43f aeae 	beq.w	800993a <_printf_float+0xb6>
 8009bde:	f108 0801 	add.w	r8, r8, #1
 8009be2:	e7ec      	b.n	8009bbe <_printf_float+0x33a>
 8009be4:	4642      	mov	r2, r8
 8009be6:	4631      	mov	r1, r6
 8009be8:	4628      	mov	r0, r5
 8009bea:	47b8      	blx	r7
 8009bec:	3001      	adds	r0, #1
 8009bee:	d1c2      	bne.n	8009b76 <_printf_float+0x2f2>
 8009bf0:	e6a3      	b.n	800993a <_printf_float+0xb6>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	9206      	str	r2, [sp, #24]
 8009bfa:	47b8      	blx	r7
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	f43f ae9c 	beq.w	800993a <_printf_float+0xb6>
 8009c02:	9a06      	ldr	r2, [sp, #24]
 8009c04:	f10b 0b01 	add.w	fp, fp, #1
 8009c08:	e7bb      	b.n	8009b82 <_printf_float+0x2fe>
 8009c0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c0e:	4631      	mov	r1, r6
 8009c10:	4628      	mov	r0, r5
 8009c12:	47b8      	blx	r7
 8009c14:	3001      	adds	r0, #1
 8009c16:	d1c0      	bne.n	8009b9a <_printf_float+0x316>
 8009c18:	e68f      	b.n	800993a <_printf_float+0xb6>
 8009c1a:	9a06      	ldr	r2, [sp, #24]
 8009c1c:	464b      	mov	r3, r9
 8009c1e:	4442      	add	r2, r8
 8009c20:	4631      	mov	r1, r6
 8009c22:	4628      	mov	r0, r5
 8009c24:	47b8      	blx	r7
 8009c26:	3001      	adds	r0, #1
 8009c28:	d1c3      	bne.n	8009bb2 <_printf_float+0x32e>
 8009c2a:	e686      	b.n	800993a <_printf_float+0xb6>
 8009c2c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c30:	f1ba 0f01 	cmp.w	sl, #1
 8009c34:	dc01      	bgt.n	8009c3a <_printf_float+0x3b6>
 8009c36:	07db      	lsls	r3, r3, #31
 8009c38:	d536      	bpl.n	8009ca8 <_printf_float+0x424>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	4642      	mov	r2, r8
 8009c3e:	4631      	mov	r1, r6
 8009c40:	4628      	mov	r0, r5
 8009c42:	47b8      	blx	r7
 8009c44:	3001      	adds	r0, #1
 8009c46:	f43f ae78 	beq.w	800993a <_printf_float+0xb6>
 8009c4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c4e:	4631      	mov	r1, r6
 8009c50:	4628      	mov	r0, r5
 8009c52:	47b8      	blx	r7
 8009c54:	3001      	adds	r0, #1
 8009c56:	f43f ae70 	beq.w	800993a <_printf_float+0xb6>
 8009c5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c5e:	2200      	movs	r2, #0
 8009c60:	2300      	movs	r3, #0
 8009c62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c66:	f7f6 ff67 	bl	8000b38 <__aeabi_dcmpeq>
 8009c6a:	b9c0      	cbnz	r0, 8009c9e <_printf_float+0x41a>
 8009c6c:	4653      	mov	r3, sl
 8009c6e:	f108 0201 	add.w	r2, r8, #1
 8009c72:	4631      	mov	r1, r6
 8009c74:	4628      	mov	r0, r5
 8009c76:	47b8      	blx	r7
 8009c78:	3001      	adds	r0, #1
 8009c7a:	d10c      	bne.n	8009c96 <_printf_float+0x412>
 8009c7c:	e65d      	b.n	800993a <_printf_float+0xb6>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	465a      	mov	r2, fp
 8009c82:	4631      	mov	r1, r6
 8009c84:	4628      	mov	r0, r5
 8009c86:	47b8      	blx	r7
 8009c88:	3001      	adds	r0, #1
 8009c8a:	f43f ae56 	beq.w	800993a <_printf_float+0xb6>
 8009c8e:	f108 0801 	add.w	r8, r8, #1
 8009c92:	45d0      	cmp	r8, sl
 8009c94:	dbf3      	blt.n	8009c7e <_printf_float+0x3fa>
 8009c96:	464b      	mov	r3, r9
 8009c98:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009c9c:	e6df      	b.n	8009a5e <_printf_float+0x1da>
 8009c9e:	f04f 0800 	mov.w	r8, #0
 8009ca2:	f104 0b1a 	add.w	fp, r4, #26
 8009ca6:	e7f4      	b.n	8009c92 <_printf_float+0x40e>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	4642      	mov	r2, r8
 8009cac:	e7e1      	b.n	8009c72 <_printf_float+0x3ee>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	464a      	mov	r2, r9
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	47b8      	blx	r7
 8009cb8:	3001      	adds	r0, #1
 8009cba:	f43f ae3e 	beq.w	800993a <_printf_float+0xb6>
 8009cbe:	f108 0801 	add.w	r8, r8, #1
 8009cc2:	68e3      	ldr	r3, [r4, #12]
 8009cc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009cc6:	1a5b      	subs	r3, r3, r1
 8009cc8:	4543      	cmp	r3, r8
 8009cca:	dcf0      	bgt.n	8009cae <_printf_float+0x42a>
 8009ccc:	e6fc      	b.n	8009ac8 <_printf_float+0x244>
 8009cce:	f04f 0800 	mov.w	r8, #0
 8009cd2:	f104 0919 	add.w	r9, r4, #25
 8009cd6:	e7f4      	b.n	8009cc2 <_printf_float+0x43e>

08009cd8 <_printf_common>:
 8009cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cdc:	4616      	mov	r6, r2
 8009cde:	4698      	mov	r8, r3
 8009ce0:	688a      	ldr	r2, [r1, #8]
 8009ce2:	690b      	ldr	r3, [r1, #16]
 8009ce4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	bfb8      	it	lt
 8009cec:	4613      	movlt	r3, r2
 8009cee:	6033      	str	r3, [r6, #0]
 8009cf0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	b10a      	cbz	r2, 8009cfe <_printf_common+0x26>
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	6033      	str	r3, [r6, #0]
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	0699      	lsls	r1, r3, #26
 8009d02:	bf42      	ittt	mi
 8009d04:	6833      	ldrmi	r3, [r6, #0]
 8009d06:	3302      	addmi	r3, #2
 8009d08:	6033      	strmi	r3, [r6, #0]
 8009d0a:	6825      	ldr	r5, [r4, #0]
 8009d0c:	f015 0506 	ands.w	r5, r5, #6
 8009d10:	d106      	bne.n	8009d20 <_printf_common+0x48>
 8009d12:	f104 0a19 	add.w	sl, r4, #25
 8009d16:	68e3      	ldr	r3, [r4, #12]
 8009d18:	6832      	ldr	r2, [r6, #0]
 8009d1a:	1a9b      	subs	r3, r3, r2
 8009d1c:	42ab      	cmp	r3, r5
 8009d1e:	dc26      	bgt.n	8009d6e <_printf_common+0x96>
 8009d20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d24:	6822      	ldr	r2, [r4, #0]
 8009d26:	3b00      	subs	r3, #0
 8009d28:	bf18      	it	ne
 8009d2a:	2301      	movne	r3, #1
 8009d2c:	0692      	lsls	r2, r2, #26
 8009d2e:	d42b      	bmi.n	8009d88 <_printf_common+0xb0>
 8009d30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d34:	4641      	mov	r1, r8
 8009d36:	4638      	mov	r0, r7
 8009d38:	47c8      	blx	r9
 8009d3a:	3001      	adds	r0, #1
 8009d3c:	d01e      	beq.n	8009d7c <_printf_common+0xa4>
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	6922      	ldr	r2, [r4, #16]
 8009d42:	f003 0306 	and.w	r3, r3, #6
 8009d46:	2b04      	cmp	r3, #4
 8009d48:	bf02      	ittt	eq
 8009d4a:	68e5      	ldreq	r5, [r4, #12]
 8009d4c:	6833      	ldreq	r3, [r6, #0]
 8009d4e:	1aed      	subeq	r5, r5, r3
 8009d50:	68a3      	ldr	r3, [r4, #8]
 8009d52:	bf0c      	ite	eq
 8009d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d58:	2500      	movne	r5, #0
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	bfc4      	itt	gt
 8009d5e:	1a9b      	subgt	r3, r3, r2
 8009d60:	18ed      	addgt	r5, r5, r3
 8009d62:	2600      	movs	r6, #0
 8009d64:	341a      	adds	r4, #26
 8009d66:	42b5      	cmp	r5, r6
 8009d68:	d11a      	bne.n	8009da0 <_printf_common+0xc8>
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	e008      	b.n	8009d80 <_printf_common+0xa8>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	4652      	mov	r2, sl
 8009d72:	4641      	mov	r1, r8
 8009d74:	4638      	mov	r0, r7
 8009d76:	47c8      	blx	r9
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d103      	bne.n	8009d84 <_printf_common+0xac>
 8009d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d84:	3501      	adds	r5, #1
 8009d86:	e7c6      	b.n	8009d16 <_printf_common+0x3e>
 8009d88:	18e1      	adds	r1, r4, r3
 8009d8a:	1c5a      	adds	r2, r3, #1
 8009d8c:	2030      	movs	r0, #48	@ 0x30
 8009d8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009d92:	4422      	add	r2, r4
 8009d94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009d98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009d9c:	3302      	adds	r3, #2
 8009d9e:	e7c7      	b.n	8009d30 <_printf_common+0x58>
 8009da0:	2301      	movs	r3, #1
 8009da2:	4622      	mov	r2, r4
 8009da4:	4641      	mov	r1, r8
 8009da6:	4638      	mov	r0, r7
 8009da8:	47c8      	blx	r9
 8009daa:	3001      	adds	r0, #1
 8009dac:	d0e6      	beq.n	8009d7c <_printf_common+0xa4>
 8009dae:	3601      	adds	r6, #1
 8009db0:	e7d9      	b.n	8009d66 <_printf_common+0x8e>
	...

08009db4 <_printf_i>:
 8009db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009db8:	7e0f      	ldrb	r7, [r1, #24]
 8009dba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009dbc:	2f78      	cmp	r7, #120	@ 0x78
 8009dbe:	4691      	mov	r9, r2
 8009dc0:	4680      	mov	r8, r0
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	469a      	mov	sl, r3
 8009dc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009dca:	d807      	bhi.n	8009ddc <_printf_i+0x28>
 8009dcc:	2f62      	cmp	r7, #98	@ 0x62
 8009dce:	d80a      	bhi.n	8009de6 <_printf_i+0x32>
 8009dd0:	2f00      	cmp	r7, #0
 8009dd2:	f000 80d2 	beq.w	8009f7a <_printf_i+0x1c6>
 8009dd6:	2f58      	cmp	r7, #88	@ 0x58
 8009dd8:	f000 80b9 	beq.w	8009f4e <_printf_i+0x19a>
 8009ddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009de0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009de4:	e03a      	b.n	8009e5c <_printf_i+0xa8>
 8009de6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009dea:	2b15      	cmp	r3, #21
 8009dec:	d8f6      	bhi.n	8009ddc <_printf_i+0x28>
 8009dee:	a101      	add	r1, pc, #4	@ (adr r1, 8009df4 <_printf_i+0x40>)
 8009df0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009df4:	08009e4d 	.word	0x08009e4d
 8009df8:	08009e61 	.word	0x08009e61
 8009dfc:	08009ddd 	.word	0x08009ddd
 8009e00:	08009ddd 	.word	0x08009ddd
 8009e04:	08009ddd 	.word	0x08009ddd
 8009e08:	08009ddd 	.word	0x08009ddd
 8009e0c:	08009e61 	.word	0x08009e61
 8009e10:	08009ddd 	.word	0x08009ddd
 8009e14:	08009ddd 	.word	0x08009ddd
 8009e18:	08009ddd 	.word	0x08009ddd
 8009e1c:	08009ddd 	.word	0x08009ddd
 8009e20:	08009f61 	.word	0x08009f61
 8009e24:	08009e8b 	.word	0x08009e8b
 8009e28:	08009f1b 	.word	0x08009f1b
 8009e2c:	08009ddd 	.word	0x08009ddd
 8009e30:	08009ddd 	.word	0x08009ddd
 8009e34:	08009f83 	.word	0x08009f83
 8009e38:	08009ddd 	.word	0x08009ddd
 8009e3c:	08009e8b 	.word	0x08009e8b
 8009e40:	08009ddd 	.word	0x08009ddd
 8009e44:	08009ddd 	.word	0x08009ddd
 8009e48:	08009f23 	.word	0x08009f23
 8009e4c:	6833      	ldr	r3, [r6, #0]
 8009e4e:	1d1a      	adds	r2, r3, #4
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	6032      	str	r2, [r6, #0]
 8009e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e09d      	b.n	8009f9c <_printf_i+0x1e8>
 8009e60:	6833      	ldr	r3, [r6, #0]
 8009e62:	6820      	ldr	r0, [r4, #0]
 8009e64:	1d19      	adds	r1, r3, #4
 8009e66:	6031      	str	r1, [r6, #0]
 8009e68:	0606      	lsls	r6, r0, #24
 8009e6a:	d501      	bpl.n	8009e70 <_printf_i+0xbc>
 8009e6c:	681d      	ldr	r5, [r3, #0]
 8009e6e:	e003      	b.n	8009e78 <_printf_i+0xc4>
 8009e70:	0645      	lsls	r5, r0, #25
 8009e72:	d5fb      	bpl.n	8009e6c <_printf_i+0xb8>
 8009e74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009e78:	2d00      	cmp	r5, #0
 8009e7a:	da03      	bge.n	8009e84 <_printf_i+0xd0>
 8009e7c:	232d      	movs	r3, #45	@ 0x2d
 8009e7e:	426d      	negs	r5, r5
 8009e80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e84:	4859      	ldr	r0, [pc, #356]	@ (8009fec <_printf_i+0x238>)
 8009e86:	230a      	movs	r3, #10
 8009e88:	e011      	b.n	8009eae <_printf_i+0xfa>
 8009e8a:	6821      	ldr	r1, [r4, #0]
 8009e8c:	6833      	ldr	r3, [r6, #0]
 8009e8e:	0608      	lsls	r0, r1, #24
 8009e90:	f853 5b04 	ldr.w	r5, [r3], #4
 8009e94:	d402      	bmi.n	8009e9c <_printf_i+0xe8>
 8009e96:	0649      	lsls	r1, r1, #25
 8009e98:	bf48      	it	mi
 8009e9a:	b2ad      	uxthmi	r5, r5
 8009e9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009e9e:	4853      	ldr	r0, [pc, #332]	@ (8009fec <_printf_i+0x238>)
 8009ea0:	6033      	str	r3, [r6, #0]
 8009ea2:	bf14      	ite	ne
 8009ea4:	230a      	movne	r3, #10
 8009ea6:	2308      	moveq	r3, #8
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009eae:	6866      	ldr	r6, [r4, #4]
 8009eb0:	60a6      	str	r6, [r4, #8]
 8009eb2:	2e00      	cmp	r6, #0
 8009eb4:	bfa2      	ittt	ge
 8009eb6:	6821      	ldrge	r1, [r4, #0]
 8009eb8:	f021 0104 	bicge.w	r1, r1, #4
 8009ebc:	6021      	strge	r1, [r4, #0]
 8009ebe:	b90d      	cbnz	r5, 8009ec4 <_printf_i+0x110>
 8009ec0:	2e00      	cmp	r6, #0
 8009ec2:	d04b      	beq.n	8009f5c <_printf_i+0x1a8>
 8009ec4:	4616      	mov	r6, r2
 8009ec6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009eca:	fb03 5711 	mls	r7, r3, r1, r5
 8009ece:	5dc7      	ldrb	r7, [r0, r7]
 8009ed0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ed4:	462f      	mov	r7, r5
 8009ed6:	42bb      	cmp	r3, r7
 8009ed8:	460d      	mov	r5, r1
 8009eda:	d9f4      	bls.n	8009ec6 <_printf_i+0x112>
 8009edc:	2b08      	cmp	r3, #8
 8009ede:	d10b      	bne.n	8009ef8 <_printf_i+0x144>
 8009ee0:	6823      	ldr	r3, [r4, #0]
 8009ee2:	07df      	lsls	r7, r3, #31
 8009ee4:	d508      	bpl.n	8009ef8 <_printf_i+0x144>
 8009ee6:	6923      	ldr	r3, [r4, #16]
 8009ee8:	6861      	ldr	r1, [r4, #4]
 8009eea:	4299      	cmp	r1, r3
 8009eec:	bfde      	ittt	le
 8009eee:	2330      	movle	r3, #48	@ 0x30
 8009ef0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ef4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ef8:	1b92      	subs	r2, r2, r6
 8009efa:	6122      	str	r2, [r4, #16]
 8009efc:	f8cd a000 	str.w	sl, [sp]
 8009f00:	464b      	mov	r3, r9
 8009f02:	aa03      	add	r2, sp, #12
 8009f04:	4621      	mov	r1, r4
 8009f06:	4640      	mov	r0, r8
 8009f08:	f7ff fee6 	bl	8009cd8 <_printf_common>
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	d14a      	bne.n	8009fa6 <_printf_i+0x1f2>
 8009f10:	f04f 30ff 	mov.w	r0, #4294967295
 8009f14:	b004      	add	sp, #16
 8009f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	f043 0320 	orr.w	r3, r3, #32
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	4833      	ldr	r0, [pc, #204]	@ (8009ff0 <_printf_i+0x23c>)
 8009f24:	2778      	movs	r7, #120	@ 0x78
 8009f26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f2a:	6823      	ldr	r3, [r4, #0]
 8009f2c:	6831      	ldr	r1, [r6, #0]
 8009f2e:	061f      	lsls	r7, r3, #24
 8009f30:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f34:	d402      	bmi.n	8009f3c <_printf_i+0x188>
 8009f36:	065f      	lsls	r7, r3, #25
 8009f38:	bf48      	it	mi
 8009f3a:	b2ad      	uxthmi	r5, r5
 8009f3c:	6031      	str	r1, [r6, #0]
 8009f3e:	07d9      	lsls	r1, r3, #31
 8009f40:	bf44      	itt	mi
 8009f42:	f043 0320 	orrmi.w	r3, r3, #32
 8009f46:	6023      	strmi	r3, [r4, #0]
 8009f48:	b11d      	cbz	r5, 8009f52 <_printf_i+0x19e>
 8009f4a:	2310      	movs	r3, #16
 8009f4c:	e7ac      	b.n	8009ea8 <_printf_i+0xf4>
 8009f4e:	4827      	ldr	r0, [pc, #156]	@ (8009fec <_printf_i+0x238>)
 8009f50:	e7e9      	b.n	8009f26 <_printf_i+0x172>
 8009f52:	6823      	ldr	r3, [r4, #0]
 8009f54:	f023 0320 	bic.w	r3, r3, #32
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	e7f6      	b.n	8009f4a <_printf_i+0x196>
 8009f5c:	4616      	mov	r6, r2
 8009f5e:	e7bd      	b.n	8009edc <_printf_i+0x128>
 8009f60:	6833      	ldr	r3, [r6, #0]
 8009f62:	6825      	ldr	r5, [r4, #0]
 8009f64:	6961      	ldr	r1, [r4, #20]
 8009f66:	1d18      	adds	r0, r3, #4
 8009f68:	6030      	str	r0, [r6, #0]
 8009f6a:	062e      	lsls	r6, r5, #24
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	d501      	bpl.n	8009f74 <_printf_i+0x1c0>
 8009f70:	6019      	str	r1, [r3, #0]
 8009f72:	e002      	b.n	8009f7a <_printf_i+0x1c6>
 8009f74:	0668      	lsls	r0, r5, #25
 8009f76:	d5fb      	bpl.n	8009f70 <_printf_i+0x1bc>
 8009f78:	8019      	strh	r1, [r3, #0]
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	6123      	str	r3, [r4, #16]
 8009f7e:	4616      	mov	r6, r2
 8009f80:	e7bc      	b.n	8009efc <_printf_i+0x148>
 8009f82:	6833      	ldr	r3, [r6, #0]
 8009f84:	1d1a      	adds	r2, r3, #4
 8009f86:	6032      	str	r2, [r6, #0]
 8009f88:	681e      	ldr	r6, [r3, #0]
 8009f8a:	6862      	ldr	r2, [r4, #4]
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f7f6 f956 	bl	8000240 <memchr>
 8009f94:	b108      	cbz	r0, 8009f9a <_printf_i+0x1e6>
 8009f96:	1b80      	subs	r0, r0, r6
 8009f98:	6060      	str	r0, [r4, #4]
 8009f9a:	6863      	ldr	r3, [r4, #4]
 8009f9c:	6123      	str	r3, [r4, #16]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fa4:	e7aa      	b.n	8009efc <_printf_i+0x148>
 8009fa6:	6923      	ldr	r3, [r4, #16]
 8009fa8:	4632      	mov	r2, r6
 8009faa:	4649      	mov	r1, r9
 8009fac:	4640      	mov	r0, r8
 8009fae:	47d0      	blx	sl
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d0ad      	beq.n	8009f10 <_printf_i+0x15c>
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	079b      	lsls	r3, r3, #30
 8009fb8:	d413      	bmi.n	8009fe2 <_printf_i+0x22e>
 8009fba:	68e0      	ldr	r0, [r4, #12]
 8009fbc:	9b03      	ldr	r3, [sp, #12]
 8009fbe:	4298      	cmp	r0, r3
 8009fc0:	bfb8      	it	lt
 8009fc2:	4618      	movlt	r0, r3
 8009fc4:	e7a6      	b.n	8009f14 <_printf_i+0x160>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	4632      	mov	r2, r6
 8009fca:	4649      	mov	r1, r9
 8009fcc:	4640      	mov	r0, r8
 8009fce:	47d0      	blx	sl
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d09d      	beq.n	8009f10 <_printf_i+0x15c>
 8009fd4:	3501      	adds	r5, #1
 8009fd6:	68e3      	ldr	r3, [r4, #12]
 8009fd8:	9903      	ldr	r1, [sp, #12]
 8009fda:	1a5b      	subs	r3, r3, r1
 8009fdc:	42ab      	cmp	r3, r5
 8009fde:	dcf2      	bgt.n	8009fc6 <_printf_i+0x212>
 8009fe0:	e7eb      	b.n	8009fba <_printf_i+0x206>
 8009fe2:	2500      	movs	r5, #0
 8009fe4:	f104 0619 	add.w	r6, r4, #25
 8009fe8:	e7f5      	b.n	8009fd6 <_printf_i+0x222>
 8009fea:	bf00      	nop
 8009fec:	0800e067 	.word	0x0800e067
 8009ff0:	0800e078 	.word	0x0800e078

08009ff4 <_scanf_float>:
 8009ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff8:	b087      	sub	sp, #28
 8009ffa:	4617      	mov	r7, r2
 8009ffc:	9303      	str	r3, [sp, #12]
 8009ffe:	688b      	ldr	r3, [r1, #8]
 800a000:	1e5a      	subs	r2, r3, #1
 800a002:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a006:	bf81      	itttt	hi
 800a008:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a00c:	eb03 0b05 	addhi.w	fp, r3, r5
 800a010:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a014:	608b      	strhi	r3, [r1, #8]
 800a016:	680b      	ldr	r3, [r1, #0]
 800a018:	460a      	mov	r2, r1
 800a01a:	f04f 0500 	mov.w	r5, #0
 800a01e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a022:	f842 3b1c 	str.w	r3, [r2], #28
 800a026:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a02a:	4680      	mov	r8, r0
 800a02c:	460c      	mov	r4, r1
 800a02e:	bf98      	it	ls
 800a030:	f04f 0b00 	movls.w	fp, #0
 800a034:	9201      	str	r2, [sp, #4]
 800a036:	4616      	mov	r6, r2
 800a038:	46aa      	mov	sl, r5
 800a03a:	46a9      	mov	r9, r5
 800a03c:	9502      	str	r5, [sp, #8]
 800a03e:	68a2      	ldr	r2, [r4, #8]
 800a040:	b152      	cbz	r2, 800a058 <_scanf_float+0x64>
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	2b4e      	cmp	r3, #78	@ 0x4e
 800a048:	d864      	bhi.n	800a114 <_scanf_float+0x120>
 800a04a:	2b40      	cmp	r3, #64	@ 0x40
 800a04c:	d83c      	bhi.n	800a0c8 <_scanf_float+0xd4>
 800a04e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a052:	b2c8      	uxtb	r0, r1
 800a054:	280e      	cmp	r0, #14
 800a056:	d93a      	bls.n	800a0ce <_scanf_float+0xda>
 800a058:	f1b9 0f00 	cmp.w	r9, #0
 800a05c:	d003      	beq.n	800a066 <_scanf_float+0x72>
 800a05e:	6823      	ldr	r3, [r4, #0]
 800a060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a064:	6023      	str	r3, [r4, #0]
 800a066:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a06a:	f1ba 0f01 	cmp.w	sl, #1
 800a06e:	f200 8117 	bhi.w	800a2a0 <_scanf_float+0x2ac>
 800a072:	9b01      	ldr	r3, [sp, #4]
 800a074:	429e      	cmp	r6, r3
 800a076:	f200 8108 	bhi.w	800a28a <_scanf_float+0x296>
 800a07a:	2001      	movs	r0, #1
 800a07c:	b007      	add	sp, #28
 800a07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a082:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a086:	2a0d      	cmp	r2, #13
 800a088:	d8e6      	bhi.n	800a058 <_scanf_float+0x64>
 800a08a:	a101      	add	r1, pc, #4	@ (adr r1, 800a090 <_scanf_float+0x9c>)
 800a08c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a090:	0800a1d7 	.word	0x0800a1d7
 800a094:	0800a059 	.word	0x0800a059
 800a098:	0800a059 	.word	0x0800a059
 800a09c:	0800a059 	.word	0x0800a059
 800a0a0:	0800a237 	.word	0x0800a237
 800a0a4:	0800a20f 	.word	0x0800a20f
 800a0a8:	0800a059 	.word	0x0800a059
 800a0ac:	0800a059 	.word	0x0800a059
 800a0b0:	0800a1e5 	.word	0x0800a1e5
 800a0b4:	0800a059 	.word	0x0800a059
 800a0b8:	0800a059 	.word	0x0800a059
 800a0bc:	0800a059 	.word	0x0800a059
 800a0c0:	0800a059 	.word	0x0800a059
 800a0c4:	0800a19d 	.word	0x0800a19d
 800a0c8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a0cc:	e7db      	b.n	800a086 <_scanf_float+0x92>
 800a0ce:	290e      	cmp	r1, #14
 800a0d0:	d8c2      	bhi.n	800a058 <_scanf_float+0x64>
 800a0d2:	a001      	add	r0, pc, #4	@ (adr r0, 800a0d8 <_scanf_float+0xe4>)
 800a0d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a0d8:	0800a18d 	.word	0x0800a18d
 800a0dc:	0800a059 	.word	0x0800a059
 800a0e0:	0800a18d 	.word	0x0800a18d
 800a0e4:	0800a223 	.word	0x0800a223
 800a0e8:	0800a059 	.word	0x0800a059
 800a0ec:	0800a135 	.word	0x0800a135
 800a0f0:	0800a173 	.word	0x0800a173
 800a0f4:	0800a173 	.word	0x0800a173
 800a0f8:	0800a173 	.word	0x0800a173
 800a0fc:	0800a173 	.word	0x0800a173
 800a100:	0800a173 	.word	0x0800a173
 800a104:	0800a173 	.word	0x0800a173
 800a108:	0800a173 	.word	0x0800a173
 800a10c:	0800a173 	.word	0x0800a173
 800a110:	0800a173 	.word	0x0800a173
 800a114:	2b6e      	cmp	r3, #110	@ 0x6e
 800a116:	d809      	bhi.n	800a12c <_scanf_float+0x138>
 800a118:	2b60      	cmp	r3, #96	@ 0x60
 800a11a:	d8b2      	bhi.n	800a082 <_scanf_float+0x8e>
 800a11c:	2b54      	cmp	r3, #84	@ 0x54
 800a11e:	d07b      	beq.n	800a218 <_scanf_float+0x224>
 800a120:	2b59      	cmp	r3, #89	@ 0x59
 800a122:	d199      	bne.n	800a058 <_scanf_float+0x64>
 800a124:	2d07      	cmp	r5, #7
 800a126:	d197      	bne.n	800a058 <_scanf_float+0x64>
 800a128:	2508      	movs	r5, #8
 800a12a:	e02c      	b.n	800a186 <_scanf_float+0x192>
 800a12c:	2b74      	cmp	r3, #116	@ 0x74
 800a12e:	d073      	beq.n	800a218 <_scanf_float+0x224>
 800a130:	2b79      	cmp	r3, #121	@ 0x79
 800a132:	e7f6      	b.n	800a122 <_scanf_float+0x12e>
 800a134:	6821      	ldr	r1, [r4, #0]
 800a136:	05c8      	lsls	r0, r1, #23
 800a138:	d51b      	bpl.n	800a172 <_scanf_float+0x17e>
 800a13a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a13e:	6021      	str	r1, [r4, #0]
 800a140:	f109 0901 	add.w	r9, r9, #1
 800a144:	f1bb 0f00 	cmp.w	fp, #0
 800a148:	d003      	beq.n	800a152 <_scanf_float+0x15e>
 800a14a:	3201      	adds	r2, #1
 800a14c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a150:	60a2      	str	r2, [r4, #8]
 800a152:	68a3      	ldr	r3, [r4, #8]
 800a154:	3b01      	subs	r3, #1
 800a156:	60a3      	str	r3, [r4, #8]
 800a158:	6923      	ldr	r3, [r4, #16]
 800a15a:	3301      	adds	r3, #1
 800a15c:	6123      	str	r3, [r4, #16]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	3b01      	subs	r3, #1
 800a162:	2b00      	cmp	r3, #0
 800a164:	607b      	str	r3, [r7, #4]
 800a166:	f340 8087 	ble.w	800a278 <_scanf_float+0x284>
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	3301      	adds	r3, #1
 800a16e:	603b      	str	r3, [r7, #0]
 800a170:	e765      	b.n	800a03e <_scanf_float+0x4a>
 800a172:	eb1a 0105 	adds.w	r1, sl, r5
 800a176:	f47f af6f 	bne.w	800a058 <_scanf_float+0x64>
 800a17a:	6822      	ldr	r2, [r4, #0]
 800a17c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a180:	6022      	str	r2, [r4, #0]
 800a182:	460d      	mov	r5, r1
 800a184:	468a      	mov	sl, r1
 800a186:	f806 3b01 	strb.w	r3, [r6], #1
 800a18a:	e7e2      	b.n	800a152 <_scanf_float+0x15e>
 800a18c:	6822      	ldr	r2, [r4, #0]
 800a18e:	0610      	lsls	r0, r2, #24
 800a190:	f57f af62 	bpl.w	800a058 <_scanf_float+0x64>
 800a194:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a198:	6022      	str	r2, [r4, #0]
 800a19a:	e7f4      	b.n	800a186 <_scanf_float+0x192>
 800a19c:	f1ba 0f00 	cmp.w	sl, #0
 800a1a0:	d10e      	bne.n	800a1c0 <_scanf_float+0x1cc>
 800a1a2:	f1b9 0f00 	cmp.w	r9, #0
 800a1a6:	d10e      	bne.n	800a1c6 <_scanf_float+0x1d2>
 800a1a8:	6822      	ldr	r2, [r4, #0]
 800a1aa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a1ae:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a1b2:	d108      	bne.n	800a1c6 <_scanf_float+0x1d2>
 800a1b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a1b8:	6022      	str	r2, [r4, #0]
 800a1ba:	f04f 0a01 	mov.w	sl, #1
 800a1be:	e7e2      	b.n	800a186 <_scanf_float+0x192>
 800a1c0:	f1ba 0f02 	cmp.w	sl, #2
 800a1c4:	d055      	beq.n	800a272 <_scanf_float+0x27e>
 800a1c6:	2d01      	cmp	r5, #1
 800a1c8:	d002      	beq.n	800a1d0 <_scanf_float+0x1dc>
 800a1ca:	2d04      	cmp	r5, #4
 800a1cc:	f47f af44 	bne.w	800a058 <_scanf_float+0x64>
 800a1d0:	3501      	adds	r5, #1
 800a1d2:	b2ed      	uxtb	r5, r5
 800a1d4:	e7d7      	b.n	800a186 <_scanf_float+0x192>
 800a1d6:	f1ba 0f01 	cmp.w	sl, #1
 800a1da:	f47f af3d 	bne.w	800a058 <_scanf_float+0x64>
 800a1de:	f04f 0a02 	mov.w	sl, #2
 800a1e2:	e7d0      	b.n	800a186 <_scanf_float+0x192>
 800a1e4:	b97d      	cbnz	r5, 800a206 <_scanf_float+0x212>
 800a1e6:	f1b9 0f00 	cmp.w	r9, #0
 800a1ea:	f47f af38 	bne.w	800a05e <_scanf_float+0x6a>
 800a1ee:	6822      	ldr	r2, [r4, #0]
 800a1f0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a1f4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a1f8:	f040 8108 	bne.w	800a40c <_scanf_float+0x418>
 800a1fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a200:	6022      	str	r2, [r4, #0]
 800a202:	2501      	movs	r5, #1
 800a204:	e7bf      	b.n	800a186 <_scanf_float+0x192>
 800a206:	2d03      	cmp	r5, #3
 800a208:	d0e2      	beq.n	800a1d0 <_scanf_float+0x1dc>
 800a20a:	2d05      	cmp	r5, #5
 800a20c:	e7de      	b.n	800a1cc <_scanf_float+0x1d8>
 800a20e:	2d02      	cmp	r5, #2
 800a210:	f47f af22 	bne.w	800a058 <_scanf_float+0x64>
 800a214:	2503      	movs	r5, #3
 800a216:	e7b6      	b.n	800a186 <_scanf_float+0x192>
 800a218:	2d06      	cmp	r5, #6
 800a21a:	f47f af1d 	bne.w	800a058 <_scanf_float+0x64>
 800a21e:	2507      	movs	r5, #7
 800a220:	e7b1      	b.n	800a186 <_scanf_float+0x192>
 800a222:	6822      	ldr	r2, [r4, #0]
 800a224:	0591      	lsls	r1, r2, #22
 800a226:	f57f af17 	bpl.w	800a058 <_scanf_float+0x64>
 800a22a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a22e:	6022      	str	r2, [r4, #0]
 800a230:	f8cd 9008 	str.w	r9, [sp, #8]
 800a234:	e7a7      	b.n	800a186 <_scanf_float+0x192>
 800a236:	6822      	ldr	r2, [r4, #0]
 800a238:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a23c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a240:	d006      	beq.n	800a250 <_scanf_float+0x25c>
 800a242:	0550      	lsls	r0, r2, #21
 800a244:	f57f af08 	bpl.w	800a058 <_scanf_float+0x64>
 800a248:	f1b9 0f00 	cmp.w	r9, #0
 800a24c:	f000 80de 	beq.w	800a40c <_scanf_float+0x418>
 800a250:	0591      	lsls	r1, r2, #22
 800a252:	bf58      	it	pl
 800a254:	9902      	ldrpl	r1, [sp, #8]
 800a256:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a25a:	bf58      	it	pl
 800a25c:	eba9 0101 	subpl.w	r1, r9, r1
 800a260:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a264:	bf58      	it	pl
 800a266:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a26a:	6022      	str	r2, [r4, #0]
 800a26c:	f04f 0900 	mov.w	r9, #0
 800a270:	e789      	b.n	800a186 <_scanf_float+0x192>
 800a272:	f04f 0a03 	mov.w	sl, #3
 800a276:	e786      	b.n	800a186 <_scanf_float+0x192>
 800a278:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a27c:	4639      	mov	r1, r7
 800a27e:	4640      	mov	r0, r8
 800a280:	4798      	blx	r3
 800a282:	2800      	cmp	r0, #0
 800a284:	f43f aedb 	beq.w	800a03e <_scanf_float+0x4a>
 800a288:	e6e6      	b.n	800a058 <_scanf_float+0x64>
 800a28a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a28e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a292:	463a      	mov	r2, r7
 800a294:	4640      	mov	r0, r8
 800a296:	4798      	blx	r3
 800a298:	6923      	ldr	r3, [r4, #16]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	6123      	str	r3, [r4, #16]
 800a29e:	e6e8      	b.n	800a072 <_scanf_float+0x7e>
 800a2a0:	1e6b      	subs	r3, r5, #1
 800a2a2:	2b06      	cmp	r3, #6
 800a2a4:	d824      	bhi.n	800a2f0 <_scanf_float+0x2fc>
 800a2a6:	2d02      	cmp	r5, #2
 800a2a8:	d836      	bhi.n	800a318 <_scanf_float+0x324>
 800a2aa:	9b01      	ldr	r3, [sp, #4]
 800a2ac:	429e      	cmp	r6, r3
 800a2ae:	f67f aee4 	bls.w	800a07a <_scanf_float+0x86>
 800a2b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a2b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2ba:	463a      	mov	r2, r7
 800a2bc:	4640      	mov	r0, r8
 800a2be:	4798      	blx	r3
 800a2c0:	6923      	ldr	r3, [r4, #16]
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	6123      	str	r3, [r4, #16]
 800a2c6:	e7f0      	b.n	800a2aa <_scanf_float+0x2b6>
 800a2c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a2cc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a2d0:	463a      	mov	r2, r7
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	4798      	blx	r3
 800a2d6:	6923      	ldr	r3, [r4, #16]
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	6123      	str	r3, [r4, #16]
 800a2dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2e0:	fa5f fa8a 	uxtb.w	sl, sl
 800a2e4:	f1ba 0f02 	cmp.w	sl, #2
 800a2e8:	d1ee      	bne.n	800a2c8 <_scanf_float+0x2d4>
 800a2ea:	3d03      	subs	r5, #3
 800a2ec:	b2ed      	uxtb	r5, r5
 800a2ee:	1b76      	subs	r6, r6, r5
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	05da      	lsls	r2, r3, #23
 800a2f4:	d530      	bpl.n	800a358 <_scanf_float+0x364>
 800a2f6:	055b      	lsls	r3, r3, #21
 800a2f8:	d511      	bpl.n	800a31e <_scanf_float+0x32a>
 800a2fa:	9b01      	ldr	r3, [sp, #4]
 800a2fc:	429e      	cmp	r6, r3
 800a2fe:	f67f aebc 	bls.w	800a07a <_scanf_float+0x86>
 800a302:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a306:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a30a:	463a      	mov	r2, r7
 800a30c:	4640      	mov	r0, r8
 800a30e:	4798      	blx	r3
 800a310:	6923      	ldr	r3, [r4, #16]
 800a312:	3b01      	subs	r3, #1
 800a314:	6123      	str	r3, [r4, #16]
 800a316:	e7f0      	b.n	800a2fa <_scanf_float+0x306>
 800a318:	46aa      	mov	sl, r5
 800a31a:	46b3      	mov	fp, r6
 800a31c:	e7de      	b.n	800a2dc <_scanf_float+0x2e8>
 800a31e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a322:	6923      	ldr	r3, [r4, #16]
 800a324:	2965      	cmp	r1, #101	@ 0x65
 800a326:	f103 33ff 	add.w	r3, r3, #4294967295
 800a32a:	f106 35ff 	add.w	r5, r6, #4294967295
 800a32e:	6123      	str	r3, [r4, #16]
 800a330:	d00c      	beq.n	800a34c <_scanf_float+0x358>
 800a332:	2945      	cmp	r1, #69	@ 0x45
 800a334:	d00a      	beq.n	800a34c <_scanf_float+0x358>
 800a336:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a33a:	463a      	mov	r2, r7
 800a33c:	4640      	mov	r0, r8
 800a33e:	4798      	blx	r3
 800a340:	6923      	ldr	r3, [r4, #16]
 800a342:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a346:	3b01      	subs	r3, #1
 800a348:	1eb5      	subs	r5, r6, #2
 800a34a:	6123      	str	r3, [r4, #16]
 800a34c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a350:	463a      	mov	r2, r7
 800a352:	4640      	mov	r0, r8
 800a354:	4798      	blx	r3
 800a356:	462e      	mov	r6, r5
 800a358:	6822      	ldr	r2, [r4, #0]
 800a35a:	f012 0210 	ands.w	r2, r2, #16
 800a35e:	d001      	beq.n	800a364 <_scanf_float+0x370>
 800a360:	2000      	movs	r0, #0
 800a362:	e68b      	b.n	800a07c <_scanf_float+0x88>
 800a364:	7032      	strb	r2, [r6, #0]
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a36c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a370:	d11c      	bne.n	800a3ac <_scanf_float+0x3b8>
 800a372:	9b02      	ldr	r3, [sp, #8]
 800a374:	454b      	cmp	r3, r9
 800a376:	eba3 0209 	sub.w	r2, r3, r9
 800a37a:	d123      	bne.n	800a3c4 <_scanf_float+0x3d0>
 800a37c:	9901      	ldr	r1, [sp, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	4640      	mov	r0, r8
 800a382:	f002 fca5 	bl	800ccd0 <_strtod_r>
 800a386:	9b03      	ldr	r3, [sp, #12]
 800a388:	6821      	ldr	r1, [r4, #0]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f011 0f02 	tst.w	r1, #2
 800a390:	ec57 6b10 	vmov	r6, r7, d0
 800a394:	f103 0204 	add.w	r2, r3, #4
 800a398:	d01f      	beq.n	800a3da <_scanf_float+0x3e6>
 800a39a:	9903      	ldr	r1, [sp, #12]
 800a39c:	600a      	str	r2, [r1, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	e9c3 6700 	strd	r6, r7, [r3]
 800a3a4:	68e3      	ldr	r3, [r4, #12]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	60e3      	str	r3, [r4, #12]
 800a3aa:	e7d9      	b.n	800a360 <_scanf_float+0x36c>
 800a3ac:	9b04      	ldr	r3, [sp, #16]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0e4      	beq.n	800a37c <_scanf_float+0x388>
 800a3b2:	9905      	ldr	r1, [sp, #20]
 800a3b4:	230a      	movs	r3, #10
 800a3b6:	3101      	adds	r1, #1
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	f7ff f9b7 	bl	800972c <_strtol_r>
 800a3be:	9b04      	ldr	r3, [sp, #16]
 800a3c0:	9e05      	ldr	r6, [sp, #20]
 800a3c2:	1ac2      	subs	r2, r0, r3
 800a3c4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a3c8:	429e      	cmp	r6, r3
 800a3ca:	bf28      	it	cs
 800a3cc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a3d0:	4910      	ldr	r1, [pc, #64]	@ (800a414 <_scanf_float+0x420>)
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f000 f918 	bl	800a608 <siprintf>
 800a3d8:	e7d0      	b.n	800a37c <_scanf_float+0x388>
 800a3da:	f011 0f04 	tst.w	r1, #4
 800a3de:	9903      	ldr	r1, [sp, #12]
 800a3e0:	600a      	str	r2, [r1, #0]
 800a3e2:	d1dc      	bne.n	800a39e <_scanf_float+0x3aa>
 800a3e4:	681d      	ldr	r5, [r3, #0]
 800a3e6:	4632      	mov	r2, r6
 800a3e8:	463b      	mov	r3, r7
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	4639      	mov	r1, r7
 800a3ee:	f7f6 fbd5 	bl	8000b9c <__aeabi_dcmpun>
 800a3f2:	b128      	cbz	r0, 800a400 <_scanf_float+0x40c>
 800a3f4:	4808      	ldr	r0, [pc, #32]	@ (800a418 <_scanf_float+0x424>)
 800a3f6:	f000 fa47 	bl	800a888 <nanf>
 800a3fa:	ed85 0a00 	vstr	s0, [r5]
 800a3fe:	e7d1      	b.n	800a3a4 <_scanf_float+0x3b0>
 800a400:	4630      	mov	r0, r6
 800a402:	4639      	mov	r1, r7
 800a404:	f7f6 fc28 	bl	8000c58 <__aeabi_d2f>
 800a408:	6028      	str	r0, [r5, #0]
 800a40a:	e7cb      	b.n	800a3a4 <_scanf_float+0x3b0>
 800a40c:	f04f 0900 	mov.w	r9, #0
 800a410:	e629      	b.n	800a066 <_scanf_float+0x72>
 800a412:	bf00      	nop
 800a414:	0800e089 	.word	0x0800e089
 800a418:	0800e13a 	.word	0x0800e13a

0800a41c <std>:
 800a41c:	2300      	movs	r3, #0
 800a41e:	b510      	push	{r4, lr}
 800a420:	4604      	mov	r4, r0
 800a422:	e9c0 3300 	strd	r3, r3, [r0]
 800a426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a42a:	6083      	str	r3, [r0, #8]
 800a42c:	8181      	strh	r1, [r0, #12]
 800a42e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a430:	81c2      	strh	r2, [r0, #14]
 800a432:	6183      	str	r3, [r0, #24]
 800a434:	4619      	mov	r1, r3
 800a436:	2208      	movs	r2, #8
 800a438:	305c      	adds	r0, #92	@ 0x5c
 800a43a:	f000 f948 	bl	800a6ce <memset>
 800a43e:	4b0d      	ldr	r3, [pc, #52]	@ (800a474 <std+0x58>)
 800a440:	6263      	str	r3, [r4, #36]	@ 0x24
 800a442:	4b0d      	ldr	r3, [pc, #52]	@ (800a478 <std+0x5c>)
 800a444:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a446:	4b0d      	ldr	r3, [pc, #52]	@ (800a47c <std+0x60>)
 800a448:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a44a:	4b0d      	ldr	r3, [pc, #52]	@ (800a480 <std+0x64>)
 800a44c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a44e:	4b0d      	ldr	r3, [pc, #52]	@ (800a484 <std+0x68>)
 800a450:	6224      	str	r4, [r4, #32]
 800a452:	429c      	cmp	r4, r3
 800a454:	d006      	beq.n	800a464 <std+0x48>
 800a456:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a45a:	4294      	cmp	r4, r2
 800a45c:	d002      	beq.n	800a464 <std+0x48>
 800a45e:	33d0      	adds	r3, #208	@ 0xd0
 800a460:	429c      	cmp	r4, r3
 800a462:	d105      	bne.n	800a470 <std+0x54>
 800a464:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a46c:	f000 ba08 	b.w	800a880 <__retarget_lock_init_recursive>
 800a470:	bd10      	pop	{r4, pc}
 800a472:	bf00      	nop
 800a474:	0800a649 	.word	0x0800a649
 800a478:	0800a66b 	.word	0x0800a66b
 800a47c:	0800a6a3 	.word	0x0800a6a3
 800a480:	0800a6c7 	.word	0x0800a6c7
 800a484:	200006dc 	.word	0x200006dc

0800a488 <stdio_exit_handler>:
 800a488:	4a02      	ldr	r2, [pc, #8]	@ (800a494 <stdio_exit_handler+0xc>)
 800a48a:	4903      	ldr	r1, [pc, #12]	@ (800a498 <stdio_exit_handler+0x10>)
 800a48c:	4803      	ldr	r0, [pc, #12]	@ (800a49c <stdio_exit_handler+0x14>)
 800a48e:	f000 b869 	b.w	800a564 <_fwalk_sglue>
 800a492:	bf00      	nop
 800a494:	200000f0 	.word	0x200000f0
 800a498:	0800d095 	.word	0x0800d095
 800a49c:	20000100 	.word	0x20000100

0800a4a0 <cleanup_stdio>:
 800a4a0:	6841      	ldr	r1, [r0, #4]
 800a4a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d4 <cleanup_stdio+0x34>)
 800a4a4:	4299      	cmp	r1, r3
 800a4a6:	b510      	push	{r4, lr}
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	d001      	beq.n	800a4b0 <cleanup_stdio+0x10>
 800a4ac:	f002 fdf2 	bl	800d094 <_fflush_r>
 800a4b0:	68a1      	ldr	r1, [r4, #8]
 800a4b2:	4b09      	ldr	r3, [pc, #36]	@ (800a4d8 <cleanup_stdio+0x38>)
 800a4b4:	4299      	cmp	r1, r3
 800a4b6:	d002      	beq.n	800a4be <cleanup_stdio+0x1e>
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f002 fdeb 	bl	800d094 <_fflush_r>
 800a4be:	68e1      	ldr	r1, [r4, #12]
 800a4c0:	4b06      	ldr	r3, [pc, #24]	@ (800a4dc <cleanup_stdio+0x3c>)
 800a4c2:	4299      	cmp	r1, r3
 800a4c4:	d004      	beq.n	800a4d0 <cleanup_stdio+0x30>
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4cc:	f002 bde2 	b.w	800d094 <_fflush_r>
 800a4d0:	bd10      	pop	{r4, pc}
 800a4d2:	bf00      	nop
 800a4d4:	200006dc 	.word	0x200006dc
 800a4d8:	20000744 	.word	0x20000744
 800a4dc:	200007ac 	.word	0x200007ac

0800a4e0 <global_stdio_init.part.0>:
 800a4e0:	b510      	push	{r4, lr}
 800a4e2:	4b0b      	ldr	r3, [pc, #44]	@ (800a510 <global_stdio_init.part.0+0x30>)
 800a4e4:	4c0b      	ldr	r4, [pc, #44]	@ (800a514 <global_stdio_init.part.0+0x34>)
 800a4e6:	4a0c      	ldr	r2, [pc, #48]	@ (800a518 <global_stdio_init.part.0+0x38>)
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	2104      	movs	r1, #4
 800a4f0:	f7ff ff94 	bl	800a41c <std>
 800a4f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	2109      	movs	r1, #9
 800a4fc:	f7ff ff8e 	bl	800a41c <std>
 800a500:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a504:	2202      	movs	r2, #2
 800a506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a50a:	2112      	movs	r1, #18
 800a50c:	f7ff bf86 	b.w	800a41c <std>
 800a510:	20000814 	.word	0x20000814
 800a514:	200006dc 	.word	0x200006dc
 800a518:	0800a489 	.word	0x0800a489

0800a51c <__sfp_lock_acquire>:
 800a51c:	4801      	ldr	r0, [pc, #4]	@ (800a524 <__sfp_lock_acquire+0x8>)
 800a51e:	f000 b9b0 	b.w	800a882 <__retarget_lock_acquire_recursive>
 800a522:	bf00      	nop
 800a524:	2000081d 	.word	0x2000081d

0800a528 <__sfp_lock_release>:
 800a528:	4801      	ldr	r0, [pc, #4]	@ (800a530 <__sfp_lock_release+0x8>)
 800a52a:	f000 b9ab 	b.w	800a884 <__retarget_lock_release_recursive>
 800a52e:	bf00      	nop
 800a530:	2000081d 	.word	0x2000081d

0800a534 <__sinit>:
 800a534:	b510      	push	{r4, lr}
 800a536:	4604      	mov	r4, r0
 800a538:	f7ff fff0 	bl	800a51c <__sfp_lock_acquire>
 800a53c:	6a23      	ldr	r3, [r4, #32]
 800a53e:	b11b      	cbz	r3, 800a548 <__sinit+0x14>
 800a540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a544:	f7ff bff0 	b.w	800a528 <__sfp_lock_release>
 800a548:	4b04      	ldr	r3, [pc, #16]	@ (800a55c <__sinit+0x28>)
 800a54a:	6223      	str	r3, [r4, #32]
 800a54c:	4b04      	ldr	r3, [pc, #16]	@ (800a560 <__sinit+0x2c>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1f5      	bne.n	800a540 <__sinit+0xc>
 800a554:	f7ff ffc4 	bl	800a4e0 <global_stdio_init.part.0>
 800a558:	e7f2      	b.n	800a540 <__sinit+0xc>
 800a55a:	bf00      	nop
 800a55c:	0800a4a1 	.word	0x0800a4a1
 800a560:	20000814 	.word	0x20000814

0800a564 <_fwalk_sglue>:
 800a564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a568:	4607      	mov	r7, r0
 800a56a:	4688      	mov	r8, r1
 800a56c:	4614      	mov	r4, r2
 800a56e:	2600      	movs	r6, #0
 800a570:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a574:	f1b9 0901 	subs.w	r9, r9, #1
 800a578:	d505      	bpl.n	800a586 <_fwalk_sglue+0x22>
 800a57a:	6824      	ldr	r4, [r4, #0]
 800a57c:	2c00      	cmp	r4, #0
 800a57e:	d1f7      	bne.n	800a570 <_fwalk_sglue+0xc>
 800a580:	4630      	mov	r0, r6
 800a582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a586:	89ab      	ldrh	r3, [r5, #12]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d907      	bls.n	800a59c <_fwalk_sglue+0x38>
 800a58c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a590:	3301      	adds	r3, #1
 800a592:	d003      	beq.n	800a59c <_fwalk_sglue+0x38>
 800a594:	4629      	mov	r1, r5
 800a596:	4638      	mov	r0, r7
 800a598:	47c0      	blx	r8
 800a59a:	4306      	orrs	r6, r0
 800a59c:	3568      	adds	r5, #104	@ 0x68
 800a59e:	e7e9      	b.n	800a574 <_fwalk_sglue+0x10>

0800a5a0 <sniprintf>:
 800a5a0:	b40c      	push	{r2, r3}
 800a5a2:	b530      	push	{r4, r5, lr}
 800a5a4:	4b17      	ldr	r3, [pc, #92]	@ (800a604 <sniprintf+0x64>)
 800a5a6:	1e0c      	subs	r4, r1, #0
 800a5a8:	681d      	ldr	r5, [r3, #0]
 800a5aa:	b09d      	sub	sp, #116	@ 0x74
 800a5ac:	da08      	bge.n	800a5c0 <sniprintf+0x20>
 800a5ae:	238b      	movs	r3, #139	@ 0x8b
 800a5b0:	602b      	str	r3, [r5, #0]
 800a5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b6:	b01d      	add	sp, #116	@ 0x74
 800a5b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5bc:	b002      	add	sp, #8
 800a5be:	4770      	bx	lr
 800a5c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a5c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a5c8:	bf14      	ite	ne
 800a5ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a5ce:	4623      	moveq	r3, r4
 800a5d0:	9304      	str	r3, [sp, #16]
 800a5d2:	9307      	str	r3, [sp, #28]
 800a5d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a5d8:	9002      	str	r0, [sp, #8]
 800a5da:	9006      	str	r0, [sp, #24]
 800a5dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a5e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a5e2:	ab21      	add	r3, sp, #132	@ 0x84
 800a5e4:	a902      	add	r1, sp, #8
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	f002 fbd3 	bl	800cd94 <_svfiprintf_r>
 800a5ee:	1c43      	adds	r3, r0, #1
 800a5f0:	bfbc      	itt	lt
 800a5f2:	238b      	movlt	r3, #139	@ 0x8b
 800a5f4:	602b      	strlt	r3, [r5, #0]
 800a5f6:	2c00      	cmp	r4, #0
 800a5f8:	d0dd      	beq.n	800a5b6 <sniprintf+0x16>
 800a5fa:	9b02      	ldr	r3, [sp, #8]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	701a      	strb	r2, [r3, #0]
 800a600:	e7d9      	b.n	800a5b6 <sniprintf+0x16>
 800a602:	bf00      	nop
 800a604:	200000fc 	.word	0x200000fc

0800a608 <siprintf>:
 800a608:	b40e      	push	{r1, r2, r3}
 800a60a:	b500      	push	{lr}
 800a60c:	b09c      	sub	sp, #112	@ 0x70
 800a60e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a610:	9002      	str	r0, [sp, #8]
 800a612:	9006      	str	r0, [sp, #24]
 800a614:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a618:	4809      	ldr	r0, [pc, #36]	@ (800a640 <siprintf+0x38>)
 800a61a:	9107      	str	r1, [sp, #28]
 800a61c:	9104      	str	r1, [sp, #16]
 800a61e:	4909      	ldr	r1, [pc, #36]	@ (800a644 <siprintf+0x3c>)
 800a620:	f853 2b04 	ldr.w	r2, [r3], #4
 800a624:	9105      	str	r1, [sp, #20]
 800a626:	6800      	ldr	r0, [r0, #0]
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	a902      	add	r1, sp, #8
 800a62c:	f002 fbb2 	bl	800cd94 <_svfiprintf_r>
 800a630:	9b02      	ldr	r3, [sp, #8]
 800a632:	2200      	movs	r2, #0
 800a634:	701a      	strb	r2, [r3, #0]
 800a636:	b01c      	add	sp, #112	@ 0x70
 800a638:	f85d eb04 	ldr.w	lr, [sp], #4
 800a63c:	b003      	add	sp, #12
 800a63e:	4770      	bx	lr
 800a640:	200000fc 	.word	0x200000fc
 800a644:	ffff0208 	.word	0xffff0208

0800a648 <__sread>:
 800a648:	b510      	push	{r4, lr}
 800a64a:	460c      	mov	r4, r1
 800a64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a650:	f000 f8c8 	bl	800a7e4 <_read_r>
 800a654:	2800      	cmp	r0, #0
 800a656:	bfab      	itete	ge
 800a658:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a65a:	89a3      	ldrhlt	r3, [r4, #12]
 800a65c:	181b      	addge	r3, r3, r0
 800a65e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a662:	bfac      	ite	ge
 800a664:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a666:	81a3      	strhlt	r3, [r4, #12]
 800a668:	bd10      	pop	{r4, pc}

0800a66a <__swrite>:
 800a66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a66e:	461f      	mov	r7, r3
 800a670:	898b      	ldrh	r3, [r1, #12]
 800a672:	05db      	lsls	r3, r3, #23
 800a674:	4605      	mov	r5, r0
 800a676:	460c      	mov	r4, r1
 800a678:	4616      	mov	r6, r2
 800a67a:	d505      	bpl.n	800a688 <__swrite+0x1e>
 800a67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a680:	2302      	movs	r3, #2
 800a682:	2200      	movs	r2, #0
 800a684:	f000 f89c 	bl	800a7c0 <_lseek_r>
 800a688:	89a3      	ldrh	r3, [r4, #12]
 800a68a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a68e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a692:	81a3      	strh	r3, [r4, #12]
 800a694:	4632      	mov	r2, r6
 800a696:	463b      	mov	r3, r7
 800a698:	4628      	mov	r0, r5
 800a69a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a69e:	f000 b8b3 	b.w	800a808 <_write_r>

0800a6a2 <__sseek>:
 800a6a2:	b510      	push	{r4, lr}
 800a6a4:	460c      	mov	r4, r1
 800a6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6aa:	f000 f889 	bl	800a7c0 <_lseek_r>
 800a6ae:	1c43      	adds	r3, r0, #1
 800a6b0:	89a3      	ldrh	r3, [r4, #12]
 800a6b2:	bf15      	itete	ne
 800a6b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a6b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a6ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a6be:	81a3      	strheq	r3, [r4, #12]
 800a6c0:	bf18      	it	ne
 800a6c2:	81a3      	strhne	r3, [r4, #12]
 800a6c4:	bd10      	pop	{r4, pc}

0800a6c6 <__sclose>:
 800a6c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ca:	f000 b869 	b.w	800a7a0 <_close_r>

0800a6ce <memset>:
 800a6ce:	4402      	add	r2, r0
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d100      	bne.n	800a6d8 <memset+0xa>
 800a6d6:	4770      	bx	lr
 800a6d8:	f803 1b01 	strb.w	r1, [r3], #1
 800a6dc:	e7f9      	b.n	800a6d2 <memset+0x4>
	...

0800a6e0 <strtok>:
 800a6e0:	4b16      	ldr	r3, [pc, #88]	@ (800a73c <strtok+0x5c>)
 800a6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e6:	681f      	ldr	r7, [r3, #0]
 800a6e8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a6ea:	4605      	mov	r5, r0
 800a6ec:	460e      	mov	r6, r1
 800a6ee:	b9ec      	cbnz	r4, 800a72c <strtok+0x4c>
 800a6f0:	2050      	movs	r0, #80	@ 0x50
 800a6f2:	f000 ff83 	bl	800b5fc <malloc>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	6478      	str	r0, [r7, #68]	@ 0x44
 800a6fa:	b920      	cbnz	r0, 800a706 <strtok+0x26>
 800a6fc:	4b10      	ldr	r3, [pc, #64]	@ (800a740 <strtok+0x60>)
 800a6fe:	4811      	ldr	r0, [pc, #68]	@ (800a744 <strtok+0x64>)
 800a700:	215b      	movs	r1, #91	@ 0x5b
 800a702:	f000 f8c7 	bl	800a894 <__assert_func>
 800a706:	e9c0 4400 	strd	r4, r4, [r0]
 800a70a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a70e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a712:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a716:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a71a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a71e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a722:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a726:	6184      	str	r4, [r0, #24]
 800a728:	7704      	strb	r4, [r0, #28]
 800a72a:	6244      	str	r4, [r0, #36]	@ 0x24
 800a72c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a72e:	4631      	mov	r1, r6
 800a730:	4628      	mov	r0, r5
 800a732:	2301      	movs	r3, #1
 800a734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a738:	f000 b806 	b.w	800a748 <__strtok_r>
 800a73c:	200000fc 	.word	0x200000fc
 800a740:	0800e08e 	.word	0x0800e08e
 800a744:	0800e0a5 	.word	0x0800e0a5

0800a748 <__strtok_r>:
 800a748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a74a:	4604      	mov	r4, r0
 800a74c:	b908      	cbnz	r0, 800a752 <__strtok_r+0xa>
 800a74e:	6814      	ldr	r4, [r2, #0]
 800a750:	b144      	cbz	r4, 800a764 <__strtok_r+0x1c>
 800a752:	4620      	mov	r0, r4
 800a754:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a758:	460f      	mov	r7, r1
 800a75a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a75e:	b91e      	cbnz	r6, 800a768 <__strtok_r+0x20>
 800a760:	b965      	cbnz	r5, 800a77c <__strtok_r+0x34>
 800a762:	6015      	str	r5, [r2, #0]
 800a764:	2000      	movs	r0, #0
 800a766:	e005      	b.n	800a774 <__strtok_r+0x2c>
 800a768:	42b5      	cmp	r5, r6
 800a76a:	d1f6      	bne.n	800a75a <__strtok_r+0x12>
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1f0      	bne.n	800a752 <__strtok_r+0xa>
 800a770:	6014      	str	r4, [r2, #0]
 800a772:	7003      	strb	r3, [r0, #0]
 800a774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a776:	461c      	mov	r4, r3
 800a778:	e00c      	b.n	800a794 <__strtok_r+0x4c>
 800a77a:	b915      	cbnz	r5, 800a782 <__strtok_r+0x3a>
 800a77c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a780:	460e      	mov	r6, r1
 800a782:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a786:	42ab      	cmp	r3, r5
 800a788:	d1f7      	bne.n	800a77a <__strtok_r+0x32>
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d0f3      	beq.n	800a776 <__strtok_r+0x2e>
 800a78e:	2300      	movs	r3, #0
 800a790:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a794:	6014      	str	r4, [r2, #0]
 800a796:	e7ed      	b.n	800a774 <__strtok_r+0x2c>

0800a798 <_localeconv_r>:
 800a798:	4800      	ldr	r0, [pc, #0]	@ (800a79c <_localeconv_r+0x4>)
 800a79a:	4770      	bx	lr
 800a79c:	2000023c 	.word	0x2000023c

0800a7a0 <_close_r>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	4d06      	ldr	r5, [pc, #24]	@ (800a7bc <_close_r+0x1c>)
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	4608      	mov	r0, r1
 800a7aa:	602b      	str	r3, [r5, #0]
 800a7ac:	f7f7 f8fa 	bl	80019a4 <_close>
 800a7b0:	1c43      	adds	r3, r0, #1
 800a7b2:	d102      	bne.n	800a7ba <_close_r+0x1a>
 800a7b4:	682b      	ldr	r3, [r5, #0]
 800a7b6:	b103      	cbz	r3, 800a7ba <_close_r+0x1a>
 800a7b8:	6023      	str	r3, [r4, #0]
 800a7ba:	bd38      	pop	{r3, r4, r5, pc}
 800a7bc:	20000818 	.word	0x20000818

0800a7c0 <_lseek_r>:
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	4d07      	ldr	r5, [pc, #28]	@ (800a7e0 <_lseek_r+0x20>)
 800a7c4:	4604      	mov	r4, r0
 800a7c6:	4608      	mov	r0, r1
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	602a      	str	r2, [r5, #0]
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	f7f7 f90f 	bl	80019f2 <_lseek>
 800a7d4:	1c43      	adds	r3, r0, #1
 800a7d6:	d102      	bne.n	800a7de <_lseek_r+0x1e>
 800a7d8:	682b      	ldr	r3, [r5, #0]
 800a7da:	b103      	cbz	r3, 800a7de <_lseek_r+0x1e>
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	bd38      	pop	{r3, r4, r5, pc}
 800a7e0:	20000818 	.word	0x20000818

0800a7e4 <_read_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	4d07      	ldr	r5, [pc, #28]	@ (800a804 <_read_r+0x20>)
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	4608      	mov	r0, r1
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	602a      	str	r2, [r5, #0]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	f7f7 f89d 	bl	8001932 <_read>
 800a7f8:	1c43      	adds	r3, r0, #1
 800a7fa:	d102      	bne.n	800a802 <_read_r+0x1e>
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	b103      	cbz	r3, 800a802 <_read_r+0x1e>
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	20000818 	.word	0x20000818

0800a808 <_write_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4d07      	ldr	r5, [pc, #28]	@ (800a828 <_write_r+0x20>)
 800a80c:	4604      	mov	r4, r0
 800a80e:	4608      	mov	r0, r1
 800a810:	4611      	mov	r1, r2
 800a812:	2200      	movs	r2, #0
 800a814:	602a      	str	r2, [r5, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	f7f7 f8a8 	bl	800196c <_write>
 800a81c:	1c43      	adds	r3, r0, #1
 800a81e:	d102      	bne.n	800a826 <_write_r+0x1e>
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	b103      	cbz	r3, 800a826 <_write_r+0x1e>
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	bd38      	pop	{r3, r4, r5, pc}
 800a828:	20000818 	.word	0x20000818

0800a82c <__errno>:
 800a82c:	4b01      	ldr	r3, [pc, #4]	@ (800a834 <__errno+0x8>)
 800a82e:	6818      	ldr	r0, [r3, #0]
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	200000fc 	.word	0x200000fc

0800a838 <__libc_init_array>:
 800a838:	b570      	push	{r4, r5, r6, lr}
 800a83a:	4d0d      	ldr	r5, [pc, #52]	@ (800a870 <__libc_init_array+0x38>)
 800a83c:	4c0d      	ldr	r4, [pc, #52]	@ (800a874 <__libc_init_array+0x3c>)
 800a83e:	1b64      	subs	r4, r4, r5
 800a840:	10a4      	asrs	r4, r4, #2
 800a842:	2600      	movs	r6, #0
 800a844:	42a6      	cmp	r6, r4
 800a846:	d109      	bne.n	800a85c <__libc_init_array+0x24>
 800a848:	4d0b      	ldr	r5, [pc, #44]	@ (800a878 <__libc_init_array+0x40>)
 800a84a:	4c0c      	ldr	r4, [pc, #48]	@ (800a87c <__libc_init_array+0x44>)
 800a84c:	f003 faf6 	bl	800de3c <_init>
 800a850:	1b64      	subs	r4, r4, r5
 800a852:	10a4      	asrs	r4, r4, #2
 800a854:	2600      	movs	r6, #0
 800a856:	42a6      	cmp	r6, r4
 800a858:	d105      	bne.n	800a866 <__libc_init_array+0x2e>
 800a85a:	bd70      	pop	{r4, r5, r6, pc}
 800a85c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a860:	4798      	blx	r3
 800a862:	3601      	adds	r6, #1
 800a864:	e7ee      	b.n	800a844 <__libc_init_array+0xc>
 800a866:	f855 3b04 	ldr.w	r3, [r5], #4
 800a86a:	4798      	blx	r3
 800a86c:	3601      	adds	r6, #1
 800a86e:	e7f2      	b.n	800a856 <__libc_init_array+0x1e>
 800a870:	0800e3e4 	.word	0x0800e3e4
 800a874:	0800e3e4 	.word	0x0800e3e4
 800a878:	0800e3e4 	.word	0x0800e3e4
 800a87c:	0800e3e8 	.word	0x0800e3e8

0800a880 <__retarget_lock_init_recursive>:
 800a880:	4770      	bx	lr

0800a882 <__retarget_lock_acquire_recursive>:
 800a882:	4770      	bx	lr

0800a884 <__retarget_lock_release_recursive>:
 800a884:	4770      	bx	lr
	...

0800a888 <nanf>:
 800a888:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a890 <nanf+0x8>
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	7fc00000 	.word	0x7fc00000

0800a894 <__assert_func>:
 800a894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a896:	4614      	mov	r4, r2
 800a898:	461a      	mov	r2, r3
 800a89a:	4b09      	ldr	r3, [pc, #36]	@ (800a8c0 <__assert_func+0x2c>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4605      	mov	r5, r0
 800a8a0:	68d8      	ldr	r0, [r3, #12]
 800a8a2:	b954      	cbnz	r4, 800a8ba <__assert_func+0x26>
 800a8a4:	4b07      	ldr	r3, [pc, #28]	@ (800a8c4 <__assert_func+0x30>)
 800a8a6:	461c      	mov	r4, r3
 800a8a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8ac:	9100      	str	r1, [sp, #0]
 800a8ae:	462b      	mov	r3, r5
 800a8b0:	4905      	ldr	r1, [pc, #20]	@ (800a8c8 <__assert_func+0x34>)
 800a8b2:	f002 fc17 	bl	800d0e4 <fiprintf>
 800a8b6:	f002 fc7b 	bl	800d1b0 <abort>
 800a8ba:	4b04      	ldr	r3, [pc, #16]	@ (800a8cc <__assert_func+0x38>)
 800a8bc:	e7f4      	b.n	800a8a8 <__assert_func+0x14>
 800a8be:	bf00      	nop
 800a8c0:	200000fc 	.word	0x200000fc
 800a8c4:	0800e13a 	.word	0x0800e13a
 800a8c8:	0800e10c 	.word	0x0800e10c
 800a8cc:	0800e0ff 	.word	0x0800e0ff

0800a8d0 <quorem>:
 800a8d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d4:	6903      	ldr	r3, [r0, #16]
 800a8d6:	690c      	ldr	r4, [r1, #16]
 800a8d8:	42a3      	cmp	r3, r4
 800a8da:	4607      	mov	r7, r0
 800a8dc:	db7e      	blt.n	800a9dc <quorem+0x10c>
 800a8de:	3c01      	subs	r4, #1
 800a8e0:	f101 0814 	add.w	r8, r1, #20
 800a8e4:	00a3      	lsls	r3, r4, #2
 800a8e6:	f100 0514 	add.w	r5, r0, #20
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8f0:	9301      	str	r3, [sp, #4]
 800a8f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a902:	fbb2 f6f3 	udiv	r6, r2, r3
 800a906:	d32e      	bcc.n	800a966 <quorem+0x96>
 800a908:	f04f 0a00 	mov.w	sl, #0
 800a90c:	46c4      	mov	ip, r8
 800a90e:	46ae      	mov	lr, r5
 800a910:	46d3      	mov	fp, sl
 800a912:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a916:	b298      	uxth	r0, r3
 800a918:	fb06 a000 	mla	r0, r6, r0, sl
 800a91c:	0c02      	lsrs	r2, r0, #16
 800a91e:	0c1b      	lsrs	r3, r3, #16
 800a920:	fb06 2303 	mla	r3, r6, r3, r2
 800a924:	f8de 2000 	ldr.w	r2, [lr]
 800a928:	b280      	uxth	r0, r0
 800a92a:	b292      	uxth	r2, r2
 800a92c:	1a12      	subs	r2, r2, r0
 800a92e:	445a      	add	r2, fp
 800a930:	f8de 0000 	ldr.w	r0, [lr]
 800a934:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a938:	b29b      	uxth	r3, r3
 800a93a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a93e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a942:	b292      	uxth	r2, r2
 800a944:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a948:	45e1      	cmp	r9, ip
 800a94a:	f84e 2b04 	str.w	r2, [lr], #4
 800a94e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a952:	d2de      	bcs.n	800a912 <quorem+0x42>
 800a954:	9b00      	ldr	r3, [sp, #0]
 800a956:	58eb      	ldr	r3, [r5, r3]
 800a958:	b92b      	cbnz	r3, 800a966 <quorem+0x96>
 800a95a:	9b01      	ldr	r3, [sp, #4]
 800a95c:	3b04      	subs	r3, #4
 800a95e:	429d      	cmp	r5, r3
 800a960:	461a      	mov	r2, r3
 800a962:	d32f      	bcc.n	800a9c4 <quorem+0xf4>
 800a964:	613c      	str	r4, [r7, #16]
 800a966:	4638      	mov	r0, r7
 800a968:	f001 f9c2 	bl	800bcf0 <__mcmp>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	db25      	blt.n	800a9bc <quorem+0xec>
 800a970:	4629      	mov	r1, r5
 800a972:	2000      	movs	r0, #0
 800a974:	f858 2b04 	ldr.w	r2, [r8], #4
 800a978:	f8d1 c000 	ldr.w	ip, [r1]
 800a97c:	fa1f fe82 	uxth.w	lr, r2
 800a980:	fa1f f38c 	uxth.w	r3, ip
 800a984:	eba3 030e 	sub.w	r3, r3, lr
 800a988:	4403      	add	r3, r0
 800a98a:	0c12      	lsrs	r2, r2, #16
 800a98c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a990:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a994:	b29b      	uxth	r3, r3
 800a996:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a99a:	45c1      	cmp	r9, r8
 800a99c:	f841 3b04 	str.w	r3, [r1], #4
 800a9a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a9a4:	d2e6      	bcs.n	800a974 <quorem+0xa4>
 800a9a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9ae:	b922      	cbnz	r2, 800a9ba <quorem+0xea>
 800a9b0:	3b04      	subs	r3, #4
 800a9b2:	429d      	cmp	r5, r3
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	d30b      	bcc.n	800a9d0 <quorem+0x100>
 800a9b8:	613c      	str	r4, [r7, #16]
 800a9ba:	3601      	adds	r6, #1
 800a9bc:	4630      	mov	r0, r6
 800a9be:	b003      	add	sp, #12
 800a9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c4:	6812      	ldr	r2, [r2, #0]
 800a9c6:	3b04      	subs	r3, #4
 800a9c8:	2a00      	cmp	r2, #0
 800a9ca:	d1cb      	bne.n	800a964 <quorem+0x94>
 800a9cc:	3c01      	subs	r4, #1
 800a9ce:	e7c6      	b.n	800a95e <quorem+0x8e>
 800a9d0:	6812      	ldr	r2, [r2, #0]
 800a9d2:	3b04      	subs	r3, #4
 800a9d4:	2a00      	cmp	r2, #0
 800a9d6:	d1ef      	bne.n	800a9b8 <quorem+0xe8>
 800a9d8:	3c01      	subs	r4, #1
 800a9da:	e7ea      	b.n	800a9b2 <quorem+0xe2>
 800a9dc:	2000      	movs	r0, #0
 800a9de:	e7ee      	b.n	800a9be <quorem+0xee>

0800a9e0 <_dtoa_r>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	69c7      	ldr	r7, [r0, #28]
 800a9e6:	b099      	sub	sp, #100	@ 0x64
 800a9e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a9ec:	ec55 4b10 	vmov	r4, r5, d0
 800a9f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a9f2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a9f4:	4683      	mov	fp, r0
 800a9f6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a9fa:	b97f      	cbnz	r7, 800aa1c <_dtoa_r+0x3c>
 800a9fc:	2010      	movs	r0, #16
 800a9fe:	f000 fdfd 	bl	800b5fc <malloc>
 800aa02:	4602      	mov	r2, r0
 800aa04:	f8cb 001c 	str.w	r0, [fp, #28]
 800aa08:	b920      	cbnz	r0, 800aa14 <_dtoa_r+0x34>
 800aa0a:	4ba7      	ldr	r3, [pc, #668]	@ (800aca8 <_dtoa_r+0x2c8>)
 800aa0c:	21ef      	movs	r1, #239	@ 0xef
 800aa0e:	48a7      	ldr	r0, [pc, #668]	@ (800acac <_dtoa_r+0x2cc>)
 800aa10:	f7ff ff40 	bl	800a894 <__assert_func>
 800aa14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aa18:	6007      	str	r7, [r0, #0]
 800aa1a:	60c7      	str	r7, [r0, #12]
 800aa1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa20:	6819      	ldr	r1, [r3, #0]
 800aa22:	b159      	cbz	r1, 800aa3c <_dtoa_r+0x5c>
 800aa24:	685a      	ldr	r2, [r3, #4]
 800aa26:	604a      	str	r2, [r1, #4]
 800aa28:	2301      	movs	r3, #1
 800aa2a:	4093      	lsls	r3, r2
 800aa2c:	608b      	str	r3, [r1, #8]
 800aa2e:	4658      	mov	r0, fp
 800aa30:	f000 feda 	bl	800b7e8 <_Bfree>
 800aa34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	601a      	str	r2, [r3, #0]
 800aa3c:	1e2b      	subs	r3, r5, #0
 800aa3e:	bfb9      	ittee	lt
 800aa40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aa44:	9303      	strlt	r3, [sp, #12]
 800aa46:	2300      	movge	r3, #0
 800aa48:	6033      	strge	r3, [r6, #0]
 800aa4a:	9f03      	ldr	r7, [sp, #12]
 800aa4c:	4b98      	ldr	r3, [pc, #608]	@ (800acb0 <_dtoa_r+0x2d0>)
 800aa4e:	bfbc      	itt	lt
 800aa50:	2201      	movlt	r2, #1
 800aa52:	6032      	strlt	r2, [r6, #0]
 800aa54:	43bb      	bics	r3, r7
 800aa56:	d112      	bne.n	800aa7e <_dtoa_r+0x9e>
 800aa58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aa5e:	6013      	str	r3, [r2, #0]
 800aa60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa64:	4323      	orrs	r3, r4
 800aa66:	f000 854d 	beq.w	800b504 <_dtoa_r+0xb24>
 800aa6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800acc4 <_dtoa_r+0x2e4>
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 854f 	beq.w	800b514 <_dtoa_r+0xb34>
 800aa76:	f10a 0303 	add.w	r3, sl, #3
 800aa7a:	f000 bd49 	b.w	800b510 <_dtoa_r+0xb30>
 800aa7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa82:	2200      	movs	r2, #0
 800aa84:	ec51 0b17 	vmov	r0, r1, d7
 800aa88:	2300      	movs	r3, #0
 800aa8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800aa8e:	f7f6 f853 	bl	8000b38 <__aeabi_dcmpeq>
 800aa92:	4680      	mov	r8, r0
 800aa94:	b158      	cbz	r0, 800aaae <_dtoa_r+0xce>
 800aa96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa98:	2301      	movs	r3, #1
 800aa9a:	6013      	str	r3, [r2, #0]
 800aa9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa9e:	b113      	cbz	r3, 800aaa6 <_dtoa_r+0xc6>
 800aaa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aaa2:	4b84      	ldr	r3, [pc, #528]	@ (800acb4 <_dtoa_r+0x2d4>)
 800aaa4:	6013      	str	r3, [r2, #0]
 800aaa6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800acc8 <_dtoa_r+0x2e8>
 800aaaa:	f000 bd33 	b.w	800b514 <_dtoa_r+0xb34>
 800aaae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aab2:	aa16      	add	r2, sp, #88	@ 0x58
 800aab4:	a917      	add	r1, sp, #92	@ 0x5c
 800aab6:	4658      	mov	r0, fp
 800aab8:	f001 fa3a 	bl	800bf30 <__d2b>
 800aabc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aac0:	4681      	mov	r9, r0
 800aac2:	2e00      	cmp	r6, #0
 800aac4:	d077      	beq.n	800abb6 <_dtoa_r+0x1d6>
 800aac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aac8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aacc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aad4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aad8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aadc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aae0:	4619      	mov	r1, r3
 800aae2:	2200      	movs	r2, #0
 800aae4:	4b74      	ldr	r3, [pc, #464]	@ (800acb8 <_dtoa_r+0x2d8>)
 800aae6:	f7f5 fc07 	bl	80002f8 <__aeabi_dsub>
 800aaea:	a369      	add	r3, pc, #420	@ (adr r3, 800ac90 <_dtoa_r+0x2b0>)
 800aaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf0:	f7f5 fdba 	bl	8000668 <__aeabi_dmul>
 800aaf4:	a368      	add	r3, pc, #416	@ (adr r3, 800ac98 <_dtoa_r+0x2b8>)
 800aaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafa:	f7f5 fbff 	bl	80002fc <__adddf3>
 800aafe:	4604      	mov	r4, r0
 800ab00:	4630      	mov	r0, r6
 800ab02:	460d      	mov	r5, r1
 800ab04:	f7f5 fd46 	bl	8000594 <__aeabi_i2d>
 800ab08:	a365      	add	r3, pc, #404	@ (adr r3, 800aca0 <_dtoa_r+0x2c0>)
 800ab0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0e:	f7f5 fdab 	bl	8000668 <__aeabi_dmul>
 800ab12:	4602      	mov	r2, r0
 800ab14:	460b      	mov	r3, r1
 800ab16:	4620      	mov	r0, r4
 800ab18:	4629      	mov	r1, r5
 800ab1a:	f7f5 fbef 	bl	80002fc <__adddf3>
 800ab1e:	4604      	mov	r4, r0
 800ab20:	460d      	mov	r5, r1
 800ab22:	f7f6 f851 	bl	8000bc8 <__aeabi_d2iz>
 800ab26:	2200      	movs	r2, #0
 800ab28:	4607      	mov	r7, r0
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	4629      	mov	r1, r5
 800ab30:	f7f6 f80c 	bl	8000b4c <__aeabi_dcmplt>
 800ab34:	b140      	cbz	r0, 800ab48 <_dtoa_r+0x168>
 800ab36:	4638      	mov	r0, r7
 800ab38:	f7f5 fd2c 	bl	8000594 <__aeabi_i2d>
 800ab3c:	4622      	mov	r2, r4
 800ab3e:	462b      	mov	r3, r5
 800ab40:	f7f5 fffa 	bl	8000b38 <__aeabi_dcmpeq>
 800ab44:	b900      	cbnz	r0, 800ab48 <_dtoa_r+0x168>
 800ab46:	3f01      	subs	r7, #1
 800ab48:	2f16      	cmp	r7, #22
 800ab4a:	d851      	bhi.n	800abf0 <_dtoa_r+0x210>
 800ab4c:	4b5b      	ldr	r3, [pc, #364]	@ (800acbc <_dtoa_r+0x2dc>)
 800ab4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab5a:	f7f5 fff7 	bl	8000b4c <__aeabi_dcmplt>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d048      	beq.n	800abf4 <_dtoa_r+0x214>
 800ab62:	3f01      	subs	r7, #1
 800ab64:	2300      	movs	r3, #0
 800ab66:	9312      	str	r3, [sp, #72]	@ 0x48
 800ab68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ab6a:	1b9b      	subs	r3, r3, r6
 800ab6c:	1e5a      	subs	r2, r3, #1
 800ab6e:	bf44      	itt	mi
 800ab70:	f1c3 0801 	rsbmi	r8, r3, #1
 800ab74:	2300      	movmi	r3, #0
 800ab76:	9208      	str	r2, [sp, #32]
 800ab78:	bf54      	ite	pl
 800ab7a:	f04f 0800 	movpl.w	r8, #0
 800ab7e:	9308      	strmi	r3, [sp, #32]
 800ab80:	2f00      	cmp	r7, #0
 800ab82:	db39      	blt.n	800abf8 <_dtoa_r+0x218>
 800ab84:	9b08      	ldr	r3, [sp, #32]
 800ab86:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ab88:	443b      	add	r3, r7
 800ab8a:	9308      	str	r3, [sp, #32]
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab92:	2b09      	cmp	r3, #9
 800ab94:	d864      	bhi.n	800ac60 <_dtoa_r+0x280>
 800ab96:	2b05      	cmp	r3, #5
 800ab98:	bfc4      	itt	gt
 800ab9a:	3b04      	subgt	r3, #4
 800ab9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ab9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aba0:	f1a3 0302 	sub.w	r3, r3, #2
 800aba4:	bfcc      	ite	gt
 800aba6:	2400      	movgt	r4, #0
 800aba8:	2401      	movle	r4, #1
 800abaa:	2b03      	cmp	r3, #3
 800abac:	d863      	bhi.n	800ac76 <_dtoa_r+0x296>
 800abae:	e8df f003 	tbb	[pc, r3]
 800abb2:	372a      	.short	0x372a
 800abb4:	5535      	.short	0x5535
 800abb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800abba:	441e      	add	r6, r3
 800abbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800abc0:	2b20      	cmp	r3, #32
 800abc2:	bfc1      	itttt	gt
 800abc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800abc8:	409f      	lslgt	r7, r3
 800abca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800abce:	fa24 f303 	lsrgt.w	r3, r4, r3
 800abd2:	bfd6      	itet	le
 800abd4:	f1c3 0320 	rsble	r3, r3, #32
 800abd8:	ea47 0003 	orrgt.w	r0, r7, r3
 800abdc:	fa04 f003 	lslle.w	r0, r4, r3
 800abe0:	f7f5 fcc8 	bl	8000574 <__aeabi_ui2d>
 800abe4:	2201      	movs	r2, #1
 800abe6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800abea:	3e01      	subs	r6, #1
 800abec:	9214      	str	r2, [sp, #80]	@ 0x50
 800abee:	e777      	b.n	800aae0 <_dtoa_r+0x100>
 800abf0:	2301      	movs	r3, #1
 800abf2:	e7b8      	b.n	800ab66 <_dtoa_r+0x186>
 800abf4:	9012      	str	r0, [sp, #72]	@ 0x48
 800abf6:	e7b7      	b.n	800ab68 <_dtoa_r+0x188>
 800abf8:	427b      	negs	r3, r7
 800abfa:	930a      	str	r3, [sp, #40]	@ 0x28
 800abfc:	2300      	movs	r3, #0
 800abfe:	eba8 0807 	sub.w	r8, r8, r7
 800ac02:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ac04:	e7c4      	b.n	800ab90 <_dtoa_r+0x1b0>
 800ac06:	2300      	movs	r3, #0
 800ac08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	dc35      	bgt.n	800ac7c <_dtoa_r+0x29c>
 800ac10:	2301      	movs	r3, #1
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	9307      	str	r3, [sp, #28]
 800ac16:	461a      	mov	r2, r3
 800ac18:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac1a:	e00b      	b.n	800ac34 <_dtoa_r+0x254>
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	e7f3      	b.n	800ac08 <_dtoa_r+0x228>
 800ac20:	2300      	movs	r3, #0
 800ac22:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac26:	18fb      	adds	r3, r7, r3
 800ac28:	9300      	str	r3, [sp, #0]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	9307      	str	r3, [sp, #28]
 800ac30:	bfb8      	it	lt
 800ac32:	2301      	movlt	r3, #1
 800ac34:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ac38:	2100      	movs	r1, #0
 800ac3a:	2204      	movs	r2, #4
 800ac3c:	f102 0514 	add.w	r5, r2, #20
 800ac40:	429d      	cmp	r5, r3
 800ac42:	d91f      	bls.n	800ac84 <_dtoa_r+0x2a4>
 800ac44:	6041      	str	r1, [r0, #4]
 800ac46:	4658      	mov	r0, fp
 800ac48:	f000 fd8e 	bl	800b768 <_Balloc>
 800ac4c:	4682      	mov	sl, r0
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	d13c      	bne.n	800accc <_dtoa_r+0x2ec>
 800ac52:	4b1b      	ldr	r3, [pc, #108]	@ (800acc0 <_dtoa_r+0x2e0>)
 800ac54:	4602      	mov	r2, r0
 800ac56:	f240 11af 	movw	r1, #431	@ 0x1af
 800ac5a:	e6d8      	b.n	800aa0e <_dtoa_r+0x2e>
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e7e0      	b.n	800ac22 <_dtoa_r+0x242>
 800ac60:	2401      	movs	r4, #1
 800ac62:	2300      	movs	r3, #0
 800ac64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac66:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ac68:	f04f 33ff 	mov.w	r3, #4294967295
 800ac6c:	9300      	str	r3, [sp, #0]
 800ac6e:	9307      	str	r3, [sp, #28]
 800ac70:	2200      	movs	r2, #0
 800ac72:	2312      	movs	r3, #18
 800ac74:	e7d0      	b.n	800ac18 <_dtoa_r+0x238>
 800ac76:	2301      	movs	r3, #1
 800ac78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac7a:	e7f5      	b.n	800ac68 <_dtoa_r+0x288>
 800ac7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac7e:	9300      	str	r3, [sp, #0]
 800ac80:	9307      	str	r3, [sp, #28]
 800ac82:	e7d7      	b.n	800ac34 <_dtoa_r+0x254>
 800ac84:	3101      	adds	r1, #1
 800ac86:	0052      	lsls	r2, r2, #1
 800ac88:	e7d8      	b.n	800ac3c <_dtoa_r+0x25c>
 800ac8a:	bf00      	nop
 800ac8c:	f3af 8000 	nop.w
 800ac90:	636f4361 	.word	0x636f4361
 800ac94:	3fd287a7 	.word	0x3fd287a7
 800ac98:	8b60c8b3 	.word	0x8b60c8b3
 800ac9c:	3fc68a28 	.word	0x3fc68a28
 800aca0:	509f79fb 	.word	0x509f79fb
 800aca4:	3fd34413 	.word	0x3fd34413
 800aca8:	0800e08e 	.word	0x0800e08e
 800acac:	0800e148 	.word	0x0800e148
 800acb0:	7ff00000 	.word	0x7ff00000
 800acb4:	0800e066 	.word	0x0800e066
 800acb8:	3ff80000 	.word	0x3ff80000
 800acbc:	0800e240 	.word	0x0800e240
 800acc0:	0800e1a0 	.word	0x0800e1a0
 800acc4:	0800e144 	.word	0x0800e144
 800acc8:	0800e065 	.word	0x0800e065
 800accc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800acd0:	6018      	str	r0, [r3, #0]
 800acd2:	9b07      	ldr	r3, [sp, #28]
 800acd4:	2b0e      	cmp	r3, #14
 800acd6:	f200 80a4 	bhi.w	800ae22 <_dtoa_r+0x442>
 800acda:	2c00      	cmp	r4, #0
 800acdc:	f000 80a1 	beq.w	800ae22 <_dtoa_r+0x442>
 800ace0:	2f00      	cmp	r7, #0
 800ace2:	dd33      	ble.n	800ad4c <_dtoa_r+0x36c>
 800ace4:	4bad      	ldr	r3, [pc, #692]	@ (800af9c <_dtoa_r+0x5bc>)
 800ace6:	f007 020f 	and.w	r2, r7, #15
 800acea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acee:	ed93 7b00 	vldr	d7, [r3]
 800acf2:	05f8      	lsls	r0, r7, #23
 800acf4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800acf8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800acfc:	d516      	bpl.n	800ad2c <_dtoa_r+0x34c>
 800acfe:	4ba8      	ldr	r3, [pc, #672]	@ (800afa0 <_dtoa_r+0x5c0>)
 800ad00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad08:	f7f5 fdd8 	bl	80008bc <__aeabi_ddiv>
 800ad0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad10:	f004 040f 	and.w	r4, r4, #15
 800ad14:	2603      	movs	r6, #3
 800ad16:	4da2      	ldr	r5, [pc, #648]	@ (800afa0 <_dtoa_r+0x5c0>)
 800ad18:	b954      	cbnz	r4, 800ad30 <_dtoa_r+0x350>
 800ad1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad22:	f7f5 fdcb 	bl	80008bc <__aeabi_ddiv>
 800ad26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad2a:	e028      	b.n	800ad7e <_dtoa_r+0x39e>
 800ad2c:	2602      	movs	r6, #2
 800ad2e:	e7f2      	b.n	800ad16 <_dtoa_r+0x336>
 800ad30:	07e1      	lsls	r1, r4, #31
 800ad32:	d508      	bpl.n	800ad46 <_dtoa_r+0x366>
 800ad34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad38:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad3c:	f7f5 fc94 	bl	8000668 <__aeabi_dmul>
 800ad40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad44:	3601      	adds	r6, #1
 800ad46:	1064      	asrs	r4, r4, #1
 800ad48:	3508      	adds	r5, #8
 800ad4a:	e7e5      	b.n	800ad18 <_dtoa_r+0x338>
 800ad4c:	f000 80d2 	beq.w	800aef4 <_dtoa_r+0x514>
 800ad50:	427c      	negs	r4, r7
 800ad52:	4b92      	ldr	r3, [pc, #584]	@ (800af9c <_dtoa_r+0x5bc>)
 800ad54:	4d92      	ldr	r5, [pc, #584]	@ (800afa0 <_dtoa_r+0x5c0>)
 800ad56:	f004 020f 	and.w	r2, r4, #15
 800ad5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad66:	f7f5 fc7f 	bl	8000668 <__aeabi_dmul>
 800ad6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad6e:	1124      	asrs	r4, r4, #4
 800ad70:	2300      	movs	r3, #0
 800ad72:	2602      	movs	r6, #2
 800ad74:	2c00      	cmp	r4, #0
 800ad76:	f040 80b2 	bne.w	800aede <_dtoa_r+0x4fe>
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1d3      	bne.n	800ad26 <_dtoa_r+0x346>
 800ad7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 80b7 	beq.w	800aef8 <_dtoa_r+0x518>
 800ad8a:	4b86      	ldr	r3, [pc, #536]	@ (800afa4 <_dtoa_r+0x5c4>)
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	4620      	mov	r0, r4
 800ad90:	4629      	mov	r1, r5
 800ad92:	f7f5 fedb 	bl	8000b4c <__aeabi_dcmplt>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	f000 80ae 	beq.w	800aef8 <_dtoa_r+0x518>
 800ad9c:	9b07      	ldr	r3, [sp, #28]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f000 80aa 	beq.w	800aef8 <_dtoa_r+0x518>
 800ada4:	9b00      	ldr	r3, [sp, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	dd37      	ble.n	800ae1a <_dtoa_r+0x43a>
 800adaa:	1e7b      	subs	r3, r7, #1
 800adac:	9304      	str	r3, [sp, #16]
 800adae:	4620      	mov	r0, r4
 800adb0:	4b7d      	ldr	r3, [pc, #500]	@ (800afa8 <_dtoa_r+0x5c8>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	4629      	mov	r1, r5
 800adb6:	f7f5 fc57 	bl	8000668 <__aeabi_dmul>
 800adba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adbe:	9c00      	ldr	r4, [sp, #0]
 800adc0:	3601      	adds	r6, #1
 800adc2:	4630      	mov	r0, r6
 800adc4:	f7f5 fbe6 	bl	8000594 <__aeabi_i2d>
 800adc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adcc:	f7f5 fc4c 	bl	8000668 <__aeabi_dmul>
 800add0:	4b76      	ldr	r3, [pc, #472]	@ (800afac <_dtoa_r+0x5cc>)
 800add2:	2200      	movs	r2, #0
 800add4:	f7f5 fa92 	bl	80002fc <__adddf3>
 800add8:	4605      	mov	r5, r0
 800adda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800adde:	2c00      	cmp	r4, #0
 800ade0:	f040 808d 	bne.w	800aefe <_dtoa_r+0x51e>
 800ade4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ade8:	4b71      	ldr	r3, [pc, #452]	@ (800afb0 <_dtoa_r+0x5d0>)
 800adea:	2200      	movs	r2, #0
 800adec:	f7f5 fa84 	bl	80002f8 <__aeabi_dsub>
 800adf0:	4602      	mov	r2, r0
 800adf2:	460b      	mov	r3, r1
 800adf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800adf8:	462a      	mov	r2, r5
 800adfa:	4633      	mov	r3, r6
 800adfc:	f7f5 fec4 	bl	8000b88 <__aeabi_dcmpgt>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	f040 828b 	bne.w	800b31c <_dtoa_r+0x93c>
 800ae06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae0a:	462a      	mov	r2, r5
 800ae0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ae10:	f7f5 fe9c 	bl	8000b4c <__aeabi_dcmplt>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	f040 8128 	bne.w	800b06a <_dtoa_r+0x68a>
 800ae1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ae1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ae22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f2c0 815a 	blt.w	800b0de <_dtoa_r+0x6fe>
 800ae2a:	2f0e      	cmp	r7, #14
 800ae2c:	f300 8157 	bgt.w	800b0de <_dtoa_r+0x6fe>
 800ae30:	4b5a      	ldr	r3, [pc, #360]	@ (800af9c <_dtoa_r+0x5bc>)
 800ae32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae36:	ed93 7b00 	vldr	d7, [r3]
 800ae3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	ed8d 7b00 	vstr	d7, [sp]
 800ae42:	da03      	bge.n	800ae4c <_dtoa_r+0x46c>
 800ae44:	9b07      	ldr	r3, [sp, #28]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f340 8101 	ble.w	800b04e <_dtoa_r+0x66e>
 800ae4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ae50:	4656      	mov	r6, sl
 800ae52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae56:	4620      	mov	r0, r4
 800ae58:	4629      	mov	r1, r5
 800ae5a:	f7f5 fd2f 	bl	80008bc <__aeabi_ddiv>
 800ae5e:	f7f5 feb3 	bl	8000bc8 <__aeabi_d2iz>
 800ae62:	4680      	mov	r8, r0
 800ae64:	f7f5 fb96 	bl	8000594 <__aeabi_i2d>
 800ae68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae6c:	f7f5 fbfc 	bl	8000668 <__aeabi_dmul>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	4620      	mov	r0, r4
 800ae76:	4629      	mov	r1, r5
 800ae78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ae7c:	f7f5 fa3c 	bl	80002f8 <__aeabi_dsub>
 800ae80:	f806 4b01 	strb.w	r4, [r6], #1
 800ae84:	9d07      	ldr	r5, [sp, #28]
 800ae86:	eba6 040a 	sub.w	r4, r6, sl
 800ae8a:	42a5      	cmp	r5, r4
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	460b      	mov	r3, r1
 800ae90:	f040 8117 	bne.w	800b0c2 <_dtoa_r+0x6e2>
 800ae94:	f7f5 fa32 	bl	80002fc <__adddf3>
 800ae98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	460d      	mov	r5, r1
 800aea0:	f7f5 fe72 	bl	8000b88 <__aeabi_dcmpgt>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	f040 80f9 	bne.w	800b09c <_dtoa_r+0x6bc>
 800aeaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aeae:	4620      	mov	r0, r4
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	f7f5 fe41 	bl	8000b38 <__aeabi_dcmpeq>
 800aeb6:	b118      	cbz	r0, 800aec0 <_dtoa_r+0x4e0>
 800aeb8:	f018 0f01 	tst.w	r8, #1
 800aebc:	f040 80ee 	bne.w	800b09c <_dtoa_r+0x6bc>
 800aec0:	4649      	mov	r1, r9
 800aec2:	4658      	mov	r0, fp
 800aec4:	f000 fc90 	bl	800b7e8 <_Bfree>
 800aec8:	2300      	movs	r3, #0
 800aeca:	7033      	strb	r3, [r6, #0]
 800aecc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aece:	3701      	adds	r7, #1
 800aed0:	601f      	str	r7, [r3, #0]
 800aed2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f000 831d 	beq.w	800b514 <_dtoa_r+0xb34>
 800aeda:	601e      	str	r6, [r3, #0]
 800aedc:	e31a      	b.n	800b514 <_dtoa_r+0xb34>
 800aede:	07e2      	lsls	r2, r4, #31
 800aee0:	d505      	bpl.n	800aeee <_dtoa_r+0x50e>
 800aee2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aee6:	f7f5 fbbf 	bl	8000668 <__aeabi_dmul>
 800aeea:	3601      	adds	r6, #1
 800aeec:	2301      	movs	r3, #1
 800aeee:	1064      	asrs	r4, r4, #1
 800aef0:	3508      	adds	r5, #8
 800aef2:	e73f      	b.n	800ad74 <_dtoa_r+0x394>
 800aef4:	2602      	movs	r6, #2
 800aef6:	e742      	b.n	800ad7e <_dtoa_r+0x39e>
 800aef8:	9c07      	ldr	r4, [sp, #28]
 800aefa:	9704      	str	r7, [sp, #16]
 800aefc:	e761      	b.n	800adc2 <_dtoa_r+0x3e2>
 800aefe:	4b27      	ldr	r3, [pc, #156]	@ (800af9c <_dtoa_r+0x5bc>)
 800af00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af0a:	4454      	add	r4, sl
 800af0c:	2900      	cmp	r1, #0
 800af0e:	d053      	beq.n	800afb8 <_dtoa_r+0x5d8>
 800af10:	4928      	ldr	r1, [pc, #160]	@ (800afb4 <_dtoa_r+0x5d4>)
 800af12:	2000      	movs	r0, #0
 800af14:	f7f5 fcd2 	bl	80008bc <__aeabi_ddiv>
 800af18:	4633      	mov	r3, r6
 800af1a:	462a      	mov	r2, r5
 800af1c:	f7f5 f9ec 	bl	80002f8 <__aeabi_dsub>
 800af20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af24:	4656      	mov	r6, sl
 800af26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af2a:	f7f5 fe4d 	bl	8000bc8 <__aeabi_d2iz>
 800af2e:	4605      	mov	r5, r0
 800af30:	f7f5 fb30 	bl	8000594 <__aeabi_i2d>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af3c:	f7f5 f9dc 	bl	80002f8 <__aeabi_dsub>
 800af40:	3530      	adds	r5, #48	@ 0x30
 800af42:	4602      	mov	r2, r0
 800af44:	460b      	mov	r3, r1
 800af46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af4a:	f806 5b01 	strb.w	r5, [r6], #1
 800af4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af52:	f7f5 fdfb 	bl	8000b4c <__aeabi_dcmplt>
 800af56:	2800      	cmp	r0, #0
 800af58:	d171      	bne.n	800b03e <_dtoa_r+0x65e>
 800af5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af5e:	4911      	ldr	r1, [pc, #68]	@ (800afa4 <_dtoa_r+0x5c4>)
 800af60:	2000      	movs	r0, #0
 800af62:	f7f5 f9c9 	bl	80002f8 <__aeabi_dsub>
 800af66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af6a:	f7f5 fdef 	bl	8000b4c <__aeabi_dcmplt>
 800af6e:	2800      	cmp	r0, #0
 800af70:	f040 8095 	bne.w	800b09e <_dtoa_r+0x6be>
 800af74:	42a6      	cmp	r6, r4
 800af76:	f43f af50 	beq.w	800ae1a <_dtoa_r+0x43a>
 800af7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af7e:	4b0a      	ldr	r3, [pc, #40]	@ (800afa8 <_dtoa_r+0x5c8>)
 800af80:	2200      	movs	r2, #0
 800af82:	f7f5 fb71 	bl	8000668 <__aeabi_dmul>
 800af86:	4b08      	ldr	r3, [pc, #32]	@ (800afa8 <_dtoa_r+0x5c8>)
 800af88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af8c:	2200      	movs	r2, #0
 800af8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af92:	f7f5 fb69 	bl	8000668 <__aeabi_dmul>
 800af96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af9a:	e7c4      	b.n	800af26 <_dtoa_r+0x546>
 800af9c:	0800e240 	.word	0x0800e240
 800afa0:	0800e218 	.word	0x0800e218
 800afa4:	3ff00000 	.word	0x3ff00000
 800afa8:	40240000 	.word	0x40240000
 800afac:	401c0000 	.word	0x401c0000
 800afb0:	40140000 	.word	0x40140000
 800afb4:	3fe00000 	.word	0x3fe00000
 800afb8:	4631      	mov	r1, r6
 800afba:	4628      	mov	r0, r5
 800afbc:	f7f5 fb54 	bl	8000668 <__aeabi_dmul>
 800afc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800afc4:	9415      	str	r4, [sp, #84]	@ 0x54
 800afc6:	4656      	mov	r6, sl
 800afc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afcc:	f7f5 fdfc 	bl	8000bc8 <__aeabi_d2iz>
 800afd0:	4605      	mov	r5, r0
 800afd2:	f7f5 fadf 	bl	8000594 <__aeabi_i2d>
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afde:	f7f5 f98b 	bl	80002f8 <__aeabi_dsub>
 800afe2:	3530      	adds	r5, #48	@ 0x30
 800afe4:	f806 5b01 	strb.w	r5, [r6], #1
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	42a6      	cmp	r6, r4
 800afee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aff2:	f04f 0200 	mov.w	r2, #0
 800aff6:	d124      	bne.n	800b042 <_dtoa_r+0x662>
 800aff8:	4bac      	ldr	r3, [pc, #688]	@ (800b2ac <_dtoa_r+0x8cc>)
 800affa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800affe:	f7f5 f97d 	bl	80002fc <__adddf3>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b00a:	f7f5 fdbd 	bl	8000b88 <__aeabi_dcmpgt>
 800b00e:	2800      	cmp	r0, #0
 800b010:	d145      	bne.n	800b09e <_dtoa_r+0x6be>
 800b012:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b016:	49a5      	ldr	r1, [pc, #660]	@ (800b2ac <_dtoa_r+0x8cc>)
 800b018:	2000      	movs	r0, #0
 800b01a:	f7f5 f96d 	bl	80002f8 <__aeabi_dsub>
 800b01e:	4602      	mov	r2, r0
 800b020:	460b      	mov	r3, r1
 800b022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b026:	f7f5 fd91 	bl	8000b4c <__aeabi_dcmplt>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	f43f aef5 	beq.w	800ae1a <_dtoa_r+0x43a>
 800b030:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b032:	1e73      	subs	r3, r6, #1
 800b034:	9315      	str	r3, [sp, #84]	@ 0x54
 800b036:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b03a:	2b30      	cmp	r3, #48	@ 0x30
 800b03c:	d0f8      	beq.n	800b030 <_dtoa_r+0x650>
 800b03e:	9f04      	ldr	r7, [sp, #16]
 800b040:	e73e      	b.n	800aec0 <_dtoa_r+0x4e0>
 800b042:	4b9b      	ldr	r3, [pc, #620]	@ (800b2b0 <_dtoa_r+0x8d0>)
 800b044:	f7f5 fb10 	bl	8000668 <__aeabi_dmul>
 800b048:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b04c:	e7bc      	b.n	800afc8 <_dtoa_r+0x5e8>
 800b04e:	d10c      	bne.n	800b06a <_dtoa_r+0x68a>
 800b050:	4b98      	ldr	r3, [pc, #608]	@ (800b2b4 <_dtoa_r+0x8d4>)
 800b052:	2200      	movs	r2, #0
 800b054:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b058:	f7f5 fb06 	bl	8000668 <__aeabi_dmul>
 800b05c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b060:	f7f5 fd88 	bl	8000b74 <__aeabi_dcmpge>
 800b064:	2800      	cmp	r0, #0
 800b066:	f000 8157 	beq.w	800b318 <_dtoa_r+0x938>
 800b06a:	2400      	movs	r4, #0
 800b06c:	4625      	mov	r5, r4
 800b06e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b070:	43db      	mvns	r3, r3
 800b072:	9304      	str	r3, [sp, #16]
 800b074:	4656      	mov	r6, sl
 800b076:	2700      	movs	r7, #0
 800b078:	4621      	mov	r1, r4
 800b07a:	4658      	mov	r0, fp
 800b07c:	f000 fbb4 	bl	800b7e8 <_Bfree>
 800b080:	2d00      	cmp	r5, #0
 800b082:	d0dc      	beq.n	800b03e <_dtoa_r+0x65e>
 800b084:	b12f      	cbz	r7, 800b092 <_dtoa_r+0x6b2>
 800b086:	42af      	cmp	r7, r5
 800b088:	d003      	beq.n	800b092 <_dtoa_r+0x6b2>
 800b08a:	4639      	mov	r1, r7
 800b08c:	4658      	mov	r0, fp
 800b08e:	f000 fbab 	bl	800b7e8 <_Bfree>
 800b092:	4629      	mov	r1, r5
 800b094:	4658      	mov	r0, fp
 800b096:	f000 fba7 	bl	800b7e8 <_Bfree>
 800b09a:	e7d0      	b.n	800b03e <_dtoa_r+0x65e>
 800b09c:	9704      	str	r7, [sp, #16]
 800b09e:	4633      	mov	r3, r6
 800b0a0:	461e      	mov	r6, r3
 800b0a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0a6:	2a39      	cmp	r2, #57	@ 0x39
 800b0a8:	d107      	bne.n	800b0ba <_dtoa_r+0x6da>
 800b0aa:	459a      	cmp	sl, r3
 800b0ac:	d1f8      	bne.n	800b0a0 <_dtoa_r+0x6c0>
 800b0ae:	9a04      	ldr	r2, [sp, #16]
 800b0b0:	3201      	adds	r2, #1
 800b0b2:	9204      	str	r2, [sp, #16]
 800b0b4:	2230      	movs	r2, #48	@ 0x30
 800b0b6:	f88a 2000 	strb.w	r2, [sl]
 800b0ba:	781a      	ldrb	r2, [r3, #0]
 800b0bc:	3201      	adds	r2, #1
 800b0be:	701a      	strb	r2, [r3, #0]
 800b0c0:	e7bd      	b.n	800b03e <_dtoa_r+0x65e>
 800b0c2:	4b7b      	ldr	r3, [pc, #492]	@ (800b2b0 <_dtoa_r+0x8d0>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f7f5 facf 	bl	8000668 <__aeabi_dmul>
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	460d      	mov	r5, r1
 800b0d2:	f7f5 fd31 	bl	8000b38 <__aeabi_dcmpeq>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	f43f aebb 	beq.w	800ae52 <_dtoa_r+0x472>
 800b0dc:	e6f0      	b.n	800aec0 <_dtoa_r+0x4e0>
 800b0de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b0e0:	2a00      	cmp	r2, #0
 800b0e2:	f000 80db 	beq.w	800b29c <_dtoa_r+0x8bc>
 800b0e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0e8:	2a01      	cmp	r2, #1
 800b0ea:	f300 80bf 	bgt.w	800b26c <_dtoa_r+0x88c>
 800b0ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b0f0:	2a00      	cmp	r2, #0
 800b0f2:	f000 80b7 	beq.w	800b264 <_dtoa_r+0x884>
 800b0f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b0fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b0fc:	4646      	mov	r6, r8
 800b0fe:	9a08      	ldr	r2, [sp, #32]
 800b100:	2101      	movs	r1, #1
 800b102:	441a      	add	r2, r3
 800b104:	4658      	mov	r0, fp
 800b106:	4498      	add	r8, r3
 800b108:	9208      	str	r2, [sp, #32]
 800b10a:	f000 fc6b 	bl	800b9e4 <__i2b>
 800b10e:	4605      	mov	r5, r0
 800b110:	b15e      	cbz	r6, 800b12a <_dtoa_r+0x74a>
 800b112:	9b08      	ldr	r3, [sp, #32]
 800b114:	2b00      	cmp	r3, #0
 800b116:	dd08      	ble.n	800b12a <_dtoa_r+0x74a>
 800b118:	42b3      	cmp	r3, r6
 800b11a:	9a08      	ldr	r2, [sp, #32]
 800b11c:	bfa8      	it	ge
 800b11e:	4633      	movge	r3, r6
 800b120:	eba8 0803 	sub.w	r8, r8, r3
 800b124:	1af6      	subs	r6, r6, r3
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	9308      	str	r3, [sp, #32]
 800b12a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b12c:	b1f3      	cbz	r3, 800b16c <_dtoa_r+0x78c>
 800b12e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b130:	2b00      	cmp	r3, #0
 800b132:	f000 80b7 	beq.w	800b2a4 <_dtoa_r+0x8c4>
 800b136:	b18c      	cbz	r4, 800b15c <_dtoa_r+0x77c>
 800b138:	4629      	mov	r1, r5
 800b13a:	4622      	mov	r2, r4
 800b13c:	4658      	mov	r0, fp
 800b13e:	f000 fd11 	bl	800bb64 <__pow5mult>
 800b142:	464a      	mov	r2, r9
 800b144:	4601      	mov	r1, r0
 800b146:	4605      	mov	r5, r0
 800b148:	4658      	mov	r0, fp
 800b14a:	f000 fc61 	bl	800ba10 <__multiply>
 800b14e:	4649      	mov	r1, r9
 800b150:	9004      	str	r0, [sp, #16]
 800b152:	4658      	mov	r0, fp
 800b154:	f000 fb48 	bl	800b7e8 <_Bfree>
 800b158:	9b04      	ldr	r3, [sp, #16]
 800b15a:	4699      	mov	r9, r3
 800b15c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b15e:	1b1a      	subs	r2, r3, r4
 800b160:	d004      	beq.n	800b16c <_dtoa_r+0x78c>
 800b162:	4649      	mov	r1, r9
 800b164:	4658      	mov	r0, fp
 800b166:	f000 fcfd 	bl	800bb64 <__pow5mult>
 800b16a:	4681      	mov	r9, r0
 800b16c:	2101      	movs	r1, #1
 800b16e:	4658      	mov	r0, fp
 800b170:	f000 fc38 	bl	800b9e4 <__i2b>
 800b174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b176:	4604      	mov	r4, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f000 81cf 	beq.w	800b51c <_dtoa_r+0xb3c>
 800b17e:	461a      	mov	r2, r3
 800b180:	4601      	mov	r1, r0
 800b182:	4658      	mov	r0, fp
 800b184:	f000 fcee 	bl	800bb64 <__pow5mult>
 800b188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	4604      	mov	r4, r0
 800b18e:	f300 8095 	bgt.w	800b2bc <_dtoa_r+0x8dc>
 800b192:	9b02      	ldr	r3, [sp, #8]
 800b194:	2b00      	cmp	r3, #0
 800b196:	f040 8087 	bne.w	800b2a8 <_dtoa_r+0x8c8>
 800b19a:	9b03      	ldr	r3, [sp, #12]
 800b19c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f040 8089 	bne.w	800b2b8 <_dtoa_r+0x8d8>
 800b1a6:	9b03      	ldr	r3, [sp, #12]
 800b1a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1ac:	0d1b      	lsrs	r3, r3, #20
 800b1ae:	051b      	lsls	r3, r3, #20
 800b1b0:	b12b      	cbz	r3, 800b1be <_dtoa_r+0x7de>
 800b1b2:	9b08      	ldr	r3, [sp, #32]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	9308      	str	r3, [sp, #32]
 800b1b8:	f108 0801 	add.w	r8, r8, #1
 800b1bc:	2301      	movs	r3, #1
 800b1be:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	f000 81b0 	beq.w	800b528 <_dtoa_r+0xb48>
 800b1c8:	6923      	ldr	r3, [r4, #16]
 800b1ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b1ce:	6918      	ldr	r0, [r3, #16]
 800b1d0:	f000 fbbc 	bl	800b94c <__hi0bits>
 800b1d4:	f1c0 0020 	rsb	r0, r0, #32
 800b1d8:	9b08      	ldr	r3, [sp, #32]
 800b1da:	4418      	add	r0, r3
 800b1dc:	f010 001f 	ands.w	r0, r0, #31
 800b1e0:	d077      	beq.n	800b2d2 <_dtoa_r+0x8f2>
 800b1e2:	f1c0 0320 	rsb	r3, r0, #32
 800b1e6:	2b04      	cmp	r3, #4
 800b1e8:	dd6b      	ble.n	800b2c2 <_dtoa_r+0x8e2>
 800b1ea:	9b08      	ldr	r3, [sp, #32]
 800b1ec:	f1c0 001c 	rsb	r0, r0, #28
 800b1f0:	4403      	add	r3, r0
 800b1f2:	4480      	add	r8, r0
 800b1f4:	4406      	add	r6, r0
 800b1f6:	9308      	str	r3, [sp, #32]
 800b1f8:	f1b8 0f00 	cmp.w	r8, #0
 800b1fc:	dd05      	ble.n	800b20a <_dtoa_r+0x82a>
 800b1fe:	4649      	mov	r1, r9
 800b200:	4642      	mov	r2, r8
 800b202:	4658      	mov	r0, fp
 800b204:	f000 fd08 	bl	800bc18 <__lshift>
 800b208:	4681      	mov	r9, r0
 800b20a:	9b08      	ldr	r3, [sp, #32]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	dd05      	ble.n	800b21c <_dtoa_r+0x83c>
 800b210:	4621      	mov	r1, r4
 800b212:	461a      	mov	r2, r3
 800b214:	4658      	mov	r0, fp
 800b216:	f000 fcff 	bl	800bc18 <__lshift>
 800b21a:	4604      	mov	r4, r0
 800b21c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d059      	beq.n	800b2d6 <_dtoa_r+0x8f6>
 800b222:	4621      	mov	r1, r4
 800b224:	4648      	mov	r0, r9
 800b226:	f000 fd63 	bl	800bcf0 <__mcmp>
 800b22a:	2800      	cmp	r0, #0
 800b22c:	da53      	bge.n	800b2d6 <_dtoa_r+0x8f6>
 800b22e:	1e7b      	subs	r3, r7, #1
 800b230:	9304      	str	r3, [sp, #16]
 800b232:	4649      	mov	r1, r9
 800b234:	2300      	movs	r3, #0
 800b236:	220a      	movs	r2, #10
 800b238:	4658      	mov	r0, fp
 800b23a:	f000 faf7 	bl	800b82c <__multadd>
 800b23e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b240:	4681      	mov	r9, r0
 800b242:	2b00      	cmp	r3, #0
 800b244:	f000 8172 	beq.w	800b52c <_dtoa_r+0xb4c>
 800b248:	2300      	movs	r3, #0
 800b24a:	4629      	mov	r1, r5
 800b24c:	220a      	movs	r2, #10
 800b24e:	4658      	mov	r0, fp
 800b250:	f000 faec 	bl	800b82c <__multadd>
 800b254:	9b00      	ldr	r3, [sp, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	4605      	mov	r5, r0
 800b25a:	dc67      	bgt.n	800b32c <_dtoa_r+0x94c>
 800b25c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b25e:	2b02      	cmp	r3, #2
 800b260:	dc41      	bgt.n	800b2e6 <_dtoa_r+0x906>
 800b262:	e063      	b.n	800b32c <_dtoa_r+0x94c>
 800b264:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b266:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b26a:	e746      	b.n	800b0fa <_dtoa_r+0x71a>
 800b26c:	9b07      	ldr	r3, [sp, #28]
 800b26e:	1e5c      	subs	r4, r3, #1
 800b270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b272:	42a3      	cmp	r3, r4
 800b274:	bfbf      	itttt	lt
 800b276:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b278:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b27a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b27c:	1ae3      	sublt	r3, r4, r3
 800b27e:	bfb4      	ite	lt
 800b280:	18d2      	addlt	r2, r2, r3
 800b282:	1b1c      	subge	r4, r3, r4
 800b284:	9b07      	ldr	r3, [sp, #28]
 800b286:	bfbc      	itt	lt
 800b288:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b28a:	2400      	movlt	r4, #0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	bfb5      	itete	lt
 800b290:	eba8 0603 	sublt.w	r6, r8, r3
 800b294:	9b07      	ldrge	r3, [sp, #28]
 800b296:	2300      	movlt	r3, #0
 800b298:	4646      	movge	r6, r8
 800b29a:	e730      	b.n	800b0fe <_dtoa_r+0x71e>
 800b29c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b29e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b2a0:	4646      	mov	r6, r8
 800b2a2:	e735      	b.n	800b110 <_dtoa_r+0x730>
 800b2a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b2a6:	e75c      	b.n	800b162 <_dtoa_r+0x782>
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	e788      	b.n	800b1be <_dtoa_r+0x7de>
 800b2ac:	3fe00000 	.word	0x3fe00000
 800b2b0:	40240000 	.word	0x40240000
 800b2b4:	40140000 	.word	0x40140000
 800b2b8:	9b02      	ldr	r3, [sp, #8]
 800b2ba:	e780      	b.n	800b1be <_dtoa_r+0x7de>
 800b2bc:	2300      	movs	r3, #0
 800b2be:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2c0:	e782      	b.n	800b1c8 <_dtoa_r+0x7e8>
 800b2c2:	d099      	beq.n	800b1f8 <_dtoa_r+0x818>
 800b2c4:	9a08      	ldr	r2, [sp, #32]
 800b2c6:	331c      	adds	r3, #28
 800b2c8:	441a      	add	r2, r3
 800b2ca:	4498      	add	r8, r3
 800b2cc:	441e      	add	r6, r3
 800b2ce:	9208      	str	r2, [sp, #32]
 800b2d0:	e792      	b.n	800b1f8 <_dtoa_r+0x818>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	e7f6      	b.n	800b2c4 <_dtoa_r+0x8e4>
 800b2d6:	9b07      	ldr	r3, [sp, #28]
 800b2d8:	9704      	str	r7, [sp, #16]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	dc20      	bgt.n	800b320 <_dtoa_r+0x940>
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	dd1e      	ble.n	800b324 <_dtoa_r+0x944>
 800b2e6:	9b00      	ldr	r3, [sp, #0]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f47f aec0 	bne.w	800b06e <_dtoa_r+0x68e>
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	2205      	movs	r2, #5
 800b2f2:	4658      	mov	r0, fp
 800b2f4:	f000 fa9a 	bl	800b82c <__multadd>
 800b2f8:	4601      	mov	r1, r0
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	4648      	mov	r0, r9
 800b2fe:	f000 fcf7 	bl	800bcf0 <__mcmp>
 800b302:	2800      	cmp	r0, #0
 800b304:	f77f aeb3 	ble.w	800b06e <_dtoa_r+0x68e>
 800b308:	4656      	mov	r6, sl
 800b30a:	2331      	movs	r3, #49	@ 0x31
 800b30c:	f806 3b01 	strb.w	r3, [r6], #1
 800b310:	9b04      	ldr	r3, [sp, #16]
 800b312:	3301      	adds	r3, #1
 800b314:	9304      	str	r3, [sp, #16]
 800b316:	e6ae      	b.n	800b076 <_dtoa_r+0x696>
 800b318:	9c07      	ldr	r4, [sp, #28]
 800b31a:	9704      	str	r7, [sp, #16]
 800b31c:	4625      	mov	r5, r4
 800b31e:	e7f3      	b.n	800b308 <_dtoa_r+0x928>
 800b320:	9b07      	ldr	r3, [sp, #28]
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b326:	2b00      	cmp	r3, #0
 800b328:	f000 8104 	beq.w	800b534 <_dtoa_r+0xb54>
 800b32c:	2e00      	cmp	r6, #0
 800b32e:	dd05      	ble.n	800b33c <_dtoa_r+0x95c>
 800b330:	4629      	mov	r1, r5
 800b332:	4632      	mov	r2, r6
 800b334:	4658      	mov	r0, fp
 800b336:	f000 fc6f 	bl	800bc18 <__lshift>
 800b33a:	4605      	mov	r5, r0
 800b33c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d05a      	beq.n	800b3f8 <_dtoa_r+0xa18>
 800b342:	6869      	ldr	r1, [r5, #4]
 800b344:	4658      	mov	r0, fp
 800b346:	f000 fa0f 	bl	800b768 <_Balloc>
 800b34a:	4606      	mov	r6, r0
 800b34c:	b928      	cbnz	r0, 800b35a <_dtoa_r+0x97a>
 800b34e:	4b84      	ldr	r3, [pc, #528]	@ (800b560 <_dtoa_r+0xb80>)
 800b350:	4602      	mov	r2, r0
 800b352:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b356:	f7ff bb5a 	b.w	800aa0e <_dtoa_r+0x2e>
 800b35a:	692a      	ldr	r2, [r5, #16]
 800b35c:	3202      	adds	r2, #2
 800b35e:	0092      	lsls	r2, r2, #2
 800b360:	f105 010c 	add.w	r1, r5, #12
 800b364:	300c      	adds	r0, #12
 800b366:	f001 ff0b 	bl	800d180 <memcpy>
 800b36a:	2201      	movs	r2, #1
 800b36c:	4631      	mov	r1, r6
 800b36e:	4658      	mov	r0, fp
 800b370:	f000 fc52 	bl	800bc18 <__lshift>
 800b374:	f10a 0301 	add.w	r3, sl, #1
 800b378:	9307      	str	r3, [sp, #28]
 800b37a:	9b00      	ldr	r3, [sp, #0]
 800b37c:	4453      	add	r3, sl
 800b37e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b380:	9b02      	ldr	r3, [sp, #8]
 800b382:	f003 0301 	and.w	r3, r3, #1
 800b386:	462f      	mov	r7, r5
 800b388:	930a      	str	r3, [sp, #40]	@ 0x28
 800b38a:	4605      	mov	r5, r0
 800b38c:	9b07      	ldr	r3, [sp, #28]
 800b38e:	4621      	mov	r1, r4
 800b390:	3b01      	subs	r3, #1
 800b392:	4648      	mov	r0, r9
 800b394:	9300      	str	r3, [sp, #0]
 800b396:	f7ff fa9b 	bl	800a8d0 <quorem>
 800b39a:	4639      	mov	r1, r7
 800b39c:	9002      	str	r0, [sp, #8]
 800b39e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b3a2:	4648      	mov	r0, r9
 800b3a4:	f000 fca4 	bl	800bcf0 <__mcmp>
 800b3a8:	462a      	mov	r2, r5
 800b3aa:	9008      	str	r0, [sp, #32]
 800b3ac:	4621      	mov	r1, r4
 800b3ae:	4658      	mov	r0, fp
 800b3b0:	f000 fcba 	bl	800bd28 <__mdiff>
 800b3b4:	68c2      	ldr	r2, [r0, #12]
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	bb02      	cbnz	r2, 800b3fc <_dtoa_r+0xa1c>
 800b3ba:	4601      	mov	r1, r0
 800b3bc:	4648      	mov	r0, r9
 800b3be:	f000 fc97 	bl	800bcf0 <__mcmp>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	4631      	mov	r1, r6
 800b3c6:	4658      	mov	r0, fp
 800b3c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3ca:	f000 fa0d 	bl	800b7e8 <_Bfree>
 800b3ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3d2:	9e07      	ldr	r6, [sp, #28]
 800b3d4:	ea43 0102 	orr.w	r1, r3, r2
 800b3d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3da:	4319      	orrs	r1, r3
 800b3dc:	d110      	bne.n	800b400 <_dtoa_r+0xa20>
 800b3de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b3e2:	d029      	beq.n	800b438 <_dtoa_r+0xa58>
 800b3e4:	9b08      	ldr	r3, [sp, #32]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	dd02      	ble.n	800b3f0 <_dtoa_r+0xa10>
 800b3ea:	9b02      	ldr	r3, [sp, #8]
 800b3ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b3f0:	9b00      	ldr	r3, [sp, #0]
 800b3f2:	f883 8000 	strb.w	r8, [r3]
 800b3f6:	e63f      	b.n	800b078 <_dtoa_r+0x698>
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	e7bb      	b.n	800b374 <_dtoa_r+0x994>
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	e7e1      	b.n	800b3c4 <_dtoa_r+0x9e4>
 800b400:	9b08      	ldr	r3, [sp, #32]
 800b402:	2b00      	cmp	r3, #0
 800b404:	db04      	blt.n	800b410 <_dtoa_r+0xa30>
 800b406:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b408:	430b      	orrs	r3, r1
 800b40a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b40c:	430b      	orrs	r3, r1
 800b40e:	d120      	bne.n	800b452 <_dtoa_r+0xa72>
 800b410:	2a00      	cmp	r2, #0
 800b412:	dded      	ble.n	800b3f0 <_dtoa_r+0xa10>
 800b414:	4649      	mov	r1, r9
 800b416:	2201      	movs	r2, #1
 800b418:	4658      	mov	r0, fp
 800b41a:	f000 fbfd 	bl	800bc18 <__lshift>
 800b41e:	4621      	mov	r1, r4
 800b420:	4681      	mov	r9, r0
 800b422:	f000 fc65 	bl	800bcf0 <__mcmp>
 800b426:	2800      	cmp	r0, #0
 800b428:	dc03      	bgt.n	800b432 <_dtoa_r+0xa52>
 800b42a:	d1e1      	bne.n	800b3f0 <_dtoa_r+0xa10>
 800b42c:	f018 0f01 	tst.w	r8, #1
 800b430:	d0de      	beq.n	800b3f0 <_dtoa_r+0xa10>
 800b432:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b436:	d1d8      	bne.n	800b3ea <_dtoa_r+0xa0a>
 800b438:	9a00      	ldr	r2, [sp, #0]
 800b43a:	2339      	movs	r3, #57	@ 0x39
 800b43c:	7013      	strb	r3, [r2, #0]
 800b43e:	4633      	mov	r3, r6
 800b440:	461e      	mov	r6, r3
 800b442:	3b01      	subs	r3, #1
 800b444:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b448:	2a39      	cmp	r2, #57	@ 0x39
 800b44a:	d052      	beq.n	800b4f2 <_dtoa_r+0xb12>
 800b44c:	3201      	adds	r2, #1
 800b44e:	701a      	strb	r2, [r3, #0]
 800b450:	e612      	b.n	800b078 <_dtoa_r+0x698>
 800b452:	2a00      	cmp	r2, #0
 800b454:	dd07      	ble.n	800b466 <_dtoa_r+0xa86>
 800b456:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b45a:	d0ed      	beq.n	800b438 <_dtoa_r+0xa58>
 800b45c:	9a00      	ldr	r2, [sp, #0]
 800b45e:	f108 0301 	add.w	r3, r8, #1
 800b462:	7013      	strb	r3, [r2, #0]
 800b464:	e608      	b.n	800b078 <_dtoa_r+0x698>
 800b466:	9b07      	ldr	r3, [sp, #28]
 800b468:	9a07      	ldr	r2, [sp, #28]
 800b46a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b46e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b470:	4293      	cmp	r3, r2
 800b472:	d028      	beq.n	800b4c6 <_dtoa_r+0xae6>
 800b474:	4649      	mov	r1, r9
 800b476:	2300      	movs	r3, #0
 800b478:	220a      	movs	r2, #10
 800b47a:	4658      	mov	r0, fp
 800b47c:	f000 f9d6 	bl	800b82c <__multadd>
 800b480:	42af      	cmp	r7, r5
 800b482:	4681      	mov	r9, r0
 800b484:	f04f 0300 	mov.w	r3, #0
 800b488:	f04f 020a 	mov.w	r2, #10
 800b48c:	4639      	mov	r1, r7
 800b48e:	4658      	mov	r0, fp
 800b490:	d107      	bne.n	800b4a2 <_dtoa_r+0xac2>
 800b492:	f000 f9cb 	bl	800b82c <__multadd>
 800b496:	4607      	mov	r7, r0
 800b498:	4605      	mov	r5, r0
 800b49a:	9b07      	ldr	r3, [sp, #28]
 800b49c:	3301      	adds	r3, #1
 800b49e:	9307      	str	r3, [sp, #28]
 800b4a0:	e774      	b.n	800b38c <_dtoa_r+0x9ac>
 800b4a2:	f000 f9c3 	bl	800b82c <__multadd>
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	4607      	mov	r7, r0
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	220a      	movs	r2, #10
 800b4ae:	4658      	mov	r0, fp
 800b4b0:	f000 f9bc 	bl	800b82c <__multadd>
 800b4b4:	4605      	mov	r5, r0
 800b4b6:	e7f0      	b.n	800b49a <_dtoa_r+0xaba>
 800b4b8:	9b00      	ldr	r3, [sp, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	bfcc      	ite	gt
 800b4be:	461e      	movgt	r6, r3
 800b4c0:	2601      	movle	r6, #1
 800b4c2:	4456      	add	r6, sl
 800b4c4:	2700      	movs	r7, #0
 800b4c6:	4649      	mov	r1, r9
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	4658      	mov	r0, fp
 800b4cc:	f000 fba4 	bl	800bc18 <__lshift>
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	4681      	mov	r9, r0
 800b4d4:	f000 fc0c 	bl	800bcf0 <__mcmp>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	dcb0      	bgt.n	800b43e <_dtoa_r+0xa5e>
 800b4dc:	d102      	bne.n	800b4e4 <_dtoa_r+0xb04>
 800b4de:	f018 0f01 	tst.w	r8, #1
 800b4e2:	d1ac      	bne.n	800b43e <_dtoa_r+0xa5e>
 800b4e4:	4633      	mov	r3, r6
 800b4e6:	461e      	mov	r6, r3
 800b4e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4ec:	2a30      	cmp	r2, #48	@ 0x30
 800b4ee:	d0fa      	beq.n	800b4e6 <_dtoa_r+0xb06>
 800b4f0:	e5c2      	b.n	800b078 <_dtoa_r+0x698>
 800b4f2:	459a      	cmp	sl, r3
 800b4f4:	d1a4      	bne.n	800b440 <_dtoa_r+0xa60>
 800b4f6:	9b04      	ldr	r3, [sp, #16]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	9304      	str	r3, [sp, #16]
 800b4fc:	2331      	movs	r3, #49	@ 0x31
 800b4fe:	f88a 3000 	strb.w	r3, [sl]
 800b502:	e5b9      	b.n	800b078 <_dtoa_r+0x698>
 800b504:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b506:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b564 <_dtoa_r+0xb84>
 800b50a:	b11b      	cbz	r3, 800b514 <_dtoa_r+0xb34>
 800b50c:	f10a 0308 	add.w	r3, sl, #8
 800b510:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b512:	6013      	str	r3, [r2, #0]
 800b514:	4650      	mov	r0, sl
 800b516:	b019      	add	sp, #100	@ 0x64
 800b518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b51e:	2b01      	cmp	r3, #1
 800b520:	f77f ae37 	ble.w	800b192 <_dtoa_r+0x7b2>
 800b524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b526:	930a      	str	r3, [sp, #40]	@ 0x28
 800b528:	2001      	movs	r0, #1
 800b52a:	e655      	b.n	800b1d8 <_dtoa_r+0x7f8>
 800b52c:	9b00      	ldr	r3, [sp, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	f77f aed6 	ble.w	800b2e0 <_dtoa_r+0x900>
 800b534:	4656      	mov	r6, sl
 800b536:	4621      	mov	r1, r4
 800b538:	4648      	mov	r0, r9
 800b53a:	f7ff f9c9 	bl	800a8d0 <quorem>
 800b53e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b542:	f806 8b01 	strb.w	r8, [r6], #1
 800b546:	9b00      	ldr	r3, [sp, #0]
 800b548:	eba6 020a 	sub.w	r2, r6, sl
 800b54c:	4293      	cmp	r3, r2
 800b54e:	ddb3      	ble.n	800b4b8 <_dtoa_r+0xad8>
 800b550:	4649      	mov	r1, r9
 800b552:	2300      	movs	r3, #0
 800b554:	220a      	movs	r2, #10
 800b556:	4658      	mov	r0, fp
 800b558:	f000 f968 	bl	800b82c <__multadd>
 800b55c:	4681      	mov	r9, r0
 800b55e:	e7ea      	b.n	800b536 <_dtoa_r+0xb56>
 800b560:	0800e1a0 	.word	0x0800e1a0
 800b564:	0800e13b 	.word	0x0800e13b

0800b568 <_free_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	4605      	mov	r5, r0
 800b56c:	2900      	cmp	r1, #0
 800b56e:	d041      	beq.n	800b5f4 <_free_r+0x8c>
 800b570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b574:	1f0c      	subs	r4, r1, #4
 800b576:	2b00      	cmp	r3, #0
 800b578:	bfb8      	it	lt
 800b57a:	18e4      	addlt	r4, r4, r3
 800b57c:	f000 f8e8 	bl	800b750 <__malloc_lock>
 800b580:	4a1d      	ldr	r2, [pc, #116]	@ (800b5f8 <_free_r+0x90>)
 800b582:	6813      	ldr	r3, [r2, #0]
 800b584:	b933      	cbnz	r3, 800b594 <_free_r+0x2c>
 800b586:	6063      	str	r3, [r4, #4]
 800b588:	6014      	str	r4, [r2, #0]
 800b58a:	4628      	mov	r0, r5
 800b58c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b590:	f000 b8e4 	b.w	800b75c <__malloc_unlock>
 800b594:	42a3      	cmp	r3, r4
 800b596:	d908      	bls.n	800b5aa <_free_r+0x42>
 800b598:	6820      	ldr	r0, [r4, #0]
 800b59a:	1821      	adds	r1, r4, r0
 800b59c:	428b      	cmp	r3, r1
 800b59e:	bf01      	itttt	eq
 800b5a0:	6819      	ldreq	r1, [r3, #0]
 800b5a2:	685b      	ldreq	r3, [r3, #4]
 800b5a4:	1809      	addeq	r1, r1, r0
 800b5a6:	6021      	streq	r1, [r4, #0]
 800b5a8:	e7ed      	b.n	800b586 <_free_r+0x1e>
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	b10b      	cbz	r3, 800b5b4 <_free_r+0x4c>
 800b5b0:	42a3      	cmp	r3, r4
 800b5b2:	d9fa      	bls.n	800b5aa <_free_r+0x42>
 800b5b4:	6811      	ldr	r1, [r2, #0]
 800b5b6:	1850      	adds	r0, r2, r1
 800b5b8:	42a0      	cmp	r0, r4
 800b5ba:	d10b      	bne.n	800b5d4 <_free_r+0x6c>
 800b5bc:	6820      	ldr	r0, [r4, #0]
 800b5be:	4401      	add	r1, r0
 800b5c0:	1850      	adds	r0, r2, r1
 800b5c2:	4283      	cmp	r3, r0
 800b5c4:	6011      	str	r1, [r2, #0]
 800b5c6:	d1e0      	bne.n	800b58a <_free_r+0x22>
 800b5c8:	6818      	ldr	r0, [r3, #0]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	6053      	str	r3, [r2, #4]
 800b5ce:	4408      	add	r0, r1
 800b5d0:	6010      	str	r0, [r2, #0]
 800b5d2:	e7da      	b.n	800b58a <_free_r+0x22>
 800b5d4:	d902      	bls.n	800b5dc <_free_r+0x74>
 800b5d6:	230c      	movs	r3, #12
 800b5d8:	602b      	str	r3, [r5, #0]
 800b5da:	e7d6      	b.n	800b58a <_free_r+0x22>
 800b5dc:	6820      	ldr	r0, [r4, #0]
 800b5de:	1821      	adds	r1, r4, r0
 800b5e0:	428b      	cmp	r3, r1
 800b5e2:	bf04      	itt	eq
 800b5e4:	6819      	ldreq	r1, [r3, #0]
 800b5e6:	685b      	ldreq	r3, [r3, #4]
 800b5e8:	6063      	str	r3, [r4, #4]
 800b5ea:	bf04      	itt	eq
 800b5ec:	1809      	addeq	r1, r1, r0
 800b5ee:	6021      	streq	r1, [r4, #0]
 800b5f0:	6054      	str	r4, [r2, #4]
 800b5f2:	e7ca      	b.n	800b58a <_free_r+0x22>
 800b5f4:	bd38      	pop	{r3, r4, r5, pc}
 800b5f6:	bf00      	nop
 800b5f8:	20000824 	.word	0x20000824

0800b5fc <malloc>:
 800b5fc:	4b02      	ldr	r3, [pc, #8]	@ (800b608 <malloc+0xc>)
 800b5fe:	4601      	mov	r1, r0
 800b600:	6818      	ldr	r0, [r3, #0]
 800b602:	f000 b825 	b.w	800b650 <_malloc_r>
 800b606:	bf00      	nop
 800b608:	200000fc 	.word	0x200000fc

0800b60c <sbrk_aligned>:
 800b60c:	b570      	push	{r4, r5, r6, lr}
 800b60e:	4e0f      	ldr	r6, [pc, #60]	@ (800b64c <sbrk_aligned+0x40>)
 800b610:	460c      	mov	r4, r1
 800b612:	6831      	ldr	r1, [r6, #0]
 800b614:	4605      	mov	r5, r0
 800b616:	b911      	cbnz	r1, 800b61e <sbrk_aligned+0x12>
 800b618:	f001 fda2 	bl	800d160 <_sbrk_r>
 800b61c:	6030      	str	r0, [r6, #0]
 800b61e:	4621      	mov	r1, r4
 800b620:	4628      	mov	r0, r5
 800b622:	f001 fd9d 	bl	800d160 <_sbrk_r>
 800b626:	1c43      	adds	r3, r0, #1
 800b628:	d103      	bne.n	800b632 <sbrk_aligned+0x26>
 800b62a:	f04f 34ff 	mov.w	r4, #4294967295
 800b62e:	4620      	mov	r0, r4
 800b630:	bd70      	pop	{r4, r5, r6, pc}
 800b632:	1cc4      	adds	r4, r0, #3
 800b634:	f024 0403 	bic.w	r4, r4, #3
 800b638:	42a0      	cmp	r0, r4
 800b63a:	d0f8      	beq.n	800b62e <sbrk_aligned+0x22>
 800b63c:	1a21      	subs	r1, r4, r0
 800b63e:	4628      	mov	r0, r5
 800b640:	f001 fd8e 	bl	800d160 <_sbrk_r>
 800b644:	3001      	adds	r0, #1
 800b646:	d1f2      	bne.n	800b62e <sbrk_aligned+0x22>
 800b648:	e7ef      	b.n	800b62a <sbrk_aligned+0x1e>
 800b64a:	bf00      	nop
 800b64c:	20000820 	.word	0x20000820

0800b650 <_malloc_r>:
 800b650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b654:	1ccd      	adds	r5, r1, #3
 800b656:	f025 0503 	bic.w	r5, r5, #3
 800b65a:	3508      	adds	r5, #8
 800b65c:	2d0c      	cmp	r5, #12
 800b65e:	bf38      	it	cc
 800b660:	250c      	movcc	r5, #12
 800b662:	2d00      	cmp	r5, #0
 800b664:	4606      	mov	r6, r0
 800b666:	db01      	blt.n	800b66c <_malloc_r+0x1c>
 800b668:	42a9      	cmp	r1, r5
 800b66a:	d904      	bls.n	800b676 <_malloc_r+0x26>
 800b66c:	230c      	movs	r3, #12
 800b66e:	6033      	str	r3, [r6, #0]
 800b670:	2000      	movs	r0, #0
 800b672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b676:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b74c <_malloc_r+0xfc>
 800b67a:	f000 f869 	bl	800b750 <__malloc_lock>
 800b67e:	f8d8 3000 	ldr.w	r3, [r8]
 800b682:	461c      	mov	r4, r3
 800b684:	bb44      	cbnz	r4, 800b6d8 <_malloc_r+0x88>
 800b686:	4629      	mov	r1, r5
 800b688:	4630      	mov	r0, r6
 800b68a:	f7ff ffbf 	bl	800b60c <sbrk_aligned>
 800b68e:	1c43      	adds	r3, r0, #1
 800b690:	4604      	mov	r4, r0
 800b692:	d158      	bne.n	800b746 <_malloc_r+0xf6>
 800b694:	f8d8 4000 	ldr.w	r4, [r8]
 800b698:	4627      	mov	r7, r4
 800b69a:	2f00      	cmp	r7, #0
 800b69c:	d143      	bne.n	800b726 <_malloc_r+0xd6>
 800b69e:	2c00      	cmp	r4, #0
 800b6a0:	d04b      	beq.n	800b73a <_malloc_r+0xea>
 800b6a2:	6823      	ldr	r3, [r4, #0]
 800b6a4:	4639      	mov	r1, r7
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	eb04 0903 	add.w	r9, r4, r3
 800b6ac:	f001 fd58 	bl	800d160 <_sbrk_r>
 800b6b0:	4581      	cmp	r9, r0
 800b6b2:	d142      	bne.n	800b73a <_malloc_r+0xea>
 800b6b4:	6821      	ldr	r1, [r4, #0]
 800b6b6:	1a6d      	subs	r5, r5, r1
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f7ff ffa6 	bl	800b60c <sbrk_aligned>
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	d03a      	beq.n	800b73a <_malloc_r+0xea>
 800b6c4:	6823      	ldr	r3, [r4, #0]
 800b6c6:	442b      	add	r3, r5
 800b6c8:	6023      	str	r3, [r4, #0]
 800b6ca:	f8d8 3000 	ldr.w	r3, [r8]
 800b6ce:	685a      	ldr	r2, [r3, #4]
 800b6d0:	bb62      	cbnz	r2, 800b72c <_malloc_r+0xdc>
 800b6d2:	f8c8 7000 	str.w	r7, [r8]
 800b6d6:	e00f      	b.n	800b6f8 <_malloc_r+0xa8>
 800b6d8:	6822      	ldr	r2, [r4, #0]
 800b6da:	1b52      	subs	r2, r2, r5
 800b6dc:	d420      	bmi.n	800b720 <_malloc_r+0xd0>
 800b6de:	2a0b      	cmp	r2, #11
 800b6e0:	d917      	bls.n	800b712 <_malloc_r+0xc2>
 800b6e2:	1961      	adds	r1, r4, r5
 800b6e4:	42a3      	cmp	r3, r4
 800b6e6:	6025      	str	r5, [r4, #0]
 800b6e8:	bf18      	it	ne
 800b6ea:	6059      	strne	r1, [r3, #4]
 800b6ec:	6863      	ldr	r3, [r4, #4]
 800b6ee:	bf08      	it	eq
 800b6f0:	f8c8 1000 	streq.w	r1, [r8]
 800b6f4:	5162      	str	r2, [r4, r5]
 800b6f6:	604b      	str	r3, [r1, #4]
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	f000 f82f 	bl	800b75c <__malloc_unlock>
 800b6fe:	f104 000b 	add.w	r0, r4, #11
 800b702:	1d23      	adds	r3, r4, #4
 800b704:	f020 0007 	bic.w	r0, r0, #7
 800b708:	1ac2      	subs	r2, r0, r3
 800b70a:	bf1c      	itt	ne
 800b70c:	1a1b      	subne	r3, r3, r0
 800b70e:	50a3      	strne	r3, [r4, r2]
 800b710:	e7af      	b.n	800b672 <_malloc_r+0x22>
 800b712:	6862      	ldr	r2, [r4, #4]
 800b714:	42a3      	cmp	r3, r4
 800b716:	bf0c      	ite	eq
 800b718:	f8c8 2000 	streq.w	r2, [r8]
 800b71c:	605a      	strne	r2, [r3, #4]
 800b71e:	e7eb      	b.n	800b6f8 <_malloc_r+0xa8>
 800b720:	4623      	mov	r3, r4
 800b722:	6864      	ldr	r4, [r4, #4]
 800b724:	e7ae      	b.n	800b684 <_malloc_r+0x34>
 800b726:	463c      	mov	r4, r7
 800b728:	687f      	ldr	r7, [r7, #4]
 800b72a:	e7b6      	b.n	800b69a <_malloc_r+0x4a>
 800b72c:	461a      	mov	r2, r3
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	42a3      	cmp	r3, r4
 800b732:	d1fb      	bne.n	800b72c <_malloc_r+0xdc>
 800b734:	2300      	movs	r3, #0
 800b736:	6053      	str	r3, [r2, #4]
 800b738:	e7de      	b.n	800b6f8 <_malloc_r+0xa8>
 800b73a:	230c      	movs	r3, #12
 800b73c:	6033      	str	r3, [r6, #0]
 800b73e:	4630      	mov	r0, r6
 800b740:	f000 f80c 	bl	800b75c <__malloc_unlock>
 800b744:	e794      	b.n	800b670 <_malloc_r+0x20>
 800b746:	6005      	str	r5, [r0, #0]
 800b748:	e7d6      	b.n	800b6f8 <_malloc_r+0xa8>
 800b74a:	bf00      	nop
 800b74c:	20000824 	.word	0x20000824

0800b750 <__malloc_lock>:
 800b750:	4801      	ldr	r0, [pc, #4]	@ (800b758 <__malloc_lock+0x8>)
 800b752:	f7ff b896 	b.w	800a882 <__retarget_lock_acquire_recursive>
 800b756:	bf00      	nop
 800b758:	2000081c 	.word	0x2000081c

0800b75c <__malloc_unlock>:
 800b75c:	4801      	ldr	r0, [pc, #4]	@ (800b764 <__malloc_unlock+0x8>)
 800b75e:	f7ff b891 	b.w	800a884 <__retarget_lock_release_recursive>
 800b762:	bf00      	nop
 800b764:	2000081c 	.word	0x2000081c

0800b768 <_Balloc>:
 800b768:	b570      	push	{r4, r5, r6, lr}
 800b76a:	69c6      	ldr	r6, [r0, #28]
 800b76c:	4604      	mov	r4, r0
 800b76e:	460d      	mov	r5, r1
 800b770:	b976      	cbnz	r6, 800b790 <_Balloc+0x28>
 800b772:	2010      	movs	r0, #16
 800b774:	f7ff ff42 	bl	800b5fc <malloc>
 800b778:	4602      	mov	r2, r0
 800b77a:	61e0      	str	r0, [r4, #28]
 800b77c:	b920      	cbnz	r0, 800b788 <_Balloc+0x20>
 800b77e:	4b18      	ldr	r3, [pc, #96]	@ (800b7e0 <_Balloc+0x78>)
 800b780:	4818      	ldr	r0, [pc, #96]	@ (800b7e4 <_Balloc+0x7c>)
 800b782:	216b      	movs	r1, #107	@ 0x6b
 800b784:	f7ff f886 	bl	800a894 <__assert_func>
 800b788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b78c:	6006      	str	r6, [r0, #0]
 800b78e:	60c6      	str	r6, [r0, #12]
 800b790:	69e6      	ldr	r6, [r4, #28]
 800b792:	68f3      	ldr	r3, [r6, #12]
 800b794:	b183      	cbz	r3, 800b7b8 <_Balloc+0x50>
 800b796:	69e3      	ldr	r3, [r4, #28]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b79e:	b9b8      	cbnz	r0, 800b7d0 <_Balloc+0x68>
 800b7a0:	2101      	movs	r1, #1
 800b7a2:	fa01 f605 	lsl.w	r6, r1, r5
 800b7a6:	1d72      	adds	r2, r6, #5
 800b7a8:	0092      	lsls	r2, r2, #2
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f001 fd07 	bl	800d1be <_calloc_r>
 800b7b0:	b160      	cbz	r0, 800b7cc <_Balloc+0x64>
 800b7b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7b6:	e00e      	b.n	800b7d6 <_Balloc+0x6e>
 800b7b8:	2221      	movs	r2, #33	@ 0x21
 800b7ba:	2104      	movs	r1, #4
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f001 fcfe 	bl	800d1be <_calloc_r>
 800b7c2:	69e3      	ldr	r3, [r4, #28]
 800b7c4:	60f0      	str	r0, [r6, #12]
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1e4      	bne.n	800b796 <_Balloc+0x2e>
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	bd70      	pop	{r4, r5, r6, pc}
 800b7d0:	6802      	ldr	r2, [r0, #0]
 800b7d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7dc:	e7f7      	b.n	800b7ce <_Balloc+0x66>
 800b7de:	bf00      	nop
 800b7e0:	0800e08e 	.word	0x0800e08e
 800b7e4:	0800e1b1 	.word	0x0800e1b1

0800b7e8 <_Bfree>:
 800b7e8:	b570      	push	{r4, r5, r6, lr}
 800b7ea:	69c6      	ldr	r6, [r0, #28]
 800b7ec:	4605      	mov	r5, r0
 800b7ee:	460c      	mov	r4, r1
 800b7f0:	b976      	cbnz	r6, 800b810 <_Bfree+0x28>
 800b7f2:	2010      	movs	r0, #16
 800b7f4:	f7ff ff02 	bl	800b5fc <malloc>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	61e8      	str	r0, [r5, #28]
 800b7fc:	b920      	cbnz	r0, 800b808 <_Bfree+0x20>
 800b7fe:	4b09      	ldr	r3, [pc, #36]	@ (800b824 <_Bfree+0x3c>)
 800b800:	4809      	ldr	r0, [pc, #36]	@ (800b828 <_Bfree+0x40>)
 800b802:	218f      	movs	r1, #143	@ 0x8f
 800b804:	f7ff f846 	bl	800a894 <__assert_func>
 800b808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b80c:	6006      	str	r6, [r0, #0]
 800b80e:	60c6      	str	r6, [r0, #12]
 800b810:	b13c      	cbz	r4, 800b822 <_Bfree+0x3a>
 800b812:	69eb      	ldr	r3, [r5, #28]
 800b814:	6862      	ldr	r2, [r4, #4]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b81c:	6021      	str	r1, [r4, #0]
 800b81e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b822:	bd70      	pop	{r4, r5, r6, pc}
 800b824:	0800e08e 	.word	0x0800e08e
 800b828:	0800e1b1 	.word	0x0800e1b1

0800b82c <__multadd>:
 800b82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b830:	690d      	ldr	r5, [r1, #16]
 800b832:	4607      	mov	r7, r0
 800b834:	460c      	mov	r4, r1
 800b836:	461e      	mov	r6, r3
 800b838:	f101 0c14 	add.w	ip, r1, #20
 800b83c:	2000      	movs	r0, #0
 800b83e:	f8dc 3000 	ldr.w	r3, [ip]
 800b842:	b299      	uxth	r1, r3
 800b844:	fb02 6101 	mla	r1, r2, r1, r6
 800b848:	0c1e      	lsrs	r6, r3, #16
 800b84a:	0c0b      	lsrs	r3, r1, #16
 800b84c:	fb02 3306 	mla	r3, r2, r6, r3
 800b850:	b289      	uxth	r1, r1
 800b852:	3001      	adds	r0, #1
 800b854:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b858:	4285      	cmp	r5, r0
 800b85a:	f84c 1b04 	str.w	r1, [ip], #4
 800b85e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b862:	dcec      	bgt.n	800b83e <__multadd+0x12>
 800b864:	b30e      	cbz	r6, 800b8aa <__multadd+0x7e>
 800b866:	68a3      	ldr	r3, [r4, #8]
 800b868:	42ab      	cmp	r3, r5
 800b86a:	dc19      	bgt.n	800b8a0 <__multadd+0x74>
 800b86c:	6861      	ldr	r1, [r4, #4]
 800b86e:	4638      	mov	r0, r7
 800b870:	3101      	adds	r1, #1
 800b872:	f7ff ff79 	bl	800b768 <_Balloc>
 800b876:	4680      	mov	r8, r0
 800b878:	b928      	cbnz	r0, 800b886 <__multadd+0x5a>
 800b87a:	4602      	mov	r2, r0
 800b87c:	4b0c      	ldr	r3, [pc, #48]	@ (800b8b0 <__multadd+0x84>)
 800b87e:	480d      	ldr	r0, [pc, #52]	@ (800b8b4 <__multadd+0x88>)
 800b880:	21ba      	movs	r1, #186	@ 0xba
 800b882:	f7ff f807 	bl	800a894 <__assert_func>
 800b886:	6922      	ldr	r2, [r4, #16]
 800b888:	3202      	adds	r2, #2
 800b88a:	f104 010c 	add.w	r1, r4, #12
 800b88e:	0092      	lsls	r2, r2, #2
 800b890:	300c      	adds	r0, #12
 800b892:	f001 fc75 	bl	800d180 <memcpy>
 800b896:	4621      	mov	r1, r4
 800b898:	4638      	mov	r0, r7
 800b89a:	f7ff ffa5 	bl	800b7e8 <_Bfree>
 800b89e:	4644      	mov	r4, r8
 800b8a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b8a4:	3501      	adds	r5, #1
 800b8a6:	615e      	str	r6, [r3, #20]
 800b8a8:	6125      	str	r5, [r4, #16]
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8b0:	0800e1a0 	.word	0x0800e1a0
 800b8b4:	0800e1b1 	.word	0x0800e1b1

0800b8b8 <__s2b>:
 800b8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8bc:	460c      	mov	r4, r1
 800b8be:	4615      	mov	r5, r2
 800b8c0:	461f      	mov	r7, r3
 800b8c2:	2209      	movs	r2, #9
 800b8c4:	3308      	adds	r3, #8
 800b8c6:	4606      	mov	r6, r0
 800b8c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8cc:	2100      	movs	r1, #0
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	db09      	blt.n	800b8e8 <__s2b+0x30>
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	f7ff ff47 	bl	800b768 <_Balloc>
 800b8da:	b940      	cbnz	r0, 800b8ee <__s2b+0x36>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	4b19      	ldr	r3, [pc, #100]	@ (800b944 <__s2b+0x8c>)
 800b8e0:	4819      	ldr	r0, [pc, #100]	@ (800b948 <__s2b+0x90>)
 800b8e2:	21d3      	movs	r1, #211	@ 0xd3
 800b8e4:	f7fe ffd6 	bl	800a894 <__assert_func>
 800b8e8:	0052      	lsls	r2, r2, #1
 800b8ea:	3101      	adds	r1, #1
 800b8ec:	e7f0      	b.n	800b8d0 <__s2b+0x18>
 800b8ee:	9b08      	ldr	r3, [sp, #32]
 800b8f0:	6143      	str	r3, [r0, #20]
 800b8f2:	2d09      	cmp	r5, #9
 800b8f4:	f04f 0301 	mov.w	r3, #1
 800b8f8:	6103      	str	r3, [r0, #16]
 800b8fa:	dd16      	ble.n	800b92a <__s2b+0x72>
 800b8fc:	f104 0909 	add.w	r9, r4, #9
 800b900:	46c8      	mov	r8, r9
 800b902:	442c      	add	r4, r5
 800b904:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b908:	4601      	mov	r1, r0
 800b90a:	3b30      	subs	r3, #48	@ 0x30
 800b90c:	220a      	movs	r2, #10
 800b90e:	4630      	mov	r0, r6
 800b910:	f7ff ff8c 	bl	800b82c <__multadd>
 800b914:	45a0      	cmp	r8, r4
 800b916:	d1f5      	bne.n	800b904 <__s2b+0x4c>
 800b918:	f1a5 0408 	sub.w	r4, r5, #8
 800b91c:	444c      	add	r4, r9
 800b91e:	1b2d      	subs	r5, r5, r4
 800b920:	1963      	adds	r3, r4, r5
 800b922:	42bb      	cmp	r3, r7
 800b924:	db04      	blt.n	800b930 <__s2b+0x78>
 800b926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b92a:	340a      	adds	r4, #10
 800b92c:	2509      	movs	r5, #9
 800b92e:	e7f6      	b.n	800b91e <__s2b+0x66>
 800b930:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b934:	4601      	mov	r1, r0
 800b936:	3b30      	subs	r3, #48	@ 0x30
 800b938:	220a      	movs	r2, #10
 800b93a:	4630      	mov	r0, r6
 800b93c:	f7ff ff76 	bl	800b82c <__multadd>
 800b940:	e7ee      	b.n	800b920 <__s2b+0x68>
 800b942:	bf00      	nop
 800b944:	0800e1a0 	.word	0x0800e1a0
 800b948:	0800e1b1 	.word	0x0800e1b1

0800b94c <__hi0bits>:
 800b94c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b950:	4603      	mov	r3, r0
 800b952:	bf36      	itet	cc
 800b954:	0403      	lslcc	r3, r0, #16
 800b956:	2000      	movcs	r0, #0
 800b958:	2010      	movcc	r0, #16
 800b95a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b95e:	bf3c      	itt	cc
 800b960:	021b      	lslcc	r3, r3, #8
 800b962:	3008      	addcc	r0, #8
 800b964:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b968:	bf3c      	itt	cc
 800b96a:	011b      	lslcc	r3, r3, #4
 800b96c:	3004      	addcc	r0, #4
 800b96e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b972:	bf3c      	itt	cc
 800b974:	009b      	lslcc	r3, r3, #2
 800b976:	3002      	addcc	r0, #2
 800b978:	2b00      	cmp	r3, #0
 800b97a:	db05      	blt.n	800b988 <__hi0bits+0x3c>
 800b97c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b980:	f100 0001 	add.w	r0, r0, #1
 800b984:	bf08      	it	eq
 800b986:	2020      	moveq	r0, #32
 800b988:	4770      	bx	lr

0800b98a <__lo0bits>:
 800b98a:	6803      	ldr	r3, [r0, #0]
 800b98c:	4602      	mov	r2, r0
 800b98e:	f013 0007 	ands.w	r0, r3, #7
 800b992:	d00b      	beq.n	800b9ac <__lo0bits+0x22>
 800b994:	07d9      	lsls	r1, r3, #31
 800b996:	d421      	bmi.n	800b9dc <__lo0bits+0x52>
 800b998:	0798      	lsls	r0, r3, #30
 800b99a:	bf49      	itett	mi
 800b99c:	085b      	lsrmi	r3, r3, #1
 800b99e:	089b      	lsrpl	r3, r3, #2
 800b9a0:	2001      	movmi	r0, #1
 800b9a2:	6013      	strmi	r3, [r2, #0]
 800b9a4:	bf5c      	itt	pl
 800b9a6:	6013      	strpl	r3, [r2, #0]
 800b9a8:	2002      	movpl	r0, #2
 800b9aa:	4770      	bx	lr
 800b9ac:	b299      	uxth	r1, r3
 800b9ae:	b909      	cbnz	r1, 800b9b4 <__lo0bits+0x2a>
 800b9b0:	0c1b      	lsrs	r3, r3, #16
 800b9b2:	2010      	movs	r0, #16
 800b9b4:	b2d9      	uxtb	r1, r3
 800b9b6:	b909      	cbnz	r1, 800b9bc <__lo0bits+0x32>
 800b9b8:	3008      	adds	r0, #8
 800b9ba:	0a1b      	lsrs	r3, r3, #8
 800b9bc:	0719      	lsls	r1, r3, #28
 800b9be:	bf04      	itt	eq
 800b9c0:	091b      	lsreq	r3, r3, #4
 800b9c2:	3004      	addeq	r0, #4
 800b9c4:	0799      	lsls	r1, r3, #30
 800b9c6:	bf04      	itt	eq
 800b9c8:	089b      	lsreq	r3, r3, #2
 800b9ca:	3002      	addeq	r0, #2
 800b9cc:	07d9      	lsls	r1, r3, #31
 800b9ce:	d403      	bmi.n	800b9d8 <__lo0bits+0x4e>
 800b9d0:	085b      	lsrs	r3, r3, #1
 800b9d2:	f100 0001 	add.w	r0, r0, #1
 800b9d6:	d003      	beq.n	800b9e0 <__lo0bits+0x56>
 800b9d8:	6013      	str	r3, [r2, #0]
 800b9da:	4770      	bx	lr
 800b9dc:	2000      	movs	r0, #0
 800b9de:	4770      	bx	lr
 800b9e0:	2020      	movs	r0, #32
 800b9e2:	4770      	bx	lr

0800b9e4 <__i2b>:
 800b9e4:	b510      	push	{r4, lr}
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	2101      	movs	r1, #1
 800b9ea:	f7ff febd 	bl	800b768 <_Balloc>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	b928      	cbnz	r0, 800b9fe <__i2b+0x1a>
 800b9f2:	4b05      	ldr	r3, [pc, #20]	@ (800ba08 <__i2b+0x24>)
 800b9f4:	4805      	ldr	r0, [pc, #20]	@ (800ba0c <__i2b+0x28>)
 800b9f6:	f240 1145 	movw	r1, #325	@ 0x145
 800b9fa:	f7fe ff4b 	bl	800a894 <__assert_func>
 800b9fe:	2301      	movs	r3, #1
 800ba00:	6144      	str	r4, [r0, #20]
 800ba02:	6103      	str	r3, [r0, #16]
 800ba04:	bd10      	pop	{r4, pc}
 800ba06:	bf00      	nop
 800ba08:	0800e1a0 	.word	0x0800e1a0
 800ba0c:	0800e1b1 	.word	0x0800e1b1

0800ba10 <__multiply>:
 800ba10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba14:	4614      	mov	r4, r2
 800ba16:	690a      	ldr	r2, [r1, #16]
 800ba18:	6923      	ldr	r3, [r4, #16]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	bfa8      	it	ge
 800ba1e:	4623      	movge	r3, r4
 800ba20:	460f      	mov	r7, r1
 800ba22:	bfa4      	itt	ge
 800ba24:	460c      	movge	r4, r1
 800ba26:	461f      	movge	r7, r3
 800ba28:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ba2c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ba30:	68a3      	ldr	r3, [r4, #8]
 800ba32:	6861      	ldr	r1, [r4, #4]
 800ba34:	eb0a 0609 	add.w	r6, sl, r9
 800ba38:	42b3      	cmp	r3, r6
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	bfb8      	it	lt
 800ba3e:	3101      	addlt	r1, #1
 800ba40:	f7ff fe92 	bl	800b768 <_Balloc>
 800ba44:	b930      	cbnz	r0, 800ba54 <__multiply+0x44>
 800ba46:	4602      	mov	r2, r0
 800ba48:	4b44      	ldr	r3, [pc, #272]	@ (800bb5c <__multiply+0x14c>)
 800ba4a:	4845      	ldr	r0, [pc, #276]	@ (800bb60 <__multiply+0x150>)
 800ba4c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ba50:	f7fe ff20 	bl	800a894 <__assert_func>
 800ba54:	f100 0514 	add.w	r5, r0, #20
 800ba58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba5c:	462b      	mov	r3, r5
 800ba5e:	2200      	movs	r2, #0
 800ba60:	4543      	cmp	r3, r8
 800ba62:	d321      	bcc.n	800baa8 <__multiply+0x98>
 800ba64:	f107 0114 	add.w	r1, r7, #20
 800ba68:	f104 0214 	add.w	r2, r4, #20
 800ba6c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ba70:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ba74:	9302      	str	r3, [sp, #8]
 800ba76:	1b13      	subs	r3, r2, r4
 800ba78:	3b15      	subs	r3, #21
 800ba7a:	f023 0303 	bic.w	r3, r3, #3
 800ba7e:	3304      	adds	r3, #4
 800ba80:	f104 0715 	add.w	r7, r4, #21
 800ba84:	42ba      	cmp	r2, r7
 800ba86:	bf38      	it	cc
 800ba88:	2304      	movcc	r3, #4
 800ba8a:	9301      	str	r3, [sp, #4]
 800ba8c:	9b02      	ldr	r3, [sp, #8]
 800ba8e:	9103      	str	r1, [sp, #12]
 800ba90:	428b      	cmp	r3, r1
 800ba92:	d80c      	bhi.n	800baae <__multiply+0x9e>
 800ba94:	2e00      	cmp	r6, #0
 800ba96:	dd03      	ble.n	800baa0 <__multiply+0x90>
 800ba98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d05b      	beq.n	800bb58 <__multiply+0x148>
 800baa0:	6106      	str	r6, [r0, #16]
 800baa2:	b005      	add	sp, #20
 800baa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa8:	f843 2b04 	str.w	r2, [r3], #4
 800baac:	e7d8      	b.n	800ba60 <__multiply+0x50>
 800baae:	f8b1 a000 	ldrh.w	sl, [r1]
 800bab2:	f1ba 0f00 	cmp.w	sl, #0
 800bab6:	d024      	beq.n	800bb02 <__multiply+0xf2>
 800bab8:	f104 0e14 	add.w	lr, r4, #20
 800babc:	46a9      	mov	r9, r5
 800babe:	f04f 0c00 	mov.w	ip, #0
 800bac2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bac6:	f8d9 3000 	ldr.w	r3, [r9]
 800baca:	fa1f fb87 	uxth.w	fp, r7
 800bace:	b29b      	uxth	r3, r3
 800bad0:	fb0a 330b 	mla	r3, sl, fp, r3
 800bad4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bad8:	f8d9 7000 	ldr.w	r7, [r9]
 800badc:	4463      	add	r3, ip
 800bade:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bae2:	fb0a c70b 	mla	r7, sl, fp, ip
 800bae6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800baea:	b29b      	uxth	r3, r3
 800baec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800baf0:	4572      	cmp	r2, lr
 800baf2:	f849 3b04 	str.w	r3, [r9], #4
 800baf6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bafa:	d8e2      	bhi.n	800bac2 <__multiply+0xb2>
 800bafc:	9b01      	ldr	r3, [sp, #4]
 800bafe:	f845 c003 	str.w	ip, [r5, r3]
 800bb02:	9b03      	ldr	r3, [sp, #12]
 800bb04:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb08:	3104      	adds	r1, #4
 800bb0a:	f1b9 0f00 	cmp.w	r9, #0
 800bb0e:	d021      	beq.n	800bb54 <__multiply+0x144>
 800bb10:	682b      	ldr	r3, [r5, #0]
 800bb12:	f104 0c14 	add.w	ip, r4, #20
 800bb16:	46ae      	mov	lr, r5
 800bb18:	f04f 0a00 	mov.w	sl, #0
 800bb1c:	f8bc b000 	ldrh.w	fp, [ip]
 800bb20:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bb24:	fb09 770b 	mla	r7, r9, fp, r7
 800bb28:	4457      	add	r7, sl
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb30:	f84e 3b04 	str.w	r3, [lr], #4
 800bb34:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb3c:	f8be 3000 	ldrh.w	r3, [lr]
 800bb40:	fb09 330a 	mla	r3, r9, sl, r3
 800bb44:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bb48:	4562      	cmp	r2, ip
 800bb4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb4e:	d8e5      	bhi.n	800bb1c <__multiply+0x10c>
 800bb50:	9f01      	ldr	r7, [sp, #4]
 800bb52:	51eb      	str	r3, [r5, r7]
 800bb54:	3504      	adds	r5, #4
 800bb56:	e799      	b.n	800ba8c <__multiply+0x7c>
 800bb58:	3e01      	subs	r6, #1
 800bb5a:	e79b      	b.n	800ba94 <__multiply+0x84>
 800bb5c:	0800e1a0 	.word	0x0800e1a0
 800bb60:	0800e1b1 	.word	0x0800e1b1

0800bb64 <__pow5mult>:
 800bb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb68:	4615      	mov	r5, r2
 800bb6a:	f012 0203 	ands.w	r2, r2, #3
 800bb6e:	4607      	mov	r7, r0
 800bb70:	460e      	mov	r6, r1
 800bb72:	d007      	beq.n	800bb84 <__pow5mult+0x20>
 800bb74:	4c25      	ldr	r4, [pc, #148]	@ (800bc0c <__pow5mult+0xa8>)
 800bb76:	3a01      	subs	r2, #1
 800bb78:	2300      	movs	r3, #0
 800bb7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb7e:	f7ff fe55 	bl	800b82c <__multadd>
 800bb82:	4606      	mov	r6, r0
 800bb84:	10ad      	asrs	r5, r5, #2
 800bb86:	d03d      	beq.n	800bc04 <__pow5mult+0xa0>
 800bb88:	69fc      	ldr	r4, [r7, #28]
 800bb8a:	b97c      	cbnz	r4, 800bbac <__pow5mult+0x48>
 800bb8c:	2010      	movs	r0, #16
 800bb8e:	f7ff fd35 	bl	800b5fc <malloc>
 800bb92:	4602      	mov	r2, r0
 800bb94:	61f8      	str	r0, [r7, #28]
 800bb96:	b928      	cbnz	r0, 800bba4 <__pow5mult+0x40>
 800bb98:	4b1d      	ldr	r3, [pc, #116]	@ (800bc10 <__pow5mult+0xac>)
 800bb9a:	481e      	ldr	r0, [pc, #120]	@ (800bc14 <__pow5mult+0xb0>)
 800bb9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bba0:	f7fe fe78 	bl	800a894 <__assert_func>
 800bba4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bba8:	6004      	str	r4, [r0, #0]
 800bbaa:	60c4      	str	r4, [r0, #12]
 800bbac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bbb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbb4:	b94c      	cbnz	r4, 800bbca <__pow5mult+0x66>
 800bbb6:	f240 2171 	movw	r1, #625	@ 0x271
 800bbba:	4638      	mov	r0, r7
 800bbbc:	f7ff ff12 	bl	800b9e4 <__i2b>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	6003      	str	r3, [r0, #0]
 800bbca:	f04f 0900 	mov.w	r9, #0
 800bbce:	07eb      	lsls	r3, r5, #31
 800bbd0:	d50a      	bpl.n	800bbe8 <__pow5mult+0x84>
 800bbd2:	4631      	mov	r1, r6
 800bbd4:	4622      	mov	r2, r4
 800bbd6:	4638      	mov	r0, r7
 800bbd8:	f7ff ff1a 	bl	800ba10 <__multiply>
 800bbdc:	4631      	mov	r1, r6
 800bbde:	4680      	mov	r8, r0
 800bbe0:	4638      	mov	r0, r7
 800bbe2:	f7ff fe01 	bl	800b7e8 <_Bfree>
 800bbe6:	4646      	mov	r6, r8
 800bbe8:	106d      	asrs	r5, r5, #1
 800bbea:	d00b      	beq.n	800bc04 <__pow5mult+0xa0>
 800bbec:	6820      	ldr	r0, [r4, #0]
 800bbee:	b938      	cbnz	r0, 800bc00 <__pow5mult+0x9c>
 800bbf0:	4622      	mov	r2, r4
 800bbf2:	4621      	mov	r1, r4
 800bbf4:	4638      	mov	r0, r7
 800bbf6:	f7ff ff0b 	bl	800ba10 <__multiply>
 800bbfa:	6020      	str	r0, [r4, #0]
 800bbfc:	f8c0 9000 	str.w	r9, [r0]
 800bc00:	4604      	mov	r4, r0
 800bc02:	e7e4      	b.n	800bbce <__pow5mult+0x6a>
 800bc04:	4630      	mov	r0, r6
 800bc06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc0a:	bf00      	nop
 800bc0c:	0800e20c 	.word	0x0800e20c
 800bc10:	0800e08e 	.word	0x0800e08e
 800bc14:	0800e1b1 	.word	0x0800e1b1

0800bc18 <__lshift>:
 800bc18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc1c:	460c      	mov	r4, r1
 800bc1e:	6849      	ldr	r1, [r1, #4]
 800bc20:	6923      	ldr	r3, [r4, #16]
 800bc22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc26:	68a3      	ldr	r3, [r4, #8]
 800bc28:	4607      	mov	r7, r0
 800bc2a:	4691      	mov	r9, r2
 800bc2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc30:	f108 0601 	add.w	r6, r8, #1
 800bc34:	42b3      	cmp	r3, r6
 800bc36:	db0b      	blt.n	800bc50 <__lshift+0x38>
 800bc38:	4638      	mov	r0, r7
 800bc3a:	f7ff fd95 	bl	800b768 <_Balloc>
 800bc3e:	4605      	mov	r5, r0
 800bc40:	b948      	cbnz	r0, 800bc56 <__lshift+0x3e>
 800bc42:	4602      	mov	r2, r0
 800bc44:	4b28      	ldr	r3, [pc, #160]	@ (800bce8 <__lshift+0xd0>)
 800bc46:	4829      	ldr	r0, [pc, #164]	@ (800bcec <__lshift+0xd4>)
 800bc48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bc4c:	f7fe fe22 	bl	800a894 <__assert_func>
 800bc50:	3101      	adds	r1, #1
 800bc52:	005b      	lsls	r3, r3, #1
 800bc54:	e7ee      	b.n	800bc34 <__lshift+0x1c>
 800bc56:	2300      	movs	r3, #0
 800bc58:	f100 0114 	add.w	r1, r0, #20
 800bc5c:	f100 0210 	add.w	r2, r0, #16
 800bc60:	4618      	mov	r0, r3
 800bc62:	4553      	cmp	r3, sl
 800bc64:	db33      	blt.n	800bcce <__lshift+0xb6>
 800bc66:	6920      	ldr	r0, [r4, #16]
 800bc68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc6c:	f104 0314 	add.w	r3, r4, #20
 800bc70:	f019 091f 	ands.w	r9, r9, #31
 800bc74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc7c:	d02b      	beq.n	800bcd6 <__lshift+0xbe>
 800bc7e:	f1c9 0e20 	rsb	lr, r9, #32
 800bc82:	468a      	mov	sl, r1
 800bc84:	2200      	movs	r2, #0
 800bc86:	6818      	ldr	r0, [r3, #0]
 800bc88:	fa00 f009 	lsl.w	r0, r0, r9
 800bc8c:	4310      	orrs	r0, r2
 800bc8e:	f84a 0b04 	str.w	r0, [sl], #4
 800bc92:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc96:	459c      	cmp	ip, r3
 800bc98:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc9c:	d8f3      	bhi.n	800bc86 <__lshift+0x6e>
 800bc9e:	ebac 0304 	sub.w	r3, ip, r4
 800bca2:	3b15      	subs	r3, #21
 800bca4:	f023 0303 	bic.w	r3, r3, #3
 800bca8:	3304      	adds	r3, #4
 800bcaa:	f104 0015 	add.w	r0, r4, #21
 800bcae:	4584      	cmp	ip, r0
 800bcb0:	bf38      	it	cc
 800bcb2:	2304      	movcc	r3, #4
 800bcb4:	50ca      	str	r2, [r1, r3]
 800bcb6:	b10a      	cbz	r2, 800bcbc <__lshift+0xa4>
 800bcb8:	f108 0602 	add.w	r6, r8, #2
 800bcbc:	3e01      	subs	r6, #1
 800bcbe:	4638      	mov	r0, r7
 800bcc0:	612e      	str	r6, [r5, #16]
 800bcc2:	4621      	mov	r1, r4
 800bcc4:	f7ff fd90 	bl	800b7e8 <_Bfree>
 800bcc8:	4628      	mov	r0, r5
 800bcca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcce:	f842 0f04 	str.w	r0, [r2, #4]!
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	e7c5      	b.n	800bc62 <__lshift+0x4a>
 800bcd6:	3904      	subs	r1, #4
 800bcd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcdc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bce0:	459c      	cmp	ip, r3
 800bce2:	d8f9      	bhi.n	800bcd8 <__lshift+0xc0>
 800bce4:	e7ea      	b.n	800bcbc <__lshift+0xa4>
 800bce6:	bf00      	nop
 800bce8:	0800e1a0 	.word	0x0800e1a0
 800bcec:	0800e1b1 	.word	0x0800e1b1

0800bcf0 <__mcmp>:
 800bcf0:	690a      	ldr	r2, [r1, #16]
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	6900      	ldr	r0, [r0, #16]
 800bcf6:	1a80      	subs	r0, r0, r2
 800bcf8:	b530      	push	{r4, r5, lr}
 800bcfa:	d10e      	bne.n	800bd1a <__mcmp+0x2a>
 800bcfc:	3314      	adds	r3, #20
 800bcfe:	3114      	adds	r1, #20
 800bd00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd10:	4295      	cmp	r5, r2
 800bd12:	d003      	beq.n	800bd1c <__mcmp+0x2c>
 800bd14:	d205      	bcs.n	800bd22 <__mcmp+0x32>
 800bd16:	f04f 30ff 	mov.w	r0, #4294967295
 800bd1a:	bd30      	pop	{r4, r5, pc}
 800bd1c:	42a3      	cmp	r3, r4
 800bd1e:	d3f3      	bcc.n	800bd08 <__mcmp+0x18>
 800bd20:	e7fb      	b.n	800bd1a <__mcmp+0x2a>
 800bd22:	2001      	movs	r0, #1
 800bd24:	e7f9      	b.n	800bd1a <__mcmp+0x2a>
	...

0800bd28 <__mdiff>:
 800bd28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2c:	4689      	mov	r9, r1
 800bd2e:	4606      	mov	r6, r0
 800bd30:	4611      	mov	r1, r2
 800bd32:	4648      	mov	r0, r9
 800bd34:	4614      	mov	r4, r2
 800bd36:	f7ff ffdb 	bl	800bcf0 <__mcmp>
 800bd3a:	1e05      	subs	r5, r0, #0
 800bd3c:	d112      	bne.n	800bd64 <__mdiff+0x3c>
 800bd3e:	4629      	mov	r1, r5
 800bd40:	4630      	mov	r0, r6
 800bd42:	f7ff fd11 	bl	800b768 <_Balloc>
 800bd46:	4602      	mov	r2, r0
 800bd48:	b928      	cbnz	r0, 800bd56 <__mdiff+0x2e>
 800bd4a:	4b3f      	ldr	r3, [pc, #252]	@ (800be48 <__mdiff+0x120>)
 800bd4c:	f240 2137 	movw	r1, #567	@ 0x237
 800bd50:	483e      	ldr	r0, [pc, #248]	@ (800be4c <__mdiff+0x124>)
 800bd52:	f7fe fd9f 	bl	800a894 <__assert_func>
 800bd56:	2301      	movs	r3, #1
 800bd58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd5c:	4610      	mov	r0, r2
 800bd5e:	b003      	add	sp, #12
 800bd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd64:	bfbc      	itt	lt
 800bd66:	464b      	movlt	r3, r9
 800bd68:	46a1      	movlt	r9, r4
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bd70:	bfba      	itte	lt
 800bd72:	461c      	movlt	r4, r3
 800bd74:	2501      	movlt	r5, #1
 800bd76:	2500      	movge	r5, #0
 800bd78:	f7ff fcf6 	bl	800b768 <_Balloc>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	b918      	cbnz	r0, 800bd88 <__mdiff+0x60>
 800bd80:	4b31      	ldr	r3, [pc, #196]	@ (800be48 <__mdiff+0x120>)
 800bd82:	f240 2145 	movw	r1, #581	@ 0x245
 800bd86:	e7e3      	b.n	800bd50 <__mdiff+0x28>
 800bd88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bd8c:	6926      	ldr	r6, [r4, #16]
 800bd8e:	60c5      	str	r5, [r0, #12]
 800bd90:	f109 0310 	add.w	r3, r9, #16
 800bd94:	f109 0514 	add.w	r5, r9, #20
 800bd98:	f104 0e14 	add.w	lr, r4, #20
 800bd9c:	f100 0b14 	add.w	fp, r0, #20
 800bda0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bda4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bda8:	9301      	str	r3, [sp, #4]
 800bdaa:	46d9      	mov	r9, fp
 800bdac:	f04f 0c00 	mov.w	ip, #0
 800bdb0:	9b01      	ldr	r3, [sp, #4]
 800bdb2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bdb6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bdba:	9301      	str	r3, [sp, #4]
 800bdbc:	fa1f f38a 	uxth.w	r3, sl
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	b283      	uxth	r3, r0
 800bdc4:	1acb      	subs	r3, r1, r3
 800bdc6:	0c00      	lsrs	r0, r0, #16
 800bdc8:	4463      	add	r3, ip
 800bdca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bdce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bdd8:	4576      	cmp	r6, lr
 800bdda:	f849 3b04 	str.w	r3, [r9], #4
 800bdde:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bde2:	d8e5      	bhi.n	800bdb0 <__mdiff+0x88>
 800bde4:	1b33      	subs	r3, r6, r4
 800bde6:	3b15      	subs	r3, #21
 800bde8:	f023 0303 	bic.w	r3, r3, #3
 800bdec:	3415      	adds	r4, #21
 800bdee:	3304      	adds	r3, #4
 800bdf0:	42a6      	cmp	r6, r4
 800bdf2:	bf38      	it	cc
 800bdf4:	2304      	movcc	r3, #4
 800bdf6:	441d      	add	r5, r3
 800bdf8:	445b      	add	r3, fp
 800bdfa:	461e      	mov	r6, r3
 800bdfc:	462c      	mov	r4, r5
 800bdfe:	4544      	cmp	r4, r8
 800be00:	d30e      	bcc.n	800be20 <__mdiff+0xf8>
 800be02:	f108 0103 	add.w	r1, r8, #3
 800be06:	1b49      	subs	r1, r1, r5
 800be08:	f021 0103 	bic.w	r1, r1, #3
 800be0c:	3d03      	subs	r5, #3
 800be0e:	45a8      	cmp	r8, r5
 800be10:	bf38      	it	cc
 800be12:	2100      	movcc	r1, #0
 800be14:	440b      	add	r3, r1
 800be16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be1a:	b191      	cbz	r1, 800be42 <__mdiff+0x11a>
 800be1c:	6117      	str	r7, [r2, #16]
 800be1e:	e79d      	b.n	800bd5c <__mdiff+0x34>
 800be20:	f854 1b04 	ldr.w	r1, [r4], #4
 800be24:	46e6      	mov	lr, ip
 800be26:	0c08      	lsrs	r0, r1, #16
 800be28:	fa1c fc81 	uxtah	ip, ip, r1
 800be2c:	4471      	add	r1, lr
 800be2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be32:	b289      	uxth	r1, r1
 800be34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be38:	f846 1b04 	str.w	r1, [r6], #4
 800be3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be40:	e7dd      	b.n	800bdfe <__mdiff+0xd6>
 800be42:	3f01      	subs	r7, #1
 800be44:	e7e7      	b.n	800be16 <__mdiff+0xee>
 800be46:	bf00      	nop
 800be48:	0800e1a0 	.word	0x0800e1a0
 800be4c:	0800e1b1 	.word	0x0800e1b1

0800be50 <__ulp>:
 800be50:	b082      	sub	sp, #8
 800be52:	ed8d 0b00 	vstr	d0, [sp]
 800be56:	9a01      	ldr	r2, [sp, #4]
 800be58:	4b0f      	ldr	r3, [pc, #60]	@ (800be98 <__ulp+0x48>)
 800be5a:	4013      	ands	r3, r2
 800be5c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800be60:	2b00      	cmp	r3, #0
 800be62:	dc08      	bgt.n	800be76 <__ulp+0x26>
 800be64:	425b      	negs	r3, r3
 800be66:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800be6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be6e:	da04      	bge.n	800be7a <__ulp+0x2a>
 800be70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800be74:	4113      	asrs	r3, r2
 800be76:	2200      	movs	r2, #0
 800be78:	e008      	b.n	800be8c <__ulp+0x3c>
 800be7a:	f1a2 0314 	sub.w	r3, r2, #20
 800be7e:	2b1e      	cmp	r3, #30
 800be80:	bfda      	itte	le
 800be82:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800be86:	40da      	lsrle	r2, r3
 800be88:	2201      	movgt	r2, #1
 800be8a:	2300      	movs	r3, #0
 800be8c:	4619      	mov	r1, r3
 800be8e:	4610      	mov	r0, r2
 800be90:	ec41 0b10 	vmov	d0, r0, r1
 800be94:	b002      	add	sp, #8
 800be96:	4770      	bx	lr
 800be98:	7ff00000 	.word	0x7ff00000

0800be9c <__b2d>:
 800be9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea0:	6906      	ldr	r6, [r0, #16]
 800bea2:	f100 0814 	add.w	r8, r0, #20
 800bea6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800beaa:	1f37      	subs	r7, r6, #4
 800beac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800beb0:	4610      	mov	r0, r2
 800beb2:	f7ff fd4b 	bl	800b94c <__hi0bits>
 800beb6:	f1c0 0320 	rsb	r3, r0, #32
 800beba:	280a      	cmp	r0, #10
 800bebc:	600b      	str	r3, [r1, #0]
 800bebe:	491b      	ldr	r1, [pc, #108]	@ (800bf2c <__b2d+0x90>)
 800bec0:	dc15      	bgt.n	800beee <__b2d+0x52>
 800bec2:	f1c0 0c0b 	rsb	ip, r0, #11
 800bec6:	fa22 f30c 	lsr.w	r3, r2, ip
 800beca:	45b8      	cmp	r8, r7
 800becc:	ea43 0501 	orr.w	r5, r3, r1
 800bed0:	bf34      	ite	cc
 800bed2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bed6:	2300      	movcs	r3, #0
 800bed8:	3015      	adds	r0, #21
 800beda:	fa02 f000 	lsl.w	r0, r2, r0
 800bede:	fa23 f30c 	lsr.w	r3, r3, ip
 800bee2:	4303      	orrs	r3, r0
 800bee4:	461c      	mov	r4, r3
 800bee6:	ec45 4b10 	vmov	d0, r4, r5
 800beea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beee:	45b8      	cmp	r8, r7
 800bef0:	bf3a      	itte	cc
 800bef2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bef6:	f1a6 0708 	subcc.w	r7, r6, #8
 800befa:	2300      	movcs	r3, #0
 800befc:	380b      	subs	r0, #11
 800befe:	d012      	beq.n	800bf26 <__b2d+0x8a>
 800bf00:	f1c0 0120 	rsb	r1, r0, #32
 800bf04:	fa23 f401 	lsr.w	r4, r3, r1
 800bf08:	4082      	lsls	r2, r0
 800bf0a:	4322      	orrs	r2, r4
 800bf0c:	4547      	cmp	r7, r8
 800bf0e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bf12:	bf8c      	ite	hi
 800bf14:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bf18:	2200      	movls	r2, #0
 800bf1a:	4083      	lsls	r3, r0
 800bf1c:	40ca      	lsrs	r2, r1
 800bf1e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bf22:	4313      	orrs	r3, r2
 800bf24:	e7de      	b.n	800bee4 <__b2d+0x48>
 800bf26:	ea42 0501 	orr.w	r5, r2, r1
 800bf2a:	e7db      	b.n	800bee4 <__b2d+0x48>
 800bf2c:	3ff00000 	.word	0x3ff00000

0800bf30 <__d2b>:
 800bf30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf34:	460f      	mov	r7, r1
 800bf36:	2101      	movs	r1, #1
 800bf38:	ec59 8b10 	vmov	r8, r9, d0
 800bf3c:	4616      	mov	r6, r2
 800bf3e:	f7ff fc13 	bl	800b768 <_Balloc>
 800bf42:	4604      	mov	r4, r0
 800bf44:	b930      	cbnz	r0, 800bf54 <__d2b+0x24>
 800bf46:	4602      	mov	r2, r0
 800bf48:	4b23      	ldr	r3, [pc, #140]	@ (800bfd8 <__d2b+0xa8>)
 800bf4a:	4824      	ldr	r0, [pc, #144]	@ (800bfdc <__d2b+0xac>)
 800bf4c:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf50:	f7fe fca0 	bl	800a894 <__assert_func>
 800bf54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf5c:	b10d      	cbz	r5, 800bf62 <__d2b+0x32>
 800bf5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf62:	9301      	str	r3, [sp, #4]
 800bf64:	f1b8 0300 	subs.w	r3, r8, #0
 800bf68:	d023      	beq.n	800bfb2 <__d2b+0x82>
 800bf6a:	4668      	mov	r0, sp
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	f7ff fd0c 	bl	800b98a <__lo0bits>
 800bf72:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf76:	b1d0      	cbz	r0, 800bfae <__d2b+0x7e>
 800bf78:	f1c0 0320 	rsb	r3, r0, #32
 800bf7c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf80:	430b      	orrs	r3, r1
 800bf82:	40c2      	lsrs	r2, r0
 800bf84:	6163      	str	r3, [r4, #20]
 800bf86:	9201      	str	r2, [sp, #4]
 800bf88:	9b01      	ldr	r3, [sp, #4]
 800bf8a:	61a3      	str	r3, [r4, #24]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	bf0c      	ite	eq
 800bf90:	2201      	moveq	r2, #1
 800bf92:	2202      	movne	r2, #2
 800bf94:	6122      	str	r2, [r4, #16]
 800bf96:	b1a5      	cbz	r5, 800bfc2 <__d2b+0x92>
 800bf98:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf9c:	4405      	add	r5, r0
 800bf9e:	603d      	str	r5, [r7, #0]
 800bfa0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bfa4:	6030      	str	r0, [r6, #0]
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	b003      	add	sp, #12
 800bfaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfae:	6161      	str	r1, [r4, #20]
 800bfb0:	e7ea      	b.n	800bf88 <__d2b+0x58>
 800bfb2:	a801      	add	r0, sp, #4
 800bfb4:	f7ff fce9 	bl	800b98a <__lo0bits>
 800bfb8:	9b01      	ldr	r3, [sp, #4]
 800bfba:	6163      	str	r3, [r4, #20]
 800bfbc:	3020      	adds	r0, #32
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	e7e8      	b.n	800bf94 <__d2b+0x64>
 800bfc2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bfc6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bfca:	6038      	str	r0, [r7, #0]
 800bfcc:	6918      	ldr	r0, [r3, #16]
 800bfce:	f7ff fcbd 	bl	800b94c <__hi0bits>
 800bfd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bfd6:	e7e5      	b.n	800bfa4 <__d2b+0x74>
 800bfd8:	0800e1a0 	.word	0x0800e1a0
 800bfdc:	0800e1b1 	.word	0x0800e1b1

0800bfe0 <__ratio>:
 800bfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe4:	b085      	sub	sp, #20
 800bfe6:	e9cd 1000 	strd	r1, r0, [sp]
 800bfea:	a902      	add	r1, sp, #8
 800bfec:	f7ff ff56 	bl	800be9c <__b2d>
 800bff0:	9800      	ldr	r0, [sp, #0]
 800bff2:	a903      	add	r1, sp, #12
 800bff4:	ec55 4b10 	vmov	r4, r5, d0
 800bff8:	f7ff ff50 	bl	800be9c <__b2d>
 800bffc:	9b01      	ldr	r3, [sp, #4]
 800bffe:	6919      	ldr	r1, [r3, #16]
 800c000:	9b00      	ldr	r3, [sp, #0]
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	1ac9      	subs	r1, r1, r3
 800c006:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c00a:	1a9b      	subs	r3, r3, r2
 800c00c:	ec5b ab10 	vmov	sl, fp, d0
 800c010:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c014:	2b00      	cmp	r3, #0
 800c016:	bfce      	itee	gt
 800c018:	462a      	movgt	r2, r5
 800c01a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c01e:	465a      	movle	r2, fp
 800c020:	462f      	mov	r7, r5
 800c022:	46d9      	mov	r9, fp
 800c024:	bfcc      	ite	gt
 800c026:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c02a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c02e:	464b      	mov	r3, r9
 800c030:	4652      	mov	r2, sl
 800c032:	4620      	mov	r0, r4
 800c034:	4639      	mov	r1, r7
 800c036:	f7f4 fc41 	bl	80008bc <__aeabi_ddiv>
 800c03a:	ec41 0b10 	vmov	d0, r0, r1
 800c03e:	b005      	add	sp, #20
 800c040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c044 <__copybits>:
 800c044:	3901      	subs	r1, #1
 800c046:	b570      	push	{r4, r5, r6, lr}
 800c048:	1149      	asrs	r1, r1, #5
 800c04a:	6914      	ldr	r4, [r2, #16]
 800c04c:	3101      	adds	r1, #1
 800c04e:	f102 0314 	add.w	r3, r2, #20
 800c052:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c056:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c05a:	1f05      	subs	r5, r0, #4
 800c05c:	42a3      	cmp	r3, r4
 800c05e:	d30c      	bcc.n	800c07a <__copybits+0x36>
 800c060:	1aa3      	subs	r3, r4, r2
 800c062:	3b11      	subs	r3, #17
 800c064:	f023 0303 	bic.w	r3, r3, #3
 800c068:	3211      	adds	r2, #17
 800c06a:	42a2      	cmp	r2, r4
 800c06c:	bf88      	it	hi
 800c06e:	2300      	movhi	r3, #0
 800c070:	4418      	add	r0, r3
 800c072:	2300      	movs	r3, #0
 800c074:	4288      	cmp	r0, r1
 800c076:	d305      	bcc.n	800c084 <__copybits+0x40>
 800c078:	bd70      	pop	{r4, r5, r6, pc}
 800c07a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c07e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c082:	e7eb      	b.n	800c05c <__copybits+0x18>
 800c084:	f840 3b04 	str.w	r3, [r0], #4
 800c088:	e7f4      	b.n	800c074 <__copybits+0x30>

0800c08a <__any_on>:
 800c08a:	f100 0214 	add.w	r2, r0, #20
 800c08e:	6900      	ldr	r0, [r0, #16]
 800c090:	114b      	asrs	r3, r1, #5
 800c092:	4298      	cmp	r0, r3
 800c094:	b510      	push	{r4, lr}
 800c096:	db11      	blt.n	800c0bc <__any_on+0x32>
 800c098:	dd0a      	ble.n	800c0b0 <__any_on+0x26>
 800c09a:	f011 011f 	ands.w	r1, r1, #31
 800c09e:	d007      	beq.n	800c0b0 <__any_on+0x26>
 800c0a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c0a4:	fa24 f001 	lsr.w	r0, r4, r1
 800c0a8:	fa00 f101 	lsl.w	r1, r0, r1
 800c0ac:	428c      	cmp	r4, r1
 800c0ae:	d10b      	bne.n	800c0c8 <__any_on+0x3e>
 800c0b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d803      	bhi.n	800c0c0 <__any_on+0x36>
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	bd10      	pop	{r4, pc}
 800c0bc:	4603      	mov	r3, r0
 800c0be:	e7f7      	b.n	800c0b0 <__any_on+0x26>
 800c0c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0c4:	2900      	cmp	r1, #0
 800c0c6:	d0f5      	beq.n	800c0b4 <__any_on+0x2a>
 800c0c8:	2001      	movs	r0, #1
 800c0ca:	e7f6      	b.n	800c0ba <__any_on+0x30>

0800c0cc <sulp>:
 800c0cc:	b570      	push	{r4, r5, r6, lr}
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	460d      	mov	r5, r1
 800c0d2:	ec45 4b10 	vmov	d0, r4, r5
 800c0d6:	4616      	mov	r6, r2
 800c0d8:	f7ff feba 	bl	800be50 <__ulp>
 800c0dc:	ec51 0b10 	vmov	r0, r1, d0
 800c0e0:	b17e      	cbz	r6, 800c102 <sulp+0x36>
 800c0e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c0e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	dd09      	ble.n	800c102 <sulp+0x36>
 800c0ee:	051b      	lsls	r3, r3, #20
 800c0f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c0f4:	2400      	movs	r4, #0
 800c0f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c0fa:	4622      	mov	r2, r4
 800c0fc:	462b      	mov	r3, r5
 800c0fe:	f7f4 fab3 	bl	8000668 <__aeabi_dmul>
 800c102:	ec41 0b10 	vmov	d0, r0, r1
 800c106:	bd70      	pop	{r4, r5, r6, pc}

0800c108 <_strtod_l>:
 800c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c10c:	b09f      	sub	sp, #124	@ 0x7c
 800c10e:	460c      	mov	r4, r1
 800c110:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c112:	2200      	movs	r2, #0
 800c114:	921a      	str	r2, [sp, #104]	@ 0x68
 800c116:	9005      	str	r0, [sp, #20]
 800c118:	f04f 0a00 	mov.w	sl, #0
 800c11c:	f04f 0b00 	mov.w	fp, #0
 800c120:	460a      	mov	r2, r1
 800c122:	9219      	str	r2, [sp, #100]	@ 0x64
 800c124:	7811      	ldrb	r1, [r2, #0]
 800c126:	292b      	cmp	r1, #43	@ 0x2b
 800c128:	d04a      	beq.n	800c1c0 <_strtod_l+0xb8>
 800c12a:	d838      	bhi.n	800c19e <_strtod_l+0x96>
 800c12c:	290d      	cmp	r1, #13
 800c12e:	d832      	bhi.n	800c196 <_strtod_l+0x8e>
 800c130:	2908      	cmp	r1, #8
 800c132:	d832      	bhi.n	800c19a <_strtod_l+0x92>
 800c134:	2900      	cmp	r1, #0
 800c136:	d03b      	beq.n	800c1b0 <_strtod_l+0xa8>
 800c138:	2200      	movs	r2, #0
 800c13a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c13c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c13e:	782a      	ldrb	r2, [r5, #0]
 800c140:	2a30      	cmp	r2, #48	@ 0x30
 800c142:	f040 80b3 	bne.w	800c2ac <_strtod_l+0x1a4>
 800c146:	786a      	ldrb	r2, [r5, #1]
 800c148:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c14c:	2a58      	cmp	r2, #88	@ 0x58
 800c14e:	d16e      	bne.n	800c22e <_strtod_l+0x126>
 800c150:	9302      	str	r3, [sp, #8]
 800c152:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c154:	9301      	str	r3, [sp, #4]
 800c156:	ab1a      	add	r3, sp, #104	@ 0x68
 800c158:	9300      	str	r3, [sp, #0]
 800c15a:	4a8e      	ldr	r2, [pc, #568]	@ (800c394 <_strtod_l+0x28c>)
 800c15c:	9805      	ldr	r0, [sp, #20]
 800c15e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c160:	a919      	add	r1, sp, #100	@ 0x64
 800c162:	f001 f8a7 	bl	800d2b4 <__gethex>
 800c166:	f010 060f 	ands.w	r6, r0, #15
 800c16a:	4604      	mov	r4, r0
 800c16c:	d005      	beq.n	800c17a <_strtod_l+0x72>
 800c16e:	2e06      	cmp	r6, #6
 800c170:	d128      	bne.n	800c1c4 <_strtod_l+0xbc>
 800c172:	3501      	adds	r5, #1
 800c174:	2300      	movs	r3, #0
 800c176:	9519      	str	r5, [sp, #100]	@ 0x64
 800c178:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c17a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f040 858e 	bne.w	800cc9e <_strtod_l+0xb96>
 800c182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c184:	b1cb      	cbz	r3, 800c1ba <_strtod_l+0xb2>
 800c186:	4652      	mov	r2, sl
 800c188:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c18c:	ec43 2b10 	vmov	d0, r2, r3
 800c190:	b01f      	add	sp, #124	@ 0x7c
 800c192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c196:	2920      	cmp	r1, #32
 800c198:	d1ce      	bne.n	800c138 <_strtod_l+0x30>
 800c19a:	3201      	adds	r2, #1
 800c19c:	e7c1      	b.n	800c122 <_strtod_l+0x1a>
 800c19e:	292d      	cmp	r1, #45	@ 0x2d
 800c1a0:	d1ca      	bne.n	800c138 <_strtod_l+0x30>
 800c1a2:	2101      	movs	r1, #1
 800c1a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c1a6:	1c51      	adds	r1, r2, #1
 800c1a8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c1aa:	7852      	ldrb	r2, [r2, #1]
 800c1ac:	2a00      	cmp	r2, #0
 800c1ae:	d1c5      	bne.n	800c13c <_strtod_l+0x34>
 800c1b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c1b2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f040 8570 	bne.w	800cc9a <_strtod_l+0xb92>
 800c1ba:	4652      	mov	r2, sl
 800c1bc:	465b      	mov	r3, fp
 800c1be:	e7e5      	b.n	800c18c <_strtod_l+0x84>
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	e7ef      	b.n	800c1a4 <_strtod_l+0x9c>
 800c1c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c1c6:	b13a      	cbz	r2, 800c1d8 <_strtod_l+0xd0>
 800c1c8:	2135      	movs	r1, #53	@ 0x35
 800c1ca:	a81c      	add	r0, sp, #112	@ 0x70
 800c1cc:	f7ff ff3a 	bl	800c044 <__copybits>
 800c1d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c1d2:	9805      	ldr	r0, [sp, #20]
 800c1d4:	f7ff fb08 	bl	800b7e8 <_Bfree>
 800c1d8:	3e01      	subs	r6, #1
 800c1da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c1dc:	2e04      	cmp	r6, #4
 800c1de:	d806      	bhi.n	800c1ee <_strtod_l+0xe6>
 800c1e0:	e8df f006 	tbb	[pc, r6]
 800c1e4:	201d0314 	.word	0x201d0314
 800c1e8:	14          	.byte	0x14
 800c1e9:	00          	.byte	0x00
 800c1ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c1ee:	05e1      	lsls	r1, r4, #23
 800c1f0:	bf48      	it	mi
 800c1f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c1f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c1fa:	0d1b      	lsrs	r3, r3, #20
 800c1fc:	051b      	lsls	r3, r3, #20
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d1bb      	bne.n	800c17a <_strtod_l+0x72>
 800c202:	f7fe fb13 	bl	800a82c <__errno>
 800c206:	2322      	movs	r3, #34	@ 0x22
 800c208:	6003      	str	r3, [r0, #0]
 800c20a:	e7b6      	b.n	800c17a <_strtod_l+0x72>
 800c20c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c210:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c214:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c218:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c21c:	e7e7      	b.n	800c1ee <_strtod_l+0xe6>
 800c21e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c39c <_strtod_l+0x294>
 800c222:	e7e4      	b.n	800c1ee <_strtod_l+0xe6>
 800c224:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c228:	f04f 3aff 	mov.w	sl, #4294967295
 800c22c:	e7df      	b.n	800c1ee <_strtod_l+0xe6>
 800c22e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c230:	1c5a      	adds	r2, r3, #1
 800c232:	9219      	str	r2, [sp, #100]	@ 0x64
 800c234:	785b      	ldrb	r3, [r3, #1]
 800c236:	2b30      	cmp	r3, #48	@ 0x30
 800c238:	d0f9      	beq.n	800c22e <_strtod_l+0x126>
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d09d      	beq.n	800c17a <_strtod_l+0x72>
 800c23e:	2301      	movs	r3, #1
 800c240:	9309      	str	r3, [sp, #36]	@ 0x24
 800c242:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c244:	930c      	str	r3, [sp, #48]	@ 0x30
 800c246:	2300      	movs	r3, #0
 800c248:	9308      	str	r3, [sp, #32]
 800c24a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c24c:	461f      	mov	r7, r3
 800c24e:	220a      	movs	r2, #10
 800c250:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c252:	7805      	ldrb	r5, [r0, #0]
 800c254:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c258:	b2d9      	uxtb	r1, r3
 800c25a:	2909      	cmp	r1, #9
 800c25c:	d928      	bls.n	800c2b0 <_strtod_l+0x1a8>
 800c25e:	494e      	ldr	r1, [pc, #312]	@ (800c398 <_strtod_l+0x290>)
 800c260:	2201      	movs	r2, #1
 800c262:	f000 ff6b 	bl	800d13c <strncmp>
 800c266:	2800      	cmp	r0, #0
 800c268:	d032      	beq.n	800c2d0 <_strtod_l+0x1c8>
 800c26a:	2000      	movs	r0, #0
 800c26c:	462a      	mov	r2, r5
 800c26e:	4681      	mov	r9, r0
 800c270:	463d      	mov	r5, r7
 800c272:	4603      	mov	r3, r0
 800c274:	2a65      	cmp	r2, #101	@ 0x65
 800c276:	d001      	beq.n	800c27c <_strtod_l+0x174>
 800c278:	2a45      	cmp	r2, #69	@ 0x45
 800c27a:	d114      	bne.n	800c2a6 <_strtod_l+0x19e>
 800c27c:	b91d      	cbnz	r5, 800c286 <_strtod_l+0x17e>
 800c27e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c280:	4302      	orrs	r2, r0
 800c282:	d095      	beq.n	800c1b0 <_strtod_l+0xa8>
 800c284:	2500      	movs	r5, #0
 800c286:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c288:	1c62      	adds	r2, r4, #1
 800c28a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c28c:	7862      	ldrb	r2, [r4, #1]
 800c28e:	2a2b      	cmp	r2, #43	@ 0x2b
 800c290:	d077      	beq.n	800c382 <_strtod_l+0x27a>
 800c292:	2a2d      	cmp	r2, #45	@ 0x2d
 800c294:	d07b      	beq.n	800c38e <_strtod_l+0x286>
 800c296:	f04f 0c00 	mov.w	ip, #0
 800c29a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c29e:	2909      	cmp	r1, #9
 800c2a0:	f240 8082 	bls.w	800c3a8 <_strtod_l+0x2a0>
 800c2a4:	9419      	str	r4, [sp, #100]	@ 0x64
 800c2a6:	f04f 0800 	mov.w	r8, #0
 800c2aa:	e0a2      	b.n	800c3f2 <_strtod_l+0x2ea>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	e7c7      	b.n	800c240 <_strtod_l+0x138>
 800c2b0:	2f08      	cmp	r7, #8
 800c2b2:	bfd5      	itete	le
 800c2b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c2b6:	9908      	ldrgt	r1, [sp, #32]
 800c2b8:	fb02 3301 	mlale	r3, r2, r1, r3
 800c2bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c2c0:	f100 0001 	add.w	r0, r0, #1
 800c2c4:	bfd4      	ite	le
 800c2c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c2c8:	9308      	strgt	r3, [sp, #32]
 800c2ca:	3701      	adds	r7, #1
 800c2cc:	9019      	str	r0, [sp, #100]	@ 0x64
 800c2ce:	e7bf      	b.n	800c250 <_strtod_l+0x148>
 800c2d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2d2:	1c5a      	adds	r2, r3, #1
 800c2d4:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2d6:	785a      	ldrb	r2, [r3, #1]
 800c2d8:	b37f      	cbz	r7, 800c33a <_strtod_l+0x232>
 800c2da:	4681      	mov	r9, r0
 800c2dc:	463d      	mov	r5, r7
 800c2de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c2e2:	2b09      	cmp	r3, #9
 800c2e4:	d912      	bls.n	800c30c <_strtod_l+0x204>
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e7c4      	b.n	800c274 <_strtod_l+0x16c>
 800c2ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2ec:	1c5a      	adds	r2, r3, #1
 800c2ee:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2f0:	785a      	ldrb	r2, [r3, #1]
 800c2f2:	3001      	adds	r0, #1
 800c2f4:	2a30      	cmp	r2, #48	@ 0x30
 800c2f6:	d0f8      	beq.n	800c2ea <_strtod_l+0x1e2>
 800c2f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c2fc:	2b08      	cmp	r3, #8
 800c2fe:	f200 84d3 	bhi.w	800cca8 <_strtod_l+0xba0>
 800c302:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c304:	930c      	str	r3, [sp, #48]	@ 0x30
 800c306:	4681      	mov	r9, r0
 800c308:	2000      	movs	r0, #0
 800c30a:	4605      	mov	r5, r0
 800c30c:	3a30      	subs	r2, #48	@ 0x30
 800c30e:	f100 0301 	add.w	r3, r0, #1
 800c312:	d02a      	beq.n	800c36a <_strtod_l+0x262>
 800c314:	4499      	add	r9, r3
 800c316:	eb00 0c05 	add.w	ip, r0, r5
 800c31a:	462b      	mov	r3, r5
 800c31c:	210a      	movs	r1, #10
 800c31e:	4563      	cmp	r3, ip
 800c320:	d10d      	bne.n	800c33e <_strtod_l+0x236>
 800c322:	1c69      	adds	r1, r5, #1
 800c324:	4401      	add	r1, r0
 800c326:	4428      	add	r0, r5
 800c328:	2808      	cmp	r0, #8
 800c32a:	dc16      	bgt.n	800c35a <_strtod_l+0x252>
 800c32c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c32e:	230a      	movs	r3, #10
 800c330:	fb03 2300 	mla	r3, r3, r0, r2
 800c334:	930a      	str	r3, [sp, #40]	@ 0x28
 800c336:	2300      	movs	r3, #0
 800c338:	e018      	b.n	800c36c <_strtod_l+0x264>
 800c33a:	4638      	mov	r0, r7
 800c33c:	e7da      	b.n	800c2f4 <_strtod_l+0x1ec>
 800c33e:	2b08      	cmp	r3, #8
 800c340:	f103 0301 	add.w	r3, r3, #1
 800c344:	dc03      	bgt.n	800c34e <_strtod_l+0x246>
 800c346:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c348:	434e      	muls	r6, r1
 800c34a:	960a      	str	r6, [sp, #40]	@ 0x28
 800c34c:	e7e7      	b.n	800c31e <_strtod_l+0x216>
 800c34e:	2b10      	cmp	r3, #16
 800c350:	bfde      	ittt	le
 800c352:	9e08      	ldrle	r6, [sp, #32]
 800c354:	434e      	mulle	r6, r1
 800c356:	9608      	strle	r6, [sp, #32]
 800c358:	e7e1      	b.n	800c31e <_strtod_l+0x216>
 800c35a:	280f      	cmp	r0, #15
 800c35c:	dceb      	bgt.n	800c336 <_strtod_l+0x22e>
 800c35e:	9808      	ldr	r0, [sp, #32]
 800c360:	230a      	movs	r3, #10
 800c362:	fb03 2300 	mla	r3, r3, r0, r2
 800c366:	9308      	str	r3, [sp, #32]
 800c368:	e7e5      	b.n	800c336 <_strtod_l+0x22e>
 800c36a:	4629      	mov	r1, r5
 800c36c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c36e:	1c50      	adds	r0, r2, #1
 800c370:	9019      	str	r0, [sp, #100]	@ 0x64
 800c372:	7852      	ldrb	r2, [r2, #1]
 800c374:	4618      	mov	r0, r3
 800c376:	460d      	mov	r5, r1
 800c378:	e7b1      	b.n	800c2de <_strtod_l+0x1d6>
 800c37a:	f04f 0900 	mov.w	r9, #0
 800c37e:	2301      	movs	r3, #1
 800c380:	e77d      	b.n	800c27e <_strtod_l+0x176>
 800c382:	f04f 0c00 	mov.w	ip, #0
 800c386:	1ca2      	adds	r2, r4, #2
 800c388:	9219      	str	r2, [sp, #100]	@ 0x64
 800c38a:	78a2      	ldrb	r2, [r4, #2]
 800c38c:	e785      	b.n	800c29a <_strtod_l+0x192>
 800c38e:	f04f 0c01 	mov.w	ip, #1
 800c392:	e7f8      	b.n	800c386 <_strtod_l+0x27e>
 800c394:	0800e320 	.word	0x0800e320
 800c398:	0800e308 	.word	0x0800e308
 800c39c:	7ff00000 	.word	0x7ff00000
 800c3a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c3a2:	1c51      	adds	r1, r2, #1
 800c3a4:	9119      	str	r1, [sp, #100]	@ 0x64
 800c3a6:	7852      	ldrb	r2, [r2, #1]
 800c3a8:	2a30      	cmp	r2, #48	@ 0x30
 800c3aa:	d0f9      	beq.n	800c3a0 <_strtod_l+0x298>
 800c3ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c3b0:	2908      	cmp	r1, #8
 800c3b2:	f63f af78 	bhi.w	800c2a6 <_strtod_l+0x19e>
 800c3b6:	3a30      	subs	r2, #48	@ 0x30
 800c3b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c3ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c3bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c3be:	f04f 080a 	mov.w	r8, #10
 800c3c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c3c4:	1c56      	adds	r6, r2, #1
 800c3c6:	9619      	str	r6, [sp, #100]	@ 0x64
 800c3c8:	7852      	ldrb	r2, [r2, #1]
 800c3ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c3ce:	f1be 0f09 	cmp.w	lr, #9
 800c3d2:	d939      	bls.n	800c448 <_strtod_l+0x340>
 800c3d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c3d6:	1a76      	subs	r6, r6, r1
 800c3d8:	2e08      	cmp	r6, #8
 800c3da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c3de:	dc03      	bgt.n	800c3e8 <_strtod_l+0x2e0>
 800c3e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c3e2:	4588      	cmp	r8, r1
 800c3e4:	bfa8      	it	ge
 800c3e6:	4688      	movge	r8, r1
 800c3e8:	f1bc 0f00 	cmp.w	ip, #0
 800c3ec:	d001      	beq.n	800c3f2 <_strtod_l+0x2ea>
 800c3ee:	f1c8 0800 	rsb	r8, r8, #0
 800c3f2:	2d00      	cmp	r5, #0
 800c3f4:	d14e      	bne.n	800c494 <_strtod_l+0x38c>
 800c3f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3f8:	4308      	orrs	r0, r1
 800c3fa:	f47f aebe 	bne.w	800c17a <_strtod_l+0x72>
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	f47f aed6 	bne.w	800c1b0 <_strtod_l+0xa8>
 800c404:	2a69      	cmp	r2, #105	@ 0x69
 800c406:	d028      	beq.n	800c45a <_strtod_l+0x352>
 800c408:	dc25      	bgt.n	800c456 <_strtod_l+0x34e>
 800c40a:	2a49      	cmp	r2, #73	@ 0x49
 800c40c:	d025      	beq.n	800c45a <_strtod_l+0x352>
 800c40e:	2a4e      	cmp	r2, #78	@ 0x4e
 800c410:	f47f aece 	bne.w	800c1b0 <_strtod_l+0xa8>
 800c414:	499b      	ldr	r1, [pc, #620]	@ (800c684 <_strtod_l+0x57c>)
 800c416:	a819      	add	r0, sp, #100	@ 0x64
 800c418:	f001 f96e 	bl	800d6f8 <__match>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	f43f aec7 	beq.w	800c1b0 <_strtod_l+0xa8>
 800c422:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	2b28      	cmp	r3, #40	@ 0x28
 800c428:	d12e      	bne.n	800c488 <_strtod_l+0x380>
 800c42a:	4997      	ldr	r1, [pc, #604]	@ (800c688 <_strtod_l+0x580>)
 800c42c:	aa1c      	add	r2, sp, #112	@ 0x70
 800c42e:	a819      	add	r0, sp, #100	@ 0x64
 800c430:	f001 f976 	bl	800d720 <__hexnan>
 800c434:	2805      	cmp	r0, #5
 800c436:	d127      	bne.n	800c488 <_strtod_l+0x380>
 800c438:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c43a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c43e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c442:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c446:	e698      	b.n	800c17a <_strtod_l+0x72>
 800c448:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c44a:	fb08 2101 	mla	r1, r8, r1, r2
 800c44e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c452:	920e      	str	r2, [sp, #56]	@ 0x38
 800c454:	e7b5      	b.n	800c3c2 <_strtod_l+0x2ba>
 800c456:	2a6e      	cmp	r2, #110	@ 0x6e
 800c458:	e7da      	b.n	800c410 <_strtod_l+0x308>
 800c45a:	498c      	ldr	r1, [pc, #560]	@ (800c68c <_strtod_l+0x584>)
 800c45c:	a819      	add	r0, sp, #100	@ 0x64
 800c45e:	f001 f94b 	bl	800d6f8 <__match>
 800c462:	2800      	cmp	r0, #0
 800c464:	f43f aea4 	beq.w	800c1b0 <_strtod_l+0xa8>
 800c468:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c46a:	4989      	ldr	r1, [pc, #548]	@ (800c690 <_strtod_l+0x588>)
 800c46c:	3b01      	subs	r3, #1
 800c46e:	a819      	add	r0, sp, #100	@ 0x64
 800c470:	9319      	str	r3, [sp, #100]	@ 0x64
 800c472:	f001 f941 	bl	800d6f8 <__match>
 800c476:	b910      	cbnz	r0, 800c47e <_strtod_l+0x376>
 800c478:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c47a:	3301      	adds	r3, #1
 800c47c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c47e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c6a0 <_strtod_l+0x598>
 800c482:	f04f 0a00 	mov.w	sl, #0
 800c486:	e678      	b.n	800c17a <_strtod_l+0x72>
 800c488:	4882      	ldr	r0, [pc, #520]	@ (800c694 <_strtod_l+0x58c>)
 800c48a:	f000 fe89 	bl	800d1a0 <nan>
 800c48e:	ec5b ab10 	vmov	sl, fp, d0
 800c492:	e672      	b.n	800c17a <_strtod_l+0x72>
 800c494:	eba8 0309 	sub.w	r3, r8, r9
 800c498:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c49a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c49c:	2f00      	cmp	r7, #0
 800c49e:	bf08      	it	eq
 800c4a0:	462f      	moveq	r7, r5
 800c4a2:	2d10      	cmp	r5, #16
 800c4a4:	462c      	mov	r4, r5
 800c4a6:	bfa8      	it	ge
 800c4a8:	2410      	movge	r4, #16
 800c4aa:	f7f4 f863 	bl	8000574 <__aeabi_ui2d>
 800c4ae:	2d09      	cmp	r5, #9
 800c4b0:	4682      	mov	sl, r0
 800c4b2:	468b      	mov	fp, r1
 800c4b4:	dc13      	bgt.n	800c4de <_strtod_l+0x3d6>
 800c4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	f43f ae5e 	beq.w	800c17a <_strtod_l+0x72>
 800c4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4c0:	dd78      	ble.n	800c5b4 <_strtod_l+0x4ac>
 800c4c2:	2b16      	cmp	r3, #22
 800c4c4:	dc5f      	bgt.n	800c586 <_strtod_l+0x47e>
 800c4c6:	4974      	ldr	r1, [pc, #464]	@ (800c698 <_strtod_l+0x590>)
 800c4c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c4cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4d0:	4652      	mov	r2, sl
 800c4d2:	465b      	mov	r3, fp
 800c4d4:	f7f4 f8c8 	bl	8000668 <__aeabi_dmul>
 800c4d8:	4682      	mov	sl, r0
 800c4da:	468b      	mov	fp, r1
 800c4dc:	e64d      	b.n	800c17a <_strtod_l+0x72>
 800c4de:	4b6e      	ldr	r3, [pc, #440]	@ (800c698 <_strtod_l+0x590>)
 800c4e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c4e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c4e8:	f7f4 f8be 	bl	8000668 <__aeabi_dmul>
 800c4ec:	4682      	mov	sl, r0
 800c4ee:	9808      	ldr	r0, [sp, #32]
 800c4f0:	468b      	mov	fp, r1
 800c4f2:	f7f4 f83f 	bl	8000574 <__aeabi_ui2d>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	460b      	mov	r3, r1
 800c4fa:	4650      	mov	r0, sl
 800c4fc:	4659      	mov	r1, fp
 800c4fe:	f7f3 fefd 	bl	80002fc <__adddf3>
 800c502:	2d0f      	cmp	r5, #15
 800c504:	4682      	mov	sl, r0
 800c506:	468b      	mov	fp, r1
 800c508:	ddd5      	ble.n	800c4b6 <_strtod_l+0x3ae>
 800c50a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c50c:	1b2c      	subs	r4, r5, r4
 800c50e:	441c      	add	r4, r3
 800c510:	2c00      	cmp	r4, #0
 800c512:	f340 8096 	ble.w	800c642 <_strtod_l+0x53a>
 800c516:	f014 030f 	ands.w	r3, r4, #15
 800c51a:	d00a      	beq.n	800c532 <_strtod_l+0x42a>
 800c51c:	495e      	ldr	r1, [pc, #376]	@ (800c698 <_strtod_l+0x590>)
 800c51e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c522:	4652      	mov	r2, sl
 800c524:	465b      	mov	r3, fp
 800c526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c52a:	f7f4 f89d 	bl	8000668 <__aeabi_dmul>
 800c52e:	4682      	mov	sl, r0
 800c530:	468b      	mov	fp, r1
 800c532:	f034 040f 	bics.w	r4, r4, #15
 800c536:	d073      	beq.n	800c620 <_strtod_l+0x518>
 800c538:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c53c:	dd48      	ble.n	800c5d0 <_strtod_l+0x4c8>
 800c53e:	2400      	movs	r4, #0
 800c540:	46a0      	mov	r8, r4
 800c542:	940a      	str	r4, [sp, #40]	@ 0x28
 800c544:	46a1      	mov	r9, r4
 800c546:	9a05      	ldr	r2, [sp, #20]
 800c548:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c6a0 <_strtod_l+0x598>
 800c54c:	2322      	movs	r3, #34	@ 0x22
 800c54e:	6013      	str	r3, [r2, #0]
 800c550:	f04f 0a00 	mov.w	sl, #0
 800c554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c556:	2b00      	cmp	r3, #0
 800c558:	f43f ae0f 	beq.w	800c17a <_strtod_l+0x72>
 800c55c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c55e:	9805      	ldr	r0, [sp, #20]
 800c560:	f7ff f942 	bl	800b7e8 <_Bfree>
 800c564:	9805      	ldr	r0, [sp, #20]
 800c566:	4649      	mov	r1, r9
 800c568:	f7ff f93e 	bl	800b7e8 <_Bfree>
 800c56c:	9805      	ldr	r0, [sp, #20]
 800c56e:	4641      	mov	r1, r8
 800c570:	f7ff f93a 	bl	800b7e8 <_Bfree>
 800c574:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c576:	9805      	ldr	r0, [sp, #20]
 800c578:	f7ff f936 	bl	800b7e8 <_Bfree>
 800c57c:	9805      	ldr	r0, [sp, #20]
 800c57e:	4621      	mov	r1, r4
 800c580:	f7ff f932 	bl	800b7e8 <_Bfree>
 800c584:	e5f9      	b.n	800c17a <_strtod_l+0x72>
 800c586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c588:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c58c:	4293      	cmp	r3, r2
 800c58e:	dbbc      	blt.n	800c50a <_strtod_l+0x402>
 800c590:	4c41      	ldr	r4, [pc, #260]	@ (800c698 <_strtod_l+0x590>)
 800c592:	f1c5 050f 	rsb	r5, r5, #15
 800c596:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c59a:	4652      	mov	r2, sl
 800c59c:	465b      	mov	r3, fp
 800c59e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5a2:	f7f4 f861 	bl	8000668 <__aeabi_dmul>
 800c5a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5a8:	1b5d      	subs	r5, r3, r5
 800c5aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c5ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c5b2:	e78f      	b.n	800c4d4 <_strtod_l+0x3cc>
 800c5b4:	3316      	adds	r3, #22
 800c5b6:	dba8      	blt.n	800c50a <_strtod_l+0x402>
 800c5b8:	4b37      	ldr	r3, [pc, #220]	@ (800c698 <_strtod_l+0x590>)
 800c5ba:	eba9 0808 	sub.w	r8, r9, r8
 800c5be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c5c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c5c6:	4650      	mov	r0, sl
 800c5c8:	4659      	mov	r1, fp
 800c5ca:	f7f4 f977 	bl	80008bc <__aeabi_ddiv>
 800c5ce:	e783      	b.n	800c4d8 <_strtod_l+0x3d0>
 800c5d0:	4b32      	ldr	r3, [pc, #200]	@ (800c69c <_strtod_l+0x594>)
 800c5d2:	9308      	str	r3, [sp, #32]
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	1124      	asrs	r4, r4, #4
 800c5d8:	4650      	mov	r0, sl
 800c5da:	4659      	mov	r1, fp
 800c5dc:	461e      	mov	r6, r3
 800c5de:	2c01      	cmp	r4, #1
 800c5e0:	dc21      	bgt.n	800c626 <_strtod_l+0x51e>
 800c5e2:	b10b      	cbz	r3, 800c5e8 <_strtod_l+0x4e0>
 800c5e4:	4682      	mov	sl, r0
 800c5e6:	468b      	mov	fp, r1
 800c5e8:	492c      	ldr	r1, [pc, #176]	@ (800c69c <_strtod_l+0x594>)
 800c5ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c5ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c5f2:	4652      	mov	r2, sl
 800c5f4:	465b      	mov	r3, fp
 800c5f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5fa:	f7f4 f835 	bl	8000668 <__aeabi_dmul>
 800c5fe:	4b28      	ldr	r3, [pc, #160]	@ (800c6a0 <_strtod_l+0x598>)
 800c600:	460a      	mov	r2, r1
 800c602:	400b      	ands	r3, r1
 800c604:	4927      	ldr	r1, [pc, #156]	@ (800c6a4 <_strtod_l+0x59c>)
 800c606:	428b      	cmp	r3, r1
 800c608:	4682      	mov	sl, r0
 800c60a:	d898      	bhi.n	800c53e <_strtod_l+0x436>
 800c60c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c610:	428b      	cmp	r3, r1
 800c612:	bf86      	itte	hi
 800c614:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c6a8 <_strtod_l+0x5a0>
 800c618:	f04f 3aff 	movhi.w	sl, #4294967295
 800c61c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c620:	2300      	movs	r3, #0
 800c622:	9308      	str	r3, [sp, #32]
 800c624:	e07a      	b.n	800c71c <_strtod_l+0x614>
 800c626:	07e2      	lsls	r2, r4, #31
 800c628:	d505      	bpl.n	800c636 <_strtod_l+0x52e>
 800c62a:	9b08      	ldr	r3, [sp, #32]
 800c62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c630:	f7f4 f81a 	bl	8000668 <__aeabi_dmul>
 800c634:	2301      	movs	r3, #1
 800c636:	9a08      	ldr	r2, [sp, #32]
 800c638:	3208      	adds	r2, #8
 800c63a:	3601      	adds	r6, #1
 800c63c:	1064      	asrs	r4, r4, #1
 800c63e:	9208      	str	r2, [sp, #32]
 800c640:	e7cd      	b.n	800c5de <_strtod_l+0x4d6>
 800c642:	d0ed      	beq.n	800c620 <_strtod_l+0x518>
 800c644:	4264      	negs	r4, r4
 800c646:	f014 020f 	ands.w	r2, r4, #15
 800c64a:	d00a      	beq.n	800c662 <_strtod_l+0x55a>
 800c64c:	4b12      	ldr	r3, [pc, #72]	@ (800c698 <_strtod_l+0x590>)
 800c64e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c652:	4650      	mov	r0, sl
 800c654:	4659      	mov	r1, fp
 800c656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65a:	f7f4 f92f 	bl	80008bc <__aeabi_ddiv>
 800c65e:	4682      	mov	sl, r0
 800c660:	468b      	mov	fp, r1
 800c662:	1124      	asrs	r4, r4, #4
 800c664:	d0dc      	beq.n	800c620 <_strtod_l+0x518>
 800c666:	2c1f      	cmp	r4, #31
 800c668:	dd20      	ble.n	800c6ac <_strtod_l+0x5a4>
 800c66a:	2400      	movs	r4, #0
 800c66c:	46a0      	mov	r8, r4
 800c66e:	940a      	str	r4, [sp, #40]	@ 0x28
 800c670:	46a1      	mov	r9, r4
 800c672:	9a05      	ldr	r2, [sp, #20]
 800c674:	2322      	movs	r3, #34	@ 0x22
 800c676:	f04f 0a00 	mov.w	sl, #0
 800c67a:	f04f 0b00 	mov.w	fp, #0
 800c67e:	6013      	str	r3, [r2, #0]
 800c680:	e768      	b.n	800c554 <_strtod_l+0x44c>
 800c682:	bf00      	nop
 800c684:	0800e062 	.word	0x0800e062
 800c688:	0800e30c 	.word	0x0800e30c
 800c68c:	0800e05a 	.word	0x0800e05a
 800c690:	0800e13e 	.word	0x0800e13e
 800c694:	0800e13a 	.word	0x0800e13a
 800c698:	0800e240 	.word	0x0800e240
 800c69c:	0800e218 	.word	0x0800e218
 800c6a0:	7ff00000 	.word	0x7ff00000
 800c6a4:	7ca00000 	.word	0x7ca00000
 800c6a8:	7fefffff 	.word	0x7fefffff
 800c6ac:	f014 0310 	ands.w	r3, r4, #16
 800c6b0:	bf18      	it	ne
 800c6b2:	236a      	movne	r3, #106	@ 0x6a
 800c6b4:	4ea9      	ldr	r6, [pc, #676]	@ (800c95c <_strtod_l+0x854>)
 800c6b6:	9308      	str	r3, [sp, #32]
 800c6b8:	4650      	mov	r0, sl
 800c6ba:	4659      	mov	r1, fp
 800c6bc:	2300      	movs	r3, #0
 800c6be:	07e2      	lsls	r2, r4, #31
 800c6c0:	d504      	bpl.n	800c6cc <_strtod_l+0x5c4>
 800c6c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c6c6:	f7f3 ffcf 	bl	8000668 <__aeabi_dmul>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	1064      	asrs	r4, r4, #1
 800c6ce:	f106 0608 	add.w	r6, r6, #8
 800c6d2:	d1f4      	bne.n	800c6be <_strtod_l+0x5b6>
 800c6d4:	b10b      	cbz	r3, 800c6da <_strtod_l+0x5d2>
 800c6d6:	4682      	mov	sl, r0
 800c6d8:	468b      	mov	fp, r1
 800c6da:	9b08      	ldr	r3, [sp, #32]
 800c6dc:	b1b3      	cbz	r3, 800c70c <_strtod_l+0x604>
 800c6de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c6e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	4659      	mov	r1, fp
 800c6ea:	dd0f      	ble.n	800c70c <_strtod_l+0x604>
 800c6ec:	2b1f      	cmp	r3, #31
 800c6ee:	dd55      	ble.n	800c79c <_strtod_l+0x694>
 800c6f0:	2b34      	cmp	r3, #52	@ 0x34
 800c6f2:	bfde      	ittt	le
 800c6f4:	f04f 33ff 	movle.w	r3, #4294967295
 800c6f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c6fc:	4093      	lslle	r3, r2
 800c6fe:	f04f 0a00 	mov.w	sl, #0
 800c702:	bfcc      	ite	gt
 800c704:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c708:	ea03 0b01 	andle.w	fp, r3, r1
 800c70c:	2200      	movs	r2, #0
 800c70e:	2300      	movs	r3, #0
 800c710:	4650      	mov	r0, sl
 800c712:	4659      	mov	r1, fp
 800c714:	f7f4 fa10 	bl	8000b38 <__aeabi_dcmpeq>
 800c718:	2800      	cmp	r0, #0
 800c71a:	d1a6      	bne.n	800c66a <_strtod_l+0x562>
 800c71c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c722:	9805      	ldr	r0, [sp, #20]
 800c724:	462b      	mov	r3, r5
 800c726:	463a      	mov	r2, r7
 800c728:	f7ff f8c6 	bl	800b8b8 <__s2b>
 800c72c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c72e:	2800      	cmp	r0, #0
 800c730:	f43f af05 	beq.w	800c53e <_strtod_l+0x436>
 800c734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c736:	2a00      	cmp	r2, #0
 800c738:	eba9 0308 	sub.w	r3, r9, r8
 800c73c:	bfa8      	it	ge
 800c73e:	2300      	movge	r3, #0
 800c740:	9312      	str	r3, [sp, #72]	@ 0x48
 800c742:	2400      	movs	r4, #0
 800c744:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c748:	9316      	str	r3, [sp, #88]	@ 0x58
 800c74a:	46a0      	mov	r8, r4
 800c74c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c74e:	9805      	ldr	r0, [sp, #20]
 800c750:	6859      	ldr	r1, [r3, #4]
 800c752:	f7ff f809 	bl	800b768 <_Balloc>
 800c756:	4681      	mov	r9, r0
 800c758:	2800      	cmp	r0, #0
 800c75a:	f43f aef4 	beq.w	800c546 <_strtod_l+0x43e>
 800c75e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c760:	691a      	ldr	r2, [r3, #16]
 800c762:	3202      	adds	r2, #2
 800c764:	f103 010c 	add.w	r1, r3, #12
 800c768:	0092      	lsls	r2, r2, #2
 800c76a:	300c      	adds	r0, #12
 800c76c:	f000 fd08 	bl	800d180 <memcpy>
 800c770:	ec4b ab10 	vmov	d0, sl, fp
 800c774:	9805      	ldr	r0, [sp, #20]
 800c776:	aa1c      	add	r2, sp, #112	@ 0x70
 800c778:	a91b      	add	r1, sp, #108	@ 0x6c
 800c77a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c77e:	f7ff fbd7 	bl	800bf30 <__d2b>
 800c782:	901a      	str	r0, [sp, #104]	@ 0x68
 800c784:	2800      	cmp	r0, #0
 800c786:	f43f aede 	beq.w	800c546 <_strtod_l+0x43e>
 800c78a:	9805      	ldr	r0, [sp, #20]
 800c78c:	2101      	movs	r1, #1
 800c78e:	f7ff f929 	bl	800b9e4 <__i2b>
 800c792:	4680      	mov	r8, r0
 800c794:	b948      	cbnz	r0, 800c7aa <_strtod_l+0x6a2>
 800c796:	f04f 0800 	mov.w	r8, #0
 800c79a:	e6d4      	b.n	800c546 <_strtod_l+0x43e>
 800c79c:	f04f 32ff 	mov.w	r2, #4294967295
 800c7a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c7a4:	ea03 0a0a 	and.w	sl, r3, sl
 800c7a8:	e7b0      	b.n	800c70c <_strtod_l+0x604>
 800c7aa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c7ac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c7ae:	2d00      	cmp	r5, #0
 800c7b0:	bfab      	itete	ge
 800c7b2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c7b4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c7b6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c7b8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c7ba:	bfac      	ite	ge
 800c7bc:	18ef      	addge	r7, r5, r3
 800c7be:	1b5e      	sublt	r6, r3, r5
 800c7c0:	9b08      	ldr	r3, [sp, #32]
 800c7c2:	1aed      	subs	r5, r5, r3
 800c7c4:	4415      	add	r5, r2
 800c7c6:	4b66      	ldr	r3, [pc, #408]	@ (800c960 <_strtod_l+0x858>)
 800c7c8:	3d01      	subs	r5, #1
 800c7ca:	429d      	cmp	r5, r3
 800c7cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c7d0:	da50      	bge.n	800c874 <_strtod_l+0x76c>
 800c7d2:	1b5b      	subs	r3, r3, r5
 800c7d4:	2b1f      	cmp	r3, #31
 800c7d6:	eba2 0203 	sub.w	r2, r2, r3
 800c7da:	f04f 0101 	mov.w	r1, #1
 800c7de:	dc3d      	bgt.n	800c85c <_strtod_l+0x754>
 800c7e0:	fa01 f303 	lsl.w	r3, r1, r3
 800c7e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800c7ea:	18bd      	adds	r5, r7, r2
 800c7ec:	9b08      	ldr	r3, [sp, #32]
 800c7ee:	42af      	cmp	r7, r5
 800c7f0:	4416      	add	r6, r2
 800c7f2:	441e      	add	r6, r3
 800c7f4:	463b      	mov	r3, r7
 800c7f6:	bfa8      	it	ge
 800c7f8:	462b      	movge	r3, r5
 800c7fa:	42b3      	cmp	r3, r6
 800c7fc:	bfa8      	it	ge
 800c7fe:	4633      	movge	r3, r6
 800c800:	2b00      	cmp	r3, #0
 800c802:	bfc2      	ittt	gt
 800c804:	1aed      	subgt	r5, r5, r3
 800c806:	1af6      	subgt	r6, r6, r3
 800c808:	1aff      	subgt	r7, r7, r3
 800c80a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	dd16      	ble.n	800c83e <_strtod_l+0x736>
 800c810:	4641      	mov	r1, r8
 800c812:	9805      	ldr	r0, [sp, #20]
 800c814:	461a      	mov	r2, r3
 800c816:	f7ff f9a5 	bl	800bb64 <__pow5mult>
 800c81a:	4680      	mov	r8, r0
 800c81c:	2800      	cmp	r0, #0
 800c81e:	d0ba      	beq.n	800c796 <_strtod_l+0x68e>
 800c820:	4601      	mov	r1, r0
 800c822:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c824:	9805      	ldr	r0, [sp, #20]
 800c826:	f7ff f8f3 	bl	800ba10 <__multiply>
 800c82a:	900e      	str	r0, [sp, #56]	@ 0x38
 800c82c:	2800      	cmp	r0, #0
 800c82e:	f43f ae8a 	beq.w	800c546 <_strtod_l+0x43e>
 800c832:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c834:	9805      	ldr	r0, [sp, #20]
 800c836:	f7fe ffd7 	bl	800b7e8 <_Bfree>
 800c83a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c83c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c83e:	2d00      	cmp	r5, #0
 800c840:	dc1d      	bgt.n	800c87e <_strtod_l+0x776>
 800c842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c844:	2b00      	cmp	r3, #0
 800c846:	dd23      	ble.n	800c890 <_strtod_l+0x788>
 800c848:	4649      	mov	r1, r9
 800c84a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c84c:	9805      	ldr	r0, [sp, #20]
 800c84e:	f7ff f989 	bl	800bb64 <__pow5mult>
 800c852:	4681      	mov	r9, r0
 800c854:	b9e0      	cbnz	r0, 800c890 <_strtod_l+0x788>
 800c856:	f04f 0900 	mov.w	r9, #0
 800c85a:	e674      	b.n	800c546 <_strtod_l+0x43e>
 800c85c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c860:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c864:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c868:	35e2      	adds	r5, #226	@ 0xe2
 800c86a:	fa01 f305 	lsl.w	r3, r1, r5
 800c86e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c870:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c872:	e7ba      	b.n	800c7ea <_strtod_l+0x6e2>
 800c874:	2300      	movs	r3, #0
 800c876:	9310      	str	r3, [sp, #64]	@ 0x40
 800c878:	2301      	movs	r3, #1
 800c87a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c87c:	e7b5      	b.n	800c7ea <_strtod_l+0x6e2>
 800c87e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c880:	9805      	ldr	r0, [sp, #20]
 800c882:	462a      	mov	r2, r5
 800c884:	f7ff f9c8 	bl	800bc18 <__lshift>
 800c888:	901a      	str	r0, [sp, #104]	@ 0x68
 800c88a:	2800      	cmp	r0, #0
 800c88c:	d1d9      	bne.n	800c842 <_strtod_l+0x73a>
 800c88e:	e65a      	b.n	800c546 <_strtod_l+0x43e>
 800c890:	2e00      	cmp	r6, #0
 800c892:	dd07      	ble.n	800c8a4 <_strtod_l+0x79c>
 800c894:	4649      	mov	r1, r9
 800c896:	9805      	ldr	r0, [sp, #20]
 800c898:	4632      	mov	r2, r6
 800c89a:	f7ff f9bd 	bl	800bc18 <__lshift>
 800c89e:	4681      	mov	r9, r0
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	d0d8      	beq.n	800c856 <_strtod_l+0x74e>
 800c8a4:	2f00      	cmp	r7, #0
 800c8a6:	dd08      	ble.n	800c8ba <_strtod_l+0x7b2>
 800c8a8:	4641      	mov	r1, r8
 800c8aa:	9805      	ldr	r0, [sp, #20]
 800c8ac:	463a      	mov	r2, r7
 800c8ae:	f7ff f9b3 	bl	800bc18 <__lshift>
 800c8b2:	4680      	mov	r8, r0
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	f43f ae46 	beq.w	800c546 <_strtod_l+0x43e>
 800c8ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c8bc:	9805      	ldr	r0, [sp, #20]
 800c8be:	464a      	mov	r2, r9
 800c8c0:	f7ff fa32 	bl	800bd28 <__mdiff>
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	f43f ae3d 	beq.w	800c546 <_strtod_l+0x43e>
 800c8cc:	68c3      	ldr	r3, [r0, #12]
 800c8ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	60c3      	str	r3, [r0, #12]
 800c8d4:	4641      	mov	r1, r8
 800c8d6:	f7ff fa0b 	bl	800bcf0 <__mcmp>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	da46      	bge.n	800c96c <_strtod_l+0x864>
 800c8de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8e0:	ea53 030a 	orrs.w	r3, r3, sl
 800c8e4:	d16c      	bne.n	800c9c0 <_strtod_l+0x8b8>
 800c8e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d168      	bne.n	800c9c0 <_strtod_l+0x8b8>
 800c8ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c8f2:	0d1b      	lsrs	r3, r3, #20
 800c8f4:	051b      	lsls	r3, r3, #20
 800c8f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c8fa:	d961      	bls.n	800c9c0 <_strtod_l+0x8b8>
 800c8fc:	6963      	ldr	r3, [r4, #20]
 800c8fe:	b913      	cbnz	r3, 800c906 <_strtod_l+0x7fe>
 800c900:	6923      	ldr	r3, [r4, #16]
 800c902:	2b01      	cmp	r3, #1
 800c904:	dd5c      	ble.n	800c9c0 <_strtod_l+0x8b8>
 800c906:	4621      	mov	r1, r4
 800c908:	2201      	movs	r2, #1
 800c90a:	9805      	ldr	r0, [sp, #20]
 800c90c:	f7ff f984 	bl	800bc18 <__lshift>
 800c910:	4641      	mov	r1, r8
 800c912:	4604      	mov	r4, r0
 800c914:	f7ff f9ec 	bl	800bcf0 <__mcmp>
 800c918:	2800      	cmp	r0, #0
 800c91a:	dd51      	ble.n	800c9c0 <_strtod_l+0x8b8>
 800c91c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c920:	9a08      	ldr	r2, [sp, #32]
 800c922:	0d1b      	lsrs	r3, r3, #20
 800c924:	051b      	lsls	r3, r3, #20
 800c926:	2a00      	cmp	r2, #0
 800c928:	d06b      	beq.n	800ca02 <_strtod_l+0x8fa>
 800c92a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c92e:	d868      	bhi.n	800ca02 <_strtod_l+0x8fa>
 800c930:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c934:	f67f ae9d 	bls.w	800c672 <_strtod_l+0x56a>
 800c938:	4b0a      	ldr	r3, [pc, #40]	@ (800c964 <_strtod_l+0x85c>)
 800c93a:	4650      	mov	r0, sl
 800c93c:	4659      	mov	r1, fp
 800c93e:	2200      	movs	r2, #0
 800c940:	f7f3 fe92 	bl	8000668 <__aeabi_dmul>
 800c944:	4b08      	ldr	r3, [pc, #32]	@ (800c968 <_strtod_l+0x860>)
 800c946:	400b      	ands	r3, r1
 800c948:	4682      	mov	sl, r0
 800c94a:	468b      	mov	fp, r1
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f47f ae05 	bne.w	800c55c <_strtod_l+0x454>
 800c952:	9a05      	ldr	r2, [sp, #20]
 800c954:	2322      	movs	r3, #34	@ 0x22
 800c956:	6013      	str	r3, [r2, #0]
 800c958:	e600      	b.n	800c55c <_strtod_l+0x454>
 800c95a:	bf00      	nop
 800c95c:	0800e338 	.word	0x0800e338
 800c960:	fffffc02 	.word	0xfffffc02
 800c964:	39500000 	.word	0x39500000
 800c968:	7ff00000 	.word	0x7ff00000
 800c96c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c970:	d165      	bne.n	800ca3e <_strtod_l+0x936>
 800c972:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c974:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c978:	b35a      	cbz	r2, 800c9d2 <_strtod_l+0x8ca>
 800c97a:	4a9f      	ldr	r2, [pc, #636]	@ (800cbf8 <_strtod_l+0xaf0>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d12b      	bne.n	800c9d8 <_strtod_l+0x8d0>
 800c980:	9b08      	ldr	r3, [sp, #32]
 800c982:	4651      	mov	r1, sl
 800c984:	b303      	cbz	r3, 800c9c8 <_strtod_l+0x8c0>
 800c986:	4b9d      	ldr	r3, [pc, #628]	@ (800cbfc <_strtod_l+0xaf4>)
 800c988:	465a      	mov	r2, fp
 800c98a:	4013      	ands	r3, r2
 800c98c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c990:	f04f 32ff 	mov.w	r2, #4294967295
 800c994:	d81b      	bhi.n	800c9ce <_strtod_l+0x8c6>
 800c996:	0d1b      	lsrs	r3, r3, #20
 800c998:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c99c:	fa02 f303 	lsl.w	r3, r2, r3
 800c9a0:	4299      	cmp	r1, r3
 800c9a2:	d119      	bne.n	800c9d8 <_strtod_l+0x8d0>
 800c9a4:	4b96      	ldr	r3, [pc, #600]	@ (800cc00 <_strtod_l+0xaf8>)
 800c9a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d102      	bne.n	800c9b2 <_strtod_l+0x8aa>
 800c9ac:	3101      	adds	r1, #1
 800c9ae:	f43f adca 	beq.w	800c546 <_strtod_l+0x43e>
 800c9b2:	4b92      	ldr	r3, [pc, #584]	@ (800cbfc <_strtod_l+0xaf4>)
 800c9b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9b6:	401a      	ands	r2, r3
 800c9b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c9bc:	f04f 0a00 	mov.w	sl, #0
 800c9c0:	9b08      	ldr	r3, [sp, #32]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d1b8      	bne.n	800c938 <_strtod_l+0x830>
 800c9c6:	e5c9      	b.n	800c55c <_strtod_l+0x454>
 800c9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c9cc:	e7e8      	b.n	800c9a0 <_strtod_l+0x898>
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	e7e6      	b.n	800c9a0 <_strtod_l+0x898>
 800c9d2:	ea53 030a 	orrs.w	r3, r3, sl
 800c9d6:	d0a1      	beq.n	800c91c <_strtod_l+0x814>
 800c9d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c9da:	b1db      	cbz	r3, 800ca14 <_strtod_l+0x90c>
 800c9dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9de:	4213      	tst	r3, r2
 800c9e0:	d0ee      	beq.n	800c9c0 <_strtod_l+0x8b8>
 800c9e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9e4:	9a08      	ldr	r2, [sp, #32]
 800c9e6:	4650      	mov	r0, sl
 800c9e8:	4659      	mov	r1, fp
 800c9ea:	b1bb      	cbz	r3, 800ca1c <_strtod_l+0x914>
 800c9ec:	f7ff fb6e 	bl	800c0cc <sulp>
 800c9f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9f4:	ec53 2b10 	vmov	r2, r3, d0
 800c9f8:	f7f3 fc80 	bl	80002fc <__adddf3>
 800c9fc:	4682      	mov	sl, r0
 800c9fe:	468b      	mov	fp, r1
 800ca00:	e7de      	b.n	800c9c0 <_strtod_l+0x8b8>
 800ca02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ca06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ca0a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ca0e:	f04f 3aff 	mov.w	sl, #4294967295
 800ca12:	e7d5      	b.n	800c9c0 <_strtod_l+0x8b8>
 800ca14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ca16:	ea13 0f0a 	tst.w	r3, sl
 800ca1a:	e7e1      	b.n	800c9e0 <_strtod_l+0x8d8>
 800ca1c:	f7ff fb56 	bl	800c0cc <sulp>
 800ca20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca24:	ec53 2b10 	vmov	r2, r3, d0
 800ca28:	f7f3 fc66 	bl	80002f8 <__aeabi_dsub>
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	2300      	movs	r3, #0
 800ca30:	4682      	mov	sl, r0
 800ca32:	468b      	mov	fp, r1
 800ca34:	f7f4 f880 	bl	8000b38 <__aeabi_dcmpeq>
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d0c1      	beq.n	800c9c0 <_strtod_l+0x8b8>
 800ca3c:	e619      	b.n	800c672 <_strtod_l+0x56a>
 800ca3e:	4641      	mov	r1, r8
 800ca40:	4620      	mov	r0, r4
 800ca42:	f7ff facd 	bl	800bfe0 <__ratio>
 800ca46:	ec57 6b10 	vmov	r6, r7, d0
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ca50:	4630      	mov	r0, r6
 800ca52:	4639      	mov	r1, r7
 800ca54:	f7f4 f884 	bl	8000b60 <__aeabi_dcmple>
 800ca58:	2800      	cmp	r0, #0
 800ca5a:	d06f      	beq.n	800cb3c <_strtod_l+0xa34>
 800ca5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d17a      	bne.n	800cb58 <_strtod_l+0xa50>
 800ca62:	f1ba 0f00 	cmp.w	sl, #0
 800ca66:	d158      	bne.n	800cb1a <_strtod_l+0xa12>
 800ca68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d15a      	bne.n	800cb28 <_strtod_l+0xa20>
 800ca72:	4b64      	ldr	r3, [pc, #400]	@ (800cc04 <_strtod_l+0xafc>)
 800ca74:	2200      	movs	r2, #0
 800ca76:	4630      	mov	r0, r6
 800ca78:	4639      	mov	r1, r7
 800ca7a:	f7f4 f867 	bl	8000b4c <__aeabi_dcmplt>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d159      	bne.n	800cb36 <_strtod_l+0xa2e>
 800ca82:	4630      	mov	r0, r6
 800ca84:	4639      	mov	r1, r7
 800ca86:	4b60      	ldr	r3, [pc, #384]	@ (800cc08 <_strtod_l+0xb00>)
 800ca88:	2200      	movs	r2, #0
 800ca8a:	f7f3 fded 	bl	8000668 <__aeabi_dmul>
 800ca8e:	4606      	mov	r6, r0
 800ca90:	460f      	mov	r7, r1
 800ca92:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ca96:	9606      	str	r6, [sp, #24]
 800ca98:	9307      	str	r3, [sp, #28]
 800ca9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca9e:	4d57      	ldr	r5, [pc, #348]	@ (800cbfc <_strtod_l+0xaf4>)
 800caa0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800caa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800caa6:	401d      	ands	r5, r3
 800caa8:	4b58      	ldr	r3, [pc, #352]	@ (800cc0c <_strtod_l+0xb04>)
 800caaa:	429d      	cmp	r5, r3
 800caac:	f040 80b2 	bne.w	800cc14 <_strtod_l+0xb0c>
 800cab0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cab2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cab6:	ec4b ab10 	vmov	d0, sl, fp
 800caba:	f7ff f9c9 	bl	800be50 <__ulp>
 800cabe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cac2:	ec51 0b10 	vmov	r0, r1, d0
 800cac6:	f7f3 fdcf 	bl	8000668 <__aeabi_dmul>
 800caca:	4652      	mov	r2, sl
 800cacc:	465b      	mov	r3, fp
 800cace:	f7f3 fc15 	bl	80002fc <__adddf3>
 800cad2:	460b      	mov	r3, r1
 800cad4:	4949      	ldr	r1, [pc, #292]	@ (800cbfc <_strtod_l+0xaf4>)
 800cad6:	4a4e      	ldr	r2, [pc, #312]	@ (800cc10 <_strtod_l+0xb08>)
 800cad8:	4019      	ands	r1, r3
 800cada:	4291      	cmp	r1, r2
 800cadc:	4682      	mov	sl, r0
 800cade:	d942      	bls.n	800cb66 <_strtod_l+0xa5e>
 800cae0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cae2:	4b47      	ldr	r3, [pc, #284]	@ (800cc00 <_strtod_l+0xaf8>)
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d103      	bne.n	800caf0 <_strtod_l+0x9e8>
 800cae8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800caea:	3301      	adds	r3, #1
 800caec:	f43f ad2b 	beq.w	800c546 <_strtod_l+0x43e>
 800caf0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cc00 <_strtod_l+0xaf8>
 800caf4:	f04f 3aff 	mov.w	sl, #4294967295
 800caf8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cafa:	9805      	ldr	r0, [sp, #20]
 800cafc:	f7fe fe74 	bl	800b7e8 <_Bfree>
 800cb00:	9805      	ldr	r0, [sp, #20]
 800cb02:	4649      	mov	r1, r9
 800cb04:	f7fe fe70 	bl	800b7e8 <_Bfree>
 800cb08:	9805      	ldr	r0, [sp, #20]
 800cb0a:	4641      	mov	r1, r8
 800cb0c:	f7fe fe6c 	bl	800b7e8 <_Bfree>
 800cb10:	9805      	ldr	r0, [sp, #20]
 800cb12:	4621      	mov	r1, r4
 800cb14:	f7fe fe68 	bl	800b7e8 <_Bfree>
 800cb18:	e618      	b.n	800c74c <_strtod_l+0x644>
 800cb1a:	f1ba 0f01 	cmp.w	sl, #1
 800cb1e:	d103      	bne.n	800cb28 <_strtod_l+0xa20>
 800cb20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	f43f ada5 	beq.w	800c672 <_strtod_l+0x56a>
 800cb28:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cbd8 <_strtod_l+0xad0>
 800cb2c:	4f35      	ldr	r7, [pc, #212]	@ (800cc04 <_strtod_l+0xafc>)
 800cb2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cb32:	2600      	movs	r6, #0
 800cb34:	e7b1      	b.n	800ca9a <_strtod_l+0x992>
 800cb36:	4f34      	ldr	r7, [pc, #208]	@ (800cc08 <_strtod_l+0xb00>)
 800cb38:	2600      	movs	r6, #0
 800cb3a:	e7aa      	b.n	800ca92 <_strtod_l+0x98a>
 800cb3c:	4b32      	ldr	r3, [pc, #200]	@ (800cc08 <_strtod_l+0xb00>)
 800cb3e:	4630      	mov	r0, r6
 800cb40:	4639      	mov	r1, r7
 800cb42:	2200      	movs	r2, #0
 800cb44:	f7f3 fd90 	bl	8000668 <__aeabi_dmul>
 800cb48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb4a:	4606      	mov	r6, r0
 800cb4c:	460f      	mov	r7, r1
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d09f      	beq.n	800ca92 <_strtod_l+0x98a>
 800cb52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cb56:	e7a0      	b.n	800ca9a <_strtod_l+0x992>
 800cb58:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cbe0 <_strtod_l+0xad8>
 800cb5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cb60:	ec57 6b17 	vmov	r6, r7, d7
 800cb64:	e799      	b.n	800ca9a <_strtod_l+0x992>
 800cb66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cb6a:	9b08      	ldr	r3, [sp, #32]
 800cb6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d1c1      	bne.n	800caf8 <_strtod_l+0x9f0>
 800cb74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb78:	0d1b      	lsrs	r3, r3, #20
 800cb7a:	051b      	lsls	r3, r3, #20
 800cb7c:	429d      	cmp	r5, r3
 800cb7e:	d1bb      	bne.n	800caf8 <_strtod_l+0x9f0>
 800cb80:	4630      	mov	r0, r6
 800cb82:	4639      	mov	r1, r7
 800cb84:	f7f4 f8d0 	bl	8000d28 <__aeabi_d2lz>
 800cb88:	f7f3 fd40 	bl	800060c <__aeabi_l2d>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	460b      	mov	r3, r1
 800cb90:	4630      	mov	r0, r6
 800cb92:	4639      	mov	r1, r7
 800cb94:	f7f3 fbb0 	bl	80002f8 <__aeabi_dsub>
 800cb98:	460b      	mov	r3, r1
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cba0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cba6:	ea46 060a 	orr.w	r6, r6, sl
 800cbaa:	431e      	orrs	r6, r3
 800cbac:	d06f      	beq.n	800cc8e <_strtod_l+0xb86>
 800cbae:	a30e      	add	r3, pc, #56	@ (adr r3, 800cbe8 <_strtod_l+0xae0>)
 800cbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb4:	f7f3 ffca 	bl	8000b4c <__aeabi_dcmplt>
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	f47f accf 	bne.w	800c55c <_strtod_l+0x454>
 800cbbe:	a30c      	add	r3, pc, #48	@ (adr r3, 800cbf0 <_strtod_l+0xae8>)
 800cbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbc8:	f7f3 ffde 	bl	8000b88 <__aeabi_dcmpgt>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	d093      	beq.n	800caf8 <_strtod_l+0x9f0>
 800cbd0:	e4c4      	b.n	800c55c <_strtod_l+0x454>
 800cbd2:	bf00      	nop
 800cbd4:	f3af 8000 	nop.w
 800cbd8:	00000000 	.word	0x00000000
 800cbdc:	bff00000 	.word	0xbff00000
 800cbe0:	00000000 	.word	0x00000000
 800cbe4:	3ff00000 	.word	0x3ff00000
 800cbe8:	94a03595 	.word	0x94a03595
 800cbec:	3fdfffff 	.word	0x3fdfffff
 800cbf0:	35afe535 	.word	0x35afe535
 800cbf4:	3fe00000 	.word	0x3fe00000
 800cbf8:	000fffff 	.word	0x000fffff
 800cbfc:	7ff00000 	.word	0x7ff00000
 800cc00:	7fefffff 	.word	0x7fefffff
 800cc04:	3ff00000 	.word	0x3ff00000
 800cc08:	3fe00000 	.word	0x3fe00000
 800cc0c:	7fe00000 	.word	0x7fe00000
 800cc10:	7c9fffff 	.word	0x7c9fffff
 800cc14:	9b08      	ldr	r3, [sp, #32]
 800cc16:	b323      	cbz	r3, 800cc62 <_strtod_l+0xb5a>
 800cc18:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cc1c:	d821      	bhi.n	800cc62 <_strtod_l+0xb5a>
 800cc1e:	a328      	add	r3, pc, #160	@ (adr r3, 800ccc0 <_strtod_l+0xbb8>)
 800cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc24:	4630      	mov	r0, r6
 800cc26:	4639      	mov	r1, r7
 800cc28:	f7f3 ff9a 	bl	8000b60 <__aeabi_dcmple>
 800cc2c:	b1a0      	cbz	r0, 800cc58 <_strtod_l+0xb50>
 800cc2e:	4639      	mov	r1, r7
 800cc30:	4630      	mov	r0, r6
 800cc32:	f7f3 fff1 	bl	8000c18 <__aeabi_d2uiz>
 800cc36:	2801      	cmp	r0, #1
 800cc38:	bf38      	it	cc
 800cc3a:	2001      	movcc	r0, #1
 800cc3c:	f7f3 fc9a 	bl	8000574 <__aeabi_ui2d>
 800cc40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc42:	4606      	mov	r6, r0
 800cc44:	460f      	mov	r7, r1
 800cc46:	b9fb      	cbnz	r3, 800cc88 <_strtod_l+0xb80>
 800cc48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc4c:	9014      	str	r0, [sp, #80]	@ 0x50
 800cc4e:	9315      	str	r3, [sp, #84]	@ 0x54
 800cc50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cc54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cc58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cc5a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cc5e:	1b5b      	subs	r3, r3, r5
 800cc60:	9311      	str	r3, [sp, #68]	@ 0x44
 800cc62:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cc66:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cc6a:	f7ff f8f1 	bl	800be50 <__ulp>
 800cc6e:	4650      	mov	r0, sl
 800cc70:	ec53 2b10 	vmov	r2, r3, d0
 800cc74:	4659      	mov	r1, fp
 800cc76:	f7f3 fcf7 	bl	8000668 <__aeabi_dmul>
 800cc7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cc7e:	f7f3 fb3d 	bl	80002fc <__adddf3>
 800cc82:	4682      	mov	sl, r0
 800cc84:	468b      	mov	fp, r1
 800cc86:	e770      	b.n	800cb6a <_strtod_l+0xa62>
 800cc88:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cc8c:	e7e0      	b.n	800cc50 <_strtod_l+0xb48>
 800cc8e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ccc8 <_strtod_l+0xbc0>)
 800cc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc94:	f7f3 ff5a 	bl	8000b4c <__aeabi_dcmplt>
 800cc98:	e798      	b.n	800cbcc <_strtod_l+0xac4>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc9e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cca0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cca2:	6013      	str	r3, [r2, #0]
 800cca4:	f7ff ba6d 	b.w	800c182 <_strtod_l+0x7a>
 800cca8:	2a65      	cmp	r2, #101	@ 0x65
 800ccaa:	f43f ab66 	beq.w	800c37a <_strtod_l+0x272>
 800ccae:	2a45      	cmp	r2, #69	@ 0x45
 800ccb0:	f43f ab63 	beq.w	800c37a <_strtod_l+0x272>
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	f7ff bb9e 	b.w	800c3f6 <_strtod_l+0x2ee>
 800ccba:	bf00      	nop
 800ccbc:	f3af 8000 	nop.w
 800ccc0:	ffc00000 	.word	0xffc00000
 800ccc4:	41dfffff 	.word	0x41dfffff
 800ccc8:	94a03595 	.word	0x94a03595
 800cccc:	3fcfffff 	.word	0x3fcfffff

0800ccd0 <_strtod_r>:
 800ccd0:	4b01      	ldr	r3, [pc, #4]	@ (800ccd8 <_strtod_r+0x8>)
 800ccd2:	f7ff ba19 	b.w	800c108 <_strtod_l>
 800ccd6:	bf00      	nop
 800ccd8:	2000014c 	.word	0x2000014c

0800ccdc <__ssputs_r>:
 800ccdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cce0:	688e      	ldr	r6, [r1, #8]
 800cce2:	461f      	mov	r7, r3
 800cce4:	42be      	cmp	r6, r7
 800cce6:	680b      	ldr	r3, [r1, #0]
 800cce8:	4682      	mov	sl, r0
 800ccea:	460c      	mov	r4, r1
 800ccec:	4690      	mov	r8, r2
 800ccee:	d82d      	bhi.n	800cd4c <__ssputs_r+0x70>
 800ccf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ccf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ccf8:	d026      	beq.n	800cd48 <__ssputs_r+0x6c>
 800ccfa:	6965      	ldr	r5, [r4, #20]
 800ccfc:	6909      	ldr	r1, [r1, #16]
 800ccfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd02:	eba3 0901 	sub.w	r9, r3, r1
 800cd06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd0a:	1c7b      	adds	r3, r7, #1
 800cd0c:	444b      	add	r3, r9
 800cd0e:	106d      	asrs	r5, r5, #1
 800cd10:	429d      	cmp	r5, r3
 800cd12:	bf38      	it	cc
 800cd14:	461d      	movcc	r5, r3
 800cd16:	0553      	lsls	r3, r2, #21
 800cd18:	d527      	bpl.n	800cd6a <__ssputs_r+0x8e>
 800cd1a:	4629      	mov	r1, r5
 800cd1c:	f7fe fc98 	bl	800b650 <_malloc_r>
 800cd20:	4606      	mov	r6, r0
 800cd22:	b360      	cbz	r0, 800cd7e <__ssputs_r+0xa2>
 800cd24:	6921      	ldr	r1, [r4, #16]
 800cd26:	464a      	mov	r2, r9
 800cd28:	f000 fa2a 	bl	800d180 <memcpy>
 800cd2c:	89a3      	ldrh	r3, [r4, #12]
 800cd2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cd32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd36:	81a3      	strh	r3, [r4, #12]
 800cd38:	6126      	str	r6, [r4, #16]
 800cd3a:	6165      	str	r5, [r4, #20]
 800cd3c:	444e      	add	r6, r9
 800cd3e:	eba5 0509 	sub.w	r5, r5, r9
 800cd42:	6026      	str	r6, [r4, #0]
 800cd44:	60a5      	str	r5, [r4, #8]
 800cd46:	463e      	mov	r6, r7
 800cd48:	42be      	cmp	r6, r7
 800cd4a:	d900      	bls.n	800cd4e <__ssputs_r+0x72>
 800cd4c:	463e      	mov	r6, r7
 800cd4e:	6820      	ldr	r0, [r4, #0]
 800cd50:	4632      	mov	r2, r6
 800cd52:	4641      	mov	r1, r8
 800cd54:	f000 f9d8 	bl	800d108 <memmove>
 800cd58:	68a3      	ldr	r3, [r4, #8]
 800cd5a:	1b9b      	subs	r3, r3, r6
 800cd5c:	60a3      	str	r3, [r4, #8]
 800cd5e:	6823      	ldr	r3, [r4, #0]
 800cd60:	4433      	add	r3, r6
 800cd62:	6023      	str	r3, [r4, #0]
 800cd64:	2000      	movs	r0, #0
 800cd66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd6a:	462a      	mov	r2, r5
 800cd6c:	f000 fd85 	bl	800d87a <_realloc_r>
 800cd70:	4606      	mov	r6, r0
 800cd72:	2800      	cmp	r0, #0
 800cd74:	d1e0      	bne.n	800cd38 <__ssputs_r+0x5c>
 800cd76:	6921      	ldr	r1, [r4, #16]
 800cd78:	4650      	mov	r0, sl
 800cd7a:	f7fe fbf5 	bl	800b568 <_free_r>
 800cd7e:	230c      	movs	r3, #12
 800cd80:	f8ca 3000 	str.w	r3, [sl]
 800cd84:	89a3      	ldrh	r3, [r4, #12]
 800cd86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd8a:	81a3      	strh	r3, [r4, #12]
 800cd8c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd90:	e7e9      	b.n	800cd66 <__ssputs_r+0x8a>
	...

0800cd94 <_svfiprintf_r>:
 800cd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd98:	4698      	mov	r8, r3
 800cd9a:	898b      	ldrh	r3, [r1, #12]
 800cd9c:	061b      	lsls	r3, r3, #24
 800cd9e:	b09d      	sub	sp, #116	@ 0x74
 800cda0:	4607      	mov	r7, r0
 800cda2:	460d      	mov	r5, r1
 800cda4:	4614      	mov	r4, r2
 800cda6:	d510      	bpl.n	800cdca <_svfiprintf_r+0x36>
 800cda8:	690b      	ldr	r3, [r1, #16]
 800cdaa:	b973      	cbnz	r3, 800cdca <_svfiprintf_r+0x36>
 800cdac:	2140      	movs	r1, #64	@ 0x40
 800cdae:	f7fe fc4f 	bl	800b650 <_malloc_r>
 800cdb2:	6028      	str	r0, [r5, #0]
 800cdb4:	6128      	str	r0, [r5, #16]
 800cdb6:	b930      	cbnz	r0, 800cdc6 <_svfiprintf_r+0x32>
 800cdb8:	230c      	movs	r3, #12
 800cdba:	603b      	str	r3, [r7, #0]
 800cdbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc0:	b01d      	add	sp, #116	@ 0x74
 800cdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc6:	2340      	movs	r3, #64	@ 0x40
 800cdc8:	616b      	str	r3, [r5, #20]
 800cdca:	2300      	movs	r3, #0
 800cdcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdce:	2320      	movs	r3, #32
 800cdd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cdd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdd8:	2330      	movs	r3, #48	@ 0x30
 800cdda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cf78 <_svfiprintf_r+0x1e4>
 800cdde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cde2:	f04f 0901 	mov.w	r9, #1
 800cde6:	4623      	mov	r3, r4
 800cde8:	469a      	mov	sl, r3
 800cdea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdee:	b10a      	cbz	r2, 800cdf4 <_svfiprintf_r+0x60>
 800cdf0:	2a25      	cmp	r2, #37	@ 0x25
 800cdf2:	d1f9      	bne.n	800cde8 <_svfiprintf_r+0x54>
 800cdf4:	ebba 0b04 	subs.w	fp, sl, r4
 800cdf8:	d00b      	beq.n	800ce12 <_svfiprintf_r+0x7e>
 800cdfa:	465b      	mov	r3, fp
 800cdfc:	4622      	mov	r2, r4
 800cdfe:	4629      	mov	r1, r5
 800ce00:	4638      	mov	r0, r7
 800ce02:	f7ff ff6b 	bl	800ccdc <__ssputs_r>
 800ce06:	3001      	adds	r0, #1
 800ce08:	f000 80a7 	beq.w	800cf5a <_svfiprintf_r+0x1c6>
 800ce0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce0e:	445a      	add	r2, fp
 800ce10:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce12:	f89a 3000 	ldrb.w	r3, [sl]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	f000 809f 	beq.w	800cf5a <_svfiprintf_r+0x1c6>
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce26:	f10a 0a01 	add.w	sl, sl, #1
 800ce2a:	9304      	str	r3, [sp, #16]
 800ce2c:	9307      	str	r3, [sp, #28]
 800ce2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce32:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce34:	4654      	mov	r4, sl
 800ce36:	2205      	movs	r2, #5
 800ce38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce3c:	484e      	ldr	r0, [pc, #312]	@ (800cf78 <_svfiprintf_r+0x1e4>)
 800ce3e:	f7f3 f9ff 	bl	8000240 <memchr>
 800ce42:	9a04      	ldr	r2, [sp, #16]
 800ce44:	b9d8      	cbnz	r0, 800ce7e <_svfiprintf_r+0xea>
 800ce46:	06d0      	lsls	r0, r2, #27
 800ce48:	bf44      	itt	mi
 800ce4a:	2320      	movmi	r3, #32
 800ce4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce50:	0711      	lsls	r1, r2, #28
 800ce52:	bf44      	itt	mi
 800ce54:	232b      	movmi	r3, #43	@ 0x2b
 800ce56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce60:	d015      	beq.n	800ce8e <_svfiprintf_r+0xfa>
 800ce62:	9a07      	ldr	r2, [sp, #28]
 800ce64:	4654      	mov	r4, sl
 800ce66:	2000      	movs	r0, #0
 800ce68:	f04f 0c0a 	mov.w	ip, #10
 800ce6c:	4621      	mov	r1, r4
 800ce6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce72:	3b30      	subs	r3, #48	@ 0x30
 800ce74:	2b09      	cmp	r3, #9
 800ce76:	d94b      	bls.n	800cf10 <_svfiprintf_r+0x17c>
 800ce78:	b1b0      	cbz	r0, 800cea8 <_svfiprintf_r+0x114>
 800ce7a:	9207      	str	r2, [sp, #28]
 800ce7c:	e014      	b.n	800cea8 <_svfiprintf_r+0x114>
 800ce7e:	eba0 0308 	sub.w	r3, r0, r8
 800ce82:	fa09 f303 	lsl.w	r3, r9, r3
 800ce86:	4313      	orrs	r3, r2
 800ce88:	9304      	str	r3, [sp, #16]
 800ce8a:	46a2      	mov	sl, r4
 800ce8c:	e7d2      	b.n	800ce34 <_svfiprintf_r+0xa0>
 800ce8e:	9b03      	ldr	r3, [sp, #12]
 800ce90:	1d19      	adds	r1, r3, #4
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	9103      	str	r1, [sp, #12]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	bfbb      	ittet	lt
 800ce9a:	425b      	neglt	r3, r3
 800ce9c:	f042 0202 	orrlt.w	r2, r2, #2
 800cea0:	9307      	strge	r3, [sp, #28]
 800cea2:	9307      	strlt	r3, [sp, #28]
 800cea4:	bfb8      	it	lt
 800cea6:	9204      	strlt	r2, [sp, #16]
 800cea8:	7823      	ldrb	r3, [r4, #0]
 800ceaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800ceac:	d10a      	bne.n	800cec4 <_svfiprintf_r+0x130>
 800ceae:	7863      	ldrb	r3, [r4, #1]
 800ceb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ceb2:	d132      	bne.n	800cf1a <_svfiprintf_r+0x186>
 800ceb4:	9b03      	ldr	r3, [sp, #12]
 800ceb6:	1d1a      	adds	r2, r3, #4
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	9203      	str	r2, [sp, #12]
 800cebc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cec0:	3402      	adds	r4, #2
 800cec2:	9305      	str	r3, [sp, #20]
 800cec4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cf88 <_svfiprintf_r+0x1f4>
 800cec8:	7821      	ldrb	r1, [r4, #0]
 800ceca:	2203      	movs	r2, #3
 800cecc:	4650      	mov	r0, sl
 800cece:	f7f3 f9b7 	bl	8000240 <memchr>
 800ced2:	b138      	cbz	r0, 800cee4 <_svfiprintf_r+0x150>
 800ced4:	9b04      	ldr	r3, [sp, #16]
 800ced6:	eba0 000a 	sub.w	r0, r0, sl
 800ceda:	2240      	movs	r2, #64	@ 0x40
 800cedc:	4082      	lsls	r2, r0
 800cede:	4313      	orrs	r3, r2
 800cee0:	3401      	adds	r4, #1
 800cee2:	9304      	str	r3, [sp, #16]
 800cee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cee8:	4824      	ldr	r0, [pc, #144]	@ (800cf7c <_svfiprintf_r+0x1e8>)
 800ceea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ceee:	2206      	movs	r2, #6
 800cef0:	f7f3 f9a6 	bl	8000240 <memchr>
 800cef4:	2800      	cmp	r0, #0
 800cef6:	d036      	beq.n	800cf66 <_svfiprintf_r+0x1d2>
 800cef8:	4b21      	ldr	r3, [pc, #132]	@ (800cf80 <_svfiprintf_r+0x1ec>)
 800cefa:	bb1b      	cbnz	r3, 800cf44 <_svfiprintf_r+0x1b0>
 800cefc:	9b03      	ldr	r3, [sp, #12]
 800cefe:	3307      	adds	r3, #7
 800cf00:	f023 0307 	bic.w	r3, r3, #7
 800cf04:	3308      	adds	r3, #8
 800cf06:	9303      	str	r3, [sp, #12]
 800cf08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf0a:	4433      	add	r3, r6
 800cf0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf0e:	e76a      	b.n	800cde6 <_svfiprintf_r+0x52>
 800cf10:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf14:	460c      	mov	r4, r1
 800cf16:	2001      	movs	r0, #1
 800cf18:	e7a8      	b.n	800ce6c <_svfiprintf_r+0xd8>
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	3401      	adds	r4, #1
 800cf1e:	9305      	str	r3, [sp, #20]
 800cf20:	4619      	mov	r1, r3
 800cf22:	f04f 0c0a 	mov.w	ip, #10
 800cf26:	4620      	mov	r0, r4
 800cf28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf2c:	3a30      	subs	r2, #48	@ 0x30
 800cf2e:	2a09      	cmp	r2, #9
 800cf30:	d903      	bls.n	800cf3a <_svfiprintf_r+0x1a6>
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d0c6      	beq.n	800cec4 <_svfiprintf_r+0x130>
 800cf36:	9105      	str	r1, [sp, #20]
 800cf38:	e7c4      	b.n	800cec4 <_svfiprintf_r+0x130>
 800cf3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf3e:	4604      	mov	r4, r0
 800cf40:	2301      	movs	r3, #1
 800cf42:	e7f0      	b.n	800cf26 <_svfiprintf_r+0x192>
 800cf44:	ab03      	add	r3, sp, #12
 800cf46:	9300      	str	r3, [sp, #0]
 800cf48:	462a      	mov	r2, r5
 800cf4a:	4b0e      	ldr	r3, [pc, #56]	@ (800cf84 <_svfiprintf_r+0x1f0>)
 800cf4c:	a904      	add	r1, sp, #16
 800cf4e:	4638      	mov	r0, r7
 800cf50:	f7fc fc98 	bl	8009884 <_printf_float>
 800cf54:	1c42      	adds	r2, r0, #1
 800cf56:	4606      	mov	r6, r0
 800cf58:	d1d6      	bne.n	800cf08 <_svfiprintf_r+0x174>
 800cf5a:	89ab      	ldrh	r3, [r5, #12]
 800cf5c:	065b      	lsls	r3, r3, #25
 800cf5e:	f53f af2d 	bmi.w	800cdbc <_svfiprintf_r+0x28>
 800cf62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf64:	e72c      	b.n	800cdc0 <_svfiprintf_r+0x2c>
 800cf66:	ab03      	add	r3, sp, #12
 800cf68:	9300      	str	r3, [sp, #0]
 800cf6a:	462a      	mov	r2, r5
 800cf6c:	4b05      	ldr	r3, [pc, #20]	@ (800cf84 <_svfiprintf_r+0x1f0>)
 800cf6e:	a904      	add	r1, sp, #16
 800cf70:	4638      	mov	r0, r7
 800cf72:	f7fc ff1f 	bl	8009db4 <_printf_i>
 800cf76:	e7ed      	b.n	800cf54 <_svfiprintf_r+0x1c0>
 800cf78:	0800e360 	.word	0x0800e360
 800cf7c:	0800e36a 	.word	0x0800e36a
 800cf80:	08009885 	.word	0x08009885
 800cf84:	0800ccdd 	.word	0x0800ccdd
 800cf88:	0800e366 	.word	0x0800e366

0800cf8c <__sflush_r>:
 800cf8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf94:	0716      	lsls	r6, r2, #28
 800cf96:	4605      	mov	r5, r0
 800cf98:	460c      	mov	r4, r1
 800cf9a:	d454      	bmi.n	800d046 <__sflush_r+0xba>
 800cf9c:	684b      	ldr	r3, [r1, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	dc02      	bgt.n	800cfa8 <__sflush_r+0x1c>
 800cfa2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	dd48      	ble.n	800d03a <__sflush_r+0xae>
 800cfa8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfaa:	2e00      	cmp	r6, #0
 800cfac:	d045      	beq.n	800d03a <__sflush_r+0xae>
 800cfae:	2300      	movs	r3, #0
 800cfb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cfb4:	682f      	ldr	r7, [r5, #0]
 800cfb6:	6a21      	ldr	r1, [r4, #32]
 800cfb8:	602b      	str	r3, [r5, #0]
 800cfba:	d030      	beq.n	800d01e <__sflush_r+0x92>
 800cfbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cfbe:	89a3      	ldrh	r3, [r4, #12]
 800cfc0:	0759      	lsls	r1, r3, #29
 800cfc2:	d505      	bpl.n	800cfd0 <__sflush_r+0x44>
 800cfc4:	6863      	ldr	r3, [r4, #4]
 800cfc6:	1ad2      	subs	r2, r2, r3
 800cfc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cfca:	b10b      	cbz	r3, 800cfd0 <__sflush_r+0x44>
 800cfcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cfce:	1ad2      	subs	r2, r2, r3
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfd4:	6a21      	ldr	r1, [r4, #32]
 800cfd6:	4628      	mov	r0, r5
 800cfd8:	47b0      	blx	r6
 800cfda:	1c43      	adds	r3, r0, #1
 800cfdc:	89a3      	ldrh	r3, [r4, #12]
 800cfde:	d106      	bne.n	800cfee <__sflush_r+0x62>
 800cfe0:	6829      	ldr	r1, [r5, #0]
 800cfe2:	291d      	cmp	r1, #29
 800cfe4:	d82b      	bhi.n	800d03e <__sflush_r+0xb2>
 800cfe6:	4a2a      	ldr	r2, [pc, #168]	@ (800d090 <__sflush_r+0x104>)
 800cfe8:	410a      	asrs	r2, r1
 800cfea:	07d6      	lsls	r6, r2, #31
 800cfec:	d427      	bmi.n	800d03e <__sflush_r+0xb2>
 800cfee:	2200      	movs	r2, #0
 800cff0:	6062      	str	r2, [r4, #4]
 800cff2:	04d9      	lsls	r1, r3, #19
 800cff4:	6922      	ldr	r2, [r4, #16]
 800cff6:	6022      	str	r2, [r4, #0]
 800cff8:	d504      	bpl.n	800d004 <__sflush_r+0x78>
 800cffa:	1c42      	adds	r2, r0, #1
 800cffc:	d101      	bne.n	800d002 <__sflush_r+0x76>
 800cffe:	682b      	ldr	r3, [r5, #0]
 800d000:	b903      	cbnz	r3, 800d004 <__sflush_r+0x78>
 800d002:	6560      	str	r0, [r4, #84]	@ 0x54
 800d004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d006:	602f      	str	r7, [r5, #0]
 800d008:	b1b9      	cbz	r1, 800d03a <__sflush_r+0xae>
 800d00a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d00e:	4299      	cmp	r1, r3
 800d010:	d002      	beq.n	800d018 <__sflush_r+0x8c>
 800d012:	4628      	mov	r0, r5
 800d014:	f7fe faa8 	bl	800b568 <_free_r>
 800d018:	2300      	movs	r3, #0
 800d01a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d01c:	e00d      	b.n	800d03a <__sflush_r+0xae>
 800d01e:	2301      	movs	r3, #1
 800d020:	4628      	mov	r0, r5
 800d022:	47b0      	blx	r6
 800d024:	4602      	mov	r2, r0
 800d026:	1c50      	adds	r0, r2, #1
 800d028:	d1c9      	bne.n	800cfbe <__sflush_r+0x32>
 800d02a:	682b      	ldr	r3, [r5, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d0c6      	beq.n	800cfbe <__sflush_r+0x32>
 800d030:	2b1d      	cmp	r3, #29
 800d032:	d001      	beq.n	800d038 <__sflush_r+0xac>
 800d034:	2b16      	cmp	r3, #22
 800d036:	d11e      	bne.n	800d076 <__sflush_r+0xea>
 800d038:	602f      	str	r7, [r5, #0]
 800d03a:	2000      	movs	r0, #0
 800d03c:	e022      	b.n	800d084 <__sflush_r+0xf8>
 800d03e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d042:	b21b      	sxth	r3, r3
 800d044:	e01b      	b.n	800d07e <__sflush_r+0xf2>
 800d046:	690f      	ldr	r7, [r1, #16]
 800d048:	2f00      	cmp	r7, #0
 800d04a:	d0f6      	beq.n	800d03a <__sflush_r+0xae>
 800d04c:	0793      	lsls	r3, r2, #30
 800d04e:	680e      	ldr	r6, [r1, #0]
 800d050:	bf08      	it	eq
 800d052:	694b      	ldreq	r3, [r1, #20]
 800d054:	600f      	str	r7, [r1, #0]
 800d056:	bf18      	it	ne
 800d058:	2300      	movne	r3, #0
 800d05a:	eba6 0807 	sub.w	r8, r6, r7
 800d05e:	608b      	str	r3, [r1, #8]
 800d060:	f1b8 0f00 	cmp.w	r8, #0
 800d064:	dde9      	ble.n	800d03a <__sflush_r+0xae>
 800d066:	6a21      	ldr	r1, [r4, #32]
 800d068:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d06a:	4643      	mov	r3, r8
 800d06c:	463a      	mov	r2, r7
 800d06e:	4628      	mov	r0, r5
 800d070:	47b0      	blx	r6
 800d072:	2800      	cmp	r0, #0
 800d074:	dc08      	bgt.n	800d088 <__sflush_r+0xfc>
 800d076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d07a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d07e:	81a3      	strh	r3, [r4, #12]
 800d080:	f04f 30ff 	mov.w	r0, #4294967295
 800d084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d088:	4407      	add	r7, r0
 800d08a:	eba8 0800 	sub.w	r8, r8, r0
 800d08e:	e7e7      	b.n	800d060 <__sflush_r+0xd4>
 800d090:	dfbffffe 	.word	0xdfbffffe

0800d094 <_fflush_r>:
 800d094:	b538      	push	{r3, r4, r5, lr}
 800d096:	690b      	ldr	r3, [r1, #16]
 800d098:	4605      	mov	r5, r0
 800d09a:	460c      	mov	r4, r1
 800d09c:	b913      	cbnz	r3, 800d0a4 <_fflush_r+0x10>
 800d09e:	2500      	movs	r5, #0
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	bd38      	pop	{r3, r4, r5, pc}
 800d0a4:	b118      	cbz	r0, 800d0ae <_fflush_r+0x1a>
 800d0a6:	6a03      	ldr	r3, [r0, #32]
 800d0a8:	b90b      	cbnz	r3, 800d0ae <_fflush_r+0x1a>
 800d0aa:	f7fd fa43 	bl	800a534 <__sinit>
 800d0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d0f3      	beq.n	800d09e <_fflush_r+0xa>
 800d0b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d0b8:	07d0      	lsls	r0, r2, #31
 800d0ba:	d404      	bmi.n	800d0c6 <_fflush_r+0x32>
 800d0bc:	0599      	lsls	r1, r3, #22
 800d0be:	d402      	bmi.n	800d0c6 <_fflush_r+0x32>
 800d0c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0c2:	f7fd fbde 	bl	800a882 <__retarget_lock_acquire_recursive>
 800d0c6:	4628      	mov	r0, r5
 800d0c8:	4621      	mov	r1, r4
 800d0ca:	f7ff ff5f 	bl	800cf8c <__sflush_r>
 800d0ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d0d0:	07da      	lsls	r2, r3, #31
 800d0d2:	4605      	mov	r5, r0
 800d0d4:	d4e4      	bmi.n	800d0a0 <_fflush_r+0xc>
 800d0d6:	89a3      	ldrh	r3, [r4, #12]
 800d0d8:	059b      	lsls	r3, r3, #22
 800d0da:	d4e1      	bmi.n	800d0a0 <_fflush_r+0xc>
 800d0dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0de:	f7fd fbd1 	bl	800a884 <__retarget_lock_release_recursive>
 800d0e2:	e7dd      	b.n	800d0a0 <_fflush_r+0xc>

0800d0e4 <fiprintf>:
 800d0e4:	b40e      	push	{r1, r2, r3}
 800d0e6:	b503      	push	{r0, r1, lr}
 800d0e8:	4601      	mov	r1, r0
 800d0ea:	ab03      	add	r3, sp, #12
 800d0ec:	4805      	ldr	r0, [pc, #20]	@ (800d104 <fiprintf+0x20>)
 800d0ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0f2:	6800      	ldr	r0, [r0, #0]
 800d0f4:	9301      	str	r3, [sp, #4]
 800d0f6:	f000 fc25 	bl	800d944 <_vfiprintf_r>
 800d0fa:	b002      	add	sp, #8
 800d0fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d100:	b003      	add	sp, #12
 800d102:	4770      	bx	lr
 800d104:	200000fc 	.word	0x200000fc

0800d108 <memmove>:
 800d108:	4288      	cmp	r0, r1
 800d10a:	b510      	push	{r4, lr}
 800d10c:	eb01 0402 	add.w	r4, r1, r2
 800d110:	d902      	bls.n	800d118 <memmove+0x10>
 800d112:	4284      	cmp	r4, r0
 800d114:	4623      	mov	r3, r4
 800d116:	d807      	bhi.n	800d128 <memmove+0x20>
 800d118:	1e43      	subs	r3, r0, #1
 800d11a:	42a1      	cmp	r1, r4
 800d11c:	d008      	beq.n	800d130 <memmove+0x28>
 800d11e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d122:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d126:	e7f8      	b.n	800d11a <memmove+0x12>
 800d128:	4402      	add	r2, r0
 800d12a:	4601      	mov	r1, r0
 800d12c:	428a      	cmp	r2, r1
 800d12e:	d100      	bne.n	800d132 <memmove+0x2a>
 800d130:	bd10      	pop	{r4, pc}
 800d132:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d136:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d13a:	e7f7      	b.n	800d12c <memmove+0x24>

0800d13c <strncmp>:
 800d13c:	b510      	push	{r4, lr}
 800d13e:	b16a      	cbz	r2, 800d15c <strncmp+0x20>
 800d140:	3901      	subs	r1, #1
 800d142:	1884      	adds	r4, r0, r2
 800d144:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d148:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d103      	bne.n	800d158 <strncmp+0x1c>
 800d150:	42a0      	cmp	r0, r4
 800d152:	d001      	beq.n	800d158 <strncmp+0x1c>
 800d154:	2a00      	cmp	r2, #0
 800d156:	d1f5      	bne.n	800d144 <strncmp+0x8>
 800d158:	1ad0      	subs	r0, r2, r3
 800d15a:	bd10      	pop	{r4, pc}
 800d15c:	4610      	mov	r0, r2
 800d15e:	e7fc      	b.n	800d15a <strncmp+0x1e>

0800d160 <_sbrk_r>:
 800d160:	b538      	push	{r3, r4, r5, lr}
 800d162:	4d06      	ldr	r5, [pc, #24]	@ (800d17c <_sbrk_r+0x1c>)
 800d164:	2300      	movs	r3, #0
 800d166:	4604      	mov	r4, r0
 800d168:	4608      	mov	r0, r1
 800d16a:	602b      	str	r3, [r5, #0]
 800d16c:	f7f4 fc4e 	bl	8001a0c <_sbrk>
 800d170:	1c43      	adds	r3, r0, #1
 800d172:	d102      	bne.n	800d17a <_sbrk_r+0x1a>
 800d174:	682b      	ldr	r3, [r5, #0]
 800d176:	b103      	cbz	r3, 800d17a <_sbrk_r+0x1a>
 800d178:	6023      	str	r3, [r4, #0]
 800d17a:	bd38      	pop	{r3, r4, r5, pc}
 800d17c:	20000818 	.word	0x20000818

0800d180 <memcpy>:
 800d180:	440a      	add	r2, r1
 800d182:	4291      	cmp	r1, r2
 800d184:	f100 33ff 	add.w	r3, r0, #4294967295
 800d188:	d100      	bne.n	800d18c <memcpy+0xc>
 800d18a:	4770      	bx	lr
 800d18c:	b510      	push	{r4, lr}
 800d18e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d192:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d196:	4291      	cmp	r1, r2
 800d198:	d1f9      	bne.n	800d18e <memcpy+0xe>
 800d19a:	bd10      	pop	{r4, pc}
 800d19c:	0000      	movs	r0, r0
	...

0800d1a0 <nan>:
 800d1a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d1a8 <nan+0x8>
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop
 800d1a8:	00000000 	.word	0x00000000
 800d1ac:	7ff80000 	.word	0x7ff80000

0800d1b0 <abort>:
 800d1b0:	b508      	push	{r3, lr}
 800d1b2:	2006      	movs	r0, #6
 800d1b4:	f000 fd9a 	bl	800dcec <raise>
 800d1b8:	2001      	movs	r0, #1
 800d1ba:	f7f4 fbaf 	bl	800191c <_exit>

0800d1be <_calloc_r>:
 800d1be:	b570      	push	{r4, r5, r6, lr}
 800d1c0:	fba1 5402 	umull	r5, r4, r1, r2
 800d1c4:	b93c      	cbnz	r4, 800d1d6 <_calloc_r+0x18>
 800d1c6:	4629      	mov	r1, r5
 800d1c8:	f7fe fa42 	bl	800b650 <_malloc_r>
 800d1cc:	4606      	mov	r6, r0
 800d1ce:	b928      	cbnz	r0, 800d1dc <_calloc_r+0x1e>
 800d1d0:	2600      	movs	r6, #0
 800d1d2:	4630      	mov	r0, r6
 800d1d4:	bd70      	pop	{r4, r5, r6, pc}
 800d1d6:	220c      	movs	r2, #12
 800d1d8:	6002      	str	r2, [r0, #0]
 800d1da:	e7f9      	b.n	800d1d0 <_calloc_r+0x12>
 800d1dc:	462a      	mov	r2, r5
 800d1de:	4621      	mov	r1, r4
 800d1e0:	f7fd fa75 	bl	800a6ce <memset>
 800d1e4:	e7f5      	b.n	800d1d2 <_calloc_r+0x14>

0800d1e6 <rshift>:
 800d1e6:	6903      	ldr	r3, [r0, #16]
 800d1e8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d1ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1f0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d1f4:	f100 0414 	add.w	r4, r0, #20
 800d1f8:	dd45      	ble.n	800d286 <rshift+0xa0>
 800d1fa:	f011 011f 	ands.w	r1, r1, #31
 800d1fe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d202:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d206:	d10c      	bne.n	800d222 <rshift+0x3c>
 800d208:	f100 0710 	add.w	r7, r0, #16
 800d20c:	4629      	mov	r1, r5
 800d20e:	42b1      	cmp	r1, r6
 800d210:	d334      	bcc.n	800d27c <rshift+0x96>
 800d212:	1a9b      	subs	r3, r3, r2
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	1eea      	subs	r2, r5, #3
 800d218:	4296      	cmp	r6, r2
 800d21a:	bf38      	it	cc
 800d21c:	2300      	movcc	r3, #0
 800d21e:	4423      	add	r3, r4
 800d220:	e015      	b.n	800d24e <rshift+0x68>
 800d222:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d226:	f1c1 0820 	rsb	r8, r1, #32
 800d22a:	40cf      	lsrs	r7, r1
 800d22c:	f105 0e04 	add.w	lr, r5, #4
 800d230:	46a1      	mov	r9, r4
 800d232:	4576      	cmp	r6, lr
 800d234:	46f4      	mov	ip, lr
 800d236:	d815      	bhi.n	800d264 <rshift+0x7e>
 800d238:	1a9a      	subs	r2, r3, r2
 800d23a:	0092      	lsls	r2, r2, #2
 800d23c:	3a04      	subs	r2, #4
 800d23e:	3501      	adds	r5, #1
 800d240:	42ae      	cmp	r6, r5
 800d242:	bf38      	it	cc
 800d244:	2200      	movcc	r2, #0
 800d246:	18a3      	adds	r3, r4, r2
 800d248:	50a7      	str	r7, [r4, r2]
 800d24a:	b107      	cbz	r7, 800d24e <rshift+0x68>
 800d24c:	3304      	adds	r3, #4
 800d24e:	1b1a      	subs	r2, r3, r4
 800d250:	42a3      	cmp	r3, r4
 800d252:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d256:	bf08      	it	eq
 800d258:	2300      	moveq	r3, #0
 800d25a:	6102      	str	r2, [r0, #16]
 800d25c:	bf08      	it	eq
 800d25e:	6143      	streq	r3, [r0, #20]
 800d260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d264:	f8dc c000 	ldr.w	ip, [ip]
 800d268:	fa0c fc08 	lsl.w	ip, ip, r8
 800d26c:	ea4c 0707 	orr.w	r7, ip, r7
 800d270:	f849 7b04 	str.w	r7, [r9], #4
 800d274:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d278:	40cf      	lsrs	r7, r1
 800d27a:	e7da      	b.n	800d232 <rshift+0x4c>
 800d27c:	f851 cb04 	ldr.w	ip, [r1], #4
 800d280:	f847 cf04 	str.w	ip, [r7, #4]!
 800d284:	e7c3      	b.n	800d20e <rshift+0x28>
 800d286:	4623      	mov	r3, r4
 800d288:	e7e1      	b.n	800d24e <rshift+0x68>

0800d28a <__hexdig_fun>:
 800d28a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d28e:	2b09      	cmp	r3, #9
 800d290:	d802      	bhi.n	800d298 <__hexdig_fun+0xe>
 800d292:	3820      	subs	r0, #32
 800d294:	b2c0      	uxtb	r0, r0
 800d296:	4770      	bx	lr
 800d298:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d29c:	2b05      	cmp	r3, #5
 800d29e:	d801      	bhi.n	800d2a4 <__hexdig_fun+0x1a>
 800d2a0:	3847      	subs	r0, #71	@ 0x47
 800d2a2:	e7f7      	b.n	800d294 <__hexdig_fun+0xa>
 800d2a4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d2a8:	2b05      	cmp	r3, #5
 800d2aa:	d801      	bhi.n	800d2b0 <__hexdig_fun+0x26>
 800d2ac:	3827      	subs	r0, #39	@ 0x27
 800d2ae:	e7f1      	b.n	800d294 <__hexdig_fun+0xa>
 800d2b0:	2000      	movs	r0, #0
 800d2b2:	4770      	bx	lr

0800d2b4 <__gethex>:
 800d2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b8:	b085      	sub	sp, #20
 800d2ba:	468a      	mov	sl, r1
 800d2bc:	9302      	str	r3, [sp, #8]
 800d2be:	680b      	ldr	r3, [r1, #0]
 800d2c0:	9001      	str	r0, [sp, #4]
 800d2c2:	4690      	mov	r8, r2
 800d2c4:	1c9c      	adds	r4, r3, #2
 800d2c6:	46a1      	mov	r9, r4
 800d2c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d2cc:	2830      	cmp	r0, #48	@ 0x30
 800d2ce:	d0fa      	beq.n	800d2c6 <__gethex+0x12>
 800d2d0:	eba9 0303 	sub.w	r3, r9, r3
 800d2d4:	f1a3 0b02 	sub.w	fp, r3, #2
 800d2d8:	f7ff ffd7 	bl	800d28a <__hexdig_fun>
 800d2dc:	4605      	mov	r5, r0
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	d168      	bne.n	800d3b4 <__gethex+0x100>
 800d2e2:	49a0      	ldr	r1, [pc, #640]	@ (800d564 <__gethex+0x2b0>)
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	4648      	mov	r0, r9
 800d2e8:	f7ff ff28 	bl	800d13c <strncmp>
 800d2ec:	4607      	mov	r7, r0
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d167      	bne.n	800d3c2 <__gethex+0x10e>
 800d2f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d2f6:	4626      	mov	r6, r4
 800d2f8:	f7ff ffc7 	bl	800d28a <__hexdig_fun>
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d062      	beq.n	800d3c6 <__gethex+0x112>
 800d300:	4623      	mov	r3, r4
 800d302:	7818      	ldrb	r0, [r3, #0]
 800d304:	2830      	cmp	r0, #48	@ 0x30
 800d306:	4699      	mov	r9, r3
 800d308:	f103 0301 	add.w	r3, r3, #1
 800d30c:	d0f9      	beq.n	800d302 <__gethex+0x4e>
 800d30e:	f7ff ffbc 	bl	800d28a <__hexdig_fun>
 800d312:	fab0 f580 	clz	r5, r0
 800d316:	096d      	lsrs	r5, r5, #5
 800d318:	f04f 0b01 	mov.w	fp, #1
 800d31c:	464a      	mov	r2, r9
 800d31e:	4616      	mov	r6, r2
 800d320:	3201      	adds	r2, #1
 800d322:	7830      	ldrb	r0, [r6, #0]
 800d324:	f7ff ffb1 	bl	800d28a <__hexdig_fun>
 800d328:	2800      	cmp	r0, #0
 800d32a:	d1f8      	bne.n	800d31e <__gethex+0x6a>
 800d32c:	498d      	ldr	r1, [pc, #564]	@ (800d564 <__gethex+0x2b0>)
 800d32e:	2201      	movs	r2, #1
 800d330:	4630      	mov	r0, r6
 800d332:	f7ff ff03 	bl	800d13c <strncmp>
 800d336:	2800      	cmp	r0, #0
 800d338:	d13f      	bne.n	800d3ba <__gethex+0x106>
 800d33a:	b944      	cbnz	r4, 800d34e <__gethex+0x9a>
 800d33c:	1c74      	adds	r4, r6, #1
 800d33e:	4622      	mov	r2, r4
 800d340:	4616      	mov	r6, r2
 800d342:	3201      	adds	r2, #1
 800d344:	7830      	ldrb	r0, [r6, #0]
 800d346:	f7ff ffa0 	bl	800d28a <__hexdig_fun>
 800d34a:	2800      	cmp	r0, #0
 800d34c:	d1f8      	bne.n	800d340 <__gethex+0x8c>
 800d34e:	1ba4      	subs	r4, r4, r6
 800d350:	00a7      	lsls	r7, r4, #2
 800d352:	7833      	ldrb	r3, [r6, #0]
 800d354:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d358:	2b50      	cmp	r3, #80	@ 0x50
 800d35a:	d13e      	bne.n	800d3da <__gethex+0x126>
 800d35c:	7873      	ldrb	r3, [r6, #1]
 800d35e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d360:	d033      	beq.n	800d3ca <__gethex+0x116>
 800d362:	2b2d      	cmp	r3, #45	@ 0x2d
 800d364:	d034      	beq.n	800d3d0 <__gethex+0x11c>
 800d366:	1c71      	adds	r1, r6, #1
 800d368:	2400      	movs	r4, #0
 800d36a:	7808      	ldrb	r0, [r1, #0]
 800d36c:	f7ff ff8d 	bl	800d28a <__hexdig_fun>
 800d370:	1e43      	subs	r3, r0, #1
 800d372:	b2db      	uxtb	r3, r3
 800d374:	2b18      	cmp	r3, #24
 800d376:	d830      	bhi.n	800d3da <__gethex+0x126>
 800d378:	f1a0 0210 	sub.w	r2, r0, #16
 800d37c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d380:	f7ff ff83 	bl	800d28a <__hexdig_fun>
 800d384:	f100 3cff 	add.w	ip, r0, #4294967295
 800d388:	fa5f fc8c 	uxtb.w	ip, ip
 800d38c:	f1bc 0f18 	cmp.w	ip, #24
 800d390:	f04f 030a 	mov.w	r3, #10
 800d394:	d91e      	bls.n	800d3d4 <__gethex+0x120>
 800d396:	b104      	cbz	r4, 800d39a <__gethex+0xe6>
 800d398:	4252      	negs	r2, r2
 800d39a:	4417      	add	r7, r2
 800d39c:	f8ca 1000 	str.w	r1, [sl]
 800d3a0:	b1ed      	cbz	r5, 800d3de <__gethex+0x12a>
 800d3a2:	f1bb 0f00 	cmp.w	fp, #0
 800d3a6:	bf0c      	ite	eq
 800d3a8:	2506      	moveq	r5, #6
 800d3aa:	2500      	movne	r5, #0
 800d3ac:	4628      	mov	r0, r5
 800d3ae:	b005      	add	sp, #20
 800d3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b4:	2500      	movs	r5, #0
 800d3b6:	462c      	mov	r4, r5
 800d3b8:	e7b0      	b.n	800d31c <__gethex+0x68>
 800d3ba:	2c00      	cmp	r4, #0
 800d3bc:	d1c7      	bne.n	800d34e <__gethex+0x9a>
 800d3be:	4627      	mov	r7, r4
 800d3c0:	e7c7      	b.n	800d352 <__gethex+0x9e>
 800d3c2:	464e      	mov	r6, r9
 800d3c4:	462f      	mov	r7, r5
 800d3c6:	2501      	movs	r5, #1
 800d3c8:	e7c3      	b.n	800d352 <__gethex+0x9e>
 800d3ca:	2400      	movs	r4, #0
 800d3cc:	1cb1      	adds	r1, r6, #2
 800d3ce:	e7cc      	b.n	800d36a <__gethex+0xb6>
 800d3d0:	2401      	movs	r4, #1
 800d3d2:	e7fb      	b.n	800d3cc <__gethex+0x118>
 800d3d4:	fb03 0002 	mla	r0, r3, r2, r0
 800d3d8:	e7ce      	b.n	800d378 <__gethex+0xc4>
 800d3da:	4631      	mov	r1, r6
 800d3dc:	e7de      	b.n	800d39c <__gethex+0xe8>
 800d3de:	eba6 0309 	sub.w	r3, r6, r9
 800d3e2:	3b01      	subs	r3, #1
 800d3e4:	4629      	mov	r1, r5
 800d3e6:	2b07      	cmp	r3, #7
 800d3e8:	dc0a      	bgt.n	800d400 <__gethex+0x14c>
 800d3ea:	9801      	ldr	r0, [sp, #4]
 800d3ec:	f7fe f9bc 	bl	800b768 <_Balloc>
 800d3f0:	4604      	mov	r4, r0
 800d3f2:	b940      	cbnz	r0, 800d406 <__gethex+0x152>
 800d3f4:	4b5c      	ldr	r3, [pc, #368]	@ (800d568 <__gethex+0x2b4>)
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	21e4      	movs	r1, #228	@ 0xe4
 800d3fa:	485c      	ldr	r0, [pc, #368]	@ (800d56c <__gethex+0x2b8>)
 800d3fc:	f7fd fa4a 	bl	800a894 <__assert_func>
 800d400:	3101      	adds	r1, #1
 800d402:	105b      	asrs	r3, r3, #1
 800d404:	e7ef      	b.n	800d3e6 <__gethex+0x132>
 800d406:	f100 0a14 	add.w	sl, r0, #20
 800d40a:	2300      	movs	r3, #0
 800d40c:	4655      	mov	r5, sl
 800d40e:	469b      	mov	fp, r3
 800d410:	45b1      	cmp	r9, r6
 800d412:	d337      	bcc.n	800d484 <__gethex+0x1d0>
 800d414:	f845 bb04 	str.w	fp, [r5], #4
 800d418:	eba5 050a 	sub.w	r5, r5, sl
 800d41c:	10ad      	asrs	r5, r5, #2
 800d41e:	6125      	str	r5, [r4, #16]
 800d420:	4658      	mov	r0, fp
 800d422:	f7fe fa93 	bl	800b94c <__hi0bits>
 800d426:	016d      	lsls	r5, r5, #5
 800d428:	f8d8 6000 	ldr.w	r6, [r8]
 800d42c:	1a2d      	subs	r5, r5, r0
 800d42e:	42b5      	cmp	r5, r6
 800d430:	dd54      	ble.n	800d4dc <__gethex+0x228>
 800d432:	1bad      	subs	r5, r5, r6
 800d434:	4629      	mov	r1, r5
 800d436:	4620      	mov	r0, r4
 800d438:	f7fe fe27 	bl	800c08a <__any_on>
 800d43c:	4681      	mov	r9, r0
 800d43e:	b178      	cbz	r0, 800d460 <__gethex+0x1ac>
 800d440:	1e6b      	subs	r3, r5, #1
 800d442:	1159      	asrs	r1, r3, #5
 800d444:	f003 021f 	and.w	r2, r3, #31
 800d448:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d44c:	f04f 0901 	mov.w	r9, #1
 800d450:	fa09 f202 	lsl.w	r2, r9, r2
 800d454:	420a      	tst	r2, r1
 800d456:	d003      	beq.n	800d460 <__gethex+0x1ac>
 800d458:	454b      	cmp	r3, r9
 800d45a:	dc36      	bgt.n	800d4ca <__gethex+0x216>
 800d45c:	f04f 0902 	mov.w	r9, #2
 800d460:	4629      	mov	r1, r5
 800d462:	4620      	mov	r0, r4
 800d464:	f7ff febf 	bl	800d1e6 <rshift>
 800d468:	442f      	add	r7, r5
 800d46a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d46e:	42bb      	cmp	r3, r7
 800d470:	da42      	bge.n	800d4f8 <__gethex+0x244>
 800d472:	9801      	ldr	r0, [sp, #4]
 800d474:	4621      	mov	r1, r4
 800d476:	f7fe f9b7 	bl	800b7e8 <_Bfree>
 800d47a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d47c:	2300      	movs	r3, #0
 800d47e:	6013      	str	r3, [r2, #0]
 800d480:	25a3      	movs	r5, #163	@ 0xa3
 800d482:	e793      	b.n	800d3ac <__gethex+0xf8>
 800d484:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d488:	2a2e      	cmp	r2, #46	@ 0x2e
 800d48a:	d012      	beq.n	800d4b2 <__gethex+0x1fe>
 800d48c:	2b20      	cmp	r3, #32
 800d48e:	d104      	bne.n	800d49a <__gethex+0x1e6>
 800d490:	f845 bb04 	str.w	fp, [r5], #4
 800d494:	f04f 0b00 	mov.w	fp, #0
 800d498:	465b      	mov	r3, fp
 800d49a:	7830      	ldrb	r0, [r6, #0]
 800d49c:	9303      	str	r3, [sp, #12]
 800d49e:	f7ff fef4 	bl	800d28a <__hexdig_fun>
 800d4a2:	9b03      	ldr	r3, [sp, #12]
 800d4a4:	f000 000f 	and.w	r0, r0, #15
 800d4a8:	4098      	lsls	r0, r3
 800d4aa:	ea4b 0b00 	orr.w	fp, fp, r0
 800d4ae:	3304      	adds	r3, #4
 800d4b0:	e7ae      	b.n	800d410 <__gethex+0x15c>
 800d4b2:	45b1      	cmp	r9, r6
 800d4b4:	d8ea      	bhi.n	800d48c <__gethex+0x1d8>
 800d4b6:	492b      	ldr	r1, [pc, #172]	@ (800d564 <__gethex+0x2b0>)
 800d4b8:	9303      	str	r3, [sp, #12]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	4630      	mov	r0, r6
 800d4be:	f7ff fe3d 	bl	800d13c <strncmp>
 800d4c2:	9b03      	ldr	r3, [sp, #12]
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	d1e1      	bne.n	800d48c <__gethex+0x1d8>
 800d4c8:	e7a2      	b.n	800d410 <__gethex+0x15c>
 800d4ca:	1ea9      	subs	r1, r5, #2
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	f7fe fddc 	bl	800c08a <__any_on>
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	d0c2      	beq.n	800d45c <__gethex+0x1a8>
 800d4d6:	f04f 0903 	mov.w	r9, #3
 800d4da:	e7c1      	b.n	800d460 <__gethex+0x1ac>
 800d4dc:	da09      	bge.n	800d4f2 <__gethex+0x23e>
 800d4de:	1b75      	subs	r5, r6, r5
 800d4e0:	4621      	mov	r1, r4
 800d4e2:	9801      	ldr	r0, [sp, #4]
 800d4e4:	462a      	mov	r2, r5
 800d4e6:	f7fe fb97 	bl	800bc18 <__lshift>
 800d4ea:	1b7f      	subs	r7, r7, r5
 800d4ec:	4604      	mov	r4, r0
 800d4ee:	f100 0a14 	add.w	sl, r0, #20
 800d4f2:	f04f 0900 	mov.w	r9, #0
 800d4f6:	e7b8      	b.n	800d46a <__gethex+0x1b6>
 800d4f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d4fc:	42bd      	cmp	r5, r7
 800d4fe:	dd6f      	ble.n	800d5e0 <__gethex+0x32c>
 800d500:	1bed      	subs	r5, r5, r7
 800d502:	42ae      	cmp	r6, r5
 800d504:	dc34      	bgt.n	800d570 <__gethex+0x2bc>
 800d506:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	d022      	beq.n	800d554 <__gethex+0x2a0>
 800d50e:	2b03      	cmp	r3, #3
 800d510:	d024      	beq.n	800d55c <__gethex+0x2a8>
 800d512:	2b01      	cmp	r3, #1
 800d514:	d115      	bne.n	800d542 <__gethex+0x28e>
 800d516:	42ae      	cmp	r6, r5
 800d518:	d113      	bne.n	800d542 <__gethex+0x28e>
 800d51a:	2e01      	cmp	r6, #1
 800d51c:	d10b      	bne.n	800d536 <__gethex+0x282>
 800d51e:	9a02      	ldr	r2, [sp, #8]
 800d520:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d524:	6013      	str	r3, [r2, #0]
 800d526:	2301      	movs	r3, #1
 800d528:	6123      	str	r3, [r4, #16]
 800d52a:	f8ca 3000 	str.w	r3, [sl]
 800d52e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d530:	2562      	movs	r5, #98	@ 0x62
 800d532:	601c      	str	r4, [r3, #0]
 800d534:	e73a      	b.n	800d3ac <__gethex+0xf8>
 800d536:	1e71      	subs	r1, r6, #1
 800d538:	4620      	mov	r0, r4
 800d53a:	f7fe fda6 	bl	800c08a <__any_on>
 800d53e:	2800      	cmp	r0, #0
 800d540:	d1ed      	bne.n	800d51e <__gethex+0x26a>
 800d542:	9801      	ldr	r0, [sp, #4]
 800d544:	4621      	mov	r1, r4
 800d546:	f7fe f94f 	bl	800b7e8 <_Bfree>
 800d54a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d54c:	2300      	movs	r3, #0
 800d54e:	6013      	str	r3, [r2, #0]
 800d550:	2550      	movs	r5, #80	@ 0x50
 800d552:	e72b      	b.n	800d3ac <__gethex+0xf8>
 800d554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1f3      	bne.n	800d542 <__gethex+0x28e>
 800d55a:	e7e0      	b.n	800d51e <__gethex+0x26a>
 800d55c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d1dd      	bne.n	800d51e <__gethex+0x26a>
 800d562:	e7ee      	b.n	800d542 <__gethex+0x28e>
 800d564:	0800e308 	.word	0x0800e308
 800d568:	0800e1a0 	.word	0x0800e1a0
 800d56c:	0800e379 	.word	0x0800e379
 800d570:	1e6f      	subs	r7, r5, #1
 800d572:	f1b9 0f00 	cmp.w	r9, #0
 800d576:	d130      	bne.n	800d5da <__gethex+0x326>
 800d578:	b127      	cbz	r7, 800d584 <__gethex+0x2d0>
 800d57a:	4639      	mov	r1, r7
 800d57c:	4620      	mov	r0, r4
 800d57e:	f7fe fd84 	bl	800c08a <__any_on>
 800d582:	4681      	mov	r9, r0
 800d584:	117a      	asrs	r2, r7, #5
 800d586:	2301      	movs	r3, #1
 800d588:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d58c:	f007 071f 	and.w	r7, r7, #31
 800d590:	40bb      	lsls	r3, r7
 800d592:	4213      	tst	r3, r2
 800d594:	4629      	mov	r1, r5
 800d596:	4620      	mov	r0, r4
 800d598:	bf18      	it	ne
 800d59a:	f049 0902 	orrne.w	r9, r9, #2
 800d59e:	f7ff fe22 	bl	800d1e6 <rshift>
 800d5a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d5a6:	1b76      	subs	r6, r6, r5
 800d5a8:	2502      	movs	r5, #2
 800d5aa:	f1b9 0f00 	cmp.w	r9, #0
 800d5ae:	d047      	beq.n	800d640 <__gethex+0x38c>
 800d5b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d5b4:	2b02      	cmp	r3, #2
 800d5b6:	d015      	beq.n	800d5e4 <__gethex+0x330>
 800d5b8:	2b03      	cmp	r3, #3
 800d5ba:	d017      	beq.n	800d5ec <__gethex+0x338>
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d109      	bne.n	800d5d4 <__gethex+0x320>
 800d5c0:	f019 0f02 	tst.w	r9, #2
 800d5c4:	d006      	beq.n	800d5d4 <__gethex+0x320>
 800d5c6:	f8da 3000 	ldr.w	r3, [sl]
 800d5ca:	ea49 0903 	orr.w	r9, r9, r3
 800d5ce:	f019 0f01 	tst.w	r9, #1
 800d5d2:	d10e      	bne.n	800d5f2 <__gethex+0x33e>
 800d5d4:	f045 0510 	orr.w	r5, r5, #16
 800d5d8:	e032      	b.n	800d640 <__gethex+0x38c>
 800d5da:	f04f 0901 	mov.w	r9, #1
 800d5de:	e7d1      	b.n	800d584 <__gethex+0x2d0>
 800d5e0:	2501      	movs	r5, #1
 800d5e2:	e7e2      	b.n	800d5aa <__gethex+0x2f6>
 800d5e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5e6:	f1c3 0301 	rsb	r3, r3, #1
 800d5ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d5ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d0f0      	beq.n	800d5d4 <__gethex+0x320>
 800d5f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d5f6:	f104 0314 	add.w	r3, r4, #20
 800d5fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d5fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d602:	f04f 0c00 	mov.w	ip, #0
 800d606:	4618      	mov	r0, r3
 800d608:	f853 2b04 	ldr.w	r2, [r3], #4
 800d60c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d610:	d01b      	beq.n	800d64a <__gethex+0x396>
 800d612:	3201      	adds	r2, #1
 800d614:	6002      	str	r2, [r0, #0]
 800d616:	2d02      	cmp	r5, #2
 800d618:	f104 0314 	add.w	r3, r4, #20
 800d61c:	d13c      	bne.n	800d698 <__gethex+0x3e4>
 800d61e:	f8d8 2000 	ldr.w	r2, [r8]
 800d622:	3a01      	subs	r2, #1
 800d624:	42b2      	cmp	r2, r6
 800d626:	d109      	bne.n	800d63c <__gethex+0x388>
 800d628:	1171      	asrs	r1, r6, #5
 800d62a:	2201      	movs	r2, #1
 800d62c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d630:	f006 061f 	and.w	r6, r6, #31
 800d634:	fa02 f606 	lsl.w	r6, r2, r6
 800d638:	421e      	tst	r6, r3
 800d63a:	d13a      	bne.n	800d6b2 <__gethex+0x3fe>
 800d63c:	f045 0520 	orr.w	r5, r5, #32
 800d640:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d642:	601c      	str	r4, [r3, #0]
 800d644:	9b02      	ldr	r3, [sp, #8]
 800d646:	601f      	str	r7, [r3, #0]
 800d648:	e6b0      	b.n	800d3ac <__gethex+0xf8>
 800d64a:	4299      	cmp	r1, r3
 800d64c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d650:	d8d9      	bhi.n	800d606 <__gethex+0x352>
 800d652:	68a3      	ldr	r3, [r4, #8]
 800d654:	459b      	cmp	fp, r3
 800d656:	db17      	blt.n	800d688 <__gethex+0x3d4>
 800d658:	6861      	ldr	r1, [r4, #4]
 800d65a:	9801      	ldr	r0, [sp, #4]
 800d65c:	3101      	adds	r1, #1
 800d65e:	f7fe f883 	bl	800b768 <_Balloc>
 800d662:	4681      	mov	r9, r0
 800d664:	b918      	cbnz	r0, 800d66e <__gethex+0x3ba>
 800d666:	4b1a      	ldr	r3, [pc, #104]	@ (800d6d0 <__gethex+0x41c>)
 800d668:	4602      	mov	r2, r0
 800d66a:	2184      	movs	r1, #132	@ 0x84
 800d66c:	e6c5      	b.n	800d3fa <__gethex+0x146>
 800d66e:	6922      	ldr	r2, [r4, #16]
 800d670:	3202      	adds	r2, #2
 800d672:	f104 010c 	add.w	r1, r4, #12
 800d676:	0092      	lsls	r2, r2, #2
 800d678:	300c      	adds	r0, #12
 800d67a:	f7ff fd81 	bl	800d180 <memcpy>
 800d67e:	4621      	mov	r1, r4
 800d680:	9801      	ldr	r0, [sp, #4]
 800d682:	f7fe f8b1 	bl	800b7e8 <_Bfree>
 800d686:	464c      	mov	r4, r9
 800d688:	6923      	ldr	r3, [r4, #16]
 800d68a:	1c5a      	adds	r2, r3, #1
 800d68c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d690:	6122      	str	r2, [r4, #16]
 800d692:	2201      	movs	r2, #1
 800d694:	615a      	str	r2, [r3, #20]
 800d696:	e7be      	b.n	800d616 <__gethex+0x362>
 800d698:	6922      	ldr	r2, [r4, #16]
 800d69a:	455a      	cmp	r2, fp
 800d69c:	dd0b      	ble.n	800d6b6 <__gethex+0x402>
 800d69e:	2101      	movs	r1, #1
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	f7ff fda0 	bl	800d1e6 <rshift>
 800d6a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d6aa:	3701      	adds	r7, #1
 800d6ac:	42bb      	cmp	r3, r7
 800d6ae:	f6ff aee0 	blt.w	800d472 <__gethex+0x1be>
 800d6b2:	2501      	movs	r5, #1
 800d6b4:	e7c2      	b.n	800d63c <__gethex+0x388>
 800d6b6:	f016 061f 	ands.w	r6, r6, #31
 800d6ba:	d0fa      	beq.n	800d6b2 <__gethex+0x3fe>
 800d6bc:	4453      	add	r3, sl
 800d6be:	f1c6 0620 	rsb	r6, r6, #32
 800d6c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d6c6:	f7fe f941 	bl	800b94c <__hi0bits>
 800d6ca:	42b0      	cmp	r0, r6
 800d6cc:	dbe7      	blt.n	800d69e <__gethex+0x3ea>
 800d6ce:	e7f0      	b.n	800d6b2 <__gethex+0x3fe>
 800d6d0:	0800e1a0 	.word	0x0800e1a0

0800d6d4 <L_shift>:
 800d6d4:	f1c2 0208 	rsb	r2, r2, #8
 800d6d8:	0092      	lsls	r2, r2, #2
 800d6da:	b570      	push	{r4, r5, r6, lr}
 800d6dc:	f1c2 0620 	rsb	r6, r2, #32
 800d6e0:	6843      	ldr	r3, [r0, #4]
 800d6e2:	6804      	ldr	r4, [r0, #0]
 800d6e4:	fa03 f506 	lsl.w	r5, r3, r6
 800d6e8:	432c      	orrs	r4, r5
 800d6ea:	40d3      	lsrs	r3, r2
 800d6ec:	6004      	str	r4, [r0, #0]
 800d6ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800d6f2:	4288      	cmp	r0, r1
 800d6f4:	d3f4      	bcc.n	800d6e0 <L_shift+0xc>
 800d6f6:	bd70      	pop	{r4, r5, r6, pc}

0800d6f8 <__match>:
 800d6f8:	b530      	push	{r4, r5, lr}
 800d6fa:	6803      	ldr	r3, [r0, #0]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d702:	b914      	cbnz	r4, 800d70a <__match+0x12>
 800d704:	6003      	str	r3, [r0, #0]
 800d706:	2001      	movs	r0, #1
 800d708:	bd30      	pop	{r4, r5, pc}
 800d70a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d70e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d712:	2d19      	cmp	r5, #25
 800d714:	bf98      	it	ls
 800d716:	3220      	addls	r2, #32
 800d718:	42a2      	cmp	r2, r4
 800d71a:	d0f0      	beq.n	800d6fe <__match+0x6>
 800d71c:	2000      	movs	r0, #0
 800d71e:	e7f3      	b.n	800d708 <__match+0x10>

0800d720 <__hexnan>:
 800d720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d724:	680b      	ldr	r3, [r1, #0]
 800d726:	6801      	ldr	r1, [r0, #0]
 800d728:	115e      	asrs	r6, r3, #5
 800d72a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d72e:	f013 031f 	ands.w	r3, r3, #31
 800d732:	b087      	sub	sp, #28
 800d734:	bf18      	it	ne
 800d736:	3604      	addne	r6, #4
 800d738:	2500      	movs	r5, #0
 800d73a:	1f37      	subs	r7, r6, #4
 800d73c:	4682      	mov	sl, r0
 800d73e:	4690      	mov	r8, r2
 800d740:	9301      	str	r3, [sp, #4]
 800d742:	f846 5c04 	str.w	r5, [r6, #-4]
 800d746:	46b9      	mov	r9, r7
 800d748:	463c      	mov	r4, r7
 800d74a:	9502      	str	r5, [sp, #8]
 800d74c:	46ab      	mov	fp, r5
 800d74e:	784a      	ldrb	r2, [r1, #1]
 800d750:	1c4b      	adds	r3, r1, #1
 800d752:	9303      	str	r3, [sp, #12]
 800d754:	b342      	cbz	r2, 800d7a8 <__hexnan+0x88>
 800d756:	4610      	mov	r0, r2
 800d758:	9105      	str	r1, [sp, #20]
 800d75a:	9204      	str	r2, [sp, #16]
 800d75c:	f7ff fd95 	bl	800d28a <__hexdig_fun>
 800d760:	2800      	cmp	r0, #0
 800d762:	d151      	bne.n	800d808 <__hexnan+0xe8>
 800d764:	9a04      	ldr	r2, [sp, #16]
 800d766:	9905      	ldr	r1, [sp, #20]
 800d768:	2a20      	cmp	r2, #32
 800d76a:	d818      	bhi.n	800d79e <__hexnan+0x7e>
 800d76c:	9b02      	ldr	r3, [sp, #8]
 800d76e:	459b      	cmp	fp, r3
 800d770:	dd13      	ble.n	800d79a <__hexnan+0x7a>
 800d772:	454c      	cmp	r4, r9
 800d774:	d206      	bcs.n	800d784 <__hexnan+0x64>
 800d776:	2d07      	cmp	r5, #7
 800d778:	dc04      	bgt.n	800d784 <__hexnan+0x64>
 800d77a:	462a      	mov	r2, r5
 800d77c:	4649      	mov	r1, r9
 800d77e:	4620      	mov	r0, r4
 800d780:	f7ff ffa8 	bl	800d6d4 <L_shift>
 800d784:	4544      	cmp	r4, r8
 800d786:	d952      	bls.n	800d82e <__hexnan+0x10e>
 800d788:	2300      	movs	r3, #0
 800d78a:	f1a4 0904 	sub.w	r9, r4, #4
 800d78e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d792:	f8cd b008 	str.w	fp, [sp, #8]
 800d796:	464c      	mov	r4, r9
 800d798:	461d      	mov	r5, r3
 800d79a:	9903      	ldr	r1, [sp, #12]
 800d79c:	e7d7      	b.n	800d74e <__hexnan+0x2e>
 800d79e:	2a29      	cmp	r2, #41	@ 0x29
 800d7a0:	d157      	bne.n	800d852 <__hexnan+0x132>
 800d7a2:	3102      	adds	r1, #2
 800d7a4:	f8ca 1000 	str.w	r1, [sl]
 800d7a8:	f1bb 0f00 	cmp.w	fp, #0
 800d7ac:	d051      	beq.n	800d852 <__hexnan+0x132>
 800d7ae:	454c      	cmp	r4, r9
 800d7b0:	d206      	bcs.n	800d7c0 <__hexnan+0xa0>
 800d7b2:	2d07      	cmp	r5, #7
 800d7b4:	dc04      	bgt.n	800d7c0 <__hexnan+0xa0>
 800d7b6:	462a      	mov	r2, r5
 800d7b8:	4649      	mov	r1, r9
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	f7ff ff8a 	bl	800d6d4 <L_shift>
 800d7c0:	4544      	cmp	r4, r8
 800d7c2:	d936      	bls.n	800d832 <__hexnan+0x112>
 800d7c4:	f1a8 0204 	sub.w	r2, r8, #4
 800d7c8:	4623      	mov	r3, r4
 800d7ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800d7ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800d7d2:	429f      	cmp	r7, r3
 800d7d4:	d2f9      	bcs.n	800d7ca <__hexnan+0xaa>
 800d7d6:	1b3b      	subs	r3, r7, r4
 800d7d8:	f023 0303 	bic.w	r3, r3, #3
 800d7dc:	3304      	adds	r3, #4
 800d7de:	3401      	adds	r4, #1
 800d7e0:	3e03      	subs	r6, #3
 800d7e2:	42b4      	cmp	r4, r6
 800d7e4:	bf88      	it	hi
 800d7e6:	2304      	movhi	r3, #4
 800d7e8:	4443      	add	r3, r8
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f843 2b04 	str.w	r2, [r3], #4
 800d7f0:	429f      	cmp	r7, r3
 800d7f2:	d2fb      	bcs.n	800d7ec <__hexnan+0xcc>
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	b91b      	cbnz	r3, 800d800 <__hexnan+0xe0>
 800d7f8:	4547      	cmp	r7, r8
 800d7fa:	d128      	bne.n	800d84e <__hexnan+0x12e>
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	603b      	str	r3, [r7, #0]
 800d800:	2005      	movs	r0, #5
 800d802:	b007      	add	sp, #28
 800d804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d808:	3501      	adds	r5, #1
 800d80a:	2d08      	cmp	r5, #8
 800d80c:	f10b 0b01 	add.w	fp, fp, #1
 800d810:	dd06      	ble.n	800d820 <__hexnan+0x100>
 800d812:	4544      	cmp	r4, r8
 800d814:	d9c1      	bls.n	800d79a <__hexnan+0x7a>
 800d816:	2300      	movs	r3, #0
 800d818:	f844 3c04 	str.w	r3, [r4, #-4]
 800d81c:	2501      	movs	r5, #1
 800d81e:	3c04      	subs	r4, #4
 800d820:	6822      	ldr	r2, [r4, #0]
 800d822:	f000 000f 	and.w	r0, r0, #15
 800d826:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d82a:	6020      	str	r0, [r4, #0]
 800d82c:	e7b5      	b.n	800d79a <__hexnan+0x7a>
 800d82e:	2508      	movs	r5, #8
 800d830:	e7b3      	b.n	800d79a <__hexnan+0x7a>
 800d832:	9b01      	ldr	r3, [sp, #4]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d0dd      	beq.n	800d7f4 <__hexnan+0xd4>
 800d838:	f1c3 0320 	rsb	r3, r3, #32
 800d83c:	f04f 32ff 	mov.w	r2, #4294967295
 800d840:	40da      	lsrs	r2, r3
 800d842:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d846:	4013      	ands	r3, r2
 800d848:	f846 3c04 	str.w	r3, [r6, #-4]
 800d84c:	e7d2      	b.n	800d7f4 <__hexnan+0xd4>
 800d84e:	3f04      	subs	r7, #4
 800d850:	e7d0      	b.n	800d7f4 <__hexnan+0xd4>
 800d852:	2004      	movs	r0, #4
 800d854:	e7d5      	b.n	800d802 <__hexnan+0xe2>

0800d856 <__ascii_mbtowc>:
 800d856:	b082      	sub	sp, #8
 800d858:	b901      	cbnz	r1, 800d85c <__ascii_mbtowc+0x6>
 800d85a:	a901      	add	r1, sp, #4
 800d85c:	b142      	cbz	r2, 800d870 <__ascii_mbtowc+0x1a>
 800d85e:	b14b      	cbz	r3, 800d874 <__ascii_mbtowc+0x1e>
 800d860:	7813      	ldrb	r3, [r2, #0]
 800d862:	600b      	str	r3, [r1, #0]
 800d864:	7812      	ldrb	r2, [r2, #0]
 800d866:	1e10      	subs	r0, r2, #0
 800d868:	bf18      	it	ne
 800d86a:	2001      	movne	r0, #1
 800d86c:	b002      	add	sp, #8
 800d86e:	4770      	bx	lr
 800d870:	4610      	mov	r0, r2
 800d872:	e7fb      	b.n	800d86c <__ascii_mbtowc+0x16>
 800d874:	f06f 0001 	mvn.w	r0, #1
 800d878:	e7f8      	b.n	800d86c <__ascii_mbtowc+0x16>

0800d87a <_realloc_r>:
 800d87a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d87e:	4680      	mov	r8, r0
 800d880:	4615      	mov	r5, r2
 800d882:	460c      	mov	r4, r1
 800d884:	b921      	cbnz	r1, 800d890 <_realloc_r+0x16>
 800d886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d88a:	4611      	mov	r1, r2
 800d88c:	f7fd bee0 	b.w	800b650 <_malloc_r>
 800d890:	b92a      	cbnz	r2, 800d89e <_realloc_r+0x24>
 800d892:	f7fd fe69 	bl	800b568 <_free_r>
 800d896:	2400      	movs	r4, #0
 800d898:	4620      	mov	r0, r4
 800d89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d89e:	f000 fa41 	bl	800dd24 <_malloc_usable_size_r>
 800d8a2:	4285      	cmp	r5, r0
 800d8a4:	4606      	mov	r6, r0
 800d8a6:	d802      	bhi.n	800d8ae <_realloc_r+0x34>
 800d8a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d8ac:	d8f4      	bhi.n	800d898 <_realloc_r+0x1e>
 800d8ae:	4629      	mov	r1, r5
 800d8b0:	4640      	mov	r0, r8
 800d8b2:	f7fd fecd 	bl	800b650 <_malloc_r>
 800d8b6:	4607      	mov	r7, r0
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	d0ec      	beq.n	800d896 <_realloc_r+0x1c>
 800d8bc:	42b5      	cmp	r5, r6
 800d8be:	462a      	mov	r2, r5
 800d8c0:	4621      	mov	r1, r4
 800d8c2:	bf28      	it	cs
 800d8c4:	4632      	movcs	r2, r6
 800d8c6:	f7ff fc5b 	bl	800d180 <memcpy>
 800d8ca:	4621      	mov	r1, r4
 800d8cc:	4640      	mov	r0, r8
 800d8ce:	f7fd fe4b 	bl	800b568 <_free_r>
 800d8d2:	463c      	mov	r4, r7
 800d8d4:	e7e0      	b.n	800d898 <_realloc_r+0x1e>

0800d8d6 <__ascii_wctomb>:
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	4608      	mov	r0, r1
 800d8da:	b141      	cbz	r1, 800d8ee <__ascii_wctomb+0x18>
 800d8dc:	2aff      	cmp	r2, #255	@ 0xff
 800d8de:	d904      	bls.n	800d8ea <__ascii_wctomb+0x14>
 800d8e0:	228a      	movs	r2, #138	@ 0x8a
 800d8e2:	601a      	str	r2, [r3, #0]
 800d8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e8:	4770      	bx	lr
 800d8ea:	700a      	strb	r2, [r1, #0]
 800d8ec:	2001      	movs	r0, #1
 800d8ee:	4770      	bx	lr

0800d8f0 <__sfputc_r>:
 800d8f0:	6893      	ldr	r3, [r2, #8]
 800d8f2:	3b01      	subs	r3, #1
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	b410      	push	{r4}
 800d8f8:	6093      	str	r3, [r2, #8]
 800d8fa:	da08      	bge.n	800d90e <__sfputc_r+0x1e>
 800d8fc:	6994      	ldr	r4, [r2, #24]
 800d8fe:	42a3      	cmp	r3, r4
 800d900:	db01      	blt.n	800d906 <__sfputc_r+0x16>
 800d902:	290a      	cmp	r1, #10
 800d904:	d103      	bne.n	800d90e <__sfputc_r+0x1e>
 800d906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d90a:	f000 b933 	b.w	800db74 <__swbuf_r>
 800d90e:	6813      	ldr	r3, [r2, #0]
 800d910:	1c58      	adds	r0, r3, #1
 800d912:	6010      	str	r0, [r2, #0]
 800d914:	7019      	strb	r1, [r3, #0]
 800d916:	4608      	mov	r0, r1
 800d918:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d91c:	4770      	bx	lr

0800d91e <__sfputs_r>:
 800d91e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d920:	4606      	mov	r6, r0
 800d922:	460f      	mov	r7, r1
 800d924:	4614      	mov	r4, r2
 800d926:	18d5      	adds	r5, r2, r3
 800d928:	42ac      	cmp	r4, r5
 800d92a:	d101      	bne.n	800d930 <__sfputs_r+0x12>
 800d92c:	2000      	movs	r0, #0
 800d92e:	e007      	b.n	800d940 <__sfputs_r+0x22>
 800d930:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d934:	463a      	mov	r2, r7
 800d936:	4630      	mov	r0, r6
 800d938:	f7ff ffda 	bl	800d8f0 <__sfputc_r>
 800d93c:	1c43      	adds	r3, r0, #1
 800d93e:	d1f3      	bne.n	800d928 <__sfputs_r+0xa>
 800d940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d944 <_vfiprintf_r>:
 800d944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d948:	460d      	mov	r5, r1
 800d94a:	b09d      	sub	sp, #116	@ 0x74
 800d94c:	4614      	mov	r4, r2
 800d94e:	4698      	mov	r8, r3
 800d950:	4606      	mov	r6, r0
 800d952:	b118      	cbz	r0, 800d95c <_vfiprintf_r+0x18>
 800d954:	6a03      	ldr	r3, [r0, #32]
 800d956:	b90b      	cbnz	r3, 800d95c <_vfiprintf_r+0x18>
 800d958:	f7fc fdec 	bl	800a534 <__sinit>
 800d95c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d95e:	07d9      	lsls	r1, r3, #31
 800d960:	d405      	bmi.n	800d96e <_vfiprintf_r+0x2a>
 800d962:	89ab      	ldrh	r3, [r5, #12]
 800d964:	059a      	lsls	r2, r3, #22
 800d966:	d402      	bmi.n	800d96e <_vfiprintf_r+0x2a>
 800d968:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d96a:	f7fc ff8a 	bl	800a882 <__retarget_lock_acquire_recursive>
 800d96e:	89ab      	ldrh	r3, [r5, #12]
 800d970:	071b      	lsls	r3, r3, #28
 800d972:	d501      	bpl.n	800d978 <_vfiprintf_r+0x34>
 800d974:	692b      	ldr	r3, [r5, #16]
 800d976:	b99b      	cbnz	r3, 800d9a0 <_vfiprintf_r+0x5c>
 800d978:	4629      	mov	r1, r5
 800d97a:	4630      	mov	r0, r6
 800d97c:	f000 f938 	bl	800dbf0 <__swsetup_r>
 800d980:	b170      	cbz	r0, 800d9a0 <_vfiprintf_r+0x5c>
 800d982:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d984:	07dc      	lsls	r4, r3, #31
 800d986:	d504      	bpl.n	800d992 <_vfiprintf_r+0x4e>
 800d988:	f04f 30ff 	mov.w	r0, #4294967295
 800d98c:	b01d      	add	sp, #116	@ 0x74
 800d98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d992:	89ab      	ldrh	r3, [r5, #12]
 800d994:	0598      	lsls	r0, r3, #22
 800d996:	d4f7      	bmi.n	800d988 <_vfiprintf_r+0x44>
 800d998:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d99a:	f7fc ff73 	bl	800a884 <__retarget_lock_release_recursive>
 800d99e:	e7f3      	b.n	800d988 <_vfiprintf_r+0x44>
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9a4:	2320      	movs	r3, #32
 800d9a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d9aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9ae:	2330      	movs	r3, #48	@ 0x30
 800d9b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800db60 <_vfiprintf_r+0x21c>
 800d9b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d9b8:	f04f 0901 	mov.w	r9, #1
 800d9bc:	4623      	mov	r3, r4
 800d9be:	469a      	mov	sl, r3
 800d9c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9c4:	b10a      	cbz	r2, 800d9ca <_vfiprintf_r+0x86>
 800d9c6:	2a25      	cmp	r2, #37	@ 0x25
 800d9c8:	d1f9      	bne.n	800d9be <_vfiprintf_r+0x7a>
 800d9ca:	ebba 0b04 	subs.w	fp, sl, r4
 800d9ce:	d00b      	beq.n	800d9e8 <_vfiprintf_r+0xa4>
 800d9d0:	465b      	mov	r3, fp
 800d9d2:	4622      	mov	r2, r4
 800d9d4:	4629      	mov	r1, r5
 800d9d6:	4630      	mov	r0, r6
 800d9d8:	f7ff ffa1 	bl	800d91e <__sfputs_r>
 800d9dc:	3001      	adds	r0, #1
 800d9de:	f000 80a7 	beq.w	800db30 <_vfiprintf_r+0x1ec>
 800d9e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9e4:	445a      	add	r2, fp
 800d9e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d9e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	f000 809f 	beq.w	800db30 <_vfiprintf_r+0x1ec>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d9f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9fc:	f10a 0a01 	add.w	sl, sl, #1
 800da00:	9304      	str	r3, [sp, #16]
 800da02:	9307      	str	r3, [sp, #28]
 800da04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da08:	931a      	str	r3, [sp, #104]	@ 0x68
 800da0a:	4654      	mov	r4, sl
 800da0c:	2205      	movs	r2, #5
 800da0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da12:	4853      	ldr	r0, [pc, #332]	@ (800db60 <_vfiprintf_r+0x21c>)
 800da14:	f7f2 fc14 	bl	8000240 <memchr>
 800da18:	9a04      	ldr	r2, [sp, #16]
 800da1a:	b9d8      	cbnz	r0, 800da54 <_vfiprintf_r+0x110>
 800da1c:	06d1      	lsls	r1, r2, #27
 800da1e:	bf44      	itt	mi
 800da20:	2320      	movmi	r3, #32
 800da22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da26:	0713      	lsls	r3, r2, #28
 800da28:	bf44      	itt	mi
 800da2a:	232b      	movmi	r3, #43	@ 0x2b
 800da2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da30:	f89a 3000 	ldrb.w	r3, [sl]
 800da34:	2b2a      	cmp	r3, #42	@ 0x2a
 800da36:	d015      	beq.n	800da64 <_vfiprintf_r+0x120>
 800da38:	9a07      	ldr	r2, [sp, #28]
 800da3a:	4654      	mov	r4, sl
 800da3c:	2000      	movs	r0, #0
 800da3e:	f04f 0c0a 	mov.w	ip, #10
 800da42:	4621      	mov	r1, r4
 800da44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da48:	3b30      	subs	r3, #48	@ 0x30
 800da4a:	2b09      	cmp	r3, #9
 800da4c:	d94b      	bls.n	800dae6 <_vfiprintf_r+0x1a2>
 800da4e:	b1b0      	cbz	r0, 800da7e <_vfiprintf_r+0x13a>
 800da50:	9207      	str	r2, [sp, #28]
 800da52:	e014      	b.n	800da7e <_vfiprintf_r+0x13a>
 800da54:	eba0 0308 	sub.w	r3, r0, r8
 800da58:	fa09 f303 	lsl.w	r3, r9, r3
 800da5c:	4313      	orrs	r3, r2
 800da5e:	9304      	str	r3, [sp, #16]
 800da60:	46a2      	mov	sl, r4
 800da62:	e7d2      	b.n	800da0a <_vfiprintf_r+0xc6>
 800da64:	9b03      	ldr	r3, [sp, #12]
 800da66:	1d19      	adds	r1, r3, #4
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	9103      	str	r1, [sp, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	bfbb      	ittet	lt
 800da70:	425b      	neglt	r3, r3
 800da72:	f042 0202 	orrlt.w	r2, r2, #2
 800da76:	9307      	strge	r3, [sp, #28]
 800da78:	9307      	strlt	r3, [sp, #28]
 800da7a:	bfb8      	it	lt
 800da7c:	9204      	strlt	r2, [sp, #16]
 800da7e:	7823      	ldrb	r3, [r4, #0]
 800da80:	2b2e      	cmp	r3, #46	@ 0x2e
 800da82:	d10a      	bne.n	800da9a <_vfiprintf_r+0x156>
 800da84:	7863      	ldrb	r3, [r4, #1]
 800da86:	2b2a      	cmp	r3, #42	@ 0x2a
 800da88:	d132      	bne.n	800daf0 <_vfiprintf_r+0x1ac>
 800da8a:	9b03      	ldr	r3, [sp, #12]
 800da8c:	1d1a      	adds	r2, r3, #4
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	9203      	str	r2, [sp, #12]
 800da92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da96:	3402      	adds	r4, #2
 800da98:	9305      	str	r3, [sp, #20]
 800da9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800db70 <_vfiprintf_r+0x22c>
 800da9e:	7821      	ldrb	r1, [r4, #0]
 800daa0:	2203      	movs	r2, #3
 800daa2:	4650      	mov	r0, sl
 800daa4:	f7f2 fbcc 	bl	8000240 <memchr>
 800daa8:	b138      	cbz	r0, 800daba <_vfiprintf_r+0x176>
 800daaa:	9b04      	ldr	r3, [sp, #16]
 800daac:	eba0 000a 	sub.w	r0, r0, sl
 800dab0:	2240      	movs	r2, #64	@ 0x40
 800dab2:	4082      	lsls	r2, r0
 800dab4:	4313      	orrs	r3, r2
 800dab6:	3401      	adds	r4, #1
 800dab8:	9304      	str	r3, [sp, #16]
 800daba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dabe:	4829      	ldr	r0, [pc, #164]	@ (800db64 <_vfiprintf_r+0x220>)
 800dac0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dac4:	2206      	movs	r2, #6
 800dac6:	f7f2 fbbb 	bl	8000240 <memchr>
 800daca:	2800      	cmp	r0, #0
 800dacc:	d03f      	beq.n	800db4e <_vfiprintf_r+0x20a>
 800dace:	4b26      	ldr	r3, [pc, #152]	@ (800db68 <_vfiprintf_r+0x224>)
 800dad0:	bb1b      	cbnz	r3, 800db1a <_vfiprintf_r+0x1d6>
 800dad2:	9b03      	ldr	r3, [sp, #12]
 800dad4:	3307      	adds	r3, #7
 800dad6:	f023 0307 	bic.w	r3, r3, #7
 800dada:	3308      	adds	r3, #8
 800dadc:	9303      	str	r3, [sp, #12]
 800dade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dae0:	443b      	add	r3, r7
 800dae2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dae4:	e76a      	b.n	800d9bc <_vfiprintf_r+0x78>
 800dae6:	fb0c 3202 	mla	r2, ip, r2, r3
 800daea:	460c      	mov	r4, r1
 800daec:	2001      	movs	r0, #1
 800daee:	e7a8      	b.n	800da42 <_vfiprintf_r+0xfe>
 800daf0:	2300      	movs	r3, #0
 800daf2:	3401      	adds	r4, #1
 800daf4:	9305      	str	r3, [sp, #20]
 800daf6:	4619      	mov	r1, r3
 800daf8:	f04f 0c0a 	mov.w	ip, #10
 800dafc:	4620      	mov	r0, r4
 800dafe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db02:	3a30      	subs	r2, #48	@ 0x30
 800db04:	2a09      	cmp	r2, #9
 800db06:	d903      	bls.n	800db10 <_vfiprintf_r+0x1cc>
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d0c6      	beq.n	800da9a <_vfiprintf_r+0x156>
 800db0c:	9105      	str	r1, [sp, #20]
 800db0e:	e7c4      	b.n	800da9a <_vfiprintf_r+0x156>
 800db10:	fb0c 2101 	mla	r1, ip, r1, r2
 800db14:	4604      	mov	r4, r0
 800db16:	2301      	movs	r3, #1
 800db18:	e7f0      	b.n	800dafc <_vfiprintf_r+0x1b8>
 800db1a:	ab03      	add	r3, sp, #12
 800db1c:	9300      	str	r3, [sp, #0]
 800db1e:	462a      	mov	r2, r5
 800db20:	4b12      	ldr	r3, [pc, #72]	@ (800db6c <_vfiprintf_r+0x228>)
 800db22:	a904      	add	r1, sp, #16
 800db24:	4630      	mov	r0, r6
 800db26:	f7fb fead 	bl	8009884 <_printf_float>
 800db2a:	4607      	mov	r7, r0
 800db2c:	1c78      	adds	r0, r7, #1
 800db2e:	d1d6      	bne.n	800dade <_vfiprintf_r+0x19a>
 800db30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db32:	07d9      	lsls	r1, r3, #31
 800db34:	d405      	bmi.n	800db42 <_vfiprintf_r+0x1fe>
 800db36:	89ab      	ldrh	r3, [r5, #12]
 800db38:	059a      	lsls	r2, r3, #22
 800db3a:	d402      	bmi.n	800db42 <_vfiprintf_r+0x1fe>
 800db3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db3e:	f7fc fea1 	bl	800a884 <__retarget_lock_release_recursive>
 800db42:	89ab      	ldrh	r3, [r5, #12]
 800db44:	065b      	lsls	r3, r3, #25
 800db46:	f53f af1f 	bmi.w	800d988 <_vfiprintf_r+0x44>
 800db4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db4c:	e71e      	b.n	800d98c <_vfiprintf_r+0x48>
 800db4e:	ab03      	add	r3, sp, #12
 800db50:	9300      	str	r3, [sp, #0]
 800db52:	462a      	mov	r2, r5
 800db54:	4b05      	ldr	r3, [pc, #20]	@ (800db6c <_vfiprintf_r+0x228>)
 800db56:	a904      	add	r1, sp, #16
 800db58:	4630      	mov	r0, r6
 800db5a:	f7fc f92b 	bl	8009db4 <_printf_i>
 800db5e:	e7e4      	b.n	800db2a <_vfiprintf_r+0x1e6>
 800db60:	0800e360 	.word	0x0800e360
 800db64:	0800e36a 	.word	0x0800e36a
 800db68:	08009885 	.word	0x08009885
 800db6c:	0800d91f 	.word	0x0800d91f
 800db70:	0800e366 	.word	0x0800e366

0800db74 <__swbuf_r>:
 800db74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db76:	460e      	mov	r6, r1
 800db78:	4614      	mov	r4, r2
 800db7a:	4605      	mov	r5, r0
 800db7c:	b118      	cbz	r0, 800db86 <__swbuf_r+0x12>
 800db7e:	6a03      	ldr	r3, [r0, #32]
 800db80:	b90b      	cbnz	r3, 800db86 <__swbuf_r+0x12>
 800db82:	f7fc fcd7 	bl	800a534 <__sinit>
 800db86:	69a3      	ldr	r3, [r4, #24]
 800db88:	60a3      	str	r3, [r4, #8]
 800db8a:	89a3      	ldrh	r3, [r4, #12]
 800db8c:	071a      	lsls	r2, r3, #28
 800db8e:	d501      	bpl.n	800db94 <__swbuf_r+0x20>
 800db90:	6923      	ldr	r3, [r4, #16]
 800db92:	b943      	cbnz	r3, 800dba6 <__swbuf_r+0x32>
 800db94:	4621      	mov	r1, r4
 800db96:	4628      	mov	r0, r5
 800db98:	f000 f82a 	bl	800dbf0 <__swsetup_r>
 800db9c:	b118      	cbz	r0, 800dba6 <__swbuf_r+0x32>
 800db9e:	f04f 37ff 	mov.w	r7, #4294967295
 800dba2:	4638      	mov	r0, r7
 800dba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dba6:	6823      	ldr	r3, [r4, #0]
 800dba8:	6922      	ldr	r2, [r4, #16]
 800dbaa:	1a98      	subs	r0, r3, r2
 800dbac:	6963      	ldr	r3, [r4, #20]
 800dbae:	b2f6      	uxtb	r6, r6
 800dbb0:	4283      	cmp	r3, r0
 800dbb2:	4637      	mov	r7, r6
 800dbb4:	dc05      	bgt.n	800dbc2 <__swbuf_r+0x4e>
 800dbb6:	4621      	mov	r1, r4
 800dbb8:	4628      	mov	r0, r5
 800dbba:	f7ff fa6b 	bl	800d094 <_fflush_r>
 800dbbe:	2800      	cmp	r0, #0
 800dbc0:	d1ed      	bne.n	800db9e <__swbuf_r+0x2a>
 800dbc2:	68a3      	ldr	r3, [r4, #8]
 800dbc4:	3b01      	subs	r3, #1
 800dbc6:	60a3      	str	r3, [r4, #8]
 800dbc8:	6823      	ldr	r3, [r4, #0]
 800dbca:	1c5a      	adds	r2, r3, #1
 800dbcc:	6022      	str	r2, [r4, #0]
 800dbce:	701e      	strb	r6, [r3, #0]
 800dbd0:	6962      	ldr	r2, [r4, #20]
 800dbd2:	1c43      	adds	r3, r0, #1
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d004      	beq.n	800dbe2 <__swbuf_r+0x6e>
 800dbd8:	89a3      	ldrh	r3, [r4, #12]
 800dbda:	07db      	lsls	r3, r3, #31
 800dbdc:	d5e1      	bpl.n	800dba2 <__swbuf_r+0x2e>
 800dbde:	2e0a      	cmp	r6, #10
 800dbe0:	d1df      	bne.n	800dba2 <__swbuf_r+0x2e>
 800dbe2:	4621      	mov	r1, r4
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	f7ff fa55 	bl	800d094 <_fflush_r>
 800dbea:	2800      	cmp	r0, #0
 800dbec:	d0d9      	beq.n	800dba2 <__swbuf_r+0x2e>
 800dbee:	e7d6      	b.n	800db9e <__swbuf_r+0x2a>

0800dbf0 <__swsetup_r>:
 800dbf0:	b538      	push	{r3, r4, r5, lr}
 800dbf2:	4b29      	ldr	r3, [pc, #164]	@ (800dc98 <__swsetup_r+0xa8>)
 800dbf4:	4605      	mov	r5, r0
 800dbf6:	6818      	ldr	r0, [r3, #0]
 800dbf8:	460c      	mov	r4, r1
 800dbfa:	b118      	cbz	r0, 800dc04 <__swsetup_r+0x14>
 800dbfc:	6a03      	ldr	r3, [r0, #32]
 800dbfe:	b90b      	cbnz	r3, 800dc04 <__swsetup_r+0x14>
 800dc00:	f7fc fc98 	bl	800a534 <__sinit>
 800dc04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc08:	0719      	lsls	r1, r3, #28
 800dc0a:	d422      	bmi.n	800dc52 <__swsetup_r+0x62>
 800dc0c:	06da      	lsls	r2, r3, #27
 800dc0e:	d407      	bmi.n	800dc20 <__swsetup_r+0x30>
 800dc10:	2209      	movs	r2, #9
 800dc12:	602a      	str	r2, [r5, #0]
 800dc14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc18:	81a3      	strh	r3, [r4, #12]
 800dc1a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc1e:	e033      	b.n	800dc88 <__swsetup_r+0x98>
 800dc20:	0758      	lsls	r0, r3, #29
 800dc22:	d512      	bpl.n	800dc4a <__swsetup_r+0x5a>
 800dc24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc26:	b141      	cbz	r1, 800dc3a <__swsetup_r+0x4a>
 800dc28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc2c:	4299      	cmp	r1, r3
 800dc2e:	d002      	beq.n	800dc36 <__swsetup_r+0x46>
 800dc30:	4628      	mov	r0, r5
 800dc32:	f7fd fc99 	bl	800b568 <_free_r>
 800dc36:	2300      	movs	r3, #0
 800dc38:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc3a:	89a3      	ldrh	r3, [r4, #12]
 800dc3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dc40:	81a3      	strh	r3, [r4, #12]
 800dc42:	2300      	movs	r3, #0
 800dc44:	6063      	str	r3, [r4, #4]
 800dc46:	6923      	ldr	r3, [r4, #16]
 800dc48:	6023      	str	r3, [r4, #0]
 800dc4a:	89a3      	ldrh	r3, [r4, #12]
 800dc4c:	f043 0308 	orr.w	r3, r3, #8
 800dc50:	81a3      	strh	r3, [r4, #12]
 800dc52:	6923      	ldr	r3, [r4, #16]
 800dc54:	b94b      	cbnz	r3, 800dc6a <__swsetup_r+0x7a>
 800dc56:	89a3      	ldrh	r3, [r4, #12]
 800dc58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dc5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc60:	d003      	beq.n	800dc6a <__swsetup_r+0x7a>
 800dc62:	4621      	mov	r1, r4
 800dc64:	4628      	mov	r0, r5
 800dc66:	f000 f88b 	bl	800dd80 <__smakebuf_r>
 800dc6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc6e:	f013 0201 	ands.w	r2, r3, #1
 800dc72:	d00a      	beq.n	800dc8a <__swsetup_r+0x9a>
 800dc74:	2200      	movs	r2, #0
 800dc76:	60a2      	str	r2, [r4, #8]
 800dc78:	6962      	ldr	r2, [r4, #20]
 800dc7a:	4252      	negs	r2, r2
 800dc7c:	61a2      	str	r2, [r4, #24]
 800dc7e:	6922      	ldr	r2, [r4, #16]
 800dc80:	b942      	cbnz	r2, 800dc94 <__swsetup_r+0xa4>
 800dc82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc86:	d1c5      	bne.n	800dc14 <__swsetup_r+0x24>
 800dc88:	bd38      	pop	{r3, r4, r5, pc}
 800dc8a:	0799      	lsls	r1, r3, #30
 800dc8c:	bf58      	it	pl
 800dc8e:	6962      	ldrpl	r2, [r4, #20]
 800dc90:	60a2      	str	r2, [r4, #8]
 800dc92:	e7f4      	b.n	800dc7e <__swsetup_r+0x8e>
 800dc94:	2000      	movs	r0, #0
 800dc96:	e7f7      	b.n	800dc88 <__swsetup_r+0x98>
 800dc98:	200000fc 	.word	0x200000fc

0800dc9c <_raise_r>:
 800dc9c:	291f      	cmp	r1, #31
 800dc9e:	b538      	push	{r3, r4, r5, lr}
 800dca0:	4605      	mov	r5, r0
 800dca2:	460c      	mov	r4, r1
 800dca4:	d904      	bls.n	800dcb0 <_raise_r+0x14>
 800dca6:	2316      	movs	r3, #22
 800dca8:	6003      	str	r3, [r0, #0]
 800dcaa:	f04f 30ff 	mov.w	r0, #4294967295
 800dcae:	bd38      	pop	{r3, r4, r5, pc}
 800dcb0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dcb2:	b112      	cbz	r2, 800dcba <_raise_r+0x1e>
 800dcb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dcb8:	b94b      	cbnz	r3, 800dcce <_raise_r+0x32>
 800dcba:	4628      	mov	r0, r5
 800dcbc:	f000 f830 	bl	800dd20 <_getpid_r>
 800dcc0:	4622      	mov	r2, r4
 800dcc2:	4601      	mov	r1, r0
 800dcc4:	4628      	mov	r0, r5
 800dcc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcca:	f000 b817 	b.w	800dcfc <_kill_r>
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d00a      	beq.n	800dce8 <_raise_r+0x4c>
 800dcd2:	1c59      	adds	r1, r3, #1
 800dcd4:	d103      	bne.n	800dcde <_raise_r+0x42>
 800dcd6:	2316      	movs	r3, #22
 800dcd8:	6003      	str	r3, [r0, #0]
 800dcda:	2001      	movs	r0, #1
 800dcdc:	e7e7      	b.n	800dcae <_raise_r+0x12>
 800dcde:	2100      	movs	r1, #0
 800dce0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dce4:	4620      	mov	r0, r4
 800dce6:	4798      	blx	r3
 800dce8:	2000      	movs	r0, #0
 800dcea:	e7e0      	b.n	800dcae <_raise_r+0x12>

0800dcec <raise>:
 800dcec:	4b02      	ldr	r3, [pc, #8]	@ (800dcf8 <raise+0xc>)
 800dcee:	4601      	mov	r1, r0
 800dcf0:	6818      	ldr	r0, [r3, #0]
 800dcf2:	f7ff bfd3 	b.w	800dc9c <_raise_r>
 800dcf6:	bf00      	nop
 800dcf8:	200000fc 	.word	0x200000fc

0800dcfc <_kill_r>:
 800dcfc:	b538      	push	{r3, r4, r5, lr}
 800dcfe:	4d07      	ldr	r5, [pc, #28]	@ (800dd1c <_kill_r+0x20>)
 800dd00:	2300      	movs	r3, #0
 800dd02:	4604      	mov	r4, r0
 800dd04:	4608      	mov	r0, r1
 800dd06:	4611      	mov	r1, r2
 800dd08:	602b      	str	r3, [r5, #0]
 800dd0a:	f7f3 fdf7 	bl	80018fc <_kill>
 800dd0e:	1c43      	adds	r3, r0, #1
 800dd10:	d102      	bne.n	800dd18 <_kill_r+0x1c>
 800dd12:	682b      	ldr	r3, [r5, #0]
 800dd14:	b103      	cbz	r3, 800dd18 <_kill_r+0x1c>
 800dd16:	6023      	str	r3, [r4, #0]
 800dd18:	bd38      	pop	{r3, r4, r5, pc}
 800dd1a:	bf00      	nop
 800dd1c:	20000818 	.word	0x20000818

0800dd20 <_getpid_r>:
 800dd20:	f7f3 bde4 	b.w	80018ec <_getpid>

0800dd24 <_malloc_usable_size_r>:
 800dd24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd28:	1f18      	subs	r0, r3, #4
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	bfbc      	itt	lt
 800dd2e:	580b      	ldrlt	r3, [r1, r0]
 800dd30:	18c0      	addlt	r0, r0, r3
 800dd32:	4770      	bx	lr

0800dd34 <__swhatbuf_r>:
 800dd34:	b570      	push	{r4, r5, r6, lr}
 800dd36:	460c      	mov	r4, r1
 800dd38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd3c:	2900      	cmp	r1, #0
 800dd3e:	b096      	sub	sp, #88	@ 0x58
 800dd40:	4615      	mov	r5, r2
 800dd42:	461e      	mov	r6, r3
 800dd44:	da0d      	bge.n	800dd62 <__swhatbuf_r+0x2e>
 800dd46:	89a3      	ldrh	r3, [r4, #12]
 800dd48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd4c:	f04f 0100 	mov.w	r1, #0
 800dd50:	bf14      	ite	ne
 800dd52:	2340      	movne	r3, #64	@ 0x40
 800dd54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd58:	2000      	movs	r0, #0
 800dd5a:	6031      	str	r1, [r6, #0]
 800dd5c:	602b      	str	r3, [r5, #0]
 800dd5e:	b016      	add	sp, #88	@ 0x58
 800dd60:	bd70      	pop	{r4, r5, r6, pc}
 800dd62:	466a      	mov	r2, sp
 800dd64:	f000 f848 	bl	800ddf8 <_fstat_r>
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	dbec      	blt.n	800dd46 <__swhatbuf_r+0x12>
 800dd6c:	9901      	ldr	r1, [sp, #4]
 800dd6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd76:	4259      	negs	r1, r3
 800dd78:	4159      	adcs	r1, r3
 800dd7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd7e:	e7eb      	b.n	800dd58 <__swhatbuf_r+0x24>

0800dd80 <__smakebuf_r>:
 800dd80:	898b      	ldrh	r3, [r1, #12]
 800dd82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd84:	079d      	lsls	r5, r3, #30
 800dd86:	4606      	mov	r6, r0
 800dd88:	460c      	mov	r4, r1
 800dd8a:	d507      	bpl.n	800dd9c <__smakebuf_r+0x1c>
 800dd8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dd90:	6023      	str	r3, [r4, #0]
 800dd92:	6123      	str	r3, [r4, #16]
 800dd94:	2301      	movs	r3, #1
 800dd96:	6163      	str	r3, [r4, #20]
 800dd98:	b003      	add	sp, #12
 800dd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd9c:	ab01      	add	r3, sp, #4
 800dd9e:	466a      	mov	r2, sp
 800dda0:	f7ff ffc8 	bl	800dd34 <__swhatbuf_r>
 800dda4:	9f00      	ldr	r7, [sp, #0]
 800dda6:	4605      	mov	r5, r0
 800dda8:	4639      	mov	r1, r7
 800ddaa:	4630      	mov	r0, r6
 800ddac:	f7fd fc50 	bl	800b650 <_malloc_r>
 800ddb0:	b948      	cbnz	r0, 800ddc6 <__smakebuf_r+0x46>
 800ddb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddb6:	059a      	lsls	r2, r3, #22
 800ddb8:	d4ee      	bmi.n	800dd98 <__smakebuf_r+0x18>
 800ddba:	f023 0303 	bic.w	r3, r3, #3
 800ddbe:	f043 0302 	orr.w	r3, r3, #2
 800ddc2:	81a3      	strh	r3, [r4, #12]
 800ddc4:	e7e2      	b.n	800dd8c <__smakebuf_r+0xc>
 800ddc6:	89a3      	ldrh	r3, [r4, #12]
 800ddc8:	6020      	str	r0, [r4, #0]
 800ddca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddce:	81a3      	strh	r3, [r4, #12]
 800ddd0:	9b01      	ldr	r3, [sp, #4]
 800ddd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ddd6:	b15b      	cbz	r3, 800ddf0 <__smakebuf_r+0x70>
 800ddd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dddc:	4630      	mov	r0, r6
 800ddde:	f000 f81d 	bl	800de1c <_isatty_r>
 800dde2:	b128      	cbz	r0, 800ddf0 <__smakebuf_r+0x70>
 800dde4:	89a3      	ldrh	r3, [r4, #12]
 800dde6:	f023 0303 	bic.w	r3, r3, #3
 800ddea:	f043 0301 	orr.w	r3, r3, #1
 800ddee:	81a3      	strh	r3, [r4, #12]
 800ddf0:	89a3      	ldrh	r3, [r4, #12]
 800ddf2:	431d      	orrs	r5, r3
 800ddf4:	81a5      	strh	r5, [r4, #12]
 800ddf6:	e7cf      	b.n	800dd98 <__smakebuf_r+0x18>

0800ddf8 <_fstat_r>:
 800ddf8:	b538      	push	{r3, r4, r5, lr}
 800ddfa:	4d07      	ldr	r5, [pc, #28]	@ (800de18 <_fstat_r+0x20>)
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	4604      	mov	r4, r0
 800de00:	4608      	mov	r0, r1
 800de02:	4611      	mov	r1, r2
 800de04:	602b      	str	r3, [r5, #0]
 800de06:	f7f3 fdd9 	bl	80019bc <_fstat>
 800de0a:	1c43      	adds	r3, r0, #1
 800de0c:	d102      	bne.n	800de14 <_fstat_r+0x1c>
 800de0e:	682b      	ldr	r3, [r5, #0]
 800de10:	b103      	cbz	r3, 800de14 <_fstat_r+0x1c>
 800de12:	6023      	str	r3, [r4, #0]
 800de14:	bd38      	pop	{r3, r4, r5, pc}
 800de16:	bf00      	nop
 800de18:	20000818 	.word	0x20000818

0800de1c <_isatty_r>:
 800de1c:	b538      	push	{r3, r4, r5, lr}
 800de1e:	4d06      	ldr	r5, [pc, #24]	@ (800de38 <_isatty_r+0x1c>)
 800de20:	2300      	movs	r3, #0
 800de22:	4604      	mov	r4, r0
 800de24:	4608      	mov	r0, r1
 800de26:	602b      	str	r3, [r5, #0]
 800de28:	f7f3 fdd8 	bl	80019dc <_isatty>
 800de2c:	1c43      	adds	r3, r0, #1
 800de2e:	d102      	bne.n	800de36 <_isatty_r+0x1a>
 800de30:	682b      	ldr	r3, [r5, #0]
 800de32:	b103      	cbz	r3, 800de36 <_isatty_r+0x1a>
 800de34:	6023      	str	r3, [r4, #0]
 800de36:	bd38      	pop	{r3, r4, r5, pc}
 800de38:	20000818 	.word	0x20000818

0800de3c <_init>:
 800de3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de3e:	bf00      	nop
 800de40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de42:	bc08      	pop	{r3}
 800de44:	469e      	mov	lr, r3
 800de46:	4770      	bx	lr

0800de48 <_fini>:
 800de48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de4a:	bf00      	nop
 800de4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de4e:	bc08      	pop	{r3}
 800de50:	469e      	mov	lr, r3
 800de52:	4770      	bx	lr
