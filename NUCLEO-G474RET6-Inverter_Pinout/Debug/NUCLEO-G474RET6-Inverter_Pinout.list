
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e6c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  0800a04c  0800a04c  0000b04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a318  0800a318  0000c148  2**0
                  CONTENTS
  4 .ARM          00000008  0800a318  0800a318  0000b318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a320  0800a320  0000c148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a320  0800a320  0000b320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a324  0800a324  0000b324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  0800a328  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000148  0800a470  0000c148  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  0800a470  0000c6bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c148  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b951  00000000  00000000  0000c178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000385c  00000000  00000000  00027ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0002b328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001127  00000000  00000000  0002c960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab18  00000000  00000000  0002da87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c71e  00000000  00000000  0005859f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114702  00000000  00000000  00074cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001893bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069ac  00000000  00000000  00189404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0018fdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000148 	.word	0x20000148
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a034 	.word	0x0800a034

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000014c 	.word	0x2000014c
 800021c:	0800a034 	.word	0x0800a034

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f008 fc6e 	bl	8008eda <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000606:	4b30      	ldr	r3, [pc, #192]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000608:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061a:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000620:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000628:	2204      	movs	r2, #4
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000632:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000634:	2201      	movs	r2, #1
 8000636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800063a:	2201      	movs	r2, #1
 800063c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000654:	2201      	movs	r2, #1
 8000656:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4817      	ldr	r0, [pc, #92]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800066a:	f001 fd2f 	bl	80020cc <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000674:	f000 fb08 	bl	8000c88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000680:	4619      	mov	r1, r3
 8000682:	4811      	ldr	r0, [pc, #68]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000684:	f002 fd28 	bl	80030d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800068e:	f000 fafb 	bl	8000c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_ADC1_Init+0xec>)
 8000694:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	237f      	movs	r3, #127	@ 0x7f
 80006a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a2:	2304      	movs	r3, #4
 80006a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 80006b0:	f001 ffb6 	bl	8002620 <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ba:	f000 fae5 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	@ 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000164 	.word	0x20000164
 80006cc:	21800100 	.word	0x21800100

080006d0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2220      	movs	r2, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f008 fbfc 	bl	8008eda <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000794 <MX_ADC2_Init+0xc4>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006ea:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80006ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000702:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000708:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800070a:	2204      	movs	r2, #4
 800070c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000716:	2200      	movs	r2, #0
 8000718:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800071c:	2201      	movs	r2, #1
 800071e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800074a:	4811      	ldr	r0, [pc, #68]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800074c:	f001 fcbe 	bl	80020cc <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000756:	f000 fa97 	bl	8000c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_ADC2_Init+0xc8>)
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800075e:	2306      	movs	r3, #6
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000766:	237f      	movs	r3, #127	@ 0x7f
 8000768:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076a:	2304      	movs	r3, #4
 800076c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000778:	f001 ff52 	bl	8002620 <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000782:	f000 fa81 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200001d0 	.word	0x200001d0
 8000794:	50000100 	.word	0x50000100
 8000798:	19200040 	.word	0x19200040

0800079c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0a4      	sub	sp, #144	@ 0x90
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b8:	2254      	movs	r2, #84	@ 0x54
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f008 fb8c 	bl	8008eda <memset>
  if(adcHandle->Instance==ADC1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007ca:	f040 80a0 	bne.w	800090e <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007d4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007de:	4618      	mov	r0, r3
 80007e0:	f004 f96c 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80007ea:	f000 fa4d 	bl	8000c88 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007ee:	4b79      	ldr	r3, [pc, #484]	@ (80009d4 <HAL_ADC_MspInit+0x238>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	4a77      	ldr	r2, [pc, #476]	@ (80009d4 <HAL_ADC_MspInit+0x238>)
 80007f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007f8:	4b76      	ldr	r3, [pc, #472]	@ (80009d4 <HAL_ADC_MspInit+0x238>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d10b      	bne.n	8000818 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000800:	4b75      	ldr	r3, [pc, #468]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 8000802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000804:	4a74      	ldr	r2, [pc, #464]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 8000806:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800080a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080c:	4b72      	ldr	r3, [pc, #456]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 800080e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000810:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
 8000816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000818:	4b6f      	ldr	r3, [pc, #444]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 800081a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081c:	4a6e      	ldr	r2, [pc, #440]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000824:	4b6c      	ldr	r3, [pc, #432]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 8000826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	623b      	str	r3, [r7, #32]
 800082e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	4b69      	ldr	r3, [pc, #420]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 8000832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000834:	4a68      	ldr	r2, [pc, #416]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083c:	4b66      	ldr	r3, [pc, #408]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 800083e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	61fb      	str	r3, [r7, #28]
 8000846:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	4b63      	ldr	r3, [pc, #396]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 800084a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084c:	4a62      	ldr	r2, [pc, #392]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 800084e:	f043 0302 	orr.w	r3, r3, #2
 8000852:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000854:	4b60      	ldr	r3, [pc, #384]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 8000856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	61bb      	str	r3, [r7, #24]
 800085e:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8000860:	2304      	movs	r3, #4
 8000862:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000864:	2303      	movs	r3, #3
 8000866:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000874:	4619      	mov	r1, r3
 8000876:	4859      	ldr	r0, [pc, #356]	@ (80009dc <HAL_ADC_MspInit+0x240>)
 8000878:	f003 f948 	bl	8003b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800087c:	2302      	movs	r3, #2
 800087e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000880:	2303      	movs	r3, #3
 8000882:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000890:	4619      	mov	r1, r3
 8000892:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000896:	f003 f939 	bl	8003b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800089a:	2303      	movs	r3, #3
 800089c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089e:	2303      	movs	r3, #3
 80008a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008ae:	4619      	mov	r1, r3
 80008b0:	484b      	ldr	r0, [pc, #300]	@ (80009e0 <HAL_ADC_MspInit+0x244>)
 80008b2:	f003 f92b 	bl	8003b0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008b6:	4b4b      	ldr	r3, [pc, #300]	@ (80009e4 <HAL_ADC_MspInit+0x248>)
 80008b8:	4a4b      	ldr	r2, [pc, #300]	@ (80009e8 <HAL_ADC_MspInit+0x24c>)
 80008ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008bc:	4b49      	ldr	r3, [pc, #292]	@ (80009e4 <HAL_ADC_MspInit+0x248>)
 80008be:	2205      	movs	r2, #5
 80008c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008c2:	4b48      	ldr	r3, [pc, #288]	@ (80009e4 <HAL_ADC_MspInit+0x248>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c8:	4b46      	ldr	r3, [pc, #280]	@ (80009e4 <HAL_ADC_MspInit+0x248>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008ce:	4b45      	ldr	r3, [pc, #276]	@ (80009e4 <HAL_ADC_MspInit+0x248>)
 80008d0:	2280      	movs	r2, #128	@ 0x80
 80008d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008d4:	4b43      	ldr	r3, [pc, #268]	@ (80009e4 <HAL_ADC_MspInit+0x248>)
 80008d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008dc:	4b41      	ldr	r3, [pc, #260]	@ (80009e4 <HAL_ADC_MspInit+0x248>)
 80008de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008e2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008e4:	4b3f      	ldr	r3, [pc, #252]	@ (80009e4 <HAL_ADC_MspInit+0x248>)
 80008e6:	2220      	movs	r2, #32
 80008e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008ea:	4b3e      	ldr	r3, [pc, #248]	@ (80009e4 <HAL_ADC_MspInit+0x248>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008f0:	483c      	ldr	r0, [pc, #240]	@ (80009e4 <HAL_ADC_MspInit+0x248>)
 80008f2:	f002 fdd9 	bl	80034a8 <HAL_DMA_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 80008fc:	f000 f9c4 	bl	8000c88 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a38      	ldr	r2, [pc, #224]	@ (80009e4 <HAL_ADC_MspInit+0x248>)
 8000904:	655a      	str	r2, [r3, #84]	@ 0x54
 8000906:	4a37      	ldr	r2, [pc, #220]	@ (80009e4 <HAL_ADC_MspInit+0x248>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800090c:	e05e      	b.n	80009cc <HAL_ADC_MspInit+0x230>
  else if(adcHandle->Instance==ADC2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a36      	ldr	r2, [pc, #216]	@ (80009ec <HAL_ADC_MspInit+0x250>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d159      	bne.n	80009cc <HAL_ADC_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000918:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800091e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000922:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000924:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000928:	4618      	mov	r0, r3
 800092a:	f004 f8c7 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <HAL_ADC_MspInit+0x19c>
      Error_Handler();
 8000934:	f000 f9a8 	bl	8000c88 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000938:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <HAL_ADC_MspInit+0x238>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	4a25      	ldr	r2, [pc, #148]	@ (80009d4 <HAL_ADC_MspInit+0x238>)
 8000940:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000942:	4b24      	ldr	r3, [pc, #144]	@ (80009d4 <HAL_ADC_MspInit+0x238>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d10b      	bne.n	8000962 <HAL_ADC_MspInit+0x1c6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800094a:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094e:	4a22      	ldr	r2, [pc, #136]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 8000950:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000956:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000966:	4a1c      	ldr	r2, [pc, #112]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096e:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	4a16      	ldr	r2, [pc, #88]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000986:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <HAL_ADC_MspInit+0x23c>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000992:	230b      	movs	r3, #11
 8000994:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000996:	2303      	movs	r3, #3
 8000998:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80009a6:	4619      	mov	r1, r3
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <HAL_ADC_MspInit+0x240>)
 80009aa:	f003 f8af 	bl	8003b0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80009ae:	2301      	movs	r3, #1
 80009b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b2:	2303      	movs	r3, #3
 80009b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c8:	f003 f8a0 	bl	8003b0c <HAL_GPIO_Init>
}
 80009cc:	bf00      	nop
 80009ce:	3790      	adds	r7, #144	@ 0x90
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	2000029c 	.word	0x2000029c
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000800 	.word	0x48000800
 80009e0:	48000400 	.word	0x48000400
 80009e4:	2000023c 	.word	0x2000023c
 80009e8:	40020008 	.word	0x40020008
 80009ec:	50000100 	.word	0x50000100

080009f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009f6:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_DMA_Init+0x50>)
 80009f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009fa:	4a11      	ldr	r2, [pc, #68]	@ (8000a40 <MX_DMA_Init+0x50>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a02:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <MX_DMA_Init+0x50>)
 8000a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <MX_DMA_Init+0x50>)
 8000a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a12:	4a0b      	ldr	r2, [pc, #44]	@ (8000a40 <MX_DMA_Init+0x50>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <MX_DMA_Init+0x50>)
 8000a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	200b      	movs	r0, #11
 8000a2c:	f002 fd14 	bl	8003458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a30:	200b      	movs	r0, #11
 8000a32:	f002 fd2b 	bl	800348c <HAL_NVIC_EnableIRQ>

}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000

08000a44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	@ 0x28
 8000a48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b58 <MX_GPIO_Init+0x114>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b58 <MX_GPIO_Init+0x114>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a66:	4b3c      	ldr	r3, [pc, #240]	@ (8000b58 <MX_GPIO_Init+0x114>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a72:	4b39      	ldr	r3, [pc, #228]	@ (8000b58 <MX_GPIO_Init+0x114>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a76:	4a38      	ldr	r2, [pc, #224]	@ (8000b58 <MX_GPIO_Init+0x114>)
 8000a78:	f043 0320 	orr.w	r3, r3, #32
 8000a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a7e:	4b36      	ldr	r3, [pc, #216]	@ (8000b58 <MX_GPIO_Init+0x114>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a82:	f003 0320 	and.w	r3, r3, #32
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b33      	ldr	r3, [pc, #204]	@ (8000b58 <MX_GPIO_Init+0x114>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8e:	4a32      	ldr	r2, [pc, #200]	@ (8000b58 <MX_GPIO_Init+0x114>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a96:	4b30      	ldr	r3, [pc, #192]	@ (8000b58 <MX_GPIO_Init+0x114>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b58 <MX_GPIO_Init+0x114>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8000b58 <MX_GPIO_Init+0x114>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aae:	4b2a      	ldr	r3, [pc, #168]	@ (8000b58 <MX_GPIO_Init+0x114>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	4b27      	ldr	r3, [pc, #156]	@ (8000b58 <MX_GPIO_Init+0x114>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	4a26      	ldr	r2, [pc, #152]	@ (8000b58 <MX_GPIO_Init+0x114>)
 8000ac0:	f043 0308 	orr.w	r3, r3, #8
 8000ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac6:	4b24      	ldr	r3, [pc, #144]	@ (8000b58 <MX_GPIO_Init+0x114>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	f003 0308 	and.w	r3, r3, #8
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ada:	f003 f999 	bl	8003e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2104      	movs	r1, #4
 8000ae2:	481e      	ldr	r0, [pc, #120]	@ (8000b5c <MX_GPIO_Init+0x118>)
 8000ae4:	f003 f994 	bl	8003e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000ae8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4818      	ldr	r0, [pc, #96]	@ (8000b60 <MX_GPIO_Init+0x11c>)
 8000b00:	f003 f804 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000b04:	2320      	movs	r3, #32
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1e:	f002 fff5 	bl	8003b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000b22:	2304      	movs	r3, #4
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	4808      	ldr	r0, [pc, #32]	@ (8000b5c <MX_GPIO_Init+0x118>)
 8000b3a:	f002 ffe7 	bl	8003b0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	2028      	movs	r0, #40	@ 0x28
 8000b44:	f002 fc88 	bl	8003458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b48:	2028      	movs	r0, #40	@ 0x28
 8000b4a:	f002 fc9f 	bl	800348c <HAL_NVIC_EnableIRQ>

}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	@ 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	48000c00 	.word	0x48000c00
 8000b60:	48000800 	.word	0x48000800

08000b64 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000b6c:	1d39      	adds	r1, r7, #4
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	2201      	movs	r2, #1
 8000b74:	4803      	ldr	r0, [pc, #12]	@ (8000b84 <__io_putchar+0x20>)
 8000b76:	f005 ffc8 	bl	8006b0a <HAL_UART_Transmit>
	return ch;
 8000b7a:	687b      	ldr	r3, [r7, #4]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000388 	.word	0x20000388

08000b88 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b8c:	f001 f823 	bl	8001bd6 <HAL_Init>
	/* USER CODE BEGIN Init */
	//Start_PWM_Signals();
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b90:	f000 f81e 	bl	8000bd0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b94:	f7ff ff56 	bl	8000a44 <MX_GPIO_Init>
	MX_DMA_Init();
 8000b98:	f7ff ff2a 	bl	80009f0 <MX_DMA_Init>
	MX_ADC2_Init();
 8000b9c:	f7ff fd98 	bl	80006d0 <MX_ADC2_Init>
	MX_ADC1_Init();
 8000ba0:	f7ff fd1e 	bl	80005e0 <MX_ADC1_Init>
	MX_TIM1_Init();
 8000ba4:	f000 fa3e 	bl	8001024 <MX_TIM1_Init>
	MX_TIM3_Init();
 8000ba8:	f000 fae8 	bl	800117c <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8000bac:	f000 fc1c 	bl	80013e8 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000bb0:	f000 fc66 	bl	8001480 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	Shell_Init();
 8000bb4:	f000 fd58 	bl	8001668 <Shell_Init>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&buffer,1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4903      	ldr	r1, [pc, #12]	@ (8000bc8 <main+0x40>)
 8000bbc:	4803      	ldr	r0, [pc, #12]	@ (8000bcc <main+0x44>)
 8000bbe:	f001 fc47 	bl	8002450 <HAL_ADC_Start_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000bc2:	f000 fd91 	bl	80016e8 <Shell_Loop>
 8000bc6:	e7fc      	b.n	8000bc2 <main+0x3a>
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000164 	.word	0x20000164

08000bd0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b094      	sub	sp, #80	@ 0x50
 8000bd4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	2238      	movs	r2, #56	@ 0x38
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f008 f97b 	bl	8008eda <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f003 f948 	bl	8003e88 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c00:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c02:	2302      	movs	r3, #2
 8000c04:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c06:	2303      	movs	r3, #3
 8000c08:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000c0a:	2306      	movs	r3, #6
 8000c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000c0e:	2355      	movs	r3, #85	@ 0x55
 8000c10:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c12:	2302      	movs	r3, #2
 8000c14:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1e:	f107 0318 	add.w	r3, r7, #24
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 f9e4 	bl	8003ff0 <HAL_RCC_OscConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000c2e:	f000 f82b 	bl	8000c88 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c32:	230f      	movs	r3, #15
 8000c34:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c36:	2303      	movs	r3, #3
 8000c38:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2104      	movs	r1, #4
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f003 fce8 	bl	8004620 <HAL_RCC_ClockConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000c56:	f000 f817 	bl	8000c88 <Error_Handler>
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	3750      	adds	r7, #80	@ 0x50
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d101      	bne.n	8000c7a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c76:	f000 ffc7 	bl	8001c08 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40001000 	.word	0x40001000

08000c88 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <Error_Handler+0x8>

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb6:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_MspInit+0x44>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cca:	f003 f981 	bl	8003fd0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08c      	sub	sp, #48	@ 0x30
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cec:	4b2c      	ldr	r3, [pc, #176]	@ (8000da0 <HAL_InitTick+0xc4>)
 8000cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8000da0 <HAL_InitTick+0xc4>)
 8000cf2:	f043 0310 	orr.w	r3, r3, #16
 8000cf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cf8:	4b29      	ldr	r3, [pc, #164]	@ (8000da0 <HAL_InitTick+0xc4>)
 8000cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cfc:	f003 0310 	and.w	r3, r3, #16
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d04:	f107 020c 	add.w	r2, r7, #12
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f003 fe5c 	bl	80049cc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d14:	f003 fe2e 	bl	8004974 <HAL_RCC_GetPCLK1Freq>
 8000d18:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d1c:	4a21      	ldr	r2, [pc, #132]	@ (8000da4 <HAL_InitTick+0xc8>)
 8000d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d22:	0c9b      	lsrs	r3, r3, #18
 8000d24:	3b01      	subs	r3, #1
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d28:	4b1f      	ldr	r3, [pc, #124]	@ (8000da8 <HAL_InitTick+0xcc>)
 8000d2a:	4a20      	ldr	r2, [pc, #128]	@ (8000dac <HAL_InitTick+0xd0>)
 8000d2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000da8 <HAL_InitTick+0xcc>)
 8000d30:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d34:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d36:	4a1c      	ldr	r2, [pc, #112]	@ (8000da8 <HAL_InitTick+0xcc>)
 8000d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000da8 <HAL_InitTick+0xcc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d42:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <HAL_InitTick+0xcc>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000d48:	4817      	ldr	r0, [pc, #92]	@ (8000da8 <HAL_InitTick+0xcc>)
 8000d4a:	f004 f905 	bl	8004f58 <HAL_TIM_Base_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000d54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d11b      	bne.n	8000d94 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d5c:	4812      	ldr	r0, [pc, #72]	@ (8000da8 <HAL_InitTick+0xcc>)
 8000d5e:	f004 f95d 	bl	800501c <HAL_TIM_Base_Start_IT>
 8000d62:	4603      	mov	r3, r0
 8000d64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000d68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d111      	bne.n	8000d94 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d70:	2036      	movs	r0, #54	@ 0x36
 8000d72:	f002 fb8b 	bl	800348c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d808      	bhi.n	8000d8e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	2036      	movs	r0, #54	@ 0x36
 8000d82:	f002 fb69 	bl	8003458 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <HAL_InitTick+0xd4>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	e002      	b.n	8000d94 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3730      	adds	r7, #48	@ 0x30
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40021000 	.word	0x40021000
 8000da4:	431bde83 	.word	0x431bde83
 8000da8:	200002a0 	.word	0x200002a0
 8000dac:	40001000 	.word	0x40001000
 8000db0:	200000e4 	.word	0x200000e4

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <NMI_Handler+0x4>

08000dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <DMA1_Channel1_IRQHandler+0x10>)
 8000e1a:	f002 fd28 	bl	800386e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000023c 	.word	0x2000023c

08000e28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e2c:	4802      	ldr	r0, [pc, #8]	@ (8000e38 <USART2_IRQHandler+0x10>)
 8000e2e:	f005 ff59 	bl	8006ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000388 	.word	0x20000388

08000e3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e40:	4802      	ldr	r0, [pc, #8]	@ (8000e4c <USART3_IRQHandler+0x10>)
 8000e42:	f005 ff4f 	bl	8006ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000418 	.word	0x20000418

08000e50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000e54:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e58:	f002 fff2 	bl	8003e40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <TIM6_DAC_IRQHandler+0x10>)
 8000e66:	f004 fb57 	bl	8005518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200002a0 	.word	0x200002a0

08000e74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return 1;
 8000e78:	2301      	movs	r3, #1
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <_kill>:

int _kill(int pid, int sig)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e8e:	f008 f8cf 	bl	8009030 <__errno>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2216      	movs	r2, #22
 8000e96:	601a      	str	r2, [r3, #0]
  return -1;
 8000e98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <_exit>:

void _exit (int status)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ffe7 	bl	8000e84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000eb6:	bf00      	nop
 8000eb8:	e7fd      	b.n	8000eb6 <_exit+0x12>

08000eba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	e00a      	b.n	8000ee2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ecc:	f3af 8000 	nop.w
 8000ed0:	4601      	mov	r1, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	60ba      	str	r2, [r7, #8]
 8000ed8:	b2ca      	uxtb	r2, r1
 8000eda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	dbf0      	blt.n	8000ecc <_read+0x12>
  }

  return len;
 8000eea:	687b      	ldr	r3, [r7, #4]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	e009      	b.n	8000f1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	60ba      	str	r2, [r7, #8]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fe28 	bl	8000b64 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dbf1      	blt.n	8000f06 <_write+0x12>
  }
  return len;
 8000f22:	687b      	ldr	r3, [r7, #4]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_close>:

int _close(int file)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f54:	605a      	str	r2, [r3, #4]
  return 0;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <_isatty>:

int _isatty(int file)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f6c:	2301      	movs	r3, #1
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b085      	sub	sp, #20
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <_sbrk+0x5c>)
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <_sbrk+0x60>)
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa8:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <_sbrk+0x64>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <_sbrk+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d207      	bcs.n	8000fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc4:	f008 f834 	bl	8009030 <__errno>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	220c      	movs	r2, #12
 8000fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	e009      	b.n	8000fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fda:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <_sbrk+0x64>)
 8000fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20020000 	.word	0x20020000
 8000ff4:	00000400 	.word	0x00000400
 8000ff8:	200002ec 	.word	0x200002ec
 8000ffc:	200006c0 	.word	0x200006c0

08001000 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b098      	sub	sp, #96	@ 0x60
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001036:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]
 8001046:	615a      	str	r2, [r3, #20]
 8001048:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2234      	movs	r2, #52	@ 0x34
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f007 ff42 	bl	8008eda <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001056:	4b47      	ldr	r3, [pc, #284]	@ (8001174 <MX_TIM1_Init+0x150>)
 8001058:	4a47      	ldr	r2, [pc, #284]	@ (8001178 <MX_TIM1_Init+0x154>)
 800105a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800105c:	4b45      	ldr	r3, [pc, #276]	@ (8001174 <MX_TIM1_Init+0x150>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001062:	4b44      	ldr	r3, [pc, #272]	@ (8001174 <MX_TIM1_Init+0x150>)
 8001064:	2220      	movs	r2, #32
 8001066:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8001068:	4b42      	ldr	r3, [pc, #264]	@ (8001174 <MX_TIM1_Init+0x150>)
 800106a:	f241 0299 	movw	r2, #4249	@ 0x1099
 800106e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001070:	4b40      	ldr	r3, [pc, #256]	@ (8001174 <MX_TIM1_Init+0x150>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001076:	4b3f      	ldr	r3, [pc, #252]	@ (8001174 <MX_TIM1_Init+0x150>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107c:	4b3d      	ldr	r3, [pc, #244]	@ (8001174 <MX_TIM1_Init+0x150>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001082:	483c      	ldr	r0, [pc, #240]	@ (8001174 <MX_TIM1_Init+0x150>)
 8001084:	f004 f842 	bl	800510c <HAL_TIM_PWM_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800108e:	f7ff fdfb 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800109e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010a2:	4619      	mov	r1, r3
 80010a4:	4833      	ldr	r0, [pc, #204]	@ (8001174 <MX_TIM1_Init+0x150>)
 80010a6:	f005 fb2d 	bl	8006704 <HAL_TIMEx_MasterConfigSynchronization>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010b0:	f7ff fdea 	bl	8000c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b4:	2360      	movs	r3, #96	@ 0x60
 80010b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010bc:	2300      	movs	r3, #0
 80010be:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010c0:	2300      	movs	r3, #0
 80010c2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	4826      	ldr	r0, [pc, #152]	@ (8001174 <MX_TIM1_Init+0x150>)
 80010da:	f004 fb9d 	bl	8005818 <HAL_TIM_PWM_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010e4:	f7ff fdd0 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010ec:	2204      	movs	r2, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4820      	ldr	r0, [pc, #128]	@ (8001174 <MX_TIM1_Init+0x150>)
 80010f2:	f004 fb91 	bl	8005818 <HAL_TIM_PWM_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80010fc:	f7ff fdc4 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001100:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001104:	2208      	movs	r2, #8
 8001106:	4619      	mov	r1, r3
 8001108:	481a      	ldr	r0, [pc, #104]	@ (8001174 <MX_TIM1_Init+0x150>)
 800110a:	f004 fb85 	bl	8005818 <HAL_TIM_PWM_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001114:	f7ff fdb8 	bl	8000c88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 15;
 8001124:	230f      	movs	r3, #15
 8001126:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800112c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001130:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800113e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	4619      	mov	r1, r3
 8001154:	4807      	ldr	r0, [pc, #28]	@ (8001174 <MX_TIM1_Init+0x150>)
 8001156:	f005 fb6b 	bl	8006830 <HAL_TIMEx_ConfigBreakDeadTime>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001160:	f7ff fd92 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001164:	4803      	ldr	r0, [pc, #12]	@ (8001174 <MX_TIM1_Init+0x150>)
 8001166:	f000 f8d7 	bl	8001318 <HAL_TIM_MspPostInit>

}
 800116a:	bf00      	nop
 800116c:	3760      	adds	r7, #96	@ 0x60
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200002f0 	.word	0x200002f0
 8001178:	40012c00 	.word	0x40012c00

0800117c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800119a:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <MX_TIM3_Init+0x90>)
 800119c:	4a1c      	ldr	r2, [pc, #112]	@ (8001210 <MX_TIM3_Init+0x94>)
 800119e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <MX_TIM3_Init+0x90>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <MX_TIM3_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011ac:	4b17      	ldr	r3, [pc, #92]	@ (800120c <MX_TIM3_Init+0x90>)
 80011ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b15      	ldr	r3, [pc, #84]	@ (800120c <MX_TIM3_Init+0x90>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_TIM3_Init+0x90>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4619      	mov	r1, r3
 80011d6:	480d      	ldr	r0, [pc, #52]	@ (800120c <MX_TIM3_Init+0x90>)
 80011d8:	f005 f8c5 	bl	8006366 <HAL_TIMEx_HallSensor_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80011e2:	f7ff fd51 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80011e6:	2350      	movs	r3, #80	@ 0x50
 80011e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	@ (800120c <MX_TIM3_Init+0x90>)
 80011f4:	f005 fa86 	bl	8006704 <HAL_TIMEx_MasterConfigSynchronization>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80011fe:	f7ff fd43 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000033c 	.word	0x2000033c
 8001210:	40000400 	.word	0x40000400

08001214 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0a      	ldr	r2, [pc, #40]	@ (800124c <HAL_TIM_PWM_MspInit+0x38>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d10b      	bne.n	800123e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001226:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <HAL_TIM_PWM_MspInit+0x3c>)
 8001228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122a:	4a09      	ldr	r2, [pc, #36]	@ (8001250 <HAL_TIM_PWM_MspInit+0x3c>)
 800122c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001230:	6613      	str	r3, [r2, #96]	@ 0x60
 8001232:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <HAL_TIM_PWM_MspInit+0x3c>)
 8001234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001236:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40012c00 	.word	0x40012c00
 8001250:	40021000 	.word	0x40021000

08001254 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a26      	ldr	r2, [pc, #152]	@ (800130c <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d145      	bne.n	8001302 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001276:	4b26      	ldr	r3, [pc, #152]	@ (8001310 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127a:	4a25      	ldr	r2, [pc, #148]	@ (8001310 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6593      	str	r3, [r2, #88]	@ 0x58
 8001282:	4b23      	ldr	r3, [pc, #140]	@ (8001310 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	4a1f      	ldr	r2, [pc, #124]	@ (8001310 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129a:	4b1d      	ldr	r3, [pc, #116]	@ (8001310 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	4a19      	ldr	r2, [pc, #100]	@ (8001310 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b2:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80012be:	2350      	movs	r3, #80	@ 0x50
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012ce:	2302      	movs	r3, #2
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012dc:	f002 fc16 	bl	8003b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012f2:	2302      	movs	r3, #2
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	@ (8001314 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80012fe:	f002 fc05 	bl	8003b0c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	@ 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40000400 	.word	0x40000400
 8001310:	40021000 	.word	0x40021000
 8001314:	48000800 	.word	0x48000800

08001318 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	@ 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a29      	ldr	r2, [pc, #164]	@ (80013dc <HAL_TIM_MspPostInit+0xc4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d14b      	bne.n	80013d2 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4b29      	ldr	r3, [pc, #164]	@ (80013e0 <HAL_TIM_MspPostInit+0xc8>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	4a28      	ldr	r2, [pc, #160]	@ (80013e0 <HAL_TIM_MspPostInit+0xc8>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001346:	4b26      	ldr	r3, [pc, #152]	@ (80013e0 <HAL_TIM_MspPostInit+0xc8>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <HAL_TIM_MspPostInit+0xc8>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	4a22      	ldr	r2, [pc, #136]	@ (80013e0 <HAL_TIM_MspPostInit+0xc8>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135e:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <HAL_TIM_MspPostInit+0xc8>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800136a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800136e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800137c:	2306      	movs	r3, #6
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	4817      	ldr	r0, [pc, #92]	@ (80013e4 <HAL_TIM_MspPostInit+0xcc>)
 8001388:	f002 fbc0 	bl	8003b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 800138c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800139e:	2304      	movs	r3, #4
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	480e      	ldr	r0, [pc, #56]	@ (80013e4 <HAL_TIM_MspPostInit+0xcc>)
 80013aa:	f002 fbaf 	bl	8003b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80013ae:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80013c0:	2306      	movs	r3, #6
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ce:	f002 fb9d 	bl	8003b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	@ 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40012c00 	.word	0x40012c00
 80013e0:	40021000 	.word	0x40021000
 80013e4:	48000400 	.word	0x48000400

080013e8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013ec:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <MX_USART2_UART_Init+0x90>)
 80013ee:	4a23      	ldr	r2, [pc, #140]	@ (800147c <MX_USART2_UART_Init+0x94>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013f2:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <MX_USART2_UART_Init+0x90>)
 80013f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <MX_USART2_UART_Init+0x90>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <MX_USART2_UART_Init+0x90>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001406:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <MX_USART2_UART_Init+0x90>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_USART2_UART_Init+0x90>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <MX_USART2_UART_Init+0x90>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <MX_USART2_UART_Init+0x90>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800141e:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <MX_USART2_UART_Init+0x90>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001424:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <MX_USART2_UART_Init+0x90>)
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800142a:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <MX_USART2_UART_Init+0x90>)
 800142c:	2200      	movs	r2, #0
 800142e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001430:	4811      	ldr	r0, [pc, #68]	@ (8001478 <MX_USART2_UART_Init+0x90>)
 8001432:	f005 fb1a 	bl	8006a6a <HAL_UART_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800143c:	f7ff fc24 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001440:	2100      	movs	r1, #0
 8001442:	480d      	ldr	r0, [pc, #52]	@ (8001478 <MX_USART2_UART_Init+0x90>)
 8001444:	f007 fabd 	bl	80089c2 <HAL_UARTEx_SetTxFifoThreshold>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800144e:	f7ff fc1b 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001452:	2100      	movs	r1, #0
 8001454:	4808      	ldr	r0, [pc, #32]	@ (8001478 <MX_USART2_UART_Init+0x90>)
 8001456:	f007 faf2 	bl	8008a3e <HAL_UARTEx_SetRxFifoThreshold>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001460:	f7ff fc12 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001464:	4804      	ldr	r0, [pc, #16]	@ (8001478 <MX_USART2_UART_Init+0x90>)
 8001466:	f007 fa73 	bl	8008950 <HAL_UARTEx_DisableFifoMode>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001470:	f7ff fc0a 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000388 	.word	0x20000388
 800147c:	40004400 	.word	0x40004400

08001480 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001484:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 8001486:	4a23      	ldr	r2, [pc, #140]	@ (8001514 <MX_USART3_UART_Init+0x94>)
 8001488:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800148a:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 800148c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001490:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800149e:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b6:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014bc:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c2:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014c8:	4811      	ldr	r0, [pc, #68]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014ca:	f005 face 	bl	8006a6a <HAL_UART_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014d4:	f7ff fbd8 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d8:	2100      	movs	r1, #0
 80014da:	480d      	ldr	r0, [pc, #52]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014dc:	f007 fa71 	bl	80089c2 <HAL_UARTEx_SetTxFifoThreshold>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014e6:	f7ff fbcf 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ea:	2100      	movs	r1, #0
 80014ec:	4808      	ldr	r0, [pc, #32]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014ee:	f007 faa6 	bl	8008a3e <HAL_UARTEx_SetRxFifoThreshold>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014f8:	f7ff fbc6 	bl	8000c88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	@ (8001510 <MX_USART3_UART_Init+0x90>)
 80014fe:	f007 fa27 	bl	8008950 <HAL_UARTEx_DisableFifoMode>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001508:	f7ff fbbe 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000418 	.word	0x20000418
 8001514:	40004800 	.word	0x40004800

08001518 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b0a0      	sub	sp, #128	@ 0x80
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001530:	f107 0318 	add.w	r3, r7, #24
 8001534:	2254      	movs	r2, #84	@ 0x54
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f007 fcce 	bl	8008eda <memset>
  if(uartHandle->Instance==USART2)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a45      	ldr	r2, [pc, #276]	@ (8001658 <HAL_UART_MspInit+0x140>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d13f      	bne.n	80015c8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001548:	2302      	movs	r3, #2
 800154a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001550:	f107 0318 	add.w	r3, r7, #24
 8001554:	4618      	mov	r0, r3
 8001556:	f003 fab1 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001560:	f7ff fb92 	bl	8000c88 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001564:	4b3d      	ldr	r3, [pc, #244]	@ (800165c <HAL_UART_MspInit+0x144>)
 8001566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001568:	4a3c      	ldr	r2, [pc, #240]	@ (800165c <HAL_UART_MspInit+0x144>)
 800156a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800156e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001570:	4b3a      	ldr	r3, [pc, #232]	@ (800165c <HAL_UART_MspInit+0x144>)
 8001572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	4b37      	ldr	r3, [pc, #220]	@ (800165c <HAL_UART_MspInit+0x144>)
 800157e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001580:	4a36      	ldr	r2, [pc, #216]	@ (800165c <HAL_UART_MspInit+0x144>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001588:	4b34      	ldr	r3, [pc, #208]	@ (800165c <HAL_UART_MspInit+0x144>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001594:	230c      	movs	r3, #12
 8001596:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a4:	2307      	movs	r3, #7
 80015a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80015ac:	4619      	mov	r1, r3
 80015ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b2:	f002 faab 	bl	8003b0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	2026      	movs	r0, #38	@ 0x26
 80015bc:	f001 ff4c 	bl	8003458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015c0:	2026      	movs	r0, #38	@ 0x26
 80015c2:	f001 ff63 	bl	800348c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015c6:	e043      	b.n	8001650 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a24      	ldr	r2, [pc, #144]	@ (8001660 <HAL_UART_MspInit+0x148>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d13e      	bne.n	8001650 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015d2:	2304      	movs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015da:	f107 0318 	add.w	r3, r7, #24
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 fa6c 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80015ea:	f7ff fb4d 	bl	8000c88 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ee:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <HAL_UART_MspInit+0x144>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f2:	4a1a      	ldr	r2, [pc, #104]	@ (800165c <HAL_UART_MspInit+0x144>)
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015fa:	4b18      	ldr	r3, [pc, #96]	@ (800165c <HAL_UART_MspInit+0x144>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <HAL_UART_MspInit+0x144>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160a:	4a14      	ldr	r2, [pc, #80]	@ (800165c <HAL_UART_MspInit+0x144>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001612:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_UART_MspInit+0x144>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800161e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001622:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001630:	2307      	movs	r3, #7
 8001632:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001634:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001638:	4619      	mov	r1, r3
 800163a:	480a      	ldr	r0, [pc, #40]	@ (8001664 <HAL_UART_MspInit+0x14c>)
 800163c:	f002 fa66 	bl	8003b0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	2027      	movs	r0, #39	@ 0x27
 8001646:	f001 ff07 	bl	8003458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800164a:	2027      	movs	r0, #39	@ 0x27
 800164c:	f001 ff1e 	bl	800348c <HAL_NVIC_EnableIRQ>
}
 8001650:	bf00      	nop
 8001652:	3780      	adds	r7, #128	@ 0x80
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40004400 	.word	0x40004400
 800165c:	40021000 	.word	0x40021000
 8001660:	40004800 	.word	0x40004800
 8001664:	48000800 	.word	0x48000800

08001668 <Shell_Init>:
int 		pas = 1;
int 		delai = 100;
int 		trigger = 50; //valeur du rapport après start
int 		percentage;

void Shell_Init(void){
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS*sizeof(char*));
 800166c:	2224      	movs	r2, #36	@ 0x24
 800166e:	2100      	movs	r1, #0
 8001670:	4816      	ldr	r0, [pc, #88]	@ (80016cc <Shell_Init+0x64>)
 8001672:	f007 fc32 	bl	8008eda <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE*sizeof(char));
 8001676:	2240      	movs	r2, #64	@ 0x40
 8001678:	2100      	movs	r1, #0
 800167a:	4815      	ldr	r0, [pc, #84]	@ (80016d0 <Shell_Init+0x68>)
 800167c:	f007 fc2d 	bl	8008eda <memset>
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE*sizeof(char));
 8001680:	4b14      	ldr	r3, [pc, #80]	@ (80016d4 <Shell_Init+0x6c>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE*sizeof(char));
 8001686:	2240      	movs	r2, #64	@ 0x40
 8001688:	2100      	movs	r1, #0
 800168a:	4813      	ldr	r0, [pc, #76]	@ (80016d8 <Shell_Init+0x70>)
 800168c:	f007 fc25 	bl	8008eda <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001690:	2201      	movs	r2, #1
 8001692:	4910      	ldr	r1, [pc, #64]	@ (80016d4 <Shell_Init+0x6c>)
 8001694:	4811      	ldr	r0, [pc, #68]	@ (80016dc <Shell_Init+0x74>)
 8001696:	f005 facf 	bl	8006c38 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 800169a:	4811      	ldr	r0, [pc, #68]	@ (80016e0 <Shell_Init+0x78>)
 800169c:	f7fe fdca 	bl	8000234 <strlen>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
 80016a8:	490d      	ldr	r1, [pc, #52]	@ (80016e0 <Shell_Init+0x78>)
 80016aa:	480c      	ldr	r0, [pc, #48]	@ (80016dc <Shell_Init+0x74>)
 80016ac:	f005 fa2d 	bl	8006b0a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80016b0:	480c      	ldr	r0, [pc, #48]	@ (80016e4 <Shell_Init+0x7c>)
 80016b2:	f7fe fdbf 	bl	8000234 <strlen>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	4909      	ldr	r1, [pc, #36]	@ (80016e4 <Shell_Init+0x7c>)
 80016c0:	4806      	ldr	r0, [pc, #24]	@ (80016dc <Shell_Init+0x74>)
 80016c2:	f005 fa22 	bl	8006b0a <HAL_UART_Transmit>
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000538 	.word	0x20000538
 80016d0:	200004f4 	.word	0x200004f4
 80016d4:	200004ac 	.word	0x200004ac
 80016d8:	200004b0 	.word	0x200004b0
 80016dc:	20000388 	.word	0x20000388
 80016e0:	20000024 	.word	0x20000024
 80016e4:	20000008 	.word	0x20000008

080016e8 <Shell_Loop>:

void Shell_Loop(void){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 80016ee:	4b95      	ldr	r3, [pc, #596]	@ (8001944 <Shell_Loop+0x25c>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d05b      	beq.n	80017ae <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 80016f6:	4b94      	ldr	r3, [pc, #592]	@ (8001948 <Shell_Loop+0x260>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d034      	beq.n	8001768 <Shell_Loop+0x80>
 80016fe:	2b0d      	cmp	r3, #13
 8001700:	d142      	bne.n	8001788 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	2203      	movs	r2, #3
 8001708:	4990      	ldr	r1, [pc, #576]	@ (800194c <Shell_Loop+0x264>)
 800170a:	4891      	ldr	r0, [pc, #580]	@ (8001950 <Shell_Loop+0x268>)
 800170c:	f005 f9fd 	bl	8006b0a <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8001710:	4b90      	ldr	r3, [pc, #576]	@ (8001954 <Shell_Loop+0x26c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a90      	ldr	r2, [pc, #576]	@ (8001958 <Shell_Loop+0x270>)
 8001716:	2100      	movs	r1, #0
 8001718:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 800171a:	4b90      	ldr	r3, [pc, #576]	@ (800195c <Shell_Loop+0x274>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8001720:	498f      	ldr	r1, [pc, #572]	@ (8001960 <Shell_Loop+0x278>)
 8001722:	488d      	ldr	r0, [pc, #564]	@ (8001958 <Shell_Loop+0x270>)
 8001724:	f007 fbe2 	bl	8008eec <strtok>
 8001728:	4603      	mov	r3, r0
 800172a:	4a8e      	ldr	r2, [pc, #568]	@ (8001964 <Shell_Loop+0x27c>)
 800172c:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800172e:	e010      	b.n	8001752 <Shell_Loop+0x6a>
				argv[argc++] = token;
 8001730:	4b8a      	ldr	r3, [pc, #552]	@ (800195c <Shell_Loop+0x274>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	4989      	ldr	r1, [pc, #548]	@ (800195c <Shell_Loop+0x274>)
 8001738:	600a      	str	r2, [r1, #0]
 800173a:	4a8a      	ldr	r2, [pc, #552]	@ (8001964 <Shell_Loop+0x27c>)
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	498a      	ldr	r1, [pc, #552]	@ (8001968 <Shell_Loop+0x280>)
 8001740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001744:	4986      	ldr	r1, [pc, #536]	@ (8001960 <Shell_Loop+0x278>)
 8001746:	2000      	movs	r0, #0
 8001748:	f007 fbd0 	bl	8008eec <strtok>
 800174c:	4603      	mov	r3, r0
 800174e:	4a85      	ldr	r2, [pc, #532]	@ (8001964 <Shell_Loop+0x27c>)
 8001750:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8001752:	4b84      	ldr	r3, [pc, #528]	@ (8001964 <Shell_Loop+0x27c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1ea      	bne.n	8001730 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 800175a:	4b7e      	ldr	r3, [pc, #504]	@ (8001954 <Shell_Loop+0x26c>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8001760:	4b82      	ldr	r3, [pc, #520]	@ (800196c <Shell_Loop+0x284>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]
			break;
 8001766:	e01f      	b.n	80017a8 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8001768:	4b7a      	ldr	r3, [pc, #488]	@ (8001954 <Shell_Loop+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	1e5a      	subs	r2, r3, #1
 800176e:	4979      	ldr	r1, [pc, #484]	@ (8001954 <Shell_Loop+0x26c>)
 8001770:	600a      	str	r2, [r1, #0]
 8001772:	4a79      	ldr	r2, [pc, #484]	@ (8001958 <Shell_Loop+0x270>)
 8001774:	2100      	movs	r1, #0
 8001776:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	2204      	movs	r2, #4
 800177e:	497c      	ldr	r1, [pc, #496]	@ (8001970 <Shell_Loop+0x288>)
 8001780:	4873      	ldr	r0, [pc, #460]	@ (8001950 <Shell_Loop+0x268>)
 8001782:	f005 f9c2 	bl	8006b0a <HAL_UART_Transmit>
			break;
 8001786:	e00f      	b.n	80017a8 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001788:	4b72      	ldr	r3, [pc, #456]	@ (8001954 <Shell_Loop+0x26c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	4971      	ldr	r1, [pc, #452]	@ (8001954 <Shell_Loop+0x26c>)
 8001790:	600a      	str	r2, [r1, #0]
 8001792:	4a6d      	ldr	r2, [pc, #436]	@ (8001948 <Shell_Loop+0x260>)
 8001794:	7811      	ldrb	r1, [r2, #0]
 8001796:	4a70      	ldr	r2, [pc, #448]	@ (8001958 <Shell_Loop+0x270>)
 8001798:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	2201      	movs	r2, #1
 80017a0:	4969      	ldr	r1, [pc, #420]	@ (8001948 <Shell_Loop+0x260>)
 80017a2:	486b      	ldr	r0, [pc, #428]	@ (8001950 <Shell_Loop+0x268>)
 80017a4:	f005 f9b1 	bl	8006b0a <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 80017a8:	4b66      	ldr	r3, [pc, #408]	@ (8001944 <Shell_Loop+0x25c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 80017ae:	4b6f      	ldr	r3, [pc, #444]	@ (800196c <Shell_Loop+0x284>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 817a 	beq.w	8001aac <Shell_Loop+0x3c4>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 80017b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001968 <Shell_Loop+0x280>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	496d      	ldr	r1, [pc, #436]	@ (8001974 <Shell_Loop+0x28c>)
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fd2e 	bl	8000220 <strcmp>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d107      	bne.n	80017da <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
 80017ce:	221a      	movs	r2, #26
 80017d0:	4969      	ldr	r1, [pc, #420]	@ (8001978 <Shell_Loop+0x290>)
 80017d2:	485f      	ldr	r0, [pc, #380]	@ (8001950 <Shell_Loop+0x268>)
 80017d4:	f005 f999 	bl	8006b0a <HAL_UART_Transmit>
 80017d8:	e15e      	b.n	8001a98 <Shell_Loop+0x3b0>
		}
		else if(strcmp(argv[0],"help")==0){
 80017da:	4b63      	ldr	r3, [pc, #396]	@ (8001968 <Shell_Loop+0x280>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4967      	ldr	r1, [pc, #412]	@ (800197c <Shell_Loop+0x294>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fd1d 	bl	8000220 <strcmp>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d12c      	bne.n	8001846 <Shell_Loop+0x15e>

			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 80017ec:	4a64      	ldr	r2, [pc, #400]	@ (8001980 <Shell_Loop+0x298>)
 80017ee:	2140      	movs	r1, #64	@ 0x40
 80017f0:	4864      	ldr	r0, [pc, #400]	@ (8001984 <Shell_Loop+0x29c>)
 80017f2:	f007 fafb 	bl	8008dec <sniprintf>
 80017f6:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001800:	4960      	ldr	r1, [pc, #384]	@ (8001984 <Shell_Loop+0x29c>)
 8001802:	4853      	ldr	r0, [pc, #332]	@ (8001950 <Shell_Loop+0x268>)
 8001804:	f005 f981 	bl	8006b0a <HAL_UART_Transmit>

			for (size_t i = 0; i < nbcommand; i++) {
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e014      	b.n	8001838 <Shell_Loop+0x150>
				// Convertir l'élément du tableau en chaîne de caractères
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "%s\r\n", command[i]);
 800180e:	4a5e      	ldr	r2, [pc, #376]	@ (8001988 <Shell_Loop+0x2a0>)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001816:	4a5d      	ldr	r2, [pc, #372]	@ (800198c <Shell_Loop+0x2a4>)
 8001818:	2140      	movs	r1, #64	@ 0x40
 800181a:	485a      	ldr	r0, [pc, #360]	@ (8001984 <Shell_Loop+0x29c>)
 800181c:	f007 fae6 	bl	8008dec <sniprintf>
 8001820:	6038      	str	r0, [r7, #0]
				// Transmettre le texte via UART
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b29a      	uxth	r2, r3
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	4956      	ldr	r1, [pc, #344]	@ (8001984 <Shell_Loop+0x29c>)
 800182c:	4848      	ldr	r0, [pc, #288]	@ (8001950 <Shell_Loop+0x268>)
 800182e:	f005 f96c 	bl	8006b0a <HAL_UART_Transmit>
			for (size_t i = 0; i < nbcommand; i++) {
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	4b55      	ldr	r3, [pc, #340]	@ (8001990 <Shell_Loop+0x2a8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	4293      	cmp	r3, r2
 8001842:	d3e4      	bcc.n	800180e <Shell_Loop+0x126>
 8001844:	e128      	b.n	8001a98 <Shell_Loop+0x3b0>
			}

		}

		else if(strcmp(argv[0],"start")==0){
 8001846:	4b48      	ldr	r3, [pc, #288]	@ (8001968 <Shell_Loop+0x280>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4952      	ldr	r1, [pc, #328]	@ (8001994 <Shell_Loop+0x2ac>)
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fce7 	bl	8000220 <strcmp>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d121      	bne.n	800189c <Shell_Loop+0x1b4>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Power on\r\n");
 8001858:	4a4f      	ldr	r2, [pc, #316]	@ (8001998 <Shell_Loop+0x2b0>)
 800185a:	2140      	movs	r1, #64	@ 0x40
 800185c:	4849      	ldr	r0, [pc, #292]	@ (8001984 <Shell_Loop+0x29c>)
 800185e:	f007 fac5 	bl	8008dec <sniprintf>
 8001862:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	b29a      	uxth	r2, r3
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
 800186c:	4945      	ldr	r1, [pc, #276]	@ (8001984 <Shell_Loop+0x29c>)
 800186e:	4838      	ldr	r0, [pc, #224]	@ (8001950 <Shell_Loop+0x268>)
 8001870:	f005 f94b 	bl	8006b0a <HAL_UART_Transmit>
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001874:	2100      	movs	r1, #0
 8001876:	4849      	ldr	r0, [pc, #292]	@ (800199c <Shell_Loop+0x2b4>)
 8001878:	f003 fca0 	bl	80051bc <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800187c:	2100      	movs	r1, #0
 800187e:	4847      	ldr	r0, [pc, #284]	@ (800199c <Shell_Loop+0x2b4>)
 8001880:	f004 fe20 	bl	80064c4 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001884:	2104      	movs	r1, #4
 8001886:	4845      	ldr	r0, [pc, #276]	@ (800199c <Shell_Loop+0x2b4>)
 8001888:	f003 fc98 	bl	80051bc <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800188c:	2104      	movs	r1, #4
 800188e:	4843      	ldr	r0, [pc, #268]	@ (800199c <Shell_Loop+0x2b4>)
 8001890:	f004 fe18 	bl	80064c4 <HAL_TIMEx_PWMN_Start>
			setPWM(NULL_SPEED);
 8001894:	2032      	movs	r0, #50	@ 0x32
 8001896:	f000 f953 	bl	8001b40 <setPWM>
 800189a:	e0fd      	b.n	8001a98 <Shell_Loop+0x3b0>
		}
		else if(strcmp(argv[0],"stop")==0){
 800189c:	4b32      	ldr	r3, [pc, #200]	@ (8001968 <Shell_Loop+0x280>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	493f      	ldr	r1, [pc, #252]	@ (80019a0 <Shell_Loop+0x2b8>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fcbc 	bl	8000220 <strcmp>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f040 8082 	bne.w	80019b4 <Shell_Loop+0x2cc>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Power off\r\n");
 80018b0:	4a3c      	ldr	r2, [pc, #240]	@ (80019a4 <Shell_Loop+0x2bc>)
 80018b2:	2140      	movs	r1, #64	@ 0x40
 80018b4:	4833      	ldr	r0, [pc, #204]	@ (8001984 <Shell_Loop+0x29c>)
 80018b6:	f007 fa99 	bl	8008dec <sniprintf>
 80018ba:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295
 80018c4:	492f      	ldr	r1, [pc, #188]	@ (8001984 <Shell_Loop+0x29c>)
 80018c6:	4822      	ldr	r0, [pc, #136]	@ (8001950 <Shell_Loop+0x268>)
 80018c8:	f005 f91f 	bl	8006b0a <HAL_UART_Transmit>
			if(percentage != NULL_SPEED){
 80018cc:	4b36      	ldr	r3, [pc, #216]	@ (80019a8 <Shell_Loop+0x2c0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b32      	cmp	r3, #50	@ 0x32
 80018d2:	d026      	beq.n	8001922 <Shell_Loop+0x23a>
				while(percentage != NULL_SPEED){
 80018d4:	e021      	b.n	800191a <Shell_Loop+0x232>
					if(percentage > NULL_SPEED){
 80018d6:	4b34      	ldr	r3, [pc, #208]	@ (80019a8 <Shell_Loop+0x2c0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b32      	cmp	r3, #50	@ 0x32
 80018dc:	dd0c      	ble.n	80018f8 <Shell_Loop+0x210>
						percentage -= pas;
 80018de:	4b32      	ldr	r3, [pc, #200]	@ (80019a8 <Shell_Loop+0x2c0>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b32      	ldr	r3, [pc, #200]	@ (80019ac <Shell_Loop+0x2c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	4a2f      	ldr	r2, [pc, #188]	@ (80019a8 <Shell_Loop+0x2c0>)
 80018ea:	6013      	str	r3, [r2, #0]
						setPWM(percentage);
 80018ec:	4b2e      	ldr	r3, [pc, #184]	@ (80019a8 <Shell_Loop+0x2c0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f925 	bl	8001b40 <setPWM>
 80018f6:	e00b      	b.n	8001910 <Shell_Loop+0x228>
					}
					else{
						percentage += pas;
 80018f8:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <Shell_Loop+0x2c0>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b2b      	ldr	r3, [pc, #172]	@ (80019ac <Shell_Loop+0x2c4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4413      	add	r3, r2
 8001902:	4a29      	ldr	r2, [pc, #164]	@ (80019a8 <Shell_Loop+0x2c0>)
 8001904:	6013      	str	r3, [r2, #0]
						setPWM(percentage);
 8001906:	4b28      	ldr	r3, [pc, #160]	@ (80019a8 <Shell_Loop+0x2c0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f918 	bl	8001b40 <setPWM>
					}
					HAL_Delay(delai);
 8001910:	4b27      	ldr	r3, [pc, #156]	@ (80019b0 <Shell_Loop+0x2c8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f000 f995 	bl	8001c44 <HAL_Delay>
				while(percentage != NULL_SPEED){
 800191a:	4b23      	ldr	r3, [pc, #140]	@ (80019a8 <Shell_Loop+0x2c0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b32      	cmp	r3, #50	@ 0x32
 8001920:	d1d9      	bne.n	80018d6 <Shell_Loop+0x1ee>
				}
			}
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8001922:	2100      	movs	r1, #0
 8001924:	481d      	ldr	r0, [pc, #116]	@ (800199c <Shell_Loop+0x2b4>)
 8001926:	f003 fd5b 	bl	80053e0 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800192a:	2100      	movs	r1, #0
 800192c:	481b      	ldr	r0, [pc, #108]	@ (800199c <Shell_Loop+0x2b4>)
 800192e:	f004 fe8b 	bl	8006648 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 8001932:	2104      	movs	r1, #4
 8001934:	4819      	ldr	r0, [pc, #100]	@ (800199c <Shell_Loop+0x2b4>)
 8001936:	f003 fd53 	bl	80053e0 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800193a:	2104      	movs	r1, #4
 800193c:	4817      	ldr	r0, [pc, #92]	@ (800199c <Shell_Loop+0x2b4>)
 800193e:	f004 fe83 	bl	8006648 <HAL_TIMEx_PWMN_Stop>
 8001942:	e0a9      	b.n	8001a98 <Shell_Loop+0x3b0>
 8001944:	200004a8 	.word	0x200004a8
 8001948:	200004ac 	.word	0x200004ac
 800194c:	2000008c 	.word	0x2000008c
 8001950:	20000388 	.word	0x20000388
 8001954:	20000534 	.word	0x20000534
 8001958:	200004f4 	.word	0x200004f4
 800195c:	2000055c 	.word	0x2000055c
 8001960:	0800a074 	.word	0x0800a074
 8001964:	20000560 	.word	0x20000560
 8001968:	20000538 	.word	0x20000538
 800196c:	20000564 	.word	0x20000564
 8001970:	20000090 	.word	0x20000090
 8001974:	0800a04c 	.word	0x0800a04c
 8001978:	200000a8 	.word	0x200000a8
 800197c:	0800a078 	.word	0x0800a078
 8001980:	0800a080 	.word	0x0800a080
 8001984:	200004b0 	.word	0x200004b0
 8001988:	200000c4 	.word	0x200000c4
 800198c:	0800a0a8 	.word	0x0800a0a8
 8001990:	200000d4 	.word	0x200000d4
 8001994:	0800a05c 	.word	0x0800a05c
 8001998:	0800a0b0 	.word	0x0800a0b0
 800199c:	200002f0 	.word	0x200002f0
 80019a0:	0800a064 	.word	0x0800a064
 80019a4:	0800a0bc 	.word	0x0800a0bc
 80019a8:	20000568 	.word	0x20000568
 80019ac:	200000d8 	.word	0x200000d8
 80019b0:	200000dc 	.word	0x200000dc
		}

		else if(argc == 2 && strcmp(argv[0], "speed") == 0){
 80019b4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ab4 <Shell_Loop+0x3cc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d153      	bne.n	8001a64 <Shell_Loop+0x37c>
 80019bc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ab8 <Shell_Loop+0x3d0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	493e      	ldr	r1, [pc, #248]	@ (8001abc <Shell_Loop+0x3d4>)
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fc2c 	bl	8000220 <strcmp>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d14a      	bne.n	8001a64 <Shell_Loop+0x37c>
			percentage = atoi(argv[1]);  // Convertit l'argument en pourcentage
 80019ce:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab8 <Shell_Loop+0x3d0>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f007 f8c0 	bl	8008b58 <atoi>
 80019d8:	4603      	mov	r3, r0
 80019da:	4a39      	ldr	r2, [pc, #228]	@ (8001ac0 <Shell_Loop+0x3d8>)
 80019dc:	6013      	str	r3, [r2, #0]

			if(percentage>=0 && percentage<=100){
 80019de:	4b38      	ldr	r3, [pc, #224]	@ (8001ac0 <Shell_Loop+0x3d8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	db2f      	blt.n	8001a46 <Shell_Loop+0x35e>
 80019e6:	4b36      	ldr	r3, [pc, #216]	@ (8001ac0 <Shell_Loop+0x3d8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b64      	cmp	r3, #100	@ 0x64
 80019ec:	dc2b      	bgt.n	8001a46 <Shell_Loop+0x35e>

				while(trigger!=percentage){
 80019ee:	e023      	b.n	8001a38 <Shell_Loop+0x350>
					if(trigger>percentage){
 80019f0:	4b34      	ldr	r3, [pc, #208]	@ (8001ac4 <Shell_Loop+0x3dc>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b32      	ldr	r3, [pc, #200]	@ (8001ac0 <Shell_Loop+0x3d8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dd0c      	ble.n	8001a16 <Shell_Loop+0x32e>
						trigger -= pas;
 80019fc:	4b31      	ldr	r3, [pc, #196]	@ (8001ac4 <Shell_Loop+0x3dc>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b31      	ldr	r3, [pc, #196]	@ (8001ac8 <Shell_Loop+0x3e0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	4a2f      	ldr	r2, [pc, #188]	@ (8001ac4 <Shell_Loop+0x3dc>)
 8001a08:	6013      	str	r3, [r2, #0]
						setPWM(trigger);
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac4 <Shell_Loop+0x3dc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f896 	bl	8001b40 <setPWM>
 8001a14:	e00b      	b.n	8001a2e <Shell_Loop+0x346>
					}
					else{
						trigger += pas;
 8001a16:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac4 <Shell_Loop+0x3dc>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac8 <Shell_Loop+0x3e0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a28      	ldr	r2, [pc, #160]	@ (8001ac4 <Shell_Loop+0x3dc>)
 8001a22:	6013      	str	r3, [r2, #0]
						setPWM(trigger);
 8001a24:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <Shell_Loop+0x3dc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 f889 	bl	8001b40 <setPWM>
					}
					HAL_Delay(delai);
 8001a2e:	4b27      	ldr	r3, [pc, #156]	@ (8001acc <Shell_Loop+0x3e4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f906 	bl	8001c44 <HAL_Delay>
				while(trigger!=percentage){
 8001a38:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <Shell_Loop+0x3dc>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b20      	ldr	r3, [pc, #128]	@ (8001ac0 <Shell_Loop+0x3d8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1d5      	bne.n	80019f0 <Shell_Loop+0x308>
			if(percentage>=0 && percentage<=100){
 8001a44:	e028      	b.n	8001a98 <Shell_Loop+0x3b0>
				}
			}
			else{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Value must be between 0 and 100\r\n");
 8001a46:	4a22      	ldr	r2, [pc, #136]	@ (8001ad0 <Shell_Loop+0x3e8>)
 8001a48:	2140      	movs	r1, #64	@ 0x40
 8001a4a:	4822      	ldr	r0, [pc, #136]	@ (8001ad4 <Shell_Loop+0x3ec>)
 8001a4c:	f007 f9ce 	bl	8008dec <sniprintf>
 8001a50:	6138      	str	r0, [r7, #16]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	491e      	ldr	r1, [pc, #120]	@ (8001ad4 <Shell_Loop+0x3ec>)
 8001a5c:	481e      	ldr	r0, [pc, #120]	@ (8001ad8 <Shell_Loop+0x3f0>)
 8001a5e:	f005 f854 	bl	8006b0a <HAL_UART_Transmit>
			if(percentage>=0 && percentage<=100){
 8001a62:	e019      	b.n	8001a98 <Shell_Loop+0x3b0>
			}
		}
		else if(strcmp(argv[0],"current")==0){
 8001a64:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <Shell_Loop+0x3d0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	491c      	ldr	r1, [pc, #112]	@ (8001adc <Shell_Loop+0x3f4>)
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fbd8 	bl	8000220 <strcmp>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <Shell_Loop+0x3a2>
					HAL_UART_Transmit(&huart2, buffer, 1, HAL_MAX_DELAY);
 8001a76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <Shell_Loop+0x3f8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a80:	2201      	movs	r2, #1
 8001a82:	4815      	ldr	r0, [pc, #84]	@ (8001ad8 <Shell_Loop+0x3f0>)
 8001a84:	f005 f841 	bl	8006b0a <HAL_UART_Transmit>
 8001a88:	e006      	b.n	8001a98 <Shell_Loop+0x3b0>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8e:	2214      	movs	r2, #20
 8001a90:	4914      	ldr	r1, [pc, #80]	@ (8001ae4 <Shell_Loop+0x3fc>)
 8001a92:	4811      	ldr	r0, [pc, #68]	@ (8001ad8 <Shell_Loop+0x3f0>)
 8001a94:	f005 f839 	bl	8006b0a <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	221c      	movs	r2, #28
 8001a9e:	4912      	ldr	r1, [pc, #72]	@ (8001ae8 <Shell_Loop+0x400>)
 8001aa0:	480d      	ldr	r0, [pc, #52]	@ (8001ad8 <Shell_Loop+0x3f0>)
 8001aa2:	f005 f832 	bl	8006b0a <HAL_UART_Transmit>
		newCmdReady = 0;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <Shell_Loop+0x404>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
	}
}
 8001aac:	bf00      	nop
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	2000055c 	.word	0x2000055c
 8001ab8:	20000538 	.word	0x20000538
 8001abc:	0800a06c 	.word	0x0800a06c
 8001ac0:	20000568 	.word	0x20000568
 8001ac4:	200000e0 	.word	0x200000e0
 8001ac8:	200000d8 	.word	0x200000d8
 8001acc:	200000dc 	.word	0x200000dc
 8001ad0:	0800a0c8 	.word	0x0800a0c8
 8001ad4:	200004b0 	.word	0x200004b0
 8001ad8:	20000388 	.word	0x20000388
 8001adc:	0800a0ec 	.word	0x0800a0ec
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	20000094 	.word	0x20000094
 8001ae8:	20000008 	.word	0x20000008
 8001aec:	20000564 	.word	0x20000564

08001af0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001af8:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <HAL_UART_RxCpltCallback+0x20>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001afe:	2201      	movs	r2, #1
 8001b00:	4904      	ldr	r1, [pc, #16]	@ (8001b14 <HAL_UART_RxCpltCallback+0x24>)
 8001b02:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <HAL_UART_RxCpltCallback+0x28>)
 8001b04:	f005 f898 	bl	8006c38 <HAL_UART_Receive_IT>
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	200004a8 	.word	0x200004a8
 8001b14:	200004ac 	.word	0x200004ac
 8001b18:	20000388 	.word	0x20000388

08001b1c <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
	{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
		adc_val = buffer;
 8001b24:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <HAL_ADC_ConvCpltCallback+0x20>)
 8001b2a:	6013      	str	r3, [r2, #0]
	}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	200004f0 	.word	0x200004f0

08001b40 <setPWM>:

void setPWM(int dutycycle){
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	int val_CCR = (TIM1->ARR*dutycycle)/100;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <setPWM+0x3c>)
 8001b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	fb02 f303 	mul.w	r3, r2, r3
 8001b52:	4a0b      	ldr	r2, [pc, #44]	@ (8001b80 <setPWM+0x40>)
 8001b54:	fba2 2303 	umull	r2, r3, r2, r3
 8001b58:	095b      	lsrs	r3, r3, #5
 8001b5a:	60fb      	str	r3, [r7, #12]
	TIM1->CCR1=val_CCR;
 8001b5c:	4a07      	ldr	r2, [pc, #28]	@ (8001b7c <setPWM+0x3c>)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->CCR2=TIM1->ARR-val_CCR;
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <setPWM+0x3c>)
 8001b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4904      	ldr	r1, [pc, #16]	@ (8001b7c <setPWM+0x3c>)
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40012c00 	.word	0x40012c00
 8001b80:	51eb851f 	.word	0x51eb851f

08001b84 <Reset_Handler>:
 8001b84:	480d      	ldr	r0, [pc, #52]	@ (8001bbc <LoopForever+0x2>)
 8001b86:	4685      	mov	sp, r0
 8001b88:	480d      	ldr	r0, [pc, #52]	@ (8001bc0 <LoopForever+0x6>)
 8001b8a:	490e      	ldr	r1, [pc, #56]	@ (8001bc4 <LoopForever+0xa>)
 8001b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc8 <LoopForever+0xe>)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e002      	b.n	8001b98 <LoopCopyDataInit>

08001b92 <CopyDataInit>:
 8001b92:	58d4      	ldr	r4, [r2, r3]
 8001b94:	50c4      	str	r4, [r0, r3]
 8001b96:	3304      	adds	r3, #4

08001b98 <LoopCopyDataInit>:
 8001b98:	18c4      	adds	r4, r0, r3
 8001b9a:	428c      	cmp	r4, r1
 8001b9c:	d3f9      	bcc.n	8001b92 <CopyDataInit>
 8001b9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001bcc <LoopForever+0x12>)
 8001ba0:	4c0b      	ldr	r4, [pc, #44]	@ (8001bd0 <LoopForever+0x16>)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e001      	b.n	8001baa <LoopFillZerobss>

08001ba6 <FillZerobss>:
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	3204      	adds	r2, #4

08001baa <LoopFillZerobss>:
 8001baa:	42a2      	cmp	r2, r4
 8001bac:	d3fb      	bcc.n	8001ba6 <FillZerobss>
 8001bae:	f7ff fa27 	bl	8001000 <SystemInit>
 8001bb2:	f007 fa43 	bl	800903c <__libc_init_array>
 8001bb6:	f7fe ffe7 	bl	8000b88 <main>

08001bba <LoopForever>:
 8001bba:	e7fe      	b.n	8001bba <LoopForever>
 8001bbc:	20020000 	.word	0x20020000
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	20000148 	.word	0x20000148
 8001bc8:	0800a328 	.word	0x0800a328
 8001bcc:	20000148 	.word	0x20000148
 8001bd0:	200006bc 	.word	0x200006bc

08001bd4 <ADC1_2_IRQHandler>:
 8001bd4:	e7fe      	b.n	8001bd4 <ADC1_2_IRQHandler>

08001bd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be0:	2003      	movs	r0, #3
 8001be2:	f001 fc2e 	bl	8003442 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001be6:	200f      	movs	r0, #15
 8001be8:	f7ff f878 	bl	8000cdc <HAL_InitTick>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	71fb      	strb	r3, [r7, #7]
 8001bf6:	e001      	b.n	8001bfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bf8:	f7ff f84c 	bl	8000c94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bfc:	79fb      	ldrb	r3, [r7, #7]

}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c0c:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <HAL_IncTick+0x1c>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b05      	ldr	r3, [pc, #20]	@ (8001c28 <HAL_IncTick+0x20>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a03      	ldr	r2, [pc, #12]	@ (8001c24 <HAL_IncTick+0x1c>)
 8001c18:	6013      	str	r3, [r2, #0]
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	2000056c 	.word	0x2000056c
 8001c28:	200000e8 	.word	0x200000e8

08001c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c30:	4b03      	ldr	r3, [pc, #12]	@ (8001c40 <HAL_GetTick+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	2000056c 	.word	0x2000056c

08001c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c4c:	f7ff ffee 	bl	8001c2c <HAL_GetTick>
 8001c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d004      	beq.n	8001c68 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_Delay+0x40>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	4413      	add	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c68:	bf00      	nop
 8001c6a:	f7ff ffdf 	bl	8001c2c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d8f7      	bhi.n	8001c6a <HAL_Delay+0x26>
  {
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	200000e8 	.word	0x200000e8

08001c88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3360      	adds	r3, #96	@ 0x60
 8001d02:	461a      	mov	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <LL_ADC_SetOffset+0x44>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d28:	bf00      	nop
 8001d2a:	371c      	adds	r7, #28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	03fff000 	.word	0x03fff000

08001d38 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3360      	adds	r3, #96	@ 0x60
 8001d46:	461a      	mov	r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3360      	adds	r3, #96	@ 0x60
 8001d74:	461a      	mov	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d8e:	bf00      	nop
 8001d90:	371c      	adds	r7, #28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b087      	sub	sp, #28
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3360      	adds	r3, #96	@ 0x60
 8001daa:	461a      	mov	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001dc4:	bf00      	nop
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3360      	adds	r3, #96	@ 0x60
 8001de0:	461a      	mov	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	431a      	orrs	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001dfa:	bf00      	nop
 8001dfc:	371c      	adds	r7, #28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	615a      	str	r2, [r3, #20]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b087      	sub	sp, #28
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3330      	adds	r3, #48	@ 0x30
 8001e62:	461a      	mov	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	4413      	add	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	211f      	movs	r1, #31
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	401a      	ands	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0e9b      	lsrs	r3, r3, #26
 8001e8a:	f003 011f 	and.w	r1, r3, #31
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f003 031f 	and.w	r3, r3, #31
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e9e:	bf00      	nop
 8001ea0:	371c      	adds	r7, #28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b087      	sub	sp, #28
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3314      	adds	r3, #20
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	0e5b      	lsrs	r3, r3, #25
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	4413      	add	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	0d1b      	lsrs	r3, r3, #20
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	2107      	movs	r1, #7
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	401a      	ands	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	0d1b      	lsrs	r3, r3, #20
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ef4:	bf00      	nop
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001f4c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d10a      	bne.n	8001f2a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f20:	431a      	orrs	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001f28:	e00a      	b.n	8001f40 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f36:	43db      	mvns	r3, r3
 8001f38:	401a      	ands	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	407f0000 	.word	0x407f0000

08001f50 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 031f 	and.w	r3, r3, #31
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6093      	str	r3, [r2, #8]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fa4:	d101      	bne.n	8001faa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001fc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fcc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ff4:	d101      	bne.n	8001ffa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002018:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <LL_ADC_IsEnabled+0x18>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <LL_ADC_IsEnabled+0x1a>
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002066:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800206a:	f043 0204 	orr.w	r2, r3, #4
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b04      	cmp	r3, #4
 8002090:	d101      	bne.n	8002096 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d101      	bne.n	80020bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b089      	sub	sp, #36	@ 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020d8:	2300      	movs	r3, #0
 80020da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e1af      	b.n	8002446 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d109      	bne.n	8002108 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7fe fb51 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff3f 	bl	8001f90 <LL_ADC_IsDeepPowerDownEnabled>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d004      	beq.n	8002122 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff25 	bl	8001f6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ff5a 	bl	8001fe0 <LL_ADC_IsInternalRegulatorEnabled>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d115      	bne.n	800215e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff3e 	bl	8001fb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800213c:	4b9f      	ldr	r3, [pc, #636]	@ (80023bc <HAL_ADC_Init+0x2f0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	099b      	lsrs	r3, r3, #6
 8002142:	4a9f      	ldr	r2, [pc, #636]	@ (80023c0 <HAL_ADC_Init+0x2f4>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	099b      	lsrs	r3, r3, #6
 800214a:	3301      	adds	r3, #1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002150:	e002      	b.n	8002158 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	3b01      	subs	r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f9      	bne.n	8002152 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ff3c 	bl	8001fe0 <LL_ADC_IsInternalRegulatorEnabled>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10d      	bne.n	800218a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002172:	f043 0210 	orr.w	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff75 	bl	800207e <LL_ADC_REG_IsConversionOngoing>
 8002194:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f040 8148 	bne.w	8002434 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 8144 	bne.w	8002434 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021b4:	f043 0202 	orr.w	r2, r3, #2
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff35 	bl	8002030 <LL_ADC_IsEnabled>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d141      	bne.n	8002250 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021d4:	d004      	beq.n	80021e0 <HAL_ADC_Init+0x114>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a7a      	ldr	r2, [pc, #488]	@ (80023c4 <HAL_ADC_Init+0x2f8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d10f      	bne.n	8002200 <HAL_ADC_Init+0x134>
 80021e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021e4:	f7ff ff24 	bl	8002030 <LL_ADC_IsEnabled>
 80021e8:	4604      	mov	r4, r0
 80021ea:	4876      	ldr	r0, [pc, #472]	@ (80023c4 <HAL_ADC_Init+0x2f8>)
 80021ec:	f7ff ff20 	bl	8002030 <LL_ADC_IsEnabled>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4323      	orrs	r3, r4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf0c      	ite	eq
 80021f8:	2301      	moveq	r3, #1
 80021fa:	2300      	movne	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	e012      	b.n	8002226 <HAL_ADC_Init+0x15a>
 8002200:	4871      	ldr	r0, [pc, #452]	@ (80023c8 <HAL_ADC_Init+0x2fc>)
 8002202:	f7ff ff15 	bl	8002030 <LL_ADC_IsEnabled>
 8002206:	4604      	mov	r4, r0
 8002208:	4870      	ldr	r0, [pc, #448]	@ (80023cc <HAL_ADC_Init+0x300>)
 800220a:	f7ff ff11 	bl	8002030 <LL_ADC_IsEnabled>
 800220e:	4603      	mov	r3, r0
 8002210:	431c      	orrs	r4, r3
 8002212:	486f      	ldr	r0, [pc, #444]	@ (80023d0 <HAL_ADC_Init+0x304>)
 8002214:	f7ff ff0c 	bl	8002030 <LL_ADC_IsEnabled>
 8002218:	4603      	mov	r3, r0
 800221a:	4323      	orrs	r3, r4
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d012      	beq.n	8002250 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002232:	d004      	beq.n	800223e <HAL_ADC_Init+0x172>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a62      	ldr	r2, [pc, #392]	@ (80023c4 <HAL_ADC_Init+0x2f8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d101      	bne.n	8002242 <HAL_ADC_Init+0x176>
 800223e:	4a65      	ldr	r2, [pc, #404]	@ (80023d4 <HAL_ADC_Init+0x308>)
 8002240:	e000      	b.n	8002244 <HAL_ADC_Init+0x178>
 8002242:	4a65      	ldr	r2, [pc, #404]	@ (80023d8 <HAL_ADC_Init+0x30c>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f7ff fd1c 	bl	8001c88 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7f5b      	ldrb	r3, [r3, #29]
 8002254:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800225a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002260:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002266:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800226e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800227a:	2b01      	cmp	r3, #1
 800227c:	d106      	bne.n	800228c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002282:	3b01      	subs	r3, #1
 8002284:	045b      	lsls	r3, r3, #17
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d009      	beq.n	80022a8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002298:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	4b4b      	ldr	r3, [pc, #300]	@ (80023dc <HAL_ADC_Init+0x310>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	69b9      	ldr	r1, [r7, #24]
 80022b8:	430b      	orrs	r3, r1
 80022ba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fed1 	bl	800207e <LL_ADC_REG_IsConversionOngoing>
 80022dc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fede 	bl	80020a4 <LL_ADC_INJ_IsConversionOngoing>
 80022e8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d17f      	bne.n	80023f0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d17c      	bne.n	80023f0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022fa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002302:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002312:	f023 0302 	bic.w	r3, r3, #2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	69b9      	ldr	r1, [r7, #24]
 800231c:	430b      	orrs	r3, r1
 800231e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d017      	beq.n	8002358 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002336:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002340:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002344:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6911      	ldr	r1, [r2, #16]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	430b      	orrs	r3, r1
 8002352:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002356:	e013      	b.n	8002380 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002366:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002378:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800237c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002386:	2b01      	cmp	r3, #1
 8002388:	d12a      	bne.n	80023e0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023a0:	4311      	orrs	r1, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80023a6:	4311      	orrs	r1, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023ac:	430a      	orrs	r2, r1
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	611a      	str	r2, [r3, #16]
 80023ba:	e019      	b.n	80023f0 <HAL_ADC_Init+0x324>
 80023bc:	20000004 	.word	0x20000004
 80023c0:	053e2d63 	.word	0x053e2d63
 80023c4:	50000100 	.word	0x50000100
 80023c8:	50000400 	.word	0x50000400
 80023cc:	50000500 	.word	0x50000500
 80023d0:	50000600 	.word	0x50000600
 80023d4:	50000300 	.word	0x50000300
 80023d8:	50000700 	.word	0x50000700
 80023dc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d10c      	bne.n	8002412 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f023 010f 	bic.w	r1, r3, #15
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	1e5a      	subs	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002410:	e007      	b.n	8002422 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 020f 	bic.w	r2, r2, #15
 8002420:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002426:	f023 0303 	bic.w	r3, r3, #3
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002432:	e007      	b.n	8002444 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002438:	f043 0210 	orr.w	r2, r3, #16
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002444:	7ffb      	ldrb	r3, [r7, #31]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	@ 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd90      	pop	{r4, r7, pc}
 800244e:	bf00      	nop

08002450 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002464:	d004      	beq.n	8002470 <HAL_ADC_Start_DMA+0x20>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a5a      	ldr	r2, [pc, #360]	@ (80025d4 <HAL_ADC_Start_DMA+0x184>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_ADC_Start_DMA+0x24>
 8002470:	4b59      	ldr	r3, [pc, #356]	@ (80025d8 <HAL_ADC_Start_DMA+0x188>)
 8002472:	e000      	b.n	8002476 <HAL_ADC_Start_DMA+0x26>
 8002474:	4b59      	ldr	r3, [pc, #356]	@ (80025dc <HAL_ADC_Start_DMA+0x18c>)
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fd6a 	bl	8001f50 <LL_ADC_GetMultimode>
 800247c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fdfb 	bl	800207e <LL_ADC_REG_IsConversionOngoing>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 809b 	bne.w	80025c6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_ADC_Start_DMA+0x4e>
 800249a:	2302      	movs	r3, #2
 800249c:	e096      	b.n	80025cc <HAL_ADC_Start_DMA+0x17c>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a4d      	ldr	r2, [pc, #308]	@ (80025e0 <HAL_ADC_Start_DMA+0x190>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d008      	beq.n	80024c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	d002      	beq.n	80024c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b09      	cmp	r3, #9
 80024c0:	d17a      	bne.n	80025b8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fcec 	bl	8002ea0 <ADC_Enable>
 80024c8:	4603      	mov	r3, r0
 80024ca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d16d      	bne.n	80025ae <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a3a      	ldr	r2, [pc, #232]	@ (80025d4 <HAL_ADC_Start_DMA+0x184>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d009      	beq.n	8002504 <HAL_ADC_Start_DMA+0xb4>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a3b      	ldr	r2, [pc, #236]	@ (80025e4 <HAL_ADC_Start_DMA+0x194>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d002      	beq.n	8002500 <HAL_ADC_Start_DMA+0xb0>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	e003      	b.n	8002508 <HAL_ADC_Start_DMA+0xb8>
 8002500:	4b39      	ldr	r3, [pc, #228]	@ (80025e8 <HAL_ADC_Start_DMA+0x198>)
 8002502:	e001      	b.n	8002508 <HAL_ADC_Start_DMA+0xb8>
 8002504:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	4293      	cmp	r3, r2
 800250e:	d002      	beq.n	8002516 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002526:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d006      	beq.n	800253c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002532:	f023 0206 	bic.w	r2, r3, #6
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	661a      	str	r2, [r3, #96]	@ 0x60
 800253a:	e002      	b.n	8002542 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002546:	4a29      	ldr	r2, [pc, #164]	@ (80025ec <HAL_ADC_Start_DMA+0x19c>)
 8002548:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254e:	4a28      	ldr	r2, [pc, #160]	@ (80025f0 <HAL_ADC_Start_DMA+0x1a0>)
 8002550:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002556:	4a27      	ldr	r2, [pc, #156]	@ (80025f4 <HAL_ADC_Start_DMA+0x1a4>)
 8002558:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	221c      	movs	r2, #28
 8002560:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0210 	orr.w	r2, r2, #16
 8002578:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3340      	adds	r3, #64	@ 0x40
 8002594:	4619      	mov	r1, r3
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f001 f82d 	bl	80035f8 <HAL_DMA_Start_IT>
 800259e:	4603      	mov	r3, r0
 80025a0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fd55 	bl	8002056 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80025ac:	e00d      	b.n	80025ca <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80025b6:	e008      	b.n	80025ca <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80025c4:	e001      	b.n	80025ca <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
 80025c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80025ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	50000100 	.word	0x50000100
 80025d8:	50000300 	.word	0x50000300
 80025dc:	50000700 	.word	0x50000700
 80025e0:	50000600 	.word	0x50000600
 80025e4:	50000500 	.word	0x50000500
 80025e8:	50000400 	.word	0x50000400
 80025ec:	08002f65 	.word	0x08002f65
 80025f0:	0800303d 	.word	0x0800303d
 80025f4:	08003059 	.word	0x08003059

080025f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b0b6      	sub	sp, #216	@ 0xd8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800263a:	2b01      	cmp	r3, #1
 800263c:	d102      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x24>
 800263e:	2302      	movs	r3, #2
 8002640:	f000 bc13 	b.w	8002e6a <HAL_ADC_ConfigChannel+0x84a>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fd14 	bl	800207e <LL_ADC_REG_IsConversionOngoing>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	f040 83f3 	bne.w	8002e44 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6859      	ldr	r1, [r3, #4]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	f7ff fbf1 	bl	8001e52 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fd02 	bl	800207e <LL_ADC_REG_IsConversionOngoing>
 800267a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fd0e 	bl	80020a4 <LL_ADC_INJ_IsConversionOngoing>
 8002688:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800268c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002690:	2b00      	cmp	r3, #0
 8002692:	f040 81d9 	bne.w	8002a48 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002696:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800269a:	2b00      	cmp	r3, #0
 800269c:	f040 81d4 	bne.w	8002a48 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026a8:	d10f      	bne.n	80026ca <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2200      	movs	r2, #0
 80026b4:	4619      	mov	r1, r3
 80026b6:	f7ff fbf8 	bl	8001eaa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fb9f 	bl	8001e06 <LL_ADC_SetSamplingTimeCommonConfig>
 80026c8:	e00e      	b.n	80026e8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	461a      	mov	r2, r3
 80026d8:	f7ff fbe7 	bl	8001eaa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fb8f 	bl	8001e06 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	08db      	lsrs	r3, r3, #3
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b04      	cmp	r3, #4
 8002708:	d022      	beq.n	8002750 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6919      	ldr	r1, [r3, #16]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800271a:	f7ff fae9 	bl	8001cf0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6919      	ldr	r1, [r3, #16]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	461a      	mov	r2, r3
 800272c:	f7ff fb35 	bl	8001d9a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	6919      	ldr	r1, [r3, #16]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	7f1b      	ldrb	r3, [r3, #28]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d102      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x126>
 8002740:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002744:	e000      	b.n	8002748 <HAL_ADC_ConfigChannel+0x128>
 8002746:	2300      	movs	r3, #0
 8002748:	461a      	mov	r2, r3
 800274a:	f7ff fb41 	bl	8001dd0 <LL_ADC_SetOffsetSaturation>
 800274e:	e17b      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff faee 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 800275c:	4603      	mov	r3, r0
 800275e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10a      	bne.n	800277c <HAL_ADC_ConfigChannel+0x15c>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fae3 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 8002772:	4603      	mov	r3, r0
 8002774:	0e9b      	lsrs	r3, r3, #26
 8002776:	f003 021f 	and.w	r2, r3, #31
 800277a:	e01e      	b.n	80027ba <HAL_ADC_ConfigChannel+0x19a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fad8 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800279a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800279e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80027aa:	2320      	movs	r3, #32
 80027ac:	e004      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80027ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d105      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x1b2>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	0e9b      	lsrs	r3, r3, #26
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	e018      	b.n	8002804 <HAL_ADC_ConfigChannel+0x1e4>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80027e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80027ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80027f6:	2320      	movs	r3, #32
 80027f8:	e004      	b.n	8002804 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80027fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002804:	429a      	cmp	r2, r3
 8002806:	d106      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2200      	movs	r2, #0
 800280e:	2100      	movs	r1, #0
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff faa7 	bl	8001d64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2101      	movs	r1, #1
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fa8b 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 8002822:	4603      	mov	r3, r0
 8002824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10a      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x222>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2101      	movs	r1, #1
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fa80 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 8002838:	4603      	mov	r3, r0
 800283a:	0e9b      	lsrs	r3, r3, #26
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	e01e      	b.n	8002880 <HAL_ADC_ConfigChannel+0x260>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2101      	movs	r1, #1
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fa75 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002860:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002864:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002868:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002870:	2320      	movs	r3, #32
 8002872:	e004      	b.n	800287e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002874:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002878:	fab3 f383 	clz	r3, r3
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x278>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	0e9b      	lsrs	r3, r3, #26
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	e018      	b.n	80028ca <HAL_ADC_ConfigChannel+0x2aa>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028a4:	fa93 f3a3 	rbit	r3, r3
 80028a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80028ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80028b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80028bc:	2320      	movs	r3, #32
 80028be:	e004      	b.n	80028ca <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80028c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d106      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2200      	movs	r2, #0
 80028d4:	2101      	movs	r1, #1
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fa44 	bl	8001d64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2102      	movs	r1, #2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fa28 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10a      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x2e8>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2102      	movs	r1, #2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fa1d 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 80028fe:	4603      	mov	r3, r0
 8002900:	0e9b      	lsrs	r3, r3, #26
 8002902:	f003 021f 	and.w	r2, r3, #31
 8002906:	e01e      	b.n	8002946 <HAL_ADC_ConfigChannel+0x326>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2102      	movs	r1, #2
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fa12 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 8002914:	4603      	mov	r3, r0
 8002916:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002926:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800292a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800292e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002936:	2320      	movs	r3, #32
 8002938:	e004      	b.n	8002944 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800293a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294e:	2b00      	cmp	r3, #0
 8002950:	d105      	bne.n	800295e <HAL_ADC_ConfigChannel+0x33e>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	0e9b      	lsrs	r3, r3, #26
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	e016      	b.n	800298c <HAL_ADC_ConfigChannel+0x36c>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002970:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002972:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002976:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800297e:	2320      	movs	r3, #32
 8002980:	e004      	b.n	800298c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002982:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800298c:	429a      	cmp	r2, r3
 800298e:	d106      	bne.n	800299e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2200      	movs	r2, #0
 8002996:	2102      	movs	r1, #2
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff f9e3 	bl	8001d64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2103      	movs	r1, #3
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff f9c7 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x3aa>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2103      	movs	r1, #3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff f9bc 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 80029c0:	4603      	mov	r3, r0
 80029c2:	0e9b      	lsrs	r3, r3, #26
 80029c4:	f003 021f 	and.w	r2, r3, #31
 80029c8:	e017      	b.n	80029fa <HAL_ADC_ConfigChannel+0x3da>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2103      	movs	r1, #3
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff f9b1 	bl	8001d38 <LL_ADC_GetOffsetChannel>
 80029d6:	4603      	mov	r3, r0
 80029d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80029e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029e4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80029e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e003      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80029f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d105      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x3f2>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	0e9b      	lsrs	r3, r3, #26
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	e011      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x416>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a22:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	e003      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002a2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d106      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2103      	movs	r1, #3
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff f98e 	bl	8001d64 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff faef 	bl	8002030 <LL_ADC_IsEnabled>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f040 813d 	bne.w	8002cd4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	6819      	ldr	r1, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f7ff fa4a 	bl	8001f00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4aa2      	ldr	r2, [pc, #648]	@ (8002cfc <HAL_ADC_ConfigChannel+0x6dc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	f040 812e 	bne.w	8002cd4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10b      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x480>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	0e9b      	lsrs	r3, r3, #26
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	2b09      	cmp	r3, #9
 8002a96:	bf94      	ite	ls
 8002a98:	2301      	movls	r3, #1
 8002a9a:	2300      	movhi	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e019      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x4b4>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aa8:	fa93 f3a3 	rbit	r3, r3
 8002aac:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002aae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ab0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002ab8:	2320      	movs	r3, #32
 8002aba:	e003      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002abc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	2b09      	cmp	r3, #9
 8002acc:	bf94      	ite	ls
 8002ace:	2301      	movls	r3, #1
 8002ad0:	2300      	movhi	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d079      	beq.n	8002bcc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d107      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x4d4>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	0e9b      	lsrs	r3, r3, #26
 8002aea:	3301      	adds	r3, #1
 8002aec:	069b      	lsls	r3, r3, #26
 8002aee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002af2:	e015      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x500>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b04:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	e003      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	069b      	lsls	r3, r3, #26
 8002b1c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d109      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x520>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	0e9b      	lsrs	r3, r3, #26
 8002b32:	3301      	adds	r3, #1
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	2101      	movs	r1, #1
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	e017      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x550>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b50:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002b58:	2320      	movs	r3, #32
 8002b5a:	e003      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002b5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	f003 031f 	and.w	r3, r3, #31
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b70:	ea42 0103 	orr.w	r1, r2, r3
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x576>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	0e9b      	lsrs	r3, r3, #26
 8002b86:	3301      	adds	r3, #1
 8002b88:	f003 021f 	and.w	r2, r3, #31
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	051b      	lsls	r3, r3, #20
 8002b94:	e018      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x5a8>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002bae:	2320      	movs	r3, #32
 8002bb0:	e003      	b.n	8002bba <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	e07e      	b.n	8002cca <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x5c8>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	3301      	adds	r3, #1
 8002be0:	069b      	lsls	r3, r3, #26
 8002be2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002be6:	e015      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x5f4>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e003      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	069b      	lsls	r3, r3, #26
 8002c10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x614>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	0e9b      	lsrs	r3, r3, #26
 8002c26:	3301      	adds	r3, #1
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	e017      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x644>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	61fb      	str	r3, [r7, #28]
  return result;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	e003      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	2101      	movs	r1, #1
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	ea42 0103 	orr.w	r1, r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10d      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x670>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	3b1e      	subs	r3, #30
 8002c88:	051b      	lsls	r3, r3, #20
 8002c8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c8e:	e01b      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x6a8>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	613b      	str	r3, [r7, #16]
  return result;
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002ca8:	2320      	movs	r3, #32
 8002caa:	e003      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f003 021f 	and.w	r2, r3, #31
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3b1e      	subs	r3, #30
 8002cc2:	051b      	lsls	r3, r3, #20
 8002cc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	6892      	ldr	r2, [r2, #8]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f7ff f8eb 	bl	8001eaa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <HAL_ADC_ConfigChannel+0x6e0>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80be 	beq.w	8002e5e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cea:	d004      	beq.n	8002cf6 <HAL_ADC_ConfigChannel+0x6d6>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a04      	ldr	r2, [pc, #16]	@ (8002d04 <HAL_ADC_ConfigChannel+0x6e4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d10a      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x6ec>
 8002cf6:	4b04      	ldr	r3, [pc, #16]	@ (8002d08 <HAL_ADC_ConfigChannel+0x6e8>)
 8002cf8:	e009      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x6ee>
 8002cfa:	bf00      	nop
 8002cfc:	407f0000 	.word	0x407f0000
 8002d00:	80080000 	.word	0x80080000
 8002d04:	50000100 	.word	0x50000100
 8002d08:	50000300 	.word	0x50000300
 8002d0c:	4b59      	ldr	r3, [pc, #356]	@ (8002e74 <HAL_ADC_ConfigChannel+0x854>)
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe ffe0 	bl	8001cd4 <LL_ADC_GetCommonPathInternalCh>
 8002d14:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a56      	ldr	r2, [pc, #344]	@ (8002e78 <HAL_ADC_ConfigChannel+0x858>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d004      	beq.n	8002d2c <HAL_ADC_ConfigChannel+0x70c>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a55      	ldr	r2, [pc, #340]	@ (8002e7c <HAL_ADC_ConfigChannel+0x85c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d13a      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d134      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d40:	d005      	beq.n	8002d4e <HAL_ADC_ConfigChannel+0x72e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a4e      	ldr	r2, [pc, #312]	@ (8002e80 <HAL_ADC_ConfigChannel+0x860>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	f040 8085 	bne.w	8002e58 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d56:	d004      	beq.n	8002d62 <HAL_ADC_ConfigChannel+0x742>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a49      	ldr	r2, [pc, #292]	@ (8002e84 <HAL_ADC_ConfigChannel+0x864>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x746>
 8002d62:	4a49      	ldr	r2, [pc, #292]	@ (8002e88 <HAL_ADC_ConfigChannel+0x868>)
 8002d64:	e000      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x748>
 8002d66:	4a43      	ldr	r2, [pc, #268]	@ (8002e74 <HAL_ADC_ConfigChannel+0x854>)
 8002d68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d70:	4619      	mov	r1, r3
 8002d72:	4610      	mov	r0, r2
 8002d74:	f7fe ff9b 	bl	8001cae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d78:	4b44      	ldr	r3, [pc, #272]	@ (8002e8c <HAL_ADC_ConfigChannel+0x86c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	099b      	lsrs	r3, r3, #6
 8002d7e:	4a44      	ldr	r2, [pc, #272]	@ (8002e90 <HAL_ADC_ConfigChannel+0x870>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d92:	e002      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f9      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002da0:	e05a      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a3b      	ldr	r2, [pc, #236]	@ (8002e94 <HAL_ADC_ConfigChannel+0x874>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d125      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x7d8>
 8002dac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002db0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d11f      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a31      	ldr	r2, [pc, #196]	@ (8002e84 <HAL_ADC_ConfigChannel+0x864>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d104      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x7ac>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a34      	ldr	r2, [pc, #208]	@ (8002e98 <HAL_ADC_ConfigChannel+0x878>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d047      	beq.n	8002e5c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dd4:	d004      	beq.n	8002de0 <HAL_ADC_ConfigChannel+0x7c0>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a2a      	ldr	r2, [pc, #168]	@ (8002e84 <HAL_ADC_ConfigChannel+0x864>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d101      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x7c4>
 8002de0:	4a29      	ldr	r2, [pc, #164]	@ (8002e88 <HAL_ADC_ConfigChannel+0x868>)
 8002de2:	e000      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x7c6>
 8002de4:	4a23      	ldr	r2, [pc, #140]	@ (8002e74 <HAL_ADC_ConfigChannel+0x854>)
 8002de6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dee:	4619      	mov	r1, r3
 8002df0:	4610      	mov	r0, r2
 8002df2:	f7fe ff5c 	bl	8001cae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002df6:	e031      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a27      	ldr	r2, [pc, #156]	@ (8002e9c <HAL_ADC_ConfigChannel+0x87c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d12d      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d127      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1c      	ldr	r2, [pc, #112]	@ (8002e84 <HAL_ADC_ConfigChannel+0x864>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d022      	beq.n	8002e5e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e20:	d004      	beq.n	8002e2c <HAL_ADC_ConfigChannel+0x80c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a17      	ldr	r2, [pc, #92]	@ (8002e84 <HAL_ADC_ConfigChannel+0x864>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x810>
 8002e2c:	4a16      	ldr	r2, [pc, #88]	@ (8002e88 <HAL_ADC_ConfigChannel+0x868>)
 8002e2e:	e000      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x812>
 8002e30:	4a10      	ldr	r2, [pc, #64]	@ (8002e74 <HAL_ADC_ConfigChannel+0x854>)
 8002e32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	f7fe ff36 	bl	8001cae <LL_ADC_SetCommonPathInternalCh>
 8002e42:	e00c      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e48:	f043 0220 	orr.w	r2, r3, #32
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002e56:	e002      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e58:	bf00      	nop
 8002e5a:	e000      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e66:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	37d8      	adds	r7, #216	@ 0xd8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	50000700 	.word	0x50000700
 8002e78:	c3210000 	.word	0xc3210000
 8002e7c:	90c00010 	.word	0x90c00010
 8002e80:	50000600 	.word	0x50000600
 8002e84:	50000100 	.word	0x50000100
 8002e88:	50000300 	.word	0x50000300
 8002e8c:	20000004 	.word	0x20000004
 8002e90:	053e2d63 	.word	0x053e2d63
 8002e94:	c7520000 	.word	0xc7520000
 8002e98:	50000500 	.word	0x50000500
 8002e9c:	cb840000 	.word	0xcb840000

08002ea0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff f8bf 	bl	8002030 <LL_ADC_IsEnabled>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d14d      	bne.n	8002f54 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	4b28      	ldr	r3, [pc, #160]	@ (8002f60 <ADC_Enable+0xc0>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00d      	beq.n	8002ee2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eca:	f043 0210 	orr.w	r2, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed6:	f043 0201 	orr.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e039      	b.n	8002f56 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff f88e 	bl	8002008 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002eec:	f7fe fe9e 	bl	8001c2c <HAL_GetTick>
 8002ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ef2:	e028      	b.n	8002f46 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff f899 	bl	8002030 <LL_ADC_IsEnabled>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d104      	bne.n	8002f0e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff f87d 	bl	8002008 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f0e:	f7fe fe8d 	bl	8001c2c <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d914      	bls.n	8002f46 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d00d      	beq.n	8002f46 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2e:	f043 0210 	orr.w	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e007      	b.n	8002f56 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d1cf      	bne.n	8002ef4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	8000003f 	.word	0x8000003f

08002f64 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f76:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d14b      	bne.n	8003016 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f82:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d021      	beq.n	8002fdc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fe ff45 	bl	8001e2c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d032      	beq.n	800300e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d12b      	bne.n	800300e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d11f      	bne.n	800300e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd2:	f043 0201 	orr.w	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fda:	e018      	b.n	800300e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d111      	bne.n	800300e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d105      	bne.n	800300e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003006:	f043 0201 	orr.w	r2, r3, #1
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7fe fd84 	bl	8001b1c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003014:	e00e      	b.n	8003034 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f7ff faf2 	bl	800260c <HAL_ADC_ErrorCallback>
}
 8003028:	e004      	b.n	8003034 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	4798      	blx	r3
}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003048:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f7ff fad4 	bl	80025f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003050:	bf00      	nop
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003064:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003076:	f043 0204 	orr.w	r2, r3, #4
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f7ff fac4 	bl	800260c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <LL_ADC_IsEnabled>:
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <LL_ADC_IsEnabled+0x18>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <LL_ADC_IsEnabled+0x1a>
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d101      	bne.n	80030ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b0a1      	sub	sp, #132	@ 0x84
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e0e7      	b.n	80032c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80030fe:	2300      	movs	r3, #0
 8003100:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003102:	2300      	movs	r3, #0
 8003104:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800310e:	d102      	bne.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003110:	4b6f      	ldr	r3, [pc, #444]	@ (80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	e009      	b.n	800312a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a6e      	ldr	r2, [pc, #440]	@ (80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d102      	bne.n	8003126 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003120:	4b6d      	ldr	r3, [pc, #436]	@ (80032d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	e001      	b.n	800312a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10b      	bne.n	8003148 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0be      	b.n	80032c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff ffb1 	bl	80030b2 <LL_ADC_REG_IsConversionOngoing>
 8003150:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff ffab 	bl	80030b2 <LL_ADC_REG_IsConversionOngoing>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 80a0 	bne.w	80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003164:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003166:	2b00      	cmp	r3, #0
 8003168:	f040 809c 	bne.w	80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003174:	d004      	beq.n	8003180 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a55      	ldr	r2, [pc, #340]	@ (80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d101      	bne.n	8003184 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003180:	4b56      	ldr	r3, [pc, #344]	@ (80032dc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003182:	e000      	b.n	8003186 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003184:	4b56      	ldr	r3, [pc, #344]	@ (80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003186:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d04b      	beq.n	8003228 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003190:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6859      	ldr	r1, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031a2:	035b      	lsls	r3, r3, #13
 80031a4:	430b      	orrs	r3, r1
 80031a6:	431a      	orrs	r2, r3
 80031a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031b4:	d004      	beq.n	80031c0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a45      	ldr	r2, [pc, #276]	@ (80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d10f      	bne.n	80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80031c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80031c4:	f7ff ff62 	bl	800308c <LL_ADC_IsEnabled>
 80031c8:	4604      	mov	r4, r0
 80031ca:	4841      	ldr	r0, [pc, #260]	@ (80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031cc:	f7ff ff5e 	bl	800308c <LL_ADC_IsEnabled>
 80031d0:	4603      	mov	r3, r0
 80031d2:	4323      	orrs	r3, r4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	e012      	b.n	8003206 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80031e0:	483c      	ldr	r0, [pc, #240]	@ (80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80031e2:	f7ff ff53 	bl	800308c <LL_ADC_IsEnabled>
 80031e6:	4604      	mov	r4, r0
 80031e8:	483b      	ldr	r0, [pc, #236]	@ (80032d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80031ea:	f7ff ff4f 	bl	800308c <LL_ADC_IsEnabled>
 80031ee:	4603      	mov	r3, r0
 80031f0:	431c      	orrs	r4, r3
 80031f2:	483c      	ldr	r0, [pc, #240]	@ (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80031f4:	f7ff ff4a 	bl	800308c <LL_ADC_IsEnabled>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4323      	orrs	r3, r4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d056      	beq.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800320a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003212:	f023 030f 	bic.w	r3, r3, #15
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	6811      	ldr	r1, [r2, #0]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	6892      	ldr	r2, [r2, #8]
 800321e:	430a      	orrs	r2, r1
 8003220:	431a      	orrs	r2, r3
 8003222:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003224:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003226:	e047      	b.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003228:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003230:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003232:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800323c:	d004      	beq.n	8003248 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a23      	ldr	r2, [pc, #140]	@ (80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d10f      	bne.n	8003268 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003248:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800324c:	f7ff ff1e 	bl	800308c <LL_ADC_IsEnabled>
 8003250:	4604      	mov	r4, r0
 8003252:	481f      	ldr	r0, [pc, #124]	@ (80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003254:	f7ff ff1a 	bl	800308c <LL_ADC_IsEnabled>
 8003258:	4603      	mov	r3, r0
 800325a:	4323      	orrs	r3, r4
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e012      	b.n	800328e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003268:	481a      	ldr	r0, [pc, #104]	@ (80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800326a:	f7ff ff0f 	bl	800308c <LL_ADC_IsEnabled>
 800326e:	4604      	mov	r4, r0
 8003270:	4819      	ldr	r0, [pc, #100]	@ (80032d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003272:	f7ff ff0b 	bl	800308c <LL_ADC_IsEnabled>
 8003276:	4603      	mov	r3, r0
 8003278:	431c      	orrs	r4, r3
 800327a:	481a      	ldr	r0, [pc, #104]	@ (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800327c:	f7ff ff06 	bl	800308c <LL_ADC_IsEnabled>
 8003280:	4603      	mov	r3, r0
 8003282:	4323      	orrs	r3, r4
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d012      	beq.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003292:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800329a:	f023 030f 	bic.w	r3, r3, #15
 800329e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80032a0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032a2:	e009      	b.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a8:	f043 0220 	orr.w	r2, r3, #32
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80032b6:	e000      	b.n	80032ba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80032c2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3784      	adds	r7, #132	@ 0x84
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd90      	pop	{r4, r7, pc}
 80032ce:	bf00      	nop
 80032d0:	50000100 	.word	0x50000100
 80032d4:	50000400 	.word	0x50000400
 80032d8:	50000500 	.word	0x50000500
 80032dc:	50000300 	.word	0x50000300
 80032e0:	50000700 	.word	0x50000700
 80032e4:	50000600 	.word	0x50000600

080032e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f8:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <__NVIC_SetPriorityGrouping+0x44>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003304:	4013      	ands	r3, r2
 8003306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003310:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331a:	4a04      	ldr	r2, [pc, #16]	@ (800332c <__NVIC_SetPriorityGrouping+0x44>)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	60d3      	str	r3, [r2, #12]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003334:	4b04      	ldr	r3, [pc, #16]	@ (8003348 <__NVIC_GetPriorityGrouping+0x18>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	0a1b      	lsrs	r3, r3, #8
 800333a:	f003 0307 	and.w	r3, r3, #7
}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	2b00      	cmp	r3, #0
 800335c:	db0b      	blt.n	8003376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	f003 021f 	and.w	r2, r3, #31
 8003364:	4907      	ldr	r1, [pc, #28]	@ (8003384 <__NVIC_EnableIRQ+0x38>)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	2001      	movs	r0, #1
 800336e:	fa00 f202 	lsl.w	r2, r0, r2
 8003372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000e100 	.word	0xe000e100

08003388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	6039      	str	r1, [r7, #0]
 8003392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003398:	2b00      	cmp	r3, #0
 800339a:	db0a      	blt.n	80033b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	490c      	ldr	r1, [pc, #48]	@ (80033d4 <__NVIC_SetPriority+0x4c>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	0112      	lsls	r2, r2, #4
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	440b      	add	r3, r1
 80033ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b0:	e00a      	b.n	80033c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	4908      	ldr	r1, [pc, #32]	@ (80033d8 <__NVIC_SetPriority+0x50>)
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	3b04      	subs	r3, #4
 80033c0:	0112      	lsls	r2, r2, #4
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	440b      	add	r3, r1
 80033c6:	761a      	strb	r2, [r3, #24]
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000e100 	.word	0xe000e100
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033dc:	b480      	push	{r7}
 80033de:	b089      	sub	sp, #36	@ 0x24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f1c3 0307 	rsb	r3, r3, #7
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	bf28      	it	cs
 80033fa:	2304      	movcs	r3, #4
 80033fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3304      	adds	r3, #4
 8003402:	2b06      	cmp	r3, #6
 8003404:	d902      	bls.n	800340c <NVIC_EncodePriority+0x30>
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3b03      	subs	r3, #3
 800340a:	e000      	b.n	800340e <NVIC_EncodePriority+0x32>
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003410:	f04f 32ff 	mov.w	r2, #4294967295
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43da      	mvns	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	401a      	ands	r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003424:	f04f 31ff 	mov.w	r1, #4294967295
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	fa01 f303 	lsl.w	r3, r1, r3
 800342e:	43d9      	mvns	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003434:	4313      	orrs	r3, r2
         );
}
 8003436:	4618      	mov	r0, r3
 8003438:	3724      	adds	r7, #36	@ 0x24
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b082      	sub	sp, #8
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff ff4c 	bl	80032e8 <__NVIC_SetPriorityGrouping>
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003466:	f7ff ff63 	bl	8003330 <__NVIC_GetPriorityGrouping>
 800346a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	68b9      	ldr	r1, [r7, #8]
 8003470:	6978      	ldr	r0, [r7, #20]
 8003472:	f7ff ffb3 	bl	80033dc <NVIC_EncodePriority>
 8003476:	4602      	mov	r2, r0
 8003478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800347c:	4611      	mov	r1, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff ff82 	bl	8003388 <__NVIC_SetPriority>
}
 8003484:	bf00      	nop
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff ff56 	bl	800334c <__NVIC_EnableIRQ>
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e08d      	b.n	80035d6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	4b47      	ldr	r3, [pc, #284]	@ (80035e0 <HAL_DMA_Init+0x138>)
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d80f      	bhi.n	80034e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	4b45      	ldr	r3, [pc, #276]	@ (80035e4 <HAL_DMA_Init+0x13c>)
 80034ce:	4413      	add	r3, r2
 80034d0:	4a45      	ldr	r2, [pc, #276]	@ (80035e8 <HAL_DMA_Init+0x140>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	091b      	lsrs	r3, r3, #4
 80034d8:	009a      	lsls	r2, r3, #2
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a42      	ldr	r2, [pc, #264]	@ (80035ec <HAL_DMA_Init+0x144>)
 80034e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80034e4:	e00e      	b.n	8003504 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	4b40      	ldr	r3, [pc, #256]	@ (80035f0 <HAL_DMA_Init+0x148>)
 80034ee:	4413      	add	r3, r2
 80034f0:	4a3d      	ldr	r2, [pc, #244]	@ (80035e8 <HAL_DMA_Init+0x140>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	009a      	lsls	r2, r3, #2
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a3c      	ldr	r2, [pc, #240]	@ (80035f4 <HAL_DMA_Init+0x14c>)
 8003502:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800351a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800351e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003528:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003534:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003540:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fa76 	bl	8003a48 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003564:	d102      	bne.n	800356c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003580:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d010      	beq.n	80035ac <HAL_DMA_Init+0x104>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b04      	cmp	r3, #4
 8003590:	d80c      	bhi.n	80035ac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fa96 	bl	8003ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	e008      	b.n	80035be <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40020407 	.word	0x40020407
 80035e4:	bffdfff8 	.word	0xbffdfff8
 80035e8:	cccccccd 	.word	0xcccccccd
 80035ec:	40020000 	.word	0x40020000
 80035f0:	bffdfbf8 	.word	0xbffdfbf8
 80035f4:	40020400 	.word	0x40020400

080035f8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_DMA_Start_IT+0x20>
 8003614:	2302      	movs	r3, #2
 8003616:	e066      	b.n	80036e6 <HAL_DMA_Start_IT+0xee>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d155      	bne.n	80036d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0201 	bic.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f9bb 	bl	80039cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 020e 	orr.w	r2, r2, #14
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e00f      	b.n	8003690 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0204 	bic.w	r2, r2, #4
 800367e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 020a 	orr.w	r2, r2, #10
 800368e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0201 	orr.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	e005      	b.n	80036e4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80036e0:	2302      	movs	r3, #2
 80036e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b085      	sub	sp, #20
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d005      	beq.n	8003712 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2204      	movs	r2, #4
 800370a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
 8003710:	e037      	b.n	8003782 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 020e 	bic.w	r2, r2, #14
 8003720:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800372c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003730:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0201 	bic.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	f003 021f 	and.w	r2, r3, #31
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	2101      	movs	r1, #1
 8003750:	fa01 f202 	lsl.w	r2, r1, r2
 8003754:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800375e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00c      	beq.n	8003782 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003772:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003776:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003780:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003792:	7bfb      	ldrb	r3, [r7, #15]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d00d      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2204      	movs	r2, #4
 80037bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
 80037d2:	e047      	b.n	8003864 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 020e 	bic.w	r2, r2, #14
 80037e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003802:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003808:	f003 021f 	and.w	r2, r3, #31
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	2101      	movs	r1, #1
 8003812:	fa01 f202 	lsl.w	r2, r1, r2
 8003816:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003820:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003834:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003838:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003842:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4798      	blx	r3
    }
  }
  return status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	2204      	movs	r2, #4
 8003890:	409a      	lsls	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d026      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x7a>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d021      	beq.n	80038e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d107      	bne.n	80038c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0204 	bic.w	r2, r2, #4
 80038c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c6:	f003 021f 	and.w	r2, r3, #31
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	2104      	movs	r1, #4
 80038d0:	fa01 f202 	lsl.w	r2, r1, r2
 80038d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d071      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80038e6:	e06c      	b.n	80039c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	2202      	movs	r2, #2
 80038f2:	409a      	lsls	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d02e      	beq.n	800395a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d029      	beq.n	800395a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10b      	bne.n	800392c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 020a 	bic.w	r2, r2, #10
 8003922:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003930:	f003 021f 	and.w	r2, r3, #31
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	2102      	movs	r1, #2
 800393a:	fa01 f202 	lsl.w	r2, r1, r2
 800393e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394c:	2b00      	cmp	r3, #0
 800394e:	d038      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003958:	e033      	b.n	80039c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	2208      	movs	r2, #8
 8003964:	409a      	lsls	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4013      	ands	r3, r2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d02a      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d025      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 020e 	bic.w	r2, r2, #14
 8003986:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398c:	f003 021f 	and.w	r2, r3, #31
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003994:	2101      	movs	r1, #1
 8003996:	fa01 f202 	lsl.w	r2, r1, r2
 800399a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d004      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039c2:	bf00      	nop
 80039c4:	bf00      	nop
}
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039e2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d004      	beq.n	80039f6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039f4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fa:	f003 021f 	and.w	r2, r3, #31
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	2101      	movs	r1, #1
 8003a04:	fa01 f202 	lsl.w	r2, r1, r2
 8003a08:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b10      	cmp	r3, #16
 8003a18:	d108      	bne.n	8003a2c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a2a:	e007      	b.n	8003a3c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	60da      	str	r2, [r3, #12]
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	4b16      	ldr	r3, [pc, #88]	@ (8003ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d802      	bhi.n	8003a62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003a5c:	4b15      	ldr	r3, [pc, #84]	@ (8003ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	e001      	b.n	8003a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003a62:	4b15      	ldr	r3, [pc, #84]	@ (8003ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a64:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	3b08      	subs	r3, #8
 8003a72:	4a12      	ldr	r2, [pc, #72]	@ (8003abc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a80:	089b      	lsrs	r3, r3, #2
 8003a82:	009a      	lsls	r2, r3, #2
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4413      	add	r3, r2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a0b      	ldr	r2, [pc, #44]	@ (8003ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003a92:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 031f 	and.w	r3, r3, #31
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	409a      	lsls	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40020407 	.word	0x40020407
 8003ab4:	40020800 	.word	0x40020800
 8003ab8:	40020820 	.word	0x40020820
 8003abc:	cccccccd 	.word	0xcccccccd
 8003ac0:	40020880 	.word	0x40020880

08003ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	461a      	mov	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a08      	ldr	r2, [pc, #32]	@ (8003b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ae6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	2201      	movs	r2, #1
 8003af2:	409a      	lsls	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	1000823f 	.word	0x1000823f
 8003b08:	40020940 	.word	0x40020940

08003b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b1a:	e15a      	b.n	8003dd2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	2101      	movs	r1, #1
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	fa01 f303 	lsl.w	r3, r1, r3
 8003b28:	4013      	ands	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 814c 	beq.w	8003dcc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d005      	beq.n	8003b4c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d130      	bne.n	8003bae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	2203      	movs	r2, #3
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b82:	2201      	movs	r2, #1
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	091b      	lsrs	r3, r3, #4
 8003b98:	f003 0201 	and.w	r2, r3, #1
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d017      	beq.n	8003bea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	2203      	movs	r2, #3
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d123      	bne.n	8003c3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	08da      	lsrs	r2, r3, #3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3208      	adds	r2, #8
 8003bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	220f      	movs	r2, #15
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4013      	ands	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	691a      	ldr	r2, [r3, #16]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	08da      	lsrs	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3208      	adds	r2, #8
 8003c38:	6939      	ldr	r1, [r7, #16]
 8003c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	2203      	movs	r2, #3
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4013      	ands	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 0203 	and.w	r2, r3, #3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 80a6 	beq.w	8003dcc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c80:	4b5b      	ldr	r3, [pc, #364]	@ (8003df0 <HAL_GPIO_Init+0x2e4>)
 8003c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c84:	4a5a      	ldr	r2, [pc, #360]	@ (8003df0 <HAL_GPIO_Init+0x2e4>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c8c:	4b58      	ldr	r3, [pc, #352]	@ (8003df0 <HAL_GPIO_Init+0x2e4>)
 8003c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c98:	4a56      	ldr	r2, [pc, #344]	@ (8003df4 <HAL_GPIO_Init+0x2e8>)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	089b      	lsrs	r3, r3, #2
 8003c9e:	3302      	adds	r3, #2
 8003ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	220f      	movs	r2, #15
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003cc2:	d01f      	beq.n	8003d04 <HAL_GPIO_Init+0x1f8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a4c      	ldr	r2, [pc, #304]	@ (8003df8 <HAL_GPIO_Init+0x2ec>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d019      	beq.n	8003d00 <HAL_GPIO_Init+0x1f4>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a4b      	ldr	r2, [pc, #300]	@ (8003dfc <HAL_GPIO_Init+0x2f0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d013      	beq.n	8003cfc <HAL_GPIO_Init+0x1f0>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a4a      	ldr	r2, [pc, #296]	@ (8003e00 <HAL_GPIO_Init+0x2f4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00d      	beq.n	8003cf8 <HAL_GPIO_Init+0x1ec>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a49      	ldr	r2, [pc, #292]	@ (8003e04 <HAL_GPIO_Init+0x2f8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d007      	beq.n	8003cf4 <HAL_GPIO_Init+0x1e8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a48      	ldr	r2, [pc, #288]	@ (8003e08 <HAL_GPIO_Init+0x2fc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d101      	bne.n	8003cf0 <HAL_GPIO_Init+0x1e4>
 8003cec:	2305      	movs	r3, #5
 8003cee:	e00a      	b.n	8003d06 <HAL_GPIO_Init+0x1fa>
 8003cf0:	2306      	movs	r3, #6
 8003cf2:	e008      	b.n	8003d06 <HAL_GPIO_Init+0x1fa>
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	e006      	b.n	8003d06 <HAL_GPIO_Init+0x1fa>
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e004      	b.n	8003d06 <HAL_GPIO_Init+0x1fa>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e002      	b.n	8003d06 <HAL_GPIO_Init+0x1fa>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <HAL_GPIO_Init+0x1fa>
 8003d04:	2300      	movs	r3, #0
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	f002 0203 	and.w	r2, r2, #3
 8003d0c:	0092      	lsls	r2, r2, #2
 8003d0e:	4093      	lsls	r3, r2
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d16:	4937      	ldr	r1, [pc, #220]	@ (8003df4 <HAL_GPIO_Init+0x2e8>)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d24:	4b39      	ldr	r3, [pc, #228]	@ (8003e0c <HAL_GPIO_Init+0x300>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4013      	ands	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d48:	4a30      	ldr	r2, [pc, #192]	@ (8003e0c <HAL_GPIO_Init+0x300>)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e0c <HAL_GPIO_Init+0x300>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d72:	4a26      	ldr	r2, [pc, #152]	@ (8003e0c <HAL_GPIO_Init+0x300>)
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003d78:	4b24      	ldr	r3, [pc, #144]	@ (8003e0c <HAL_GPIO_Init+0x300>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4013      	ands	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8003e0c <HAL_GPIO_Init+0x300>)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003da2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e0c <HAL_GPIO_Init+0x300>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	43db      	mvns	r3, r3
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4013      	ands	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003dc6:	4a11      	ldr	r2, [pc, #68]	@ (8003e0c <HAL_GPIO_Init+0x300>)
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f47f ae9d 	bne.w	8003b1c <HAL_GPIO_Init+0x10>
  }
}
 8003de2:	bf00      	nop
 8003de4:	bf00      	nop
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40010000 	.word	0x40010000
 8003df8:	48000400 	.word	0x48000400
 8003dfc:	48000800 	.word	0x48000800
 8003e00:	48000c00 	.word	0x48000c00
 8003e04:	48001000 	.word	0x48001000
 8003e08:	48001400 	.word	0x48001400
 8003e0c:	40010400 	.word	0x40010400

08003e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	807b      	strh	r3, [r7, #2]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e20:	787b      	ldrb	r3, [r7, #1]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e26:	887a      	ldrh	r2, [r7, #2]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e2c:	e002      	b.n	8003e34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e2e:	887a      	ldrh	r2, [r7, #2]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e4a:	4b08      	ldr	r3, [pc, #32]	@ (8003e6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e4c:	695a      	ldr	r2, [r3, #20]
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d006      	beq.n	8003e64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e56:	4a05      	ldr	r2, [pc, #20]	@ (8003e6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e5c:	88fb      	ldrh	r3, [r7, #6]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f806 	bl	8003e70 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e64:	bf00      	nop
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40010400 	.word	0x40010400

08003e70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d141      	bne.n	8003f1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e96:	4b4b      	ldr	r3, [pc, #300]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea2:	d131      	bne.n	8003f08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ea4:	4b47      	ldr	r3, [pc, #284]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eaa:	4a46      	ldr	r2, [pc, #280]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003eb4:	4b43      	ldr	r3, [pc, #268]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ebc:	4a41      	ldr	r2, [pc, #260]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ec2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ec4:	4b40      	ldr	r3, [pc, #256]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2232      	movs	r2, #50	@ 0x32
 8003eca:	fb02 f303 	mul.w	r3, r2, r3
 8003ece:	4a3f      	ldr	r2, [pc, #252]	@ (8003fcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	0c9b      	lsrs	r3, r3, #18
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eda:	e002      	b.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ee2:	4b38      	ldr	r3, [pc, #224]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eee:	d102      	bne.n	8003ef6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f2      	bne.n	8003edc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ef6:	4b33      	ldr	r3, [pc, #204]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f02:	d158      	bne.n	8003fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e057      	b.n	8003fb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f08:	4b2e      	ldr	r3, [pc, #184]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003f18:	e04d      	b.n	8003fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f20:	d141      	bne.n	8003fa6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f22:	4b28      	ldr	r3, [pc, #160]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f2e:	d131      	bne.n	8003f94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f30:	4b24      	ldr	r3, [pc, #144]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f36:	4a23      	ldr	r2, [pc, #140]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f40:	4b20      	ldr	r3, [pc, #128]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f48:	4a1e      	ldr	r2, [pc, #120]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f50:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2232      	movs	r2, #50	@ 0x32
 8003f56:	fb02 f303 	mul.w	r3, r2, r3
 8003f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003fcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f60:	0c9b      	lsrs	r3, r3, #18
 8003f62:	3301      	adds	r3, #1
 8003f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f66:	e002      	b.n	8003f6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f6e:	4b15      	ldr	r3, [pc, #84]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f7a:	d102      	bne.n	8003f82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f2      	bne.n	8003f68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f82:	4b10      	ldr	r3, [pc, #64]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f8e:	d112      	bne.n	8003fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e011      	b.n	8003fb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f94:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003fa4:	e007      	b.n	8003fb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fa6:	4b07      	ldr	r3, [pc, #28]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fae:	4a05      	ldr	r2, [pc, #20]	@ (8003fc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fb4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	40007000 	.word	0x40007000
 8003fc8:	20000004 	.word	0x20000004
 8003fcc:	431bde83 	.word	0x431bde83

08003fd0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003fd4:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	4a04      	ldr	r2, [pc, #16]	@ (8003fec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003fda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fde:	6093      	str	r3, [r2, #8]
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40007000 	.word	0x40007000

08003ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e306      	b.n	8004610 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d075      	beq.n	80040fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400e:	4b97      	ldr	r3, [pc, #604]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004018:	4b94      	ldr	r3, [pc, #592]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b0c      	cmp	r3, #12
 8004026:	d102      	bne.n	800402e <HAL_RCC_OscConfig+0x3e>
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2b03      	cmp	r3, #3
 800402c:	d002      	beq.n	8004034 <HAL_RCC_OscConfig+0x44>
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d10b      	bne.n	800404c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004034:	4b8d      	ldr	r3, [pc, #564]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d05b      	beq.n	80040f8 <HAL_RCC_OscConfig+0x108>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d157      	bne.n	80040f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e2e1      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004054:	d106      	bne.n	8004064 <HAL_RCC_OscConfig+0x74>
 8004056:	4b85      	ldr	r3, [pc, #532]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a84      	ldr	r2, [pc, #528]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 800405c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e01d      	b.n	80040a0 <HAL_RCC_OscConfig+0xb0>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800406c:	d10c      	bne.n	8004088 <HAL_RCC_OscConfig+0x98>
 800406e:	4b7f      	ldr	r3, [pc, #508]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a7e      	ldr	r2, [pc, #504]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 8004074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	4b7c      	ldr	r3, [pc, #496]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a7b      	ldr	r2, [pc, #492]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e00b      	b.n	80040a0 <HAL_RCC_OscConfig+0xb0>
 8004088:	4b78      	ldr	r3, [pc, #480]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a77      	ldr	r2, [pc, #476]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 800408e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	4b75      	ldr	r3, [pc, #468]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a74      	ldr	r2, [pc, #464]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 800409a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800409e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d013      	beq.n	80040d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a8:	f7fd fdc0 	bl	8001c2c <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b0:	f7fd fdbc 	bl	8001c2c <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	@ 0x64
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e2a6      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040c2:	4b6a      	ldr	r3, [pc, #424]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0xc0>
 80040ce:	e014      	b.n	80040fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fd fdac 	bl	8001c2c <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d8:	f7fd fda8 	bl	8001c2c <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	@ 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e292      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ea:	4b60      	ldr	r3, [pc, #384]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0xe8>
 80040f6:	e000      	b.n	80040fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d075      	beq.n	80041f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004106:	4b59      	ldr	r3, [pc, #356]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
 800410e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004110:	4b56      	ldr	r3, [pc, #344]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b0c      	cmp	r3, #12
 800411e:	d102      	bne.n	8004126 <HAL_RCC_OscConfig+0x136>
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d002      	beq.n	800412c <HAL_RCC_OscConfig+0x13c>
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b04      	cmp	r3, #4
 800412a:	d11f      	bne.n	800416c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800412c:	4b4f      	ldr	r3, [pc, #316]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_OscConfig+0x154>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e265      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004144:	4b49      	ldr	r3, [pc, #292]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	4946      	ldr	r1, [pc, #280]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004158:	4b45      	ldr	r3, [pc, #276]	@ (8004270 <HAL_RCC_OscConfig+0x280>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f7fc fdbd 	bl	8000cdc <HAL_InitTick>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d043      	beq.n	80041f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e251      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d023      	beq.n	80041bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004174:	4b3d      	ldr	r3, [pc, #244]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a3c      	ldr	r2, [pc, #240]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 800417a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800417e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fd fd54 	bl	8001c2c <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004188:	f7fd fd50 	bl	8001c2c <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e23a      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800419a:	4b34      	ldr	r3, [pc, #208]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a6:	4b31      	ldr	r3, [pc, #196]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	061b      	lsls	r3, r3, #24
 80041b4:	492d      	ldr	r1, [pc, #180]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	604b      	str	r3, [r1, #4]
 80041ba:	e01a      	b.n	80041f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041bc:	4b2b      	ldr	r3, [pc, #172]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a2a      	ldr	r2, [pc, #168]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 80041c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fd fd30 	bl	8001c2c <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d0:	f7fd fd2c 	bl	8001c2c <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e216      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041e2:	4b22      	ldr	r3, [pc, #136]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f0      	bne.n	80041d0 <HAL_RCC_OscConfig+0x1e0>
 80041ee:	e000      	b.n	80041f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d041      	beq.n	8004282 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d01c      	beq.n	8004240 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004206:	4b19      	ldr	r3, [pc, #100]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 8004208:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800420c:	4a17      	ldr	r2, [pc, #92]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004216:	f7fd fd09 	bl	8001c2c <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800421e:	f7fd fd05 	bl	8001c2c <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e1ef      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004230:	4b0e      	ldr	r3, [pc, #56]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 8004232:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0ef      	beq.n	800421e <HAL_RCC_OscConfig+0x22e>
 800423e:	e020      	b.n	8004282 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004240:	4b0a      	ldr	r3, [pc, #40]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 8004242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004246:	4a09      	ldr	r2, [pc, #36]	@ (800426c <HAL_RCC_OscConfig+0x27c>)
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004250:	f7fd fcec 	bl	8001c2c <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004256:	e00d      	b.n	8004274 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004258:	f7fd fce8 	bl	8001c2c <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d906      	bls.n	8004274 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e1d2      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000
 8004270:	200000e4 	.word	0x200000e4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004274:	4b8c      	ldr	r3, [pc, #560]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 8004276:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1ea      	bne.n	8004258 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 80a6 	beq.w	80043dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004290:	2300      	movs	r3, #0
 8004292:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004294:	4b84      	ldr	r3, [pc, #528]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_OscConfig+0x2b4>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x2b6>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00d      	beq.n	80042c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042aa:	4b7f      	ldr	r3, [pc, #508]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 80042ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ae:	4a7e      	ldr	r2, [pc, #504]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 80042b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80042b6:	4b7c      	ldr	r3, [pc, #496]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 80042b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80042c2:	2301      	movs	r3, #1
 80042c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042c6:	4b79      	ldr	r3, [pc, #484]	@ (80044ac <HAL_RCC_OscConfig+0x4bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d118      	bne.n	8004304 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d2:	4b76      	ldr	r3, [pc, #472]	@ (80044ac <HAL_RCC_OscConfig+0x4bc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a75      	ldr	r2, [pc, #468]	@ (80044ac <HAL_RCC_OscConfig+0x4bc>)
 80042d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042de:	f7fd fca5 	bl	8001c2c <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e6:	f7fd fca1 	bl	8001c2c <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e18b      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042f8:	4b6c      	ldr	r3, [pc, #432]	@ (80044ac <HAL_RCC_OscConfig+0x4bc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d108      	bne.n	800431e <HAL_RCC_OscConfig+0x32e>
 800430c:	4b66      	ldr	r3, [pc, #408]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004312:	4a65      	ldr	r2, [pc, #404]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800431c:	e024      	b.n	8004368 <HAL_RCC_OscConfig+0x378>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b05      	cmp	r3, #5
 8004324:	d110      	bne.n	8004348 <HAL_RCC_OscConfig+0x358>
 8004326:	4b60      	ldr	r3, [pc, #384]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432c:	4a5e      	ldr	r2, [pc, #376]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 800432e:	f043 0304 	orr.w	r3, r3, #4
 8004332:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004336:	4b5c      	ldr	r3, [pc, #368]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433c:	4a5a      	ldr	r2, [pc, #360]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004346:	e00f      	b.n	8004368 <HAL_RCC_OscConfig+0x378>
 8004348:	4b57      	ldr	r3, [pc, #348]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434e:	4a56      	ldr	r2, [pc, #344]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 8004350:	f023 0301 	bic.w	r3, r3, #1
 8004354:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004358:	4b53      	ldr	r3, [pc, #332]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800435e:	4a52      	ldr	r2, [pc, #328]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 8004360:	f023 0304 	bic.w	r3, r3, #4
 8004364:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d016      	beq.n	800439e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004370:	f7fd fc5c 	bl	8001c2c <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004376:	e00a      	b.n	800438e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004378:	f7fd fc58 	bl	8001c2c <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e140      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438e:	4b46      	ldr	r3, [pc, #280]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0ed      	beq.n	8004378 <HAL_RCC_OscConfig+0x388>
 800439c:	e015      	b.n	80043ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439e:	f7fd fc45 	bl	8001c2c <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043a4:	e00a      	b.n	80043bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a6:	f7fd fc41 	bl	8001c2c <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e129      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043bc:	4b3a      	ldr	r3, [pc, #232]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1ed      	bne.n	80043a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043ca:	7ffb      	ldrb	r3, [r7, #31]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d105      	bne.n	80043dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d0:	4b35      	ldr	r3, [pc, #212]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 80043d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d4:	4a34      	ldr	r2, [pc, #208]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 80043d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d03c      	beq.n	8004462 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01c      	beq.n	800442a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043f0:	4b2d      	ldr	r3, [pc, #180]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 80043f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043f6:	4a2c      	ldr	r2, [pc, #176]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004400:	f7fd fc14 	bl	8001c2c <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004408:	f7fd fc10 	bl	8001c2c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e0fa      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800441a:	4b23      	ldr	r3, [pc, #140]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 800441c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0ef      	beq.n	8004408 <HAL_RCC_OscConfig+0x418>
 8004428:	e01b      	b.n	8004462 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800442a:	4b1f      	ldr	r3, [pc, #124]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 800442c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004430:	4a1d      	ldr	r2, [pc, #116]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443a:	f7fd fbf7 	bl	8001c2c <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004442:	f7fd fbf3 	bl	8001c2c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e0dd      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004454:	4b14      	ldr	r3, [pc, #80]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 8004456:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1ef      	bne.n	8004442 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 80d1 	beq.w	800460e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800446c:	4b0e      	ldr	r3, [pc, #56]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 030c 	and.w	r3, r3, #12
 8004474:	2b0c      	cmp	r3, #12
 8004476:	f000 808b 	beq.w	8004590 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d15e      	bne.n	8004540 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004482:	4b09      	ldr	r3, [pc, #36]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a08      	ldr	r2, [pc, #32]	@ (80044a8 <HAL_RCC_OscConfig+0x4b8>)
 8004488:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800448c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448e:	f7fd fbcd 	bl	8001c2c <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004494:	e00c      	b.n	80044b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004496:	f7fd fbc9 	bl	8001c2c <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d905      	bls.n	80044b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e0b3      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
 80044a8:	40021000 	.word	0x40021000
 80044ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b0:	4b59      	ldr	r3, [pc, #356]	@ (8004618 <HAL_RCC_OscConfig+0x628>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1ec      	bne.n	8004496 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044bc:	4b56      	ldr	r3, [pc, #344]	@ (8004618 <HAL_RCC_OscConfig+0x628>)
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	4b56      	ldr	r3, [pc, #344]	@ (800461c <HAL_RCC_OscConfig+0x62c>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6a11      	ldr	r1, [r2, #32]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044cc:	3a01      	subs	r2, #1
 80044ce:	0112      	lsls	r2, r2, #4
 80044d0:	4311      	orrs	r1, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80044d6:	0212      	lsls	r2, r2, #8
 80044d8:	4311      	orrs	r1, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80044de:	0852      	lsrs	r2, r2, #1
 80044e0:	3a01      	subs	r2, #1
 80044e2:	0552      	lsls	r2, r2, #21
 80044e4:	4311      	orrs	r1, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80044ea:	0852      	lsrs	r2, r2, #1
 80044ec:	3a01      	subs	r2, #1
 80044ee:	0652      	lsls	r2, r2, #25
 80044f0:	4311      	orrs	r1, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80044f6:	06d2      	lsls	r2, r2, #27
 80044f8:	430a      	orrs	r2, r1
 80044fa:	4947      	ldr	r1, [pc, #284]	@ (8004618 <HAL_RCC_OscConfig+0x628>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004500:	4b45      	ldr	r3, [pc, #276]	@ (8004618 <HAL_RCC_OscConfig+0x628>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a44      	ldr	r2, [pc, #272]	@ (8004618 <HAL_RCC_OscConfig+0x628>)
 8004506:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800450a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800450c:	4b42      	ldr	r3, [pc, #264]	@ (8004618 <HAL_RCC_OscConfig+0x628>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4a41      	ldr	r2, [pc, #260]	@ (8004618 <HAL_RCC_OscConfig+0x628>)
 8004512:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004516:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fd fb88 	bl	8001c2c <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004520:	f7fd fb84 	bl	8001c2c <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e06e      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004532:	4b39      	ldr	r3, [pc, #228]	@ (8004618 <HAL_RCC_OscConfig+0x628>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x530>
 800453e:	e066      	b.n	800460e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004540:	4b35      	ldr	r3, [pc, #212]	@ (8004618 <HAL_RCC_OscConfig+0x628>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a34      	ldr	r2, [pc, #208]	@ (8004618 <HAL_RCC_OscConfig+0x628>)
 8004546:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800454a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800454c:	4b32      	ldr	r3, [pc, #200]	@ (8004618 <HAL_RCC_OscConfig+0x628>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4a31      	ldr	r2, [pc, #196]	@ (8004618 <HAL_RCC_OscConfig+0x628>)
 8004552:	f023 0303 	bic.w	r3, r3, #3
 8004556:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004558:	4b2f      	ldr	r3, [pc, #188]	@ (8004618 <HAL_RCC_OscConfig+0x628>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	4a2e      	ldr	r2, [pc, #184]	@ (8004618 <HAL_RCC_OscConfig+0x628>)
 800455e:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8004562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004566:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fd fb60 	bl	8001c2c <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004570:	f7fd fb5c 	bl	8001c2c <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e046      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004582:	4b25      	ldr	r3, [pc, #148]	@ (8004618 <HAL_RCC_OscConfig+0x628>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x580>
 800458e:	e03e      	b.n	800460e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e039      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800459c:	4b1e      	ldr	r3, [pc, #120]	@ (8004618 <HAL_RCC_OscConfig+0x628>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f003 0203 	and.w	r2, r3, #3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d12c      	bne.n	800460a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ba:	3b01      	subs	r3, #1
 80045bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045be:	429a      	cmp	r2, r3
 80045c0:	d123      	bne.n	800460a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d11b      	bne.n	800460a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045de:	429a      	cmp	r2, r3
 80045e0:	d113      	bne.n	800460a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ec:	085b      	lsrs	r3, r3, #1
 80045ee:	3b01      	subs	r3, #1
 80045f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d109      	bne.n	800460a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	3b01      	subs	r3, #1
 8004604:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d001      	beq.n	800460e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40021000 	.word	0x40021000
 800461c:	019f800c 	.word	0x019f800c

08004620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e11e      	b.n	8004876 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004638:	4b91      	ldr	r3, [pc, #580]	@ (8004880 <HAL_RCC_ClockConfig+0x260>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d910      	bls.n	8004668 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004646:	4b8e      	ldr	r3, [pc, #568]	@ (8004880 <HAL_RCC_ClockConfig+0x260>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f023 020f 	bic.w	r2, r3, #15
 800464e:	498c      	ldr	r1, [pc, #560]	@ (8004880 <HAL_RCC_ClockConfig+0x260>)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	4313      	orrs	r3, r2
 8004654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004656:	4b8a      	ldr	r3, [pc, #552]	@ (8004880 <HAL_RCC_ClockConfig+0x260>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d001      	beq.n	8004668 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e106      	b.n	8004876 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d073      	beq.n	800475c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b03      	cmp	r3, #3
 800467a:	d129      	bne.n	80046d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800467c:	4b81      	ldr	r3, [pc, #516]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e0f4      	b.n	8004876 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800468c:	f000 f9d0 	bl	8004a30 <RCC_GetSysClockFreqFromPLLSource>
 8004690:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	4a7c      	ldr	r2, [pc, #496]	@ (8004888 <HAL_RCC_ClockConfig+0x268>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d93f      	bls.n	800471a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800469a:	4b7a      	ldr	r3, [pc, #488]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d033      	beq.n	800471a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d12f      	bne.n	800471a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046ba:	4b72      	ldr	r3, [pc, #456]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046c2:	4a70      	ldr	r2, [pc, #448]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 80046c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80046ca:	2380      	movs	r3, #128	@ 0x80
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	e024      	b.n	800471a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d107      	bne.n	80046e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d109      	bne.n	80046f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0c6      	b.n	8004876 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046e8:	4b66      	ldr	r3, [pc, #408]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0be      	b.n	8004876 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80046f8:	f000 f8ce 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 80046fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	4a61      	ldr	r2, [pc, #388]	@ (8004888 <HAL_RCC_ClockConfig+0x268>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d909      	bls.n	800471a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004706:	4b5f      	ldr	r3, [pc, #380]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800470e:	4a5d      	ldr	r2, [pc, #372]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 8004710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004714:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004716:	2380      	movs	r3, #128	@ 0x80
 8004718:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800471a:	4b5a      	ldr	r3, [pc, #360]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f023 0203 	bic.w	r2, r3, #3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	4957      	ldr	r1, [pc, #348]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 8004728:	4313      	orrs	r3, r2
 800472a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472c:	f7fd fa7e 	bl	8001c2c <HAL_GetTick>
 8004730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004732:	e00a      	b.n	800474a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004734:	f7fd fa7a 	bl	8001c2c <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004742:	4293      	cmp	r3, r2
 8004744:	d901      	bls.n	800474a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e095      	b.n	8004876 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800474a:	4b4e      	ldr	r3, [pc, #312]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 020c 	and.w	r2, r3, #12
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	429a      	cmp	r2, r3
 800475a:	d1eb      	bne.n	8004734 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d023      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004774:	4b43      	ldr	r3, [pc, #268]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4a42      	ldr	r2, [pc, #264]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 800477a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800477e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800478c:	4b3d      	ldr	r3, [pc, #244]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004794:	4a3b      	ldr	r2, [pc, #236]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 8004796:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800479a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800479c:	4b39      	ldr	r3, [pc, #228]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	4936      	ldr	r1, [pc, #216]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b80      	cmp	r3, #128	@ 0x80
 80047b4:	d105      	bne.n	80047c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80047b6:	4b33      	ldr	r3, [pc, #204]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	4a32      	ldr	r2, [pc, #200]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 80047bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047c2:	4b2f      	ldr	r3, [pc, #188]	@ (8004880 <HAL_RCC_ClockConfig+0x260>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d21d      	bcs.n	800480c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004880 <HAL_RCC_ClockConfig+0x260>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f023 020f 	bic.w	r2, r3, #15
 80047d8:	4929      	ldr	r1, [pc, #164]	@ (8004880 <HAL_RCC_ClockConfig+0x260>)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	4313      	orrs	r3, r2
 80047de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047e0:	f7fd fa24 	bl	8001c2c <HAL_GetTick>
 80047e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e6:	e00a      	b.n	80047fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e8:	f7fd fa20 	bl	8001c2c <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e03b      	b.n	8004876 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fe:	4b20      	ldr	r3, [pc, #128]	@ (8004880 <HAL_RCC_ClockConfig+0x260>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d1ed      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004818:	4b1a      	ldr	r3, [pc, #104]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4917      	ldr	r1, [pc, #92]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 8004826:	4313      	orrs	r3, r2
 8004828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004836:	4b13      	ldr	r3, [pc, #76]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	490f      	ldr	r1, [pc, #60]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 8004846:	4313      	orrs	r3, r2
 8004848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800484a:	f000 f825 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 800484e:	4602      	mov	r2, r0
 8004850:	4b0c      	ldr	r3, [pc, #48]	@ (8004884 <HAL_RCC_ClockConfig+0x264>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	490c      	ldr	r1, [pc, #48]	@ (800488c <HAL_RCC_ClockConfig+0x26c>)
 800485c:	5ccb      	ldrb	r3, [r1, r3]
 800485e:	f003 031f 	and.w	r3, r3, #31
 8004862:	fa22 f303 	lsr.w	r3, r2, r3
 8004866:	4a0a      	ldr	r2, [pc, #40]	@ (8004890 <HAL_RCC_ClockConfig+0x270>)
 8004868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800486a:	4b0a      	ldr	r3, [pc, #40]	@ (8004894 <HAL_RCC_ClockConfig+0x274>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7fc fa34 	bl	8000cdc <HAL_InitTick>
 8004874:	4603      	mov	r3, r0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40022000 	.word	0x40022000
 8004884:	40021000 	.word	0x40021000
 8004888:	04c4b400 	.word	0x04c4b400
 800488c:	0800a0f4 	.word	0x0800a0f4
 8004890:	20000004 	.word	0x20000004
 8004894:	200000e4 	.word	0x200000e4

08004898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800489e:	4b2c      	ldr	r3, [pc, #176]	@ (8004950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d102      	bne.n	80048b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004954 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	e047      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80048b0:	4b27      	ldr	r3, [pc, #156]	@ (8004950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 030c 	and.w	r3, r3, #12
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d102      	bne.n	80048c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048bc:	4b26      	ldr	r3, [pc, #152]	@ (8004958 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	e03e      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80048c2:	4b23      	ldr	r3, [pc, #140]	@ (8004950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 030c 	and.w	r3, r3, #12
 80048ca:	2b0c      	cmp	r3, #12
 80048cc:	d136      	bne.n	800493c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048ce:	4b20      	ldr	r3, [pc, #128]	@ (8004950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	3301      	adds	r3, #1
 80048e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d10c      	bne.n	8004906 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004958 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f4:	4a16      	ldr	r2, [pc, #88]	@ (8004950 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048f6:	68d2      	ldr	r2, [r2, #12]
 80048f8:	0a12      	lsrs	r2, r2, #8
 80048fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
 8004902:	617b      	str	r3, [r7, #20]
      break;
 8004904:	e00c      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004906:	4a13      	ldr	r2, [pc, #76]	@ (8004954 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	fbb2 f3f3 	udiv	r3, r2, r3
 800490e:	4a10      	ldr	r2, [pc, #64]	@ (8004950 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004910:	68d2      	ldr	r2, [r2, #12]
 8004912:	0a12      	lsrs	r2, r2, #8
 8004914:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004918:	fb02 f303 	mul.w	r3, r2, r3
 800491c:	617b      	str	r3, [r7, #20]
      break;
 800491e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004920:	4b0b      	ldr	r3, [pc, #44]	@ (8004950 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	0e5b      	lsrs	r3, r3, #25
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	3301      	adds	r3, #1
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	fbb2 f3f3 	udiv	r3, r2, r3
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	e001      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004940:	693b      	ldr	r3, [r7, #16]
}
 8004942:	4618      	mov	r0, r3
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40021000 	.word	0x40021000
 8004954:	00f42400 	.word	0x00f42400
 8004958:	016e3600 	.word	0x016e3600

0800495c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004960:	4b03      	ldr	r3, [pc, #12]	@ (8004970 <HAL_RCC_GetHCLKFreq+0x14>)
 8004962:	681b      	ldr	r3, [r3, #0]
}
 8004964:	4618      	mov	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	20000004 	.word	0x20000004

08004974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004978:	f7ff fff0 	bl	800495c <HAL_RCC_GetHCLKFreq>
 800497c:	4602      	mov	r2, r0
 800497e:	4b06      	ldr	r3, [pc, #24]	@ (8004998 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	0a1b      	lsrs	r3, r3, #8
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	4904      	ldr	r1, [pc, #16]	@ (800499c <HAL_RCC_GetPCLK1Freq+0x28>)
 800498a:	5ccb      	ldrb	r3, [r1, r3]
 800498c:	f003 031f 	and.w	r3, r3, #31
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004994:	4618      	mov	r0, r3
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40021000 	.word	0x40021000
 800499c:	0800a104 	.word	0x0800a104

080049a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049a4:	f7ff ffda 	bl	800495c <HAL_RCC_GetHCLKFreq>
 80049a8:	4602      	mov	r2, r0
 80049aa:	4b06      	ldr	r3, [pc, #24]	@ (80049c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	0adb      	lsrs	r3, r3, #11
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	4904      	ldr	r1, [pc, #16]	@ (80049c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049b6:	5ccb      	ldrb	r3, [r1, r3]
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40021000 	.word	0x40021000
 80049c8:	0800a104 	.word	0x0800a104

080049cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	220f      	movs	r2, #15
 80049da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80049dc:	4b12      	ldr	r3, [pc, #72]	@ (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0203 	and.w	r2, r3, #3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80049e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80049f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a00:	4b09      	ldr	r3, [pc, #36]	@ (8004a28 <HAL_RCC_GetClockConfig+0x5c>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	08db      	lsrs	r3, r3, #3
 8004a06:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a0e:	4b07      	ldr	r3, [pc, #28]	@ (8004a2c <HAL_RCC_GetClockConfig+0x60>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 020f 	and.w	r2, r3, #15
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	601a      	str	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	40022000 	.word	0x40022000

08004a30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a36:	4b1e      	ldr	r3, [pc, #120]	@ (8004ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a40:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	091b      	lsrs	r3, r3, #4
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d10c      	bne.n	8004a6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a54:	4a17      	ldr	r2, [pc, #92]	@ (8004ab4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5c:	4a14      	ldr	r2, [pc, #80]	@ (8004ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a5e:	68d2      	ldr	r2, [r2, #12]
 8004a60:	0a12      	lsrs	r2, r2, #8
 8004a62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	617b      	str	r3, [r7, #20]
    break;
 8004a6c:	e00c      	b.n	8004a88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a6e:	4a12      	ldr	r2, [pc, #72]	@ (8004ab8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a76:	4a0e      	ldr	r2, [pc, #56]	@ (8004ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a78:	68d2      	ldr	r2, [r2, #12]
 8004a7a:	0a12      	lsrs	r2, r2, #8
 8004a7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a80:	fb02 f303 	mul.w	r3, r2, r3
 8004a84:	617b      	str	r3, [r7, #20]
    break;
 8004a86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a88:	4b09      	ldr	r3, [pc, #36]	@ (8004ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	0e5b      	lsrs	r3, r3, #25
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	3301      	adds	r3, #1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004aa2:	687b      	ldr	r3, [r7, #4]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	016e3600 	.word	0x016e3600
 8004ab8:	00f42400 	.word	0x00f42400

08004abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ac8:	2300      	movs	r3, #0
 8004aca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 8098 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ada:	2300      	movs	r3, #0
 8004adc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ade:	4b43      	ldr	r3, [pc, #268]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10d      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aea:	4b40      	ldr	r3, [pc, #256]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aee:	4a3f      	ldr	r2, [pc, #252]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004af4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004af6:	4b3d      	ldr	r3, [pc, #244]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004afe:	60bb      	str	r3, [r7, #8]
 8004b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b02:	2301      	movs	r3, #1
 8004b04:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b06:	4b3a      	ldr	r3, [pc, #232]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a39      	ldr	r2, [pc, #228]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b12:	f7fd f88b 	bl	8001c2c <HAL_GetTick>
 8004b16:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b18:	e009      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b1a:	f7fd f887 	bl	8001c2c <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d902      	bls.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	74fb      	strb	r3, [r7, #19]
        break;
 8004b2c:	e005      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b2e:	4b30      	ldr	r3, [pc, #192]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0ef      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b3a:	7cfb      	ldrb	r3, [r7, #19]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d159      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b40:	4b2a      	ldr	r3, [pc, #168]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b4a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01e      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d019      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b5c:	4b23      	ldr	r3, [pc, #140]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b68:	4b20      	ldr	r3, [pc, #128]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b78:	4b1c      	ldr	r3, [pc, #112]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b88:	4a18      	ldr	r2, [pc, #96]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d016      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9a:	f7fd f847 	bl	8001c2c <HAL_GetTick>
 8004b9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba0:	e00b      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba2:	f7fd f843 	bl	8001c2c <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d902      	bls.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	74fb      	strb	r3, [r7, #19]
            break;
 8004bb8:	e006      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bba:	4b0c      	ldr	r3, [pc, #48]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0ec      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004bc8:	7cfb      	ldrb	r3, [r7, #19]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10b      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bce:	4b07      	ldr	r3, [pc, #28]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bdc:	4903      	ldr	r1, [pc, #12]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004be4:	e008      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004be6:	7cfb      	ldrb	r3, [r7, #19]
 8004be8:	74bb      	strb	r3, [r7, #18]
 8004bea:	e005      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf4:	7cfb      	ldrb	r3, [r7, #19]
 8004bf6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bf8:	7c7b      	ldrb	r3, [r7, #17]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d105      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfe:	4ba7      	ldr	r3, [pc, #668]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c02:	4aa6      	ldr	r2, [pc, #664]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c08:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c16:	4ba1      	ldr	r3, [pc, #644]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1c:	f023 0203 	bic.w	r2, r3, #3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	499d      	ldr	r1, [pc, #628]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c38:	4b98      	ldr	r3, [pc, #608]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3e:	f023 020c 	bic.w	r2, r3, #12
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	4995      	ldr	r1, [pc, #596]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c5a:	4b90      	ldr	r3, [pc, #576]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c60:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	498c      	ldr	r1, [pc, #560]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c7c:	4b87      	ldr	r3, [pc, #540]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	4984      	ldr	r1, [pc, #528]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c9e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	497b      	ldr	r1, [pc, #492]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0320 	and.w	r3, r3, #32
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cc0:	4b76      	ldr	r3, [pc, #472]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	4973      	ldr	r1, [pc, #460]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ce2:	4b6e      	ldr	r3, [pc, #440]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	496a      	ldr	r1, [pc, #424]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d04:	4b65      	ldr	r3, [pc, #404]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	4962      	ldr	r1, [pc, #392]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d26:	4b5d      	ldr	r3, [pc, #372]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	4959      	ldr	r1, [pc, #356]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d48:	4b54      	ldr	r3, [pc, #336]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d4e:	f023 0203 	bic.w	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d56:	4951      	ldr	r1, [pc, #324]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d6a:	4b4c      	ldr	r3, [pc, #304]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d78:	4948      	ldr	r1, [pc, #288]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d015      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d8c:	4b43      	ldr	r3, [pc, #268]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9a:	4940      	ldr	r1, [pc, #256]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004daa:	d105      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dac:	4b3b      	ldr	r3, [pc, #236]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4a3a      	ldr	r2, [pc, #232]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004db6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d015      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dc4:	4b35      	ldr	r3, [pc, #212]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd2:	4932      	ldr	r1, [pc, #200]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004de2:	d105      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004de4:	4b2d      	ldr	r3, [pc, #180]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	4a2c      	ldr	r2, [pc, #176]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d015      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dfc:	4b27      	ldr	r3, [pc, #156]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e02:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0a:	4924      	ldr	r1, [pc, #144]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e1a:	d105      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4a1e      	ldr	r2, [pc, #120]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e26:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d015      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e34:	4b19      	ldr	r3, [pc, #100]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e42:	4916      	ldr	r1, [pc, #88]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e52:	d105      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e54:	4b11      	ldr	r3, [pc, #68]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4a10      	ldr	r2, [pc, #64]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d019      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7a:	4908      	ldr	r1, [pc, #32]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e8a:	d109      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e8c:	4b03      	ldr	r3, [pc, #12]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	4a02      	ldr	r2, [pc, #8]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e96:	60d3      	str	r3, [r2, #12]
 8004e98:	e002      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d015      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004eac:	4b29      	ldr	r3, [pc, #164]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	4926      	ldr	r1, [pc, #152]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004eca:	d105      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ecc:	4b21      	ldr	r3, [pc, #132]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4a20      	ldr	r2, [pc, #128]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ed2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d015      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eea:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ef2:	4918      	ldr	r1, [pc, #96]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f02:	d105      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f04:	4b13      	ldr	r3, [pc, #76]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	4a12      	ldr	r2, [pc, #72]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f0e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d015      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f2a:	490a      	ldr	r1, [pc, #40]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f3c:	4b05      	ldr	r3, [pc, #20]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a04      	ldr	r2, [pc, #16]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004f48:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40021000 	.word	0x40021000

08004f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e049      	b.n	8004ffe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f841 	bl	8005006 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f000 fd7a 	bl	8005a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b01      	cmp	r3, #1
 800502e:	d001      	beq.n	8005034 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e054      	b.n	80050de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a26      	ldr	r2, [pc, #152]	@ (80050ec <HAL_TIM_Base_Start_IT+0xd0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d022      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800505e:	d01d      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a22      	ldr	r2, [pc, #136]	@ (80050f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d018      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a21      	ldr	r2, [pc, #132]	@ (80050f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d013      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1f      	ldr	r2, [pc, #124]	@ (80050f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00e      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1e      	ldr	r2, [pc, #120]	@ (80050fc <HAL_TIM_Base_Start_IT+0xe0>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d009      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1c      	ldr	r2, [pc, #112]	@ (8005100 <HAL_TIM_Base_Start_IT+0xe4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1b      	ldr	r2, [pc, #108]	@ (8005104 <HAL_TIM_Base_Start_IT+0xe8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d115      	bne.n	80050c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	4b19      	ldr	r3, [pc, #100]	@ (8005108 <HAL_TIM_Base_Start_IT+0xec>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b06      	cmp	r3, #6
 80050ac:	d015      	beq.n	80050da <HAL_TIM_Base_Start_IT+0xbe>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b4:	d011      	beq.n	80050da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0201 	orr.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c6:	e008      	b.n	80050da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	e000      	b.n	80050dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40012c00 	.word	0x40012c00
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40000c00 	.word	0x40000c00
 80050fc:	40013400 	.word	0x40013400
 8005100:	40014000 	.word	0x40014000
 8005104:	40015000 	.word	0x40015000
 8005108:	00010007 	.word	0x00010007

0800510c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e049      	b.n	80051b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fc f86e 	bl	8001214 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3304      	adds	r3, #4
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f000 fca0 	bl	8005a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d109      	bne.n	80051e0 <HAL_TIM_PWM_Start+0x24>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	bf14      	ite	ne
 80051d8:	2301      	movne	r3, #1
 80051da:	2300      	moveq	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	e03c      	b.n	800525a <HAL_TIM_PWM_Start+0x9e>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d109      	bne.n	80051fa <HAL_TIM_PWM_Start+0x3e>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	bf14      	ite	ne
 80051f2:	2301      	movne	r3, #1
 80051f4:	2300      	moveq	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	e02f      	b.n	800525a <HAL_TIM_PWM_Start+0x9e>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d109      	bne.n	8005214 <HAL_TIM_PWM_Start+0x58>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b01      	cmp	r3, #1
 800520a:	bf14      	ite	ne
 800520c:	2301      	movne	r3, #1
 800520e:	2300      	moveq	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	e022      	b.n	800525a <HAL_TIM_PWM_Start+0x9e>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b0c      	cmp	r3, #12
 8005218:	d109      	bne.n	800522e <HAL_TIM_PWM_Start+0x72>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b01      	cmp	r3, #1
 8005224:	bf14      	ite	ne
 8005226:	2301      	movne	r3, #1
 8005228:	2300      	moveq	r3, #0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	e015      	b.n	800525a <HAL_TIM_PWM_Start+0x9e>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b10      	cmp	r3, #16
 8005232:	d109      	bne.n	8005248 <HAL_TIM_PWM_Start+0x8c>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b01      	cmp	r3, #1
 800523e:	bf14      	ite	ne
 8005240:	2301      	movne	r3, #1
 8005242:	2300      	moveq	r3, #0
 8005244:	b2db      	uxtb	r3, r3
 8005246:	e008      	b.n	800525a <HAL_TIM_PWM_Start+0x9e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e0a6      	b.n	80053b0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d104      	bne.n	8005272 <HAL_TIM_PWM_Start+0xb6>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005270:	e023      	b.n	80052ba <HAL_TIM_PWM_Start+0xfe>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b04      	cmp	r3, #4
 8005276:	d104      	bne.n	8005282 <HAL_TIM_PWM_Start+0xc6>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005280:	e01b      	b.n	80052ba <HAL_TIM_PWM_Start+0xfe>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b08      	cmp	r3, #8
 8005286:	d104      	bne.n	8005292 <HAL_TIM_PWM_Start+0xd6>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005290:	e013      	b.n	80052ba <HAL_TIM_PWM_Start+0xfe>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b0c      	cmp	r3, #12
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_PWM_Start+0xe6>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052a0:	e00b      	b.n	80052ba <HAL_TIM_PWM_Start+0xfe>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b10      	cmp	r3, #16
 80052a6:	d104      	bne.n	80052b2 <HAL_TIM_PWM_Start+0xf6>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052b0:	e003      	b.n	80052ba <HAL_TIM_PWM_Start+0xfe>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2202      	movs	r2, #2
 80052b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2201      	movs	r2, #1
 80052c0:	6839      	ldr	r1, [r7, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 f82a 	bl	800631c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a3a      	ldr	r2, [pc, #232]	@ (80053b8 <HAL_TIM_PWM_Start+0x1fc>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d018      	beq.n	8005304 <HAL_TIM_PWM_Start+0x148>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a39      	ldr	r2, [pc, #228]	@ (80053bc <HAL_TIM_PWM_Start+0x200>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d013      	beq.n	8005304 <HAL_TIM_PWM_Start+0x148>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a37      	ldr	r2, [pc, #220]	@ (80053c0 <HAL_TIM_PWM_Start+0x204>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00e      	beq.n	8005304 <HAL_TIM_PWM_Start+0x148>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a36      	ldr	r2, [pc, #216]	@ (80053c4 <HAL_TIM_PWM_Start+0x208>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d009      	beq.n	8005304 <HAL_TIM_PWM_Start+0x148>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a34      	ldr	r2, [pc, #208]	@ (80053c8 <HAL_TIM_PWM_Start+0x20c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d004      	beq.n	8005304 <HAL_TIM_PWM_Start+0x148>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a33      	ldr	r2, [pc, #204]	@ (80053cc <HAL_TIM_PWM_Start+0x210>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d101      	bne.n	8005308 <HAL_TIM_PWM_Start+0x14c>
 8005304:	2301      	movs	r3, #1
 8005306:	e000      	b.n	800530a <HAL_TIM_PWM_Start+0x14e>
 8005308:	2300      	movs	r3, #0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800531c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a25      	ldr	r2, [pc, #148]	@ (80053b8 <HAL_TIM_PWM_Start+0x1fc>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d022      	beq.n	800536e <HAL_TIM_PWM_Start+0x1b2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005330:	d01d      	beq.n	800536e <HAL_TIM_PWM_Start+0x1b2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a26      	ldr	r2, [pc, #152]	@ (80053d0 <HAL_TIM_PWM_Start+0x214>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d018      	beq.n	800536e <HAL_TIM_PWM_Start+0x1b2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a24      	ldr	r2, [pc, #144]	@ (80053d4 <HAL_TIM_PWM_Start+0x218>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_TIM_PWM_Start+0x1b2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a23      	ldr	r2, [pc, #140]	@ (80053d8 <HAL_TIM_PWM_Start+0x21c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_TIM_PWM_Start+0x1b2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a19      	ldr	r2, [pc, #100]	@ (80053bc <HAL_TIM_PWM_Start+0x200>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_TIM_PWM_Start+0x1b2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a18      	ldr	r2, [pc, #96]	@ (80053c0 <HAL_TIM_PWM_Start+0x204>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_TIM_PWM_Start+0x1b2>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a18      	ldr	r2, [pc, #96]	@ (80053cc <HAL_TIM_PWM_Start+0x210>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d115      	bne.n	800539a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	4b19      	ldr	r3, [pc, #100]	@ (80053dc <HAL_TIM_PWM_Start+0x220>)
 8005376:	4013      	ands	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b06      	cmp	r3, #6
 800537e:	d015      	beq.n	80053ac <HAL_TIM_PWM_Start+0x1f0>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005386:	d011      	beq.n	80053ac <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005398:	e008      	b.n	80053ac <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 0201 	orr.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	e000      	b.n	80053ae <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40012c00 	.word	0x40012c00
 80053bc:	40013400 	.word	0x40013400
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40014400 	.word	0x40014400
 80053c8:	40014800 	.word	0x40014800
 80053cc:	40015000 	.word	0x40015000
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800
 80053d8:	40000c00 	.word	0x40000c00
 80053dc:	00010007 	.word	0x00010007

080053e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2200      	movs	r2, #0
 80053f0:	6839      	ldr	r1, [r7, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 ff92 	bl	800631c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a40      	ldr	r2, [pc, #256]	@ (8005500 <HAL_TIM_PWM_Stop+0x120>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d018      	beq.n	8005434 <HAL_TIM_PWM_Stop+0x54>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a3f      	ldr	r2, [pc, #252]	@ (8005504 <HAL_TIM_PWM_Stop+0x124>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d013      	beq.n	8005434 <HAL_TIM_PWM_Stop+0x54>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a3d      	ldr	r2, [pc, #244]	@ (8005508 <HAL_TIM_PWM_Stop+0x128>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00e      	beq.n	8005434 <HAL_TIM_PWM_Stop+0x54>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a3c      	ldr	r2, [pc, #240]	@ (800550c <HAL_TIM_PWM_Stop+0x12c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d009      	beq.n	8005434 <HAL_TIM_PWM_Stop+0x54>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a3a      	ldr	r2, [pc, #232]	@ (8005510 <HAL_TIM_PWM_Stop+0x130>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_TIM_PWM_Stop+0x54>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a39      	ldr	r2, [pc, #228]	@ (8005514 <HAL_TIM_PWM_Stop+0x134>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d101      	bne.n	8005438 <HAL_TIM_PWM_Stop+0x58>
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <HAL_TIM_PWM_Stop+0x5a>
 8005438:	2300      	movs	r3, #0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d017      	beq.n	800546e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6a1a      	ldr	r2, [r3, #32]
 8005444:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005448:	4013      	ands	r3, r2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10f      	bne.n	800546e <HAL_TIM_PWM_Stop+0x8e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6a1a      	ldr	r2, [r3, #32]
 8005454:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005458:	4013      	ands	r3, r2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d107      	bne.n	800546e <HAL_TIM_PWM_Stop+0x8e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800546c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6a1a      	ldr	r2, [r3, #32]
 8005474:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005478:	4013      	ands	r3, r2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10f      	bne.n	800549e <HAL_TIM_PWM_Stop+0xbe>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6a1a      	ldr	r2, [r3, #32]
 8005484:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005488:	4013      	ands	r3, r2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d107      	bne.n	800549e <HAL_TIM_PWM_Stop+0xbe>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0201 	bic.w	r2, r2, #1
 800549c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_PWM_Stop+0xce>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054ac:	e023      	b.n	80054f6 <HAL_TIM_PWM_Stop+0x116>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d104      	bne.n	80054be <HAL_TIM_PWM_Stop+0xde>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054bc:	e01b      	b.n	80054f6 <HAL_TIM_PWM_Stop+0x116>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d104      	bne.n	80054ce <HAL_TIM_PWM_Stop+0xee>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054cc:	e013      	b.n	80054f6 <HAL_TIM_PWM_Stop+0x116>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b0c      	cmp	r3, #12
 80054d2:	d104      	bne.n	80054de <HAL_TIM_PWM_Stop+0xfe>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054dc:	e00b      	b.n	80054f6 <HAL_TIM_PWM_Stop+0x116>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b10      	cmp	r3, #16
 80054e2:	d104      	bne.n	80054ee <HAL_TIM_PWM_Stop+0x10e>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054ec:	e003      	b.n	80054f6 <HAL_TIM_PWM_Stop+0x116>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40012c00 	.word	0x40012c00
 8005504:	40013400 	.word	0x40013400
 8005508:	40014000 	.word	0x40014000
 800550c:	40014400 	.word	0x40014400
 8005510:	40014800 	.word	0x40014800
 8005514:	40015000 	.word	0x40015000

08005518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b02      	cmp	r3, #2
 800552c:	d122      	bne.n	8005574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b02      	cmp	r3, #2
 800553a:	d11b      	bne.n	8005574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0202 	mvn.w	r2, #2
 8005544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fa7a 	bl	8005a54 <HAL_TIM_IC_CaptureCallback>
 8005560:	e005      	b.n	800556e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fa6c 	bl	8005a40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fa7d 	bl	8005a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b04      	cmp	r3, #4
 8005580:	d122      	bne.n	80055c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b04      	cmp	r3, #4
 800558e:	d11b      	bne.n	80055c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0204 	mvn.w	r2, #4
 8005598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2202      	movs	r2, #2
 800559e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fa50 	bl	8005a54 <HAL_TIM_IC_CaptureCallback>
 80055b4:	e005      	b.n	80055c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fa42 	bl	8005a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fa53 	bl	8005a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d122      	bne.n	800561c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d11b      	bne.n	800561c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0208 	mvn.w	r2, #8
 80055ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2204      	movs	r2, #4
 80055f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa26 	bl	8005a54 <HAL_TIM_IC_CaptureCallback>
 8005608:	e005      	b.n	8005616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fa18 	bl	8005a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fa29 	bl	8005a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0310 	and.w	r3, r3, #16
 8005626:	2b10      	cmp	r3, #16
 8005628:	d122      	bne.n	8005670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b10      	cmp	r3, #16
 8005636:	d11b      	bne.n	8005670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0210 	mvn.w	r2, #16
 8005640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2208      	movs	r2, #8
 8005646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f9fc 	bl	8005a54 <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f9ee 	bl	8005a40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f9ff 	bl	8005a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d10e      	bne.n	800569c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b01      	cmp	r3, #1
 800568a:	d107      	bne.n	800569c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0201 	mvn.w	r2, #1
 8005694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fb fae4 	bl	8000c64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a6:	2b80      	cmp	r3, #128	@ 0x80
 80056a8:	d10e      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b4:	2b80      	cmp	r3, #128	@ 0x80
 80056b6:	d107      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80056c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f001 f970 	bl	80069a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056d6:	d10e      	bne.n	80056f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e2:	2b80      	cmp	r3, #128	@ 0x80
 80056e4:	d107      	bne.n	80056f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80056ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f001 f963 	bl	80069bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005700:	2b40      	cmp	r3, #64	@ 0x40
 8005702:	d10e      	bne.n	8005722 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570e:	2b40      	cmp	r3, #64	@ 0x40
 8005710:	d107      	bne.n	8005722 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800571a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f9ad 	bl	8005a7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b20      	cmp	r3, #32
 800572e:	d10e      	bne.n	800574e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b20      	cmp	r3, #32
 800573c:	d107      	bne.n	800574e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f06f 0220 	mvn.w	r2, #32
 8005746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f001 f923 	bl	8006994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005758:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800575c:	d10f      	bne.n	800577e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005768:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800576c:	d107      	bne.n	800577e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f001 f929 	bl	80069d0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005788:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800578c:	d10f      	bne.n	80057ae <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005798:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800579c:	d107      	bne.n	80057ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80057a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f001 f91b 	bl	80069e4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057bc:	d10f      	bne.n	80057de <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057cc:	d107      	bne.n	80057de <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80057d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 f90d 	bl	80069f8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057ec:	d10f      	bne.n	800580e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057fc:	d107      	bne.n	800580e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f001 f8ff 	bl	8006a0c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800582e:	2b01      	cmp	r3, #1
 8005830:	d101      	bne.n	8005836 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005832:	2302      	movs	r3, #2
 8005834:	e0ff      	b.n	8005a36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b14      	cmp	r3, #20
 8005842:	f200 80f0 	bhi.w	8005a26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005846:	a201      	add	r2, pc, #4	@ (adr r2, 800584c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584c:	080058a1 	.word	0x080058a1
 8005850:	08005a27 	.word	0x08005a27
 8005854:	08005a27 	.word	0x08005a27
 8005858:	08005a27 	.word	0x08005a27
 800585c:	080058e1 	.word	0x080058e1
 8005860:	08005a27 	.word	0x08005a27
 8005864:	08005a27 	.word	0x08005a27
 8005868:	08005a27 	.word	0x08005a27
 800586c:	08005923 	.word	0x08005923
 8005870:	08005a27 	.word	0x08005a27
 8005874:	08005a27 	.word	0x08005a27
 8005878:	08005a27 	.word	0x08005a27
 800587c:	08005963 	.word	0x08005963
 8005880:	08005a27 	.word	0x08005a27
 8005884:	08005a27 	.word	0x08005a27
 8005888:	08005a27 	.word	0x08005a27
 800588c:	080059a5 	.word	0x080059a5
 8005890:	08005a27 	.word	0x08005a27
 8005894:	08005a27 	.word	0x08005a27
 8005898:	08005a27 	.word	0x08005a27
 800589c:	080059e5 	.word	0x080059e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68b9      	ldr	r1, [r7, #8]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 f99a 	bl	8005be0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699a      	ldr	r2, [r3, #24]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0208 	orr.w	r2, r2, #8
 80058ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0204 	bic.w	r2, r2, #4
 80058ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6999      	ldr	r1, [r3, #24]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	619a      	str	r2, [r3, #24]
      break;
 80058de:	e0a5      	b.n	8005a2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fa14 	bl	8005d14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699a      	ldr	r2, [r3, #24]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800590a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6999      	ldr	r1, [r3, #24]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	021a      	lsls	r2, r3, #8
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	619a      	str	r2, [r3, #24]
      break;
 8005920:	e084      	b.n	8005a2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68b9      	ldr	r1, [r7, #8]
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fa87 	bl	8005e3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69da      	ldr	r2, [r3, #28]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f042 0208 	orr.w	r2, r2, #8
 800593c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69da      	ldr	r2, [r3, #28]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0204 	bic.w	r2, r2, #4
 800594c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69d9      	ldr	r1, [r3, #28]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	61da      	str	r2, [r3, #28]
      break;
 8005960:	e064      	b.n	8005a2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68b9      	ldr	r1, [r7, #8]
 8005968:	4618      	mov	r0, r3
 800596a:	f000 faf9 	bl	8005f60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69da      	ldr	r2, [r3, #28]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800597c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800598c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69d9      	ldr	r1, [r3, #28]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	021a      	lsls	r2, r3, #8
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	61da      	str	r2, [r3, #28]
      break;
 80059a2:	e043      	b.n	8005a2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68b9      	ldr	r1, [r7, #8]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fb6c 	bl	8006088 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0208 	orr.w	r2, r2, #8
 80059be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0204 	bic.w	r2, r2, #4
 80059ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	691a      	ldr	r2, [r3, #16]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80059e2:	e023      	b.n	8005a2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68b9      	ldr	r1, [r7, #8]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fbb6 	bl	800615c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a0e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	021a      	lsls	r2, r3, #8
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005a24:	e002      	b.n	8005a2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	75fb      	strb	r3, [r7, #23]
      break;
 8005a2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop

08005a40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a46      	ldr	r2, [pc, #280]	@ (8005bbc <TIM_Base_SetConfig+0x12c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d017      	beq.n	8005ad8 <TIM_Base_SetConfig+0x48>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aae:	d013      	beq.n	8005ad8 <TIM_Base_SetConfig+0x48>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a43      	ldr	r2, [pc, #268]	@ (8005bc0 <TIM_Base_SetConfig+0x130>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00f      	beq.n	8005ad8 <TIM_Base_SetConfig+0x48>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a42      	ldr	r2, [pc, #264]	@ (8005bc4 <TIM_Base_SetConfig+0x134>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00b      	beq.n	8005ad8 <TIM_Base_SetConfig+0x48>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a41      	ldr	r2, [pc, #260]	@ (8005bc8 <TIM_Base_SetConfig+0x138>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d007      	beq.n	8005ad8 <TIM_Base_SetConfig+0x48>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a40      	ldr	r2, [pc, #256]	@ (8005bcc <TIM_Base_SetConfig+0x13c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d003      	beq.n	8005ad8 <TIM_Base_SetConfig+0x48>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a3f      	ldr	r2, [pc, #252]	@ (8005bd0 <TIM_Base_SetConfig+0x140>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d108      	bne.n	8005aea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a33      	ldr	r2, [pc, #204]	@ (8005bbc <TIM_Base_SetConfig+0x12c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d023      	beq.n	8005b3a <TIM_Base_SetConfig+0xaa>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005af8:	d01f      	beq.n	8005b3a <TIM_Base_SetConfig+0xaa>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a30      	ldr	r2, [pc, #192]	@ (8005bc0 <TIM_Base_SetConfig+0x130>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d01b      	beq.n	8005b3a <TIM_Base_SetConfig+0xaa>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a2f      	ldr	r2, [pc, #188]	@ (8005bc4 <TIM_Base_SetConfig+0x134>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d017      	beq.n	8005b3a <TIM_Base_SetConfig+0xaa>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a2e      	ldr	r2, [pc, #184]	@ (8005bc8 <TIM_Base_SetConfig+0x138>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d013      	beq.n	8005b3a <TIM_Base_SetConfig+0xaa>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a2d      	ldr	r2, [pc, #180]	@ (8005bcc <TIM_Base_SetConfig+0x13c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00f      	beq.n	8005b3a <TIM_Base_SetConfig+0xaa>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a2d      	ldr	r2, [pc, #180]	@ (8005bd4 <TIM_Base_SetConfig+0x144>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d00b      	beq.n	8005b3a <TIM_Base_SetConfig+0xaa>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a2c      	ldr	r2, [pc, #176]	@ (8005bd8 <TIM_Base_SetConfig+0x148>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d007      	beq.n	8005b3a <TIM_Base_SetConfig+0xaa>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8005bdc <TIM_Base_SetConfig+0x14c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d003      	beq.n	8005b3a <TIM_Base_SetConfig+0xaa>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a26      	ldr	r2, [pc, #152]	@ (8005bd0 <TIM_Base_SetConfig+0x140>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d108      	bne.n	8005b4c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a12      	ldr	r2, [pc, #72]	@ (8005bbc <TIM_Base_SetConfig+0x12c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d013      	beq.n	8005ba0 <TIM_Base_SetConfig+0x110>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a14      	ldr	r2, [pc, #80]	@ (8005bcc <TIM_Base_SetConfig+0x13c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00f      	beq.n	8005ba0 <TIM_Base_SetConfig+0x110>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a14      	ldr	r2, [pc, #80]	@ (8005bd4 <TIM_Base_SetConfig+0x144>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00b      	beq.n	8005ba0 <TIM_Base_SetConfig+0x110>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a13      	ldr	r2, [pc, #76]	@ (8005bd8 <TIM_Base_SetConfig+0x148>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d007      	beq.n	8005ba0 <TIM_Base_SetConfig+0x110>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a12      	ldr	r2, [pc, #72]	@ (8005bdc <TIM_Base_SetConfig+0x14c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d003      	beq.n	8005ba0 <TIM_Base_SetConfig+0x110>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a0d      	ldr	r2, [pc, #52]	@ (8005bd0 <TIM_Base_SetConfig+0x140>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d103      	bne.n	8005ba8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	615a      	str	r2, [r3, #20]
}
 8005bae:	bf00      	nop
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40000400 	.word	0x40000400
 8005bc4:	40000800 	.word	0x40000800
 8005bc8:	40000c00 	.word	0x40000c00
 8005bcc:	40013400 	.word	0x40013400
 8005bd0:	40015000 	.word	0x40015000
 8005bd4:	40014000 	.word	0x40014000
 8005bd8:	40014400 	.word	0x40014400
 8005bdc:	40014800 	.word	0x40014800

08005be0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f023 0201 	bic.w	r2, r3, #1
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0303 	bic.w	r3, r3, #3
 8005c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f023 0302 	bic.w	r3, r3, #2
 8005c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a30      	ldr	r2, [pc, #192]	@ (8005cfc <TIM_OC1_SetConfig+0x11c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d013      	beq.n	8005c68 <TIM_OC1_SetConfig+0x88>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a2f      	ldr	r2, [pc, #188]	@ (8005d00 <TIM_OC1_SetConfig+0x120>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d00f      	beq.n	8005c68 <TIM_OC1_SetConfig+0x88>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a2e      	ldr	r2, [pc, #184]	@ (8005d04 <TIM_OC1_SetConfig+0x124>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00b      	beq.n	8005c68 <TIM_OC1_SetConfig+0x88>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a2d      	ldr	r2, [pc, #180]	@ (8005d08 <TIM_OC1_SetConfig+0x128>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d007      	beq.n	8005c68 <TIM_OC1_SetConfig+0x88>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8005d0c <TIM_OC1_SetConfig+0x12c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d003      	beq.n	8005c68 <TIM_OC1_SetConfig+0x88>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a2b      	ldr	r2, [pc, #172]	@ (8005d10 <TIM_OC1_SetConfig+0x130>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d10c      	bne.n	8005c82 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f023 0308 	bic.w	r3, r3, #8
 8005c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f023 0304 	bic.w	r3, r3, #4
 8005c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a1d      	ldr	r2, [pc, #116]	@ (8005cfc <TIM_OC1_SetConfig+0x11c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <TIM_OC1_SetConfig+0xd2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005d00 <TIM_OC1_SetConfig+0x120>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00f      	beq.n	8005cb2 <TIM_OC1_SetConfig+0xd2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a1b      	ldr	r2, [pc, #108]	@ (8005d04 <TIM_OC1_SetConfig+0x124>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00b      	beq.n	8005cb2 <TIM_OC1_SetConfig+0xd2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005d08 <TIM_OC1_SetConfig+0x128>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d007      	beq.n	8005cb2 <TIM_OC1_SetConfig+0xd2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a19      	ldr	r2, [pc, #100]	@ (8005d0c <TIM_OC1_SetConfig+0x12c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d003      	beq.n	8005cb2 <TIM_OC1_SetConfig+0xd2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a18      	ldr	r2, [pc, #96]	@ (8005d10 <TIM_OC1_SetConfig+0x130>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d111      	bne.n	8005cd6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	621a      	str	r2, [r3, #32]
}
 8005cf0:	bf00      	nop
 8005cf2:	371c      	adds	r7, #28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40013400 	.word	0x40013400
 8005d04:	40014000 	.word	0x40014000
 8005d08:	40014400 	.word	0x40014400
 8005d0c:	40014800 	.word	0x40014800
 8005d10:	40015000 	.word	0x40015000

08005d14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	f023 0210 	bic.w	r2, r3, #16
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	021b      	lsls	r3, r3, #8
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f023 0320 	bic.w	r3, r3, #32
 8005d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a2c      	ldr	r2, [pc, #176]	@ (8005e24 <TIM_OC2_SetConfig+0x110>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d007      	beq.n	8005d88 <TIM_OC2_SetConfig+0x74>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a2b      	ldr	r2, [pc, #172]	@ (8005e28 <TIM_OC2_SetConfig+0x114>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d003      	beq.n	8005d88 <TIM_OC2_SetConfig+0x74>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a2a      	ldr	r2, [pc, #168]	@ (8005e2c <TIM_OC2_SetConfig+0x118>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d10d      	bne.n	8005da4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005da2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e24 <TIM_OC2_SetConfig+0x110>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d013      	beq.n	8005dd4 <TIM_OC2_SetConfig+0xc0>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a1e      	ldr	r2, [pc, #120]	@ (8005e28 <TIM_OC2_SetConfig+0x114>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00f      	beq.n	8005dd4 <TIM_OC2_SetConfig+0xc0>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a1e      	ldr	r2, [pc, #120]	@ (8005e30 <TIM_OC2_SetConfig+0x11c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00b      	beq.n	8005dd4 <TIM_OC2_SetConfig+0xc0>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8005e34 <TIM_OC2_SetConfig+0x120>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d007      	beq.n	8005dd4 <TIM_OC2_SetConfig+0xc0>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8005e38 <TIM_OC2_SetConfig+0x124>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d003      	beq.n	8005dd4 <TIM_OC2_SetConfig+0xc0>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a17      	ldr	r2, [pc, #92]	@ (8005e2c <TIM_OC2_SetConfig+0x118>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d113      	bne.n	8005dfc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005dda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005de2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	621a      	str	r2, [r3, #32]
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40012c00 	.word	0x40012c00
 8005e28:	40013400 	.word	0x40013400
 8005e2c:	40015000 	.word	0x40015000
 8005e30:	40014000 	.word	0x40014000
 8005e34:	40014400 	.word	0x40014400
 8005e38:	40014800 	.word	0x40014800

08005e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a2b      	ldr	r2, [pc, #172]	@ (8005f48 <TIM_OC3_SetConfig+0x10c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d007      	beq.n	8005eae <TIM_OC3_SetConfig+0x72>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8005f4c <TIM_OC3_SetConfig+0x110>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d003      	beq.n	8005eae <TIM_OC3_SetConfig+0x72>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a29      	ldr	r2, [pc, #164]	@ (8005f50 <TIM_OC3_SetConfig+0x114>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d10d      	bne.n	8005eca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8005f48 <TIM_OC3_SetConfig+0x10c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d013      	beq.n	8005efa <TIM_OC3_SetConfig+0xbe>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8005f4c <TIM_OC3_SetConfig+0x110>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00f      	beq.n	8005efa <TIM_OC3_SetConfig+0xbe>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a1d      	ldr	r2, [pc, #116]	@ (8005f54 <TIM_OC3_SetConfig+0x118>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00b      	beq.n	8005efa <TIM_OC3_SetConfig+0xbe>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f58 <TIM_OC3_SetConfig+0x11c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d007      	beq.n	8005efa <TIM_OC3_SetConfig+0xbe>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a1b      	ldr	r2, [pc, #108]	@ (8005f5c <TIM_OC3_SetConfig+0x120>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d003      	beq.n	8005efa <TIM_OC3_SetConfig+0xbe>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a16      	ldr	r2, [pc, #88]	@ (8005f50 <TIM_OC3_SetConfig+0x114>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d113      	bne.n	8005f22 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	621a      	str	r2, [r3, #32]
}
 8005f3c:	bf00      	nop
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	40012c00 	.word	0x40012c00
 8005f4c:	40013400 	.word	0x40013400
 8005f50:	40015000 	.word	0x40015000
 8005f54:	40014000 	.word	0x40014000
 8005f58:	40014400 	.word	0x40014400
 8005f5c:	40014800 	.word	0x40014800

08005f60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	021b      	lsls	r3, r3, #8
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	031b      	lsls	r3, r3, #12
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a2c      	ldr	r2, [pc, #176]	@ (8006070 <TIM_OC4_SetConfig+0x110>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d007      	beq.n	8005fd4 <TIM_OC4_SetConfig+0x74>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a2b      	ldr	r2, [pc, #172]	@ (8006074 <TIM_OC4_SetConfig+0x114>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d003      	beq.n	8005fd4 <TIM_OC4_SetConfig+0x74>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a2a      	ldr	r2, [pc, #168]	@ (8006078 <TIM_OC4_SetConfig+0x118>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d10d      	bne.n	8005ff0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	031b      	lsls	r3, r3, #12
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8006070 <TIM_OC4_SetConfig+0x110>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d013      	beq.n	8006020 <TIM_OC4_SetConfig+0xc0>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8006074 <TIM_OC4_SetConfig+0x114>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00f      	beq.n	8006020 <TIM_OC4_SetConfig+0xc0>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a1e      	ldr	r2, [pc, #120]	@ (800607c <TIM_OC4_SetConfig+0x11c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00b      	beq.n	8006020 <TIM_OC4_SetConfig+0xc0>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a1d      	ldr	r2, [pc, #116]	@ (8006080 <TIM_OC4_SetConfig+0x120>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d007      	beq.n	8006020 <TIM_OC4_SetConfig+0xc0>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a1c      	ldr	r2, [pc, #112]	@ (8006084 <TIM_OC4_SetConfig+0x124>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d003      	beq.n	8006020 <TIM_OC4_SetConfig+0xc0>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a17      	ldr	r2, [pc, #92]	@ (8006078 <TIM_OC4_SetConfig+0x118>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d113      	bne.n	8006048 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006026:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800602e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	019b      	lsls	r3, r3, #6
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	019b      	lsls	r3, r3, #6
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	4313      	orrs	r3, r2
 8006046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	621a      	str	r2, [r3, #32]
}
 8006062:	bf00      	nop
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40012c00 	.word	0x40012c00
 8006074:	40013400 	.word	0x40013400
 8006078:	40015000 	.word	0x40015000
 800607c:	40014000 	.word	0x40014000
 8006080:	40014400 	.word	0x40014400
 8006084:	40014800 	.word	0x40014800

08006088 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80060cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	041b      	lsls	r3, r3, #16
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a19      	ldr	r2, [pc, #100]	@ (8006144 <TIM_OC5_SetConfig+0xbc>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d013      	beq.n	800610a <TIM_OC5_SetConfig+0x82>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a18      	ldr	r2, [pc, #96]	@ (8006148 <TIM_OC5_SetConfig+0xc0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00f      	beq.n	800610a <TIM_OC5_SetConfig+0x82>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a17      	ldr	r2, [pc, #92]	@ (800614c <TIM_OC5_SetConfig+0xc4>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00b      	beq.n	800610a <TIM_OC5_SetConfig+0x82>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a16      	ldr	r2, [pc, #88]	@ (8006150 <TIM_OC5_SetConfig+0xc8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d007      	beq.n	800610a <TIM_OC5_SetConfig+0x82>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a15      	ldr	r2, [pc, #84]	@ (8006154 <TIM_OC5_SetConfig+0xcc>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d003      	beq.n	800610a <TIM_OC5_SetConfig+0x82>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a14      	ldr	r2, [pc, #80]	@ (8006158 <TIM_OC5_SetConfig+0xd0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d109      	bne.n	800611e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006110:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	021b      	lsls	r3, r3, #8
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	621a      	str	r2, [r3, #32]
}
 8006138:	bf00      	nop
 800613a:	371c      	adds	r7, #28
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	40012c00 	.word	0x40012c00
 8006148:	40013400 	.word	0x40013400
 800614c:	40014000 	.word	0x40014000
 8006150:	40014400 	.word	0x40014400
 8006154:	40014800 	.word	0x40014800
 8006158:	40015000 	.word	0x40015000

0800615c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800618a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800618e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	051b      	lsls	r3, r3, #20
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a1a      	ldr	r2, [pc, #104]	@ (800621c <TIM_OC6_SetConfig+0xc0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d013      	beq.n	80061e0 <TIM_OC6_SetConfig+0x84>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a19      	ldr	r2, [pc, #100]	@ (8006220 <TIM_OC6_SetConfig+0xc4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00f      	beq.n	80061e0 <TIM_OC6_SetConfig+0x84>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a18      	ldr	r2, [pc, #96]	@ (8006224 <TIM_OC6_SetConfig+0xc8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d00b      	beq.n	80061e0 <TIM_OC6_SetConfig+0x84>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a17      	ldr	r2, [pc, #92]	@ (8006228 <TIM_OC6_SetConfig+0xcc>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d007      	beq.n	80061e0 <TIM_OC6_SetConfig+0x84>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a16      	ldr	r2, [pc, #88]	@ (800622c <TIM_OC6_SetConfig+0xd0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <TIM_OC6_SetConfig+0x84>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a15      	ldr	r2, [pc, #84]	@ (8006230 <TIM_OC6_SetConfig+0xd4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d109      	bne.n	80061f4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	029b      	lsls	r3, r3, #10
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	621a      	str	r2, [r3, #32]
}
 800620e:	bf00      	nop
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	40012c00 	.word	0x40012c00
 8006220:	40013400 	.word	0x40013400
 8006224:	40014000 	.word	0x40014000
 8006228:	40014400 	.word	0x40014400
 800622c:	40014800 	.word	0x40014800
 8006230:	40015000 	.word	0x40015000

08006234 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	f023 0201 	bic.w	r2, r3, #1
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4a28      	ldr	r2, [pc, #160]	@ (8006300 <TIM_TI1_SetConfig+0xcc>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d01b      	beq.n	800629a <TIM_TI1_SetConfig+0x66>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006268:	d017      	beq.n	800629a <TIM_TI1_SetConfig+0x66>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4a25      	ldr	r2, [pc, #148]	@ (8006304 <TIM_TI1_SetConfig+0xd0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <TIM_TI1_SetConfig+0x66>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4a24      	ldr	r2, [pc, #144]	@ (8006308 <TIM_TI1_SetConfig+0xd4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00f      	beq.n	800629a <TIM_TI1_SetConfig+0x66>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4a23      	ldr	r2, [pc, #140]	@ (800630c <TIM_TI1_SetConfig+0xd8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00b      	beq.n	800629a <TIM_TI1_SetConfig+0x66>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4a22      	ldr	r2, [pc, #136]	@ (8006310 <TIM_TI1_SetConfig+0xdc>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d007      	beq.n	800629a <TIM_TI1_SetConfig+0x66>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4a21      	ldr	r2, [pc, #132]	@ (8006314 <TIM_TI1_SetConfig+0xe0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d003      	beq.n	800629a <TIM_TI1_SetConfig+0x66>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4a20      	ldr	r2, [pc, #128]	@ (8006318 <TIM_TI1_SetConfig+0xe4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d101      	bne.n	800629e <TIM_TI1_SetConfig+0x6a>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <TIM_TI1_SetConfig+0x6c>
 800629e:	2300      	movs	r3, #0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d008      	beq.n	80062b6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f023 0303 	bic.w	r3, r3, #3
 80062aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	e003      	b.n	80062be <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f023 030a 	bic.w	r3, r3, #10
 80062d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f003 030a 	and.w	r3, r3, #10
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	621a      	str	r2, [r3, #32]
}
 80062f2:	bf00      	nop
 80062f4:	371c      	adds	r7, #28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40012c00 	.word	0x40012c00
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800
 800630c:	40000c00 	.word	0x40000c00
 8006310:	40013400 	.word	0x40013400
 8006314:	40014000 	.word	0x40014000
 8006318:	40015000 	.word	0x40015000

0800631c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f003 031f 	and.w	r3, r3, #31
 800632e:	2201      	movs	r2, #1
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a1a      	ldr	r2, [r3, #32]
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	43db      	mvns	r3, r3
 800633e:	401a      	ands	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a1a      	ldr	r2, [r3, #32]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f003 031f 	and.w	r3, r3, #31
 800634e:	6879      	ldr	r1, [r7, #4]
 8006350:	fa01 f303 	lsl.w	r3, r1, r3
 8006354:	431a      	orrs	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	621a      	str	r2, [r3, #32]
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b08a      	sub	sp, #40	@ 0x28
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e0a0      	b.n	80064bc <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7fa ff60 	bl	8001254 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4619      	mov	r1, r3
 80063a6:	4610      	mov	r0, r2
 80063a8:	f7ff fb72 	bl	8005a90 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6818      	ldr	r0, [r3, #0]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	6819      	ldr	r1, [r3, #0]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	2203      	movs	r2, #3
 80063ba:	f7ff ff3b 	bl	8006234 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	699a      	ldr	r2, [r3, #24]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 020c 	bic.w	r2, r2, #12
 80063cc:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6999      	ldr	r1, [r3, #24]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80063ee:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	6812      	ldr	r2, [r2, #0]
 80063fa:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80063fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006402:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006412:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6812      	ldr	r2, [r2, #0]
 800641e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006422:	f023 0307 	bic.w	r3, r3, #7
 8006426:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0204 	orr.w	r2, r2, #4
 8006436:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006438:	2300      	movs	r3, #0
 800643a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800643c:	2300      	movs	r3, #0
 800643e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006440:	2370      	movs	r3, #112	@ 0x70
 8006442:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006444:	2300      	movs	r3, #0
 8006446:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006448:	2300      	movs	r3, #0
 800644a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800644c:	2300      	movs	r3, #0
 800644e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f107 020c 	add.w	r2, r7, #12
 800645e:	4611      	mov	r1, r2
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff fc57 	bl	8005d14 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6812      	ldr	r2, [r2, #0]
 8006470:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006478:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8006488:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3728      	adds	r7, #40	@ 0x28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d109      	bne.n	80064e8 <HAL_TIMEx_PWMN_Start+0x24>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b01      	cmp	r3, #1
 80064de:	bf14      	ite	ne
 80064e0:	2301      	movne	r3, #1
 80064e2:	2300      	moveq	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	e022      	b.n	800652e <HAL_TIMEx_PWMN_Start+0x6a>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d109      	bne.n	8006502 <HAL_TIMEx_PWMN_Start+0x3e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	bf14      	ite	ne
 80064fa:	2301      	movne	r3, #1
 80064fc:	2300      	moveq	r3, #0
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	e015      	b.n	800652e <HAL_TIMEx_PWMN_Start+0x6a>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b08      	cmp	r3, #8
 8006506:	d109      	bne.n	800651c <HAL_TIMEx_PWMN_Start+0x58>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b01      	cmp	r3, #1
 8006512:	bf14      	ite	ne
 8006514:	2301      	movne	r3, #1
 8006516:	2300      	moveq	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	e008      	b.n	800652e <HAL_TIMEx_PWMN_Start+0x6a>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b01      	cmp	r3, #1
 8006526:	bf14      	ite	ne
 8006528:	2301      	movne	r3, #1
 800652a:	2300      	moveq	r3, #0
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e073      	b.n	800661e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d104      	bne.n	8006546 <HAL_TIMEx_PWMN_Start+0x82>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006544:	e013      	b.n	800656e <HAL_TIMEx_PWMN_Start+0xaa>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b04      	cmp	r3, #4
 800654a:	d104      	bne.n	8006556 <HAL_TIMEx_PWMN_Start+0x92>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006554:	e00b      	b.n	800656e <HAL_TIMEx_PWMN_Start+0xaa>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b08      	cmp	r3, #8
 800655a:	d104      	bne.n	8006566 <HAL_TIMEx_PWMN_Start+0xa2>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006564:	e003      	b.n	800656e <HAL_TIMEx_PWMN_Start+0xaa>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2202      	movs	r2, #2
 800656a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2204      	movs	r2, #4
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fa52 	bl	8006a20 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800658a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a25      	ldr	r2, [pc, #148]	@ (8006628 <HAL_TIMEx_PWMN_Start+0x164>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d022      	beq.n	80065dc <HAL_TIMEx_PWMN_Start+0x118>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800659e:	d01d      	beq.n	80065dc <HAL_TIMEx_PWMN_Start+0x118>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a21      	ldr	r2, [pc, #132]	@ (800662c <HAL_TIMEx_PWMN_Start+0x168>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d018      	beq.n	80065dc <HAL_TIMEx_PWMN_Start+0x118>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a20      	ldr	r2, [pc, #128]	@ (8006630 <HAL_TIMEx_PWMN_Start+0x16c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d013      	beq.n	80065dc <HAL_TIMEx_PWMN_Start+0x118>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006634 <HAL_TIMEx_PWMN_Start+0x170>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d00e      	beq.n	80065dc <HAL_TIMEx_PWMN_Start+0x118>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1d      	ldr	r2, [pc, #116]	@ (8006638 <HAL_TIMEx_PWMN_Start+0x174>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d009      	beq.n	80065dc <HAL_TIMEx_PWMN_Start+0x118>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1b      	ldr	r2, [pc, #108]	@ (800663c <HAL_TIMEx_PWMN_Start+0x178>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d004      	beq.n	80065dc <HAL_TIMEx_PWMN_Start+0x118>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006640 <HAL_TIMEx_PWMN_Start+0x17c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d115      	bne.n	8006608 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689a      	ldr	r2, [r3, #8]
 80065e2:	4b18      	ldr	r3, [pc, #96]	@ (8006644 <HAL_TIMEx_PWMN_Start+0x180>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b06      	cmp	r3, #6
 80065ec:	d015      	beq.n	800661a <HAL_TIMEx_PWMN_Start+0x156>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f4:	d011      	beq.n	800661a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f042 0201 	orr.w	r2, r2, #1
 8006604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006606:	e008      	b.n	800661a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0201 	orr.w	r2, r2, #1
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	e000      	b.n	800661c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800661a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	40012c00 	.word	0x40012c00
 800662c:	40000400 	.word	0x40000400
 8006630:	40000800 	.word	0x40000800
 8006634:	40000c00 	.word	0x40000c00
 8006638:	40013400 	.word	0x40013400
 800663c:	40014000 	.word	0x40014000
 8006640:	40015000 	.word	0x40015000
 8006644:	00010007 	.word	0x00010007

08006648 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2200      	movs	r2, #0
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	4618      	mov	r0, r3
 800665c:	f000 f9e0 	bl	8006a20 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6a1a      	ldr	r2, [r3, #32]
 8006666:	f241 1311 	movw	r3, #4369	@ 0x1111
 800666a:	4013      	ands	r3, r2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10f      	bne.n	8006690 <HAL_TIMEx_PWMN_Stop+0x48>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6a1a      	ldr	r2, [r3, #32]
 8006676:	f244 4344 	movw	r3, #17476	@ 0x4444
 800667a:	4013      	ands	r3, r2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d107      	bne.n	8006690 <HAL_TIMEx_PWMN_Stop+0x48>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800668e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6a1a      	ldr	r2, [r3, #32]
 8006696:	f241 1311 	movw	r3, #4369	@ 0x1111
 800669a:	4013      	ands	r3, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10f      	bne.n	80066c0 <HAL_TIMEx_PWMN_Stop+0x78>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6a1a      	ldr	r2, [r3, #32]
 80066a6:	f244 4344 	movw	r3, #17476	@ 0x4444
 80066aa:	4013      	ands	r3, r2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d107      	bne.n	80066c0 <HAL_TIMEx_PWMN_Stop+0x78>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0201 	bic.w	r2, r2, #1
 80066be:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d104      	bne.n	80066d0 <HAL_TIMEx_PWMN_Stop+0x88>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066ce:	e013      	b.n	80066f8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d104      	bne.n	80066e0 <HAL_TIMEx_PWMN_Stop+0x98>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066de:	e00b      	b.n	80066f8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b08      	cmp	r3, #8
 80066e4:	d104      	bne.n	80066f0 <HAL_TIMEx_PWMN_Stop+0xa8>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066ee:	e003      	b.n	80066f8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006714:	2b01      	cmp	r3, #1
 8006716:	d101      	bne.n	800671c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006718:	2302      	movs	r3, #2
 800671a:	e074      	b.n	8006806 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a34      	ldr	r2, [pc, #208]	@ (8006814 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d009      	beq.n	800675a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a33      	ldr	r2, [pc, #204]	@ (8006818 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d004      	beq.n	800675a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a31      	ldr	r2, [pc, #196]	@ (800681c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d108      	bne.n	800676c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006760:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006776:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a21      	ldr	r2, [pc, #132]	@ (8006814 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d022      	beq.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800679c:	d01d      	beq.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006820 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d018      	beq.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006824 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d013      	beq.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006828 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00e      	beq.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a15      	ldr	r2, [pc, #84]	@ (8006818 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d009      	beq.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a18      	ldr	r2, [pc, #96]	@ (800682c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d004      	beq.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a11      	ldr	r2, [pc, #68]	@ (800681c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d10c      	bne.n	80067f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40012c00 	.word	0x40012c00
 8006818:	40013400 	.word	0x40013400
 800681c:	40015000 	.word	0x40015000
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40000c00 	.word	0x40000c00
 800682c:	40014000 	.word	0x40014000

08006830 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006844:	2b01      	cmp	r3, #1
 8006846:	d101      	bne.n	800684c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006848:	2302      	movs	r3, #2
 800684a:	e096      	b.n	800697a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	4313      	orrs	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4313      	orrs	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	041b      	lsls	r3, r3, #16
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a2f      	ldr	r2, [pc, #188]	@ (8006988 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d009      	beq.n	80068e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a2d      	ldr	r2, [pc, #180]	@ (800698c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d004      	beq.n	80068e4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a2c      	ldr	r2, [pc, #176]	@ (8006990 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d106      	bne.n	80068f2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a24      	ldr	r2, [pc, #144]	@ (8006988 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d009      	beq.n	8006910 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a22      	ldr	r2, [pc, #136]	@ (800698c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d004      	beq.n	8006910 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a21      	ldr	r2, [pc, #132]	@ (8006990 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d12b      	bne.n	8006968 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691a:	051b      	lsls	r3, r3, #20
 800691c:	4313      	orrs	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a11      	ldr	r2, [pc, #68]	@ (8006988 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d009      	beq.n	800695a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a10      	ldr	r2, [pc, #64]	@ (800698c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d004      	beq.n	800695a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a0e      	ldr	r2, [pc, #56]	@ (8006990 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d106      	bne.n	8006968 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006964:	4313      	orrs	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	40012c00 	.word	0x40012c00
 800698c:	40013400 	.word	0x40013400
 8006990:	40015000 	.word	0x40015000

08006994 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f003 031f 	and.w	r3, r3, #31
 8006a32:	2204      	movs	r2, #4
 8006a34:	fa02 f303 	lsl.w	r3, r2, r3
 8006a38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a1a      	ldr	r2, [r3, #32]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	43db      	mvns	r3, r3
 8006a42:	401a      	ands	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a1a      	ldr	r2, [r3, #32]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	fa01 f303 	lsl.w	r3, r1, r3
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	621a      	str	r2, [r3, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b082      	sub	sp, #8
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e042      	b.n	8006b02 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fa fd42 	bl	8001518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2224      	movs	r2, #36	@ 0x24
 8006a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0201 	bic.w	r2, r2, #1
 8006aaa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fc51 	bl	8007354 <UART_SetConfig>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e022      	b.n	8006b02 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 ff41 	bl	800794c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ad8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ae8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f042 0201 	orr.w	r2, r2, #1
 8006af8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 ffc8 	bl	8007a90 <UART_CheckIdleState>
 8006b00:	4603      	mov	r3, r0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b08a      	sub	sp, #40	@ 0x28
 8006b0e:	af02      	add	r7, sp, #8
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	603b      	str	r3, [r7, #0]
 8006b16:	4613      	mov	r3, r2
 8006b18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b20:	2b20      	cmp	r3, #32
 8006b22:	f040 8083 	bne.w	8006c2c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <HAL_UART_Transmit+0x28>
 8006b2c:	88fb      	ldrh	r3, [r7, #6]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e07b      	b.n	8006c2e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d101      	bne.n	8006b44 <HAL_UART_Transmit+0x3a>
 8006b40:	2302      	movs	r3, #2
 8006b42:	e074      	b.n	8006c2e <HAL_UART_Transmit+0x124>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2221      	movs	r2, #33	@ 0x21
 8006b58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b5c:	f7fb f866 	bl	8001c2c <HAL_GetTick>
 8006b60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	88fa      	ldrh	r2, [r7, #6]
 8006b66:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	88fa      	ldrh	r2, [r7, #6]
 8006b6e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b7a:	d108      	bne.n	8006b8e <HAL_UART_Transmit+0x84>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d104      	bne.n	8006b8e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	61bb      	str	r3, [r7, #24]
 8006b8c:	e003      	b.n	8006b96 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8006b9e:	e02c      	b.n	8006bfa <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2180      	movs	r1, #128	@ 0x80
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 ffbb 	bl	8007b26 <UART_WaitOnFlagUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e039      	b.n	8006c2e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10b      	bne.n	8006bd8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	3302      	adds	r3, #2
 8006bd4:	61bb      	str	r3, [r7, #24]
 8006bd6:	e007      	b.n	8006be8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	781a      	ldrb	r2, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	3301      	adds	r3, #1
 8006be6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1cc      	bne.n	8006ba0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2140      	movs	r1, #64	@ 0x40
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f000 ff88 	bl	8007b26 <UART_WaitOnFlagUntilTimeout>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e006      	b.n	8006c2e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	e000      	b.n	8006c2e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006c2c:	2302      	movs	r3, #2
  }
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3720      	adds	r7, #32
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
	...

08006c38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08a      	sub	sp, #40	@ 0x28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	4613      	mov	r3, r2
 8006c44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c4c:	2b20      	cmp	r3, #32
 8006c4e:	d142      	bne.n	8006cd6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <HAL_UART_Receive_IT+0x24>
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e03b      	b.n	8006cd8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d101      	bne.n	8006c6e <HAL_UART_Receive_IT+0x36>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e034      	b.n	8006cd8 <HAL_UART_Receive_IT+0xa0>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a17      	ldr	r2, [pc, #92]	@ (8006ce0 <HAL_UART_Receive_IT+0xa8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d01f      	beq.n	8006cc6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d018      	beq.n	8006cc6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	e853 3f00 	ldrex	r3, [r3]
 8006ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb2:	623b      	str	r3, [r7, #32]
 8006cb4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb6:	69f9      	ldr	r1, [r7, #28]
 8006cb8:	6a3a      	ldr	r2, [r7, #32]
 8006cba:	e841 2300 	strex	r3, r2, [r1]
 8006cbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e6      	bne.n	8006c94 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006cc6:	88fb      	ldrh	r3, [r7, #6]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 fff3 	bl	8007cb8 <UART_Start_Receive_IT>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	e000      	b.n	8006cd8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006cd6:	2302      	movs	r3, #2
  }
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3728      	adds	r7, #40	@ 0x28
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	40008000 	.word	0x40008000

08006ce4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b0ba      	sub	sp, #232	@ 0xe8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006d0e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006d12:	4013      	ands	r3, r2
 8006d14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006d18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d11b      	bne.n	8006d58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d24:	f003 0320 	and.w	r3, r3, #32
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d015      	beq.n	8006d58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d30:	f003 0320 	and.w	r3, r3, #32
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d105      	bne.n	8006d44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d009      	beq.n	8006d58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 82d6 	beq.w	80072fa <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	4798      	blx	r3
      }
      return;
 8006d56:	e2d0      	b.n	80072fa <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006d58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 811f 	beq.w	8006fa0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006d62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006d66:	4b8b      	ldr	r3, [pc, #556]	@ (8006f94 <HAL_UART_IRQHandler+0x2b0>)
 8006d68:	4013      	ands	r3, r2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d106      	bne.n	8006d7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006d6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006d72:	4b89      	ldr	r3, [pc, #548]	@ (8006f98 <HAL_UART_IRQHandler+0x2b4>)
 8006d74:	4013      	ands	r3, r2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 8112 	beq.w	8006fa0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d011      	beq.n	8006dac <HAL_UART_IRQHandler+0xc8>
 8006d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00b      	beq.n	8006dac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006da2:	f043 0201 	orr.w	r2, r3, #1
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d011      	beq.n	8006ddc <HAL_UART_IRQHandler+0xf8>
 8006db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00b      	beq.n	8006ddc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2202      	movs	r2, #2
 8006dca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006dd2:	f043 0204 	orr.w	r2, r3, #4
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d011      	beq.n	8006e0c <HAL_UART_IRQHandler+0x128>
 8006de8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00b      	beq.n	8006e0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2204      	movs	r2, #4
 8006dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e02:	f043 0202 	orr.w	r2, r3, #2
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e10:	f003 0308 	and.w	r3, r3, #8
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d017      	beq.n	8006e48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d105      	bne.n	8006e30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006e24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006e28:	4b5a      	ldr	r3, [pc, #360]	@ (8006f94 <HAL_UART_IRQHandler+0x2b0>)
 8006e2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00b      	beq.n	8006e48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2208      	movs	r2, #8
 8006e36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e3e:	f043 0208 	orr.w	r2, r3, #8
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d012      	beq.n	8006e7a <HAL_UART_IRQHandler+0x196>
 8006e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00c      	beq.n	8006e7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e70:	f043 0220 	orr.w	r2, r3, #32
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 823c 	beq.w	80072fe <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e8a:	f003 0320 	and.w	r3, r3, #32
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d013      	beq.n	8006eba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e96:	f003 0320 	and.w	r3, r3, #32
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d105      	bne.n	8006eaa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d007      	beq.n	8006eba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ec0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ece:	2b40      	cmp	r3, #64	@ 0x40
 8006ed0:	d005      	beq.n	8006ede <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ed6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d04f      	beq.n	8006f7e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 f814 	bl	8007f0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eee:	2b40      	cmp	r3, #64	@ 0x40
 8006ef0:	d141      	bne.n	8006f76 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3308      	adds	r3, #8
 8006f1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006f1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006f22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006f2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006f36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1d9      	bne.n	8006ef2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d013      	beq.n	8006f6e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f4a:	4a14      	ldr	r2, [pc, #80]	@ (8006f9c <HAL_UART_IRQHandler+0x2b8>)
 8006f4c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fc fc24 	bl	80037a0 <HAL_DMA_Abort_IT>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d017      	beq.n	8006f8e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8006f68:	4610      	mov	r0, r2
 8006f6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f6c:	e00f      	b.n	8006f8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f9da 	bl	8007328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f74:	e00b      	b.n	8006f8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f9d6 	bl	8007328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f7c:	e007      	b.n	8006f8e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f9d2 	bl	8007328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8006f8c:	e1b7      	b.n	80072fe <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f8e:	bf00      	nop
    return;
 8006f90:	e1b5      	b.n	80072fe <HAL_UART_IRQHandler+0x61a>
 8006f92:	bf00      	nop
 8006f94:	10000001 	.word	0x10000001
 8006f98:	04000120 	.word	0x04000120
 8006f9c:	08007fd9 	.word	0x08007fd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	f040 814a 	bne.w	800723e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fae:	f003 0310 	and.w	r3, r3, #16
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 8143 	beq.w	800723e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fbc:	f003 0310 	and.w	r3, r3, #16
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 813c 	beq.w	800723e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2210      	movs	r2, #16
 8006fcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd8:	2b40      	cmp	r3, #64	@ 0x40
 8006fda:	f040 80b5 	bne.w	8007148 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 8187 	beq.w	8007302 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ffe:	429a      	cmp	r2, r3
 8007000:	f080 817f 	bcs.w	8007302 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800700a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b00      	cmp	r3, #0
 800701c:	f040 8086 	bne.w	800712c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007034:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800703c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
 8007046:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800704a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800704e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007056:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1da      	bne.n	8007020 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3308      	adds	r3, #8
 8007070:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007072:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800707a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800707c:	f023 0301 	bic.w	r3, r3, #1
 8007080:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3308      	adds	r3, #8
 800708a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800708e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007092:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007096:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80070a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e1      	bne.n	800706a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3308      	adds	r3, #8
 80070ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80070b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3308      	adds	r3, #8
 80070c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80070ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80070cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80070d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80070d2:	e841 2300 	strex	r3, r2, [r1]
 80070d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80070d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1e3      	bne.n	80070a6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80070fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070fc:	f023 0310 	bic.w	r3, r3, #16
 8007100:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	461a      	mov	r2, r3
 800710a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800710e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007110:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007114:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800711c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1e4      	bne.n	80070ec <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007126:	4618      	mov	r0, r3
 8007128:	f7fc fae1 	bl	80036ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007138:	b29b      	uxth	r3, r3
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	b29b      	uxth	r3, r3
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f8fb 	bl	800733c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007146:	e0dc      	b.n	8007302 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007154:	b29b      	uxth	r3, r3
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007162:	b29b      	uxth	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 80ce 	beq.w	8007306 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800716a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 80c9 	beq.w	8007306 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717c:	e853 3f00 	ldrex	r3, [r3]
 8007180:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007184:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007188:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007196:	647b      	str	r3, [r7, #68]	@ 0x44
 8007198:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800719c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800719e:	e841 2300 	strex	r3, r2, [r1]
 80071a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1e4      	bne.n	8007174 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3308      	adds	r3, #8
 80071b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	623b      	str	r3, [r7, #32]
   return(result);
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071c0:	f023 0301 	bic.w	r3, r3, #1
 80071c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3308      	adds	r3, #8
 80071ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80071d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80071d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80071d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80071e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e1      	bne.n	80071aa <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	e853 3f00 	ldrex	r3, [r3]
 8007206:	60fb      	str	r3, [r7, #12]
   return(result);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 0310 	bic.w	r3, r3, #16
 800720e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800721c:	61fb      	str	r3, [r7, #28]
 800721e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	69b9      	ldr	r1, [r7, #24]
 8007222:	69fa      	ldr	r2, [r7, #28]
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	617b      	str	r3, [r7, #20]
   return(result);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e4      	bne.n	80071fa <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007230:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f880 	bl	800733c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800723c:	e063      	b.n	8007306 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800723e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00e      	beq.n	8007268 <HAL_UART_IRQHandler+0x584>
 800724a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800724e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d008      	beq.n	8007268 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800725e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 fb57 	bl	8008914 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007266:	e051      	b.n	800730c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800726c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007270:	2b00      	cmp	r3, #0
 8007272:	d014      	beq.n	800729e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800727c:	2b00      	cmp	r3, #0
 800727e:	d105      	bne.n	800728c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007284:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d008      	beq.n	800729e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007290:	2b00      	cmp	r3, #0
 8007292:	d03a      	beq.n	800730a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	4798      	blx	r3
    }
    return;
 800729c:	e035      	b.n	800730a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800729e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d009      	beq.n	80072be <HAL_UART_IRQHandler+0x5da>
 80072aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fea4 	bl	8008004 <UART_EndTransmit_IT>
    return;
 80072bc:	e026      	b.n	800730c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80072be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d009      	beq.n	80072de <HAL_UART_IRQHandler+0x5fa>
 80072ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 fb30 	bl	800893c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072dc:	e016      	b.n	800730c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80072de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d010      	beq.n	800730c <HAL_UART_IRQHandler+0x628>
 80072ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	da0c      	bge.n	800730c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 fb18 	bl	8008928 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072f8:	e008      	b.n	800730c <HAL_UART_IRQHandler+0x628>
      return;
 80072fa:	bf00      	nop
 80072fc:	e006      	b.n	800730c <HAL_UART_IRQHandler+0x628>
    return;
 80072fe:	bf00      	nop
 8007300:	e004      	b.n	800730c <HAL_UART_IRQHandler+0x628>
      return;
 8007302:	bf00      	nop
 8007304:	e002      	b.n	800730c <HAL_UART_IRQHandler+0x628>
      return;
 8007306:	bf00      	nop
 8007308:	e000      	b.n	800730c <HAL_UART_IRQHandler+0x628>
    return;
 800730a:	bf00      	nop
  }
}
 800730c:	37e8      	adds	r7, #232	@ 0xe8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop

08007314 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007358:	b08c      	sub	sp, #48	@ 0x30
 800735a:	af00      	add	r7, sp, #0
 800735c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	431a      	orrs	r2, r3
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	431a      	orrs	r2, r3
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	4313      	orrs	r3, r2
 800737a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	4baa      	ldr	r3, [pc, #680]	@ (800762c <UART_SetConfig+0x2d8>)
 8007384:	4013      	ands	r3, r2
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	6812      	ldr	r2, [r2, #0]
 800738a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800738c:	430b      	orrs	r3, r1
 800738e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	68da      	ldr	r2, [r3, #12]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a9f      	ldr	r2, [pc, #636]	@ (8007630 <UART_SetConfig+0x2dc>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d004      	beq.n	80073c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073bc:	4313      	orrs	r3, r2
 80073be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80073ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	6812      	ldr	r2, [r2, #0]
 80073d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073d4:	430b      	orrs	r3, r1
 80073d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073de:	f023 010f 	bic.w	r1, r3, #15
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a90      	ldr	r2, [pc, #576]	@ (8007634 <UART_SetConfig+0x2e0>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d125      	bne.n	8007444 <UART_SetConfig+0xf0>
 80073f8:	4b8f      	ldr	r3, [pc, #572]	@ (8007638 <UART_SetConfig+0x2e4>)
 80073fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	2b03      	cmp	r3, #3
 8007404:	d81a      	bhi.n	800743c <UART_SetConfig+0xe8>
 8007406:	a201      	add	r2, pc, #4	@ (adr r2, 800740c <UART_SetConfig+0xb8>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	0800741d 	.word	0x0800741d
 8007410:	0800742d 	.word	0x0800742d
 8007414:	08007425 	.word	0x08007425
 8007418:	08007435 	.word	0x08007435
 800741c:	2301      	movs	r3, #1
 800741e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007422:	e116      	b.n	8007652 <UART_SetConfig+0x2fe>
 8007424:	2302      	movs	r3, #2
 8007426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800742a:	e112      	b.n	8007652 <UART_SetConfig+0x2fe>
 800742c:	2304      	movs	r3, #4
 800742e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007432:	e10e      	b.n	8007652 <UART_SetConfig+0x2fe>
 8007434:	2308      	movs	r3, #8
 8007436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800743a:	e10a      	b.n	8007652 <UART_SetConfig+0x2fe>
 800743c:	2310      	movs	r3, #16
 800743e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007442:	e106      	b.n	8007652 <UART_SetConfig+0x2fe>
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a7c      	ldr	r2, [pc, #496]	@ (800763c <UART_SetConfig+0x2e8>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d138      	bne.n	80074c0 <UART_SetConfig+0x16c>
 800744e:	4b7a      	ldr	r3, [pc, #488]	@ (8007638 <UART_SetConfig+0x2e4>)
 8007450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007454:	f003 030c 	and.w	r3, r3, #12
 8007458:	2b0c      	cmp	r3, #12
 800745a:	d82d      	bhi.n	80074b8 <UART_SetConfig+0x164>
 800745c:	a201      	add	r2, pc, #4	@ (adr r2, 8007464 <UART_SetConfig+0x110>)
 800745e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007462:	bf00      	nop
 8007464:	08007499 	.word	0x08007499
 8007468:	080074b9 	.word	0x080074b9
 800746c:	080074b9 	.word	0x080074b9
 8007470:	080074b9 	.word	0x080074b9
 8007474:	080074a9 	.word	0x080074a9
 8007478:	080074b9 	.word	0x080074b9
 800747c:	080074b9 	.word	0x080074b9
 8007480:	080074b9 	.word	0x080074b9
 8007484:	080074a1 	.word	0x080074a1
 8007488:	080074b9 	.word	0x080074b9
 800748c:	080074b9 	.word	0x080074b9
 8007490:	080074b9 	.word	0x080074b9
 8007494:	080074b1 	.word	0x080074b1
 8007498:	2300      	movs	r3, #0
 800749a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800749e:	e0d8      	b.n	8007652 <UART_SetConfig+0x2fe>
 80074a0:	2302      	movs	r3, #2
 80074a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074a6:	e0d4      	b.n	8007652 <UART_SetConfig+0x2fe>
 80074a8:	2304      	movs	r3, #4
 80074aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ae:	e0d0      	b.n	8007652 <UART_SetConfig+0x2fe>
 80074b0:	2308      	movs	r3, #8
 80074b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074b6:	e0cc      	b.n	8007652 <UART_SetConfig+0x2fe>
 80074b8:	2310      	movs	r3, #16
 80074ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074be:	e0c8      	b.n	8007652 <UART_SetConfig+0x2fe>
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a5e      	ldr	r2, [pc, #376]	@ (8007640 <UART_SetConfig+0x2ec>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d125      	bne.n	8007516 <UART_SetConfig+0x1c2>
 80074ca:	4b5b      	ldr	r3, [pc, #364]	@ (8007638 <UART_SetConfig+0x2e4>)
 80074cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80074d4:	2b30      	cmp	r3, #48	@ 0x30
 80074d6:	d016      	beq.n	8007506 <UART_SetConfig+0x1b2>
 80074d8:	2b30      	cmp	r3, #48	@ 0x30
 80074da:	d818      	bhi.n	800750e <UART_SetConfig+0x1ba>
 80074dc:	2b20      	cmp	r3, #32
 80074de:	d00a      	beq.n	80074f6 <UART_SetConfig+0x1a2>
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	d814      	bhi.n	800750e <UART_SetConfig+0x1ba>
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <UART_SetConfig+0x19a>
 80074e8:	2b10      	cmp	r3, #16
 80074ea:	d008      	beq.n	80074fe <UART_SetConfig+0x1aa>
 80074ec:	e00f      	b.n	800750e <UART_SetConfig+0x1ba>
 80074ee:	2300      	movs	r3, #0
 80074f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074f4:	e0ad      	b.n	8007652 <UART_SetConfig+0x2fe>
 80074f6:	2302      	movs	r3, #2
 80074f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074fc:	e0a9      	b.n	8007652 <UART_SetConfig+0x2fe>
 80074fe:	2304      	movs	r3, #4
 8007500:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007504:	e0a5      	b.n	8007652 <UART_SetConfig+0x2fe>
 8007506:	2308      	movs	r3, #8
 8007508:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800750c:	e0a1      	b.n	8007652 <UART_SetConfig+0x2fe>
 800750e:	2310      	movs	r3, #16
 8007510:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007514:	e09d      	b.n	8007652 <UART_SetConfig+0x2fe>
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a4a      	ldr	r2, [pc, #296]	@ (8007644 <UART_SetConfig+0x2f0>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d125      	bne.n	800756c <UART_SetConfig+0x218>
 8007520:	4b45      	ldr	r3, [pc, #276]	@ (8007638 <UART_SetConfig+0x2e4>)
 8007522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007526:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800752a:	2bc0      	cmp	r3, #192	@ 0xc0
 800752c:	d016      	beq.n	800755c <UART_SetConfig+0x208>
 800752e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007530:	d818      	bhi.n	8007564 <UART_SetConfig+0x210>
 8007532:	2b80      	cmp	r3, #128	@ 0x80
 8007534:	d00a      	beq.n	800754c <UART_SetConfig+0x1f8>
 8007536:	2b80      	cmp	r3, #128	@ 0x80
 8007538:	d814      	bhi.n	8007564 <UART_SetConfig+0x210>
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <UART_SetConfig+0x1f0>
 800753e:	2b40      	cmp	r3, #64	@ 0x40
 8007540:	d008      	beq.n	8007554 <UART_SetConfig+0x200>
 8007542:	e00f      	b.n	8007564 <UART_SetConfig+0x210>
 8007544:	2300      	movs	r3, #0
 8007546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800754a:	e082      	b.n	8007652 <UART_SetConfig+0x2fe>
 800754c:	2302      	movs	r3, #2
 800754e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007552:	e07e      	b.n	8007652 <UART_SetConfig+0x2fe>
 8007554:	2304      	movs	r3, #4
 8007556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800755a:	e07a      	b.n	8007652 <UART_SetConfig+0x2fe>
 800755c:	2308      	movs	r3, #8
 800755e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007562:	e076      	b.n	8007652 <UART_SetConfig+0x2fe>
 8007564:	2310      	movs	r3, #16
 8007566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800756a:	e072      	b.n	8007652 <UART_SetConfig+0x2fe>
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a35      	ldr	r2, [pc, #212]	@ (8007648 <UART_SetConfig+0x2f4>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d12a      	bne.n	80075cc <UART_SetConfig+0x278>
 8007576:	4b30      	ldr	r3, [pc, #192]	@ (8007638 <UART_SetConfig+0x2e4>)
 8007578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800757c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007580:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007584:	d01a      	beq.n	80075bc <UART_SetConfig+0x268>
 8007586:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800758a:	d81b      	bhi.n	80075c4 <UART_SetConfig+0x270>
 800758c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007590:	d00c      	beq.n	80075ac <UART_SetConfig+0x258>
 8007592:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007596:	d815      	bhi.n	80075c4 <UART_SetConfig+0x270>
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <UART_SetConfig+0x250>
 800759c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075a0:	d008      	beq.n	80075b4 <UART_SetConfig+0x260>
 80075a2:	e00f      	b.n	80075c4 <UART_SetConfig+0x270>
 80075a4:	2300      	movs	r3, #0
 80075a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075aa:	e052      	b.n	8007652 <UART_SetConfig+0x2fe>
 80075ac:	2302      	movs	r3, #2
 80075ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075b2:	e04e      	b.n	8007652 <UART_SetConfig+0x2fe>
 80075b4:	2304      	movs	r3, #4
 80075b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ba:	e04a      	b.n	8007652 <UART_SetConfig+0x2fe>
 80075bc:	2308      	movs	r3, #8
 80075be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075c2:	e046      	b.n	8007652 <UART_SetConfig+0x2fe>
 80075c4:	2310      	movs	r3, #16
 80075c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ca:	e042      	b.n	8007652 <UART_SetConfig+0x2fe>
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a17      	ldr	r2, [pc, #92]	@ (8007630 <UART_SetConfig+0x2dc>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d13a      	bne.n	800764c <UART_SetConfig+0x2f8>
 80075d6:	4b18      	ldr	r3, [pc, #96]	@ (8007638 <UART_SetConfig+0x2e4>)
 80075d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80075e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075e4:	d01a      	beq.n	800761c <UART_SetConfig+0x2c8>
 80075e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075ea:	d81b      	bhi.n	8007624 <UART_SetConfig+0x2d0>
 80075ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075f0:	d00c      	beq.n	800760c <UART_SetConfig+0x2b8>
 80075f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075f6:	d815      	bhi.n	8007624 <UART_SetConfig+0x2d0>
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <UART_SetConfig+0x2b0>
 80075fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007600:	d008      	beq.n	8007614 <UART_SetConfig+0x2c0>
 8007602:	e00f      	b.n	8007624 <UART_SetConfig+0x2d0>
 8007604:	2300      	movs	r3, #0
 8007606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800760a:	e022      	b.n	8007652 <UART_SetConfig+0x2fe>
 800760c:	2302      	movs	r3, #2
 800760e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007612:	e01e      	b.n	8007652 <UART_SetConfig+0x2fe>
 8007614:	2304      	movs	r3, #4
 8007616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800761a:	e01a      	b.n	8007652 <UART_SetConfig+0x2fe>
 800761c:	2308      	movs	r3, #8
 800761e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007622:	e016      	b.n	8007652 <UART_SetConfig+0x2fe>
 8007624:	2310      	movs	r3, #16
 8007626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800762a:	e012      	b.n	8007652 <UART_SetConfig+0x2fe>
 800762c:	cfff69f3 	.word	0xcfff69f3
 8007630:	40008000 	.word	0x40008000
 8007634:	40013800 	.word	0x40013800
 8007638:	40021000 	.word	0x40021000
 800763c:	40004400 	.word	0x40004400
 8007640:	40004800 	.word	0x40004800
 8007644:	40004c00 	.word	0x40004c00
 8007648:	40005000 	.word	0x40005000
 800764c:	2310      	movs	r3, #16
 800764e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4aae      	ldr	r2, [pc, #696]	@ (8007910 <UART_SetConfig+0x5bc>)
 8007658:	4293      	cmp	r3, r2
 800765a:	f040 8097 	bne.w	800778c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800765e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007662:	2b08      	cmp	r3, #8
 8007664:	d823      	bhi.n	80076ae <UART_SetConfig+0x35a>
 8007666:	a201      	add	r2, pc, #4	@ (adr r2, 800766c <UART_SetConfig+0x318>)
 8007668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766c:	08007691 	.word	0x08007691
 8007670:	080076af 	.word	0x080076af
 8007674:	08007699 	.word	0x08007699
 8007678:	080076af 	.word	0x080076af
 800767c:	0800769f 	.word	0x0800769f
 8007680:	080076af 	.word	0x080076af
 8007684:	080076af 	.word	0x080076af
 8007688:	080076af 	.word	0x080076af
 800768c:	080076a7 	.word	0x080076a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007690:	f7fd f970 	bl	8004974 <HAL_RCC_GetPCLK1Freq>
 8007694:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007696:	e010      	b.n	80076ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007698:	4b9e      	ldr	r3, [pc, #632]	@ (8007914 <UART_SetConfig+0x5c0>)
 800769a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800769c:	e00d      	b.n	80076ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800769e:	f7fd f8fb 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 80076a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076a4:	e009      	b.n	80076ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076ac:	e005      	b.n	80076ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80076b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 8130 	beq.w	8007922 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c6:	4a94      	ldr	r2, [pc, #592]	@ (8007918 <UART_SetConfig+0x5c4>)
 80076c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076cc:	461a      	mov	r2, r3
 80076ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80076d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	4413      	add	r3, r2
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d305      	bcc.n	80076f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d903      	bls.n	80076fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80076f8:	e113      	b.n	8007922 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fc:	2200      	movs	r2, #0
 80076fe:	60bb      	str	r3, [r7, #8]
 8007700:	60fa      	str	r2, [r7, #12]
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007706:	4a84      	ldr	r2, [pc, #528]	@ (8007918 <UART_SetConfig+0x5c4>)
 8007708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800770c:	b29b      	uxth	r3, r3
 800770e:	2200      	movs	r2, #0
 8007710:	603b      	str	r3, [r7, #0]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007718:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800771c:	f7f8 fde8 	bl	80002f0 <__aeabi_uldivmod>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4610      	mov	r0, r2
 8007726:	4619      	mov	r1, r3
 8007728:	f04f 0200 	mov.w	r2, #0
 800772c:	f04f 0300 	mov.w	r3, #0
 8007730:	020b      	lsls	r3, r1, #8
 8007732:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007736:	0202      	lsls	r2, r0, #8
 8007738:	6979      	ldr	r1, [r7, #20]
 800773a:	6849      	ldr	r1, [r1, #4]
 800773c:	0849      	lsrs	r1, r1, #1
 800773e:	2000      	movs	r0, #0
 8007740:	460c      	mov	r4, r1
 8007742:	4605      	mov	r5, r0
 8007744:	eb12 0804 	adds.w	r8, r2, r4
 8007748:	eb43 0905 	adc.w	r9, r3, r5
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	469a      	mov	sl, r3
 8007754:	4693      	mov	fp, r2
 8007756:	4652      	mov	r2, sl
 8007758:	465b      	mov	r3, fp
 800775a:	4640      	mov	r0, r8
 800775c:	4649      	mov	r1, r9
 800775e:	f7f8 fdc7 	bl	80002f0 <__aeabi_uldivmod>
 8007762:	4602      	mov	r2, r0
 8007764:	460b      	mov	r3, r1
 8007766:	4613      	mov	r3, r2
 8007768:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800776a:	6a3b      	ldr	r3, [r7, #32]
 800776c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007770:	d308      	bcc.n	8007784 <UART_SetConfig+0x430>
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007778:	d204      	bcs.n	8007784 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6a3a      	ldr	r2, [r7, #32]
 8007780:	60da      	str	r2, [r3, #12]
 8007782:	e0ce      	b.n	8007922 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800778a:	e0ca      	b.n	8007922 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007794:	d166      	bne.n	8007864 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007796:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800779a:	2b08      	cmp	r3, #8
 800779c:	d827      	bhi.n	80077ee <UART_SetConfig+0x49a>
 800779e:	a201      	add	r2, pc, #4	@ (adr r2, 80077a4 <UART_SetConfig+0x450>)
 80077a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a4:	080077c9 	.word	0x080077c9
 80077a8:	080077d1 	.word	0x080077d1
 80077ac:	080077d9 	.word	0x080077d9
 80077b0:	080077ef 	.word	0x080077ef
 80077b4:	080077df 	.word	0x080077df
 80077b8:	080077ef 	.word	0x080077ef
 80077bc:	080077ef 	.word	0x080077ef
 80077c0:	080077ef 	.word	0x080077ef
 80077c4:	080077e7 	.word	0x080077e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077c8:	f7fd f8d4 	bl	8004974 <HAL_RCC_GetPCLK1Freq>
 80077cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077ce:	e014      	b.n	80077fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077d0:	f7fd f8e6 	bl	80049a0 <HAL_RCC_GetPCLK2Freq>
 80077d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077d6:	e010      	b.n	80077fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077d8:	4b4e      	ldr	r3, [pc, #312]	@ (8007914 <UART_SetConfig+0x5c0>)
 80077da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077dc:	e00d      	b.n	80077fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077de:	f7fd f85b 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 80077e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077e4:	e009      	b.n	80077fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077ec:	e005      	b.n	80077fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80077f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 8090 	beq.w	8007922 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007806:	4a44      	ldr	r2, [pc, #272]	@ (8007918 <UART_SetConfig+0x5c4>)
 8007808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800780c:	461a      	mov	r2, r3
 800780e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007810:	fbb3 f3f2 	udiv	r3, r3, r2
 8007814:	005a      	lsls	r2, r3, #1
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	085b      	lsrs	r3, r3, #1
 800781c:	441a      	add	r2, r3
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	fbb2 f3f3 	udiv	r3, r2, r3
 8007826:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	2b0f      	cmp	r3, #15
 800782c:	d916      	bls.n	800785c <UART_SetConfig+0x508>
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007834:	d212      	bcs.n	800785c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	b29b      	uxth	r3, r3
 800783a:	f023 030f 	bic.w	r3, r3, #15
 800783e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	085b      	lsrs	r3, r3, #1
 8007844:	b29b      	uxth	r3, r3
 8007846:	f003 0307 	and.w	r3, r3, #7
 800784a:	b29a      	uxth	r2, r3
 800784c:	8bfb      	ldrh	r3, [r7, #30]
 800784e:	4313      	orrs	r3, r2
 8007850:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	8bfa      	ldrh	r2, [r7, #30]
 8007858:	60da      	str	r2, [r3, #12]
 800785a:	e062      	b.n	8007922 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007862:	e05e      	b.n	8007922 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007864:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007868:	2b08      	cmp	r3, #8
 800786a:	d828      	bhi.n	80078be <UART_SetConfig+0x56a>
 800786c:	a201      	add	r2, pc, #4	@ (adr r2, 8007874 <UART_SetConfig+0x520>)
 800786e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007872:	bf00      	nop
 8007874:	08007899 	.word	0x08007899
 8007878:	080078a1 	.word	0x080078a1
 800787c:	080078a9 	.word	0x080078a9
 8007880:	080078bf 	.word	0x080078bf
 8007884:	080078af 	.word	0x080078af
 8007888:	080078bf 	.word	0x080078bf
 800788c:	080078bf 	.word	0x080078bf
 8007890:	080078bf 	.word	0x080078bf
 8007894:	080078b7 	.word	0x080078b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007898:	f7fd f86c 	bl	8004974 <HAL_RCC_GetPCLK1Freq>
 800789c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800789e:	e014      	b.n	80078ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078a0:	f7fd f87e 	bl	80049a0 <HAL_RCC_GetPCLK2Freq>
 80078a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078a6:	e010      	b.n	80078ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007914 <UART_SetConfig+0x5c0>)
 80078aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078ac:	e00d      	b.n	80078ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ae:	f7fc fff3 	bl	8004898 <HAL_RCC_GetSysClockFreq>
 80078b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078b4:	e009      	b.n	80078ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078bc:	e005      	b.n	80078ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80078c8:	bf00      	nop
    }

    if (pclk != 0U)
 80078ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d028      	beq.n	8007922 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d4:	4a10      	ldr	r2, [pc, #64]	@ (8007918 <UART_SetConfig+0x5c4>)
 80078d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078da:	461a      	mov	r2, r3
 80078dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078de:	fbb3 f2f2 	udiv	r2, r3, r2
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	085b      	lsrs	r3, r3, #1
 80078e8:	441a      	add	r2, r3
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	2b0f      	cmp	r3, #15
 80078f8:	d910      	bls.n	800791c <UART_SetConfig+0x5c8>
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007900:	d20c      	bcs.n	800791c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	b29a      	uxth	r2, r3
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60da      	str	r2, [r3, #12]
 800790c:	e009      	b.n	8007922 <UART_SetConfig+0x5ce>
 800790e:	bf00      	nop
 8007910:	40008000 	.word	0x40008000
 8007914:	00f42400 	.word	0x00f42400
 8007918:	0800a10c 	.word	0x0800a10c
      }
      else
      {
        ret = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2201      	movs	r2, #1
 8007926:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2201      	movs	r2, #1
 800792e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	2200      	movs	r2, #0
 8007936:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	2200      	movs	r2, #0
 800793c:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 800793e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007942:	4618      	mov	r0, r3
 8007944:	3730      	adds	r7, #48	@ 0x30
 8007946:	46bd      	mov	sp, r7
 8007948:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800794c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00a      	beq.n	80079ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079be:	f003 0308 	and.w	r3, r3, #8
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e0:	f003 0310 	and.w	r3, r3, #16
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00a      	beq.n	80079fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a02:	f003 0320 	and.w	r3, r3, #32
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00a      	beq.n	8007a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d01a      	beq.n	8007a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a4a:	d10a      	bne.n	8007a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	605a      	str	r2, [r3, #4]
  }
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af02      	add	r7, sp, #8
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007aa0:	f7fa f8c4 	bl	8001c2c <HAL_GetTick>
 8007aa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0308 	and.w	r3, r3, #8
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	d10e      	bne.n	8007ad2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ab4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f82f 	bl	8007b26 <UART_WaitOnFlagUntilTimeout>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e025      	b.n	8007b1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0304 	and.w	r3, r3, #4
 8007adc:	2b04      	cmp	r3, #4
 8007ade:	d10e      	bne.n	8007afe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ae0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f819 	bl	8007b26 <UART_WaitOnFlagUntilTimeout>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e00f      	b.n	8007b1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2220      	movs	r2, #32
 8007b0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b09c      	sub	sp, #112	@ 0x70
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	60f8      	str	r0, [r7, #12]
 8007b2e:	60b9      	str	r1, [r7, #8]
 8007b30:	603b      	str	r3, [r7, #0]
 8007b32:	4613      	mov	r3, r2
 8007b34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b36:	e0a9      	b.n	8007c8c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3e:	f000 80a5 	beq.w	8007c8c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b42:	f7fa f873 	bl	8001c2c <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d302      	bcc.n	8007b58 <UART_WaitOnFlagUntilTimeout+0x32>
 8007b52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d140      	bne.n	8007bda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b60:	e853 3f00 	ldrex	r3, [r3]
 8007b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b68:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007b6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b78:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007b7c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007b7e:	e841 2300 	strex	r3, r2, [r1]
 8007b82:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1e6      	bne.n	8007b58 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3308      	adds	r3, #8
 8007b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b94:	e853 3f00 	ldrex	r3, [r3]
 8007b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9c:	f023 0301 	bic.w	r3, r3, #1
 8007ba0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3308      	adds	r3, #8
 8007ba8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007baa:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007bac:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007bb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bb2:	e841 2300 	strex	r3, r2, [r1]
 8007bb6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1e5      	bne.n	8007b8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e069      	b.n	8007cae <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0304 	and.w	r3, r3, #4
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d051      	beq.n	8007c8c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bf6:	d149      	bne.n	8007c8c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0a:	e853 3f00 	ldrex	r3, [r3]
 8007c0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c12:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007c16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c22:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c28:	e841 2300 	strex	r3, r2, [r1]
 8007c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1e6      	bne.n	8007c02 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	3308      	adds	r3, #8
 8007c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	e853 3f00 	ldrex	r3, [r3]
 8007c42:	613b      	str	r3, [r7, #16]
   return(result);
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f023 0301 	bic.w	r3, r3, #1
 8007c4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3308      	adds	r3, #8
 8007c52:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007c54:	623a      	str	r2, [r7, #32]
 8007c56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c58:	69f9      	ldr	r1, [r7, #28]
 8007c5a:	6a3a      	ldr	r2, [r7, #32]
 8007c5c:	e841 2300 	strex	r3, r2, [r1]
 8007c60:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1e5      	bne.n	8007c34 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2220      	movs	r2, #32
 8007c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e010      	b.n	8007cae <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	69da      	ldr	r2, [r3, #28]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	4013      	ands	r3, r2
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	bf0c      	ite	eq
 8007c9c:	2301      	moveq	r3, #1
 8007c9e:	2300      	movne	r3, #0
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	f43f af46 	beq.w	8007b38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3770      	adds	r7, #112	@ 0x70
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b0a3      	sub	sp, #140	@ 0x8c
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	88fa      	ldrh	r2, [r7, #6]
 8007cd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	88fa      	ldrh	r2, [r7, #6]
 8007cd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cea:	d10e      	bne.n	8007d0a <UART_Start_Receive_IT+0x52>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d105      	bne.n	8007d00 <UART_Start_Receive_IT+0x48>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007cfa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007cfe:	e02d      	b.n	8007d5c <UART_Start_Receive_IT+0xa4>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	22ff      	movs	r2, #255	@ 0xff
 8007d04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d08:	e028      	b.n	8007d5c <UART_Start_Receive_IT+0xa4>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10d      	bne.n	8007d2e <UART_Start_Receive_IT+0x76>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d104      	bne.n	8007d24 <UART_Start_Receive_IT+0x6c>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	22ff      	movs	r2, #255	@ 0xff
 8007d1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d22:	e01b      	b.n	8007d5c <UART_Start_Receive_IT+0xa4>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	227f      	movs	r2, #127	@ 0x7f
 8007d28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d2c:	e016      	b.n	8007d5c <UART_Start_Receive_IT+0xa4>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d36:	d10d      	bne.n	8007d54 <UART_Start_Receive_IT+0x9c>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d104      	bne.n	8007d4a <UART_Start_Receive_IT+0x92>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	227f      	movs	r2, #127	@ 0x7f
 8007d44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d48:	e008      	b.n	8007d5c <UART_Start_Receive_IT+0xa4>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	223f      	movs	r2, #63	@ 0x3f
 8007d4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d52:	e003      	b.n	8007d5c <UART_Start_Receive_IT+0xa4>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2222      	movs	r2, #34	@ 0x22
 8007d68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3308      	adds	r3, #8
 8007d72:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d76:	e853 3f00 	ldrex	r3, [r3]
 8007d7a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007d7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d7e:	f043 0301 	orr.w	r3, r3, #1
 8007d82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007d90:	673a      	str	r2, [r7, #112]	@ 0x70
 8007d92:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007d96:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007d9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e3      	bne.n	8007d6c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dac:	d153      	bne.n	8007e56 <UART_Start_Receive_IT+0x19e>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007db4:	88fa      	ldrh	r2, [r7, #6]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d34d      	bcc.n	8007e56 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dc2:	d107      	bne.n	8007dd4 <UART_Start_Receive_IT+0x11c>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d103      	bne.n	8007dd4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4a4b      	ldr	r2, [pc, #300]	@ (8007efc <UART_Start_Receive_IT+0x244>)
 8007dd0:	671a      	str	r2, [r3, #112]	@ 0x70
 8007dd2:	e002      	b.n	8007dda <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4a4a      	ldr	r2, [pc, #296]	@ (8007f00 <UART_Start_Receive_IT+0x248>)
 8007dd8:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d01a      	beq.n	8007e20 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007df2:	e853 3f00 	ldrex	r3, [r3]
 8007df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007df8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e0e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e10:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007e12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007e14:	e841 2300 	strex	r3, r2, [r1]
 8007e18:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e4      	bne.n	8007dea <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3308      	adds	r3, #8
 8007e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007e40:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007e42:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e48:	e841 2300 	strex	r3, r2, [r1]
 8007e4c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e5      	bne.n	8007e20 <UART_Start_Receive_IT+0x168>
 8007e54:	e04a      	b.n	8007eec <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e5e:	d107      	bne.n	8007e70 <UART_Start_Receive_IT+0x1b8>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d103      	bne.n	8007e70 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4a26      	ldr	r2, [pc, #152]	@ (8007f04 <UART_Start_Receive_IT+0x24c>)
 8007e6c:	671a      	str	r2, [r3, #112]	@ 0x70
 8007e6e:	e002      	b.n	8007e76 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4a25      	ldr	r2, [pc, #148]	@ (8007f08 <UART_Start_Receive_IT+0x250>)
 8007e74:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d019      	beq.n	8007eba <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e96:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007e9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007eaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e6      	bne.n	8007e86 <UART_Start_Receive_IT+0x1ce>
 8007eb8:	e018      	b.n	8007eec <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f043 0320 	orr.w	r3, r3, #32
 8007ece:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ed8:	623b      	str	r3, [r7, #32]
 8007eda:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	69f9      	ldr	r1, [r7, #28]
 8007ede:	6a3a      	ldr	r2, [r7, #32]
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e6      	bne.n	8007eba <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	378c      	adds	r7, #140	@ 0x8c
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	08008615 	.word	0x08008615
 8007f00:	0800831d 	.word	0x0800831d
 8007f04:	080081bb 	.word	0x080081bb
 8007f08:	0800805b 	.word	0x0800805b

08007f0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b095      	sub	sp, #84	@ 0x54
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f1c:	e853 3f00 	ldrex	r3, [r3]
 8007f20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f32:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f3a:	e841 2300 	strex	r3, r2, [r1]
 8007f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1e6      	bne.n	8007f14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	e853 3f00 	ldrex	r3, [r3]
 8007f54:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f5c:	f023 0301 	bic.w	r3, r3, #1
 8007f60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e3      	bne.n	8007f46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d118      	bne.n	8007fb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	e853 3f00 	ldrex	r3, [r3]
 8007f92:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f023 0310 	bic.w	r3, r3, #16
 8007f9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fa4:	61bb      	str	r3, [r7, #24]
 8007fa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	6979      	ldr	r1, [r7, #20]
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e6      	bne.n	8007f86 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8007fcc:	bf00      	nop
 8007fce:	3754      	adds	r7, #84	@ 0x54
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f7ff f996 	bl	8007328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ffc:	bf00      	nop
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b088      	sub	sp, #32
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	e853 3f00 	ldrex	r3, [r3]
 8008018:	60bb      	str	r3, [r7, #8]
   return(result);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008020:	61fb      	str	r3, [r7, #28]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	61bb      	str	r3, [r7, #24]
 800802c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	6979      	ldr	r1, [r7, #20]
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	613b      	str	r3, [r7, #16]
   return(result);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e6      	bne.n	800800c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2220      	movs	r2, #32
 8008042:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff f961 	bl	8007314 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008052:	bf00      	nop
 8008054:	3720      	adds	r7, #32
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b096      	sub	sp, #88	@ 0x58
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008068:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008072:	2b22      	cmp	r3, #34	@ 0x22
 8008074:	f040 8095 	bne.w	80081a2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800807e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008082:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8008086:	b2d9      	uxtb	r1, r3
 8008088:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800808c:	b2da      	uxtb	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008092:	400a      	ands	r2, r1
 8008094:	b2d2      	uxtb	r2, r2
 8008096:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800809c:	1c5a      	adds	r2, r3, #1
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	3b01      	subs	r3, #1
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d178      	bne.n	80081b2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c8:	e853 3f00 	ldrex	r3, [r3]
 80080cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	461a      	mov	r2, r3
 80080dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080de:	647b      	str	r3, [r7, #68]	@ 0x44
 80080e0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080e6:	e841 2300 	strex	r3, r2, [r1]
 80080ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1e6      	bne.n	80080c0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	3308      	adds	r3, #8
 80080f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	623b      	str	r3, [r7, #32]
   return(result);
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	f023 0301 	bic.w	r3, r3, #1
 8008108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3308      	adds	r3, #8
 8008110:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008112:	633a      	str	r2, [r7, #48]	@ 0x30
 8008114:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e5      	bne.n	80080f2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2220      	movs	r2, #32
 800812a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008138:	2b01      	cmp	r3, #1
 800813a:	d12e      	bne.n	800819a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	e853 3f00 	ldrex	r3, [r3]
 800814e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f023 0310 	bic.w	r3, r3, #16
 8008156:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
 800815e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008160:	61fb      	str	r3, [r7, #28]
 8008162:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008164:	69b9      	ldr	r1, [r7, #24]
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	e841 2300 	strex	r3, r2, [r1]
 800816c:	617b      	str	r3, [r7, #20]
   return(result);
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e6      	bne.n	8008142 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	f003 0310 	and.w	r3, r3, #16
 800817e:	2b10      	cmp	r3, #16
 8008180:	d103      	bne.n	800818a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2210      	movs	r2, #16
 8008188:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008190:	4619      	mov	r1, r3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7ff f8d2 	bl	800733c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008198:	e00b      	b.n	80081b2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7f9 fca8 	bl	8001af0 <HAL_UART_RxCpltCallback>
}
 80081a0:	e007      	b.n	80081b2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	699a      	ldr	r2, [r3, #24]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f042 0208 	orr.w	r2, r2, #8
 80081b0:	619a      	str	r2, [r3, #24]
}
 80081b2:	bf00      	nop
 80081b4:	3758      	adds	r7, #88	@ 0x58
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b096      	sub	sp, #88	@ 0x58
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80081c8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081d2:	2b22      	cmp	r3, #34	@ 0x22
 80081d4:	f040 8095 	bne.w	8008302 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081de:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081e6:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80081e8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 80081ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80081f0:	4013      	ands	r3, r2
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081f6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081fc:	1c9a      	adds	r2, r3, #2
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008208:	b29b      	uxth	r3, r3
 800820a:	3b01      	subs	r3, #1
 800820c:	b29a      	uxth	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800821a:	b29b      	uxth	r3, r3
 800821c:	2b00      	cmp	r3, #0
 800821e:	d178      	bne.n	8008312 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800822e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008230:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008234:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800823e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008240:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008244:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800824c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e6      	bne.n	8008220 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3308      	adds	r3, #8
 8008258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	61fb      	str	r3, [r7, #28]
   return(result);
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	f023 0301 	bic.w	r3, r3, #1
 8008268:	64bb      	str	r3, [r7, #72]	@ 0x48
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3308      	adds	r3, #8
 8008270:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008272:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008274:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800827a:	e841 2300 	strex	r3, r2, [r1]
 800827e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1e5      	bne.n	8008252 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2220      	movs	r2, #32
 800828a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008298:	2b01      	cmp	r3, #1
 800829a:	d12e      	bne.n	80082fa <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f023 0310 	bic.w	r3, r3, #16
 80082b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	461a      	mov	r2, r3
 80082be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082c0:	61bb      	str	r3, [r7, #24]
 80082c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c4:	6979      	ldr	r1, [r7, #20]
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	e841 2300 	strex	r3, r2, [r1]
 80082cc:	613b      	str	r3, [r7, #16]
   return(result);
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1e6      	bne.n	80082a2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	f003 0310 	and.w	r3, r3, #16
 80082de:	2b10      	cmp	r3, #16
 80082e0:	d103      	bne.n	80082ea <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2210      	movs	r2, #16
 80082e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff f822 	bl	800733c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082f8:	e00b      	b.n	8008312 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7f9 fbf8 	bl	8001af0 <HAL_UART_RxCpltCallback>
}
 8008300:	e007      	b.n	8008312 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	699a      	ldr	r2, [r3, #24]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0208 	orr.w	r2, r2, #8
 8008310:	619a      	str	r2, [r3, #24]
}
 8008312:	bf00      	nop
 8008314:	3758      	adds	r7, #88	@ 0x58
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
	...

0800831c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b0a6      	sub	sp, #152	@ 0x98
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800832a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	69db      	ldr	r3, [r3, #28]
 8008334:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008352:	2b22      	cmp	r3, #34	@ 0x22
 8008354:	f040 814f 	bne.w	80085f6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800835e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008362:	e0f6      	b.n	8008552 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800836a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800836e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8008372:	b2d9      	uxtb	r1, r3
 8008374:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008378:	b2da      	uxtb	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800837e:	400a      	ands	r2, r1
 8008380:	b2d2      	uxtb	r2, r2
 8008382:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008394:	b29b      	uxth	r3, r3
 8008396:	3b01      	subs	r3, #1
 8008398:	b29a      	uxth	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	69db      	ldr	r3, [r3, #28]
 80083a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80083aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80083ae:	f003 0307 	and.w	r3, r3, #7
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d053      	beq.n	800845e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d011      	beq.n	80083e6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80083c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00b      	beq.n	80083e6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2201      	movs	r2, #1
 80083d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083dc:	f043 0201 	orr.w	r2, r3, #1
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d011      	beq.n	8008416 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80083f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00b      	beq.n	8008416 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2202      	movs	r2, #2
 8008404:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800840c:	f043 0204 	orr.w	r2, r3, #4
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008416:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800841a:	f003 0304 	and.w	r3, r3, #4
 800841e:	2b00      	cmp	r3, #0
 8008420:	d011      	beq.n	8008446 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008422:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00b      	beq.n	8008446 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2204      	movs	r2, #4
 8008434:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800843c:	f043 0202 	orr.w	r2, r3, #2
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800844c:	2b00      	cmp	r3, #0
 800844e:	d006      	beq.n	800845e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7fe ff69 	bl	8007328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008464:	b29b      	uxth	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d173      	bne.n	8008552 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008472:	e853 3f00 	ldrex	r3, [r3]
 8008476:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008478:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800847a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800847e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	461a      	mov	r2, r3
 8008488:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800848c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800848e:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008490:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008492:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008494:	e841 2300 	strex	r3, r2, [r1]
 8008498:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800849a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1e4      	bne.n	800846a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3308      	adds	r3, #8
 80084a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084aa:	e853 3f00 	ldrex	r3, [r3]
 80084ae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80084b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084b6:	f023 0301 	bic.w	r3, r3, #1
 80084ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3308      	adds	r3, #8
 80084c2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80084c4:	657a      	str	r2, [r7, #84]	@ 0x54
 80084c6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80084ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80084d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e3      	bne.n	80084a0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2220      	movs	r2, #32
 80084dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d12e      	bne.n	800854c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008504:	f023 0310 	bic.w	r3, r3, #16
 8008508:	67bb      	str	r3, [r7, #120]	@ 0x78
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	461a      	mov	r2, r3
 8008510:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008512:	643b      	str	r3, [r7, #64]	@ 0x40
 8008514:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008518:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800851a:	e841 2300 	strex	r3, r2, [r1]
 800851e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1e6      	bne.n	80084f4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	69db      	ldr	r3, [r3, #28]
 800852c:	f003 0310 	and.w	r3, r3, #16
 8008530:	2b10      	cmp	r3, #16
 8008532:	d103      	bne.n	800853c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2210      	movs	r2, #16
 800853a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f7fe fef9 	bl	800733c <HAL_UARTEx_RxEventCallback>
 800854a:	e002      	b.n	8008552 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7f9 facf 	bl	8001af0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008552:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008556:	2b00      	cmp	r3, #0
 8008558:	d006      	beq.n	8008568 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800855a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800855e:	f003 0320 	and.w	r3, r3, #32
 8008562:	2b00      	cmp	r3, #0
 8008564:	f47f aefe 	bne.w	8008364 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800856e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008572:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8008576:	2b00      	cmp	r3, #0
 8008578:	d045      	beq.n	8008606 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008580:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008584:	429a      	cmp	r2, r3
 8008586:	d23e      	bcs.n	8008606 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3308      	adds	r3, #8
 800858e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	6a3b      	ldr	r3, [r7, #32]
 8008592:	e853 3f00 	ldrex	r3, [r3]
 8008596:	61fb      	str	r3, [r7, #28]
   return(result);
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800859e:	673b      	str	r3, [r7, #112]	@ 0x70
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3308      	adds	r3, #8
 80085a6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80085a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085b0:	e841 2300 	strex	r3, r2, [r1]
 80085b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e5      	bne.n	8008588 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a14      	ldr	r2, [pc, #80]	@ (8008610 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80085c0:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	e853 3f00 	ldrex	r3, [r3]
 80085ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	f043 0320 	orr.w	r3, r3, #32
 80085d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	461a      	mov	r2, r3
 80085de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80085e0:	61bb      	str	r3, [r7, #24]
 80085e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e4:	6979      	ldr	r1, [r7, #20]
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	e841 2300 	strex	r3, r2, [r1]
 80085ec:	613b      	str	r3, [r7, #16]
   return(result);
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1e6      	bne.n	80085c2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085f4:	e007      	b.n	8008606 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	699a      	ldr	r2, [r3, #24]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f042 0208 	orr.w	r2, r2, #8
 8008604:	619a      	str	r2, [r3, #24]
}
 8008606:	bf00      	nop
 8008608:	3798      	adds	r7, #152	@ 0x98
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	0800805b 	.word	0x0800805b

08008614 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b0a8      	sub	sp, #160	@ 0xa0
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008622:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800864a:	2b22      	cmp	r3, #34	@ 0x22
 800864c:	f040 8153 	bne.w	80088f6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008656:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800865a:	e0fa      	b.n	8008852 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008662:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800866a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800866e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8008672:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8008676:	4013      	ands	r3, r2
 8008678:	b29a      	uxth	r2, r3
 800867a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800867e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008684:	1c9a      	adds	r2, r3, #2
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008690:	b29b      	uxth	r3, r3
 8008692:	3b01      	subs	r3, #1
 8008694:	b29a      	uxth	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80086a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086aa:	f003 0307 	and.w	r3, r3, #7
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d053      	beq.n	800875a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d011      	beq.n	80086e2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80086be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80086c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00b      	beq.n	80086e2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2201      	movs	r2, #1
 80086d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086d8:	f043 0201 	orr.w	r2, r3, #1
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d011      	beq.n	8008712 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80086ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00b      	beq.n	8008712 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2202      	movs	r2, #2
 8008700:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008708:	f043 0204 	orr.w	r2, r3, #4
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008712:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008716:	f003 0304 	and.w	r3, r3, #4
 800871a:	2b00      	cmp	r3, #0
 800871c:	d011      	beq.n	8008742 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800871e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00b      	beq.n	8008742 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2204      	movs	r2, #4
 8008730:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008738:	f043 0202 	orr.w	r2, r3, #2
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008748:	2b00      	cmp	r3, #0
 800874a:	d006      	beq.n	800875a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7fe fdeb 	bl	8007328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008760:	b29b      	uxth	r3, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d175      	bne.n	8008852 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800876e:	e853 3f00 	ldrex	r3, [r3]
 8008772:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008774:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008776:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800877a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008788:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800878a:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800878e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008790:	e841 2300 	strex	r3, r2, [r1]
 8008794:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008796:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1e4      	bne.n	8008766 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3308      	adds	r3, #8
 80087a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80087ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087b2:	f023 0301 	bic.w	r3, r3, #1
 80087b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3308      	adds	r3, #8
 80087c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80087c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80087ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80087d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e1      	bne.n	800879c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2220      	movs	r2, #32
 80087dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d12e      	bne.n	800884c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fc:	e853 3f00 	ldrex	r3, [r3]
 8008800:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008804:	f023 0310 	bic.w	r3, r3, #16
 8008808:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	461a      	mov	r2, r3
 8008810:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008812:	647b      	str	r3, [r7, #68]	@ 0x44
 8008814:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008818:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e6      	bne.n	80087f4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69db      	ldr	r3, [r3, #28]
 800882c:	f003 0310 	and.w	r3, r3, #16
 8008830:	2b10      	cmp	r3, #16
 8008832:	d103      	bne.n	800883c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2210      	movs	r2, #16
 800883a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008842:	4619      	mov	r1, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7fe fd79 	bl	800733c <HAL_UARTEx_RxEventCallback>
 800884a:	e002      	b.n	8008852 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7f9 f94f 	bl	8001af0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008852:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008856:	2b00      	cmp	r3, #0
 8008858:	d006      	beq.n	8008868 <UART_RxISR_16BIT_FIFOEN+0x254>
 800885a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800885e:	f003 0320 	and.w	r3, r3, #32
 8008862:	2b00      	cmp	r3, #0
 8008864:	f47f aefa 	bne.w	800865c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800886e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008872:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8008876:	2b00      	cmp	r3, #0
 8008878:	d045      	beq.n	8008906 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008880:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8008884:	429a      	cmp	r2, r3
 8008886:	d23e      	bcs.n	8008906 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	3308      	adds	r3, #8
 800888e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	623b      	str	r3, [r7, #32]
   return(result);
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800889e:	677b      	str	r3, [r7, #116]	@ 0x74
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3308      	adds	r3, #8
 80088a6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80088a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80088aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088b0:	e841 2300 	strex	r3, r2, [r1]
 80088b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e5      	bne.n	8008888 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a14      	ldr	r2, [pc, #80]	@ (8008910 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80088c0:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	e853 3f00 	ldrex	r3, [r3]
 80088ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f043 0320 	orr.w	r3, r3, #32
 80088d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	461a      	mov	r2, r3
 80088de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80088e0:	61fb      	str	r3, [r7, #28]
 80088e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	69b9      	ldr	r1, [r7, #24]
 80088e6:	69fa      	ldr	r2, [r7, #28]
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	617b      	str	r3, [r7, #20]
   return(result);
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e6      	bne.n	80088c2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088f4:	e007      	b.n	8008906 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	699a      	ldr	r2, [r3, #24]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f042 0208 	orr.w	r2, r2, #8
 8008904:	619a      	str	r2, [r3, #24]
}
 8008906:	bf00      	nop
 8008908:	37a0      	adds	r7, #160	@ 0xa0
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	080081bb 	.word	0x080081bb

08008914 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800895e:	2b01      	cmp	r3, #1
 8008960:	d101      	bne.n	8008966 <HAL_UARTEx_DisableFifoMode+0x16>
 8008962:	2302      	movs	r3, #2
 8008964:	e027      	b.n	80089b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2224      	movs	r2, #36	@ 0x24
 8008972:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f022 0201 	bic.w	r2, r2, #1
 800898c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008994:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2220      	movs	r2, #32
 80089a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b084      	sub	sp, #16
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d101      	bne.n	80089da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089d6:	2302      	movs	r3, #2
 80089d8:	e02d      	b.n	8008a36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2224      	movs	r2, #36	@ 0x24
 80089e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 0201 	bic.w	r2, r2, #1
 8008a00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	683a      	ldr	r2, [r7, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f850 	bl	8008abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2220      	movs	r2, #32
 8008a28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d101      	bne.n	8008a56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a52:	2302      	movs	r3, #2
 8008a54:	e02d      	b.n	8008ab2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2224      	movs	r2, #36	@ 0x24
 8008a62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0201 	bic.w	r2, r2, #1
 8008a7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f812 	bl	8008abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d108      	bne.n	8008ade <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008adc:	e031      	b.n	8008b42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ade:	2308      	movs	r3, #8
 8008ae0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ae2:	2308      	movs	r3, #8
 8008ae4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	0e5b      	lsrs	r3, r3, #25
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	f003 0307 	and.w	r3, r3, #7
 8008af4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	0f5b      	lsrs	r3, r3, #29
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	f003 0307 	and.w	r3, r3, #7
 8008b04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
 8008b08:	7b3a      	ldrb	r2, [r7, #12]
 8008b0a:	4911      	ldr	r1, [pc, #68]	@ (8008b50 <UARTEx_SetNbDataToProcess+0x94>)
 8008b0c:	5c8a      	ldrb	r2, [r1, r2]
 8008b0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b12:	7b3a      	ldrb	r2, [r7, #12]
 8008b14:	490f      	ldr	r1, [pc, #60]	@ (8008b54 <UARTEx_SetNbDataToProcess+0x98>)
 8008b16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b18:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
 8008b26:	7b7a      	ldrb	r2, [r7, #13]
 8008b28:	4909      	ldr	r1, [pc, #36]	@ (8008b50 <UARTEx_SetNbDataToProcess+0x94>)
 8008b2a:	5c8a      	ldrb	r2, [r1, r2]
 8008b2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b30:	7b7a      	ldrb	r2, [r7, #13]
 8008b32:	4908      	ldr	r1, [pc, #32]	@ (8008b54 <UARTEx_SetNbDataToProcess+0x98>)
 8008b34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b36:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008b42:	bf00      	nop
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	0800a124 	.word	0x0800a124
 8008b54:	0800a12c 	.word	0x0800a12c

08008b58 <atoi>:
 8008b58:	220a      	movs	r2, #10
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	f000 b87a 	b.w	8008c54 <strtol>

08008b60 <_strtol_l.constprop.0>:
 8008b60:	2b24      	cmp	r3, #36	@ 0x24
 8008b62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b66:	4686      	mov	lr, r0
 8008b68:	4690      	mov	r8, r2
 8008b6a:	d801      	bhi.n	8008b70 <_strtol_l.constprop.0+0x10>
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d106      	bne.n	8008b7e <_strtol_l.constprop.0+0x1e>
 8008b70:	f000 fa5e 	bl	8009030 <__errno>
 8008b74:	2316      	movs	r3, #22
 8008b76:	6003      	str	r3, [r0, #0]
 8008b78:	2000      	movs	r0, #0
 8008b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b7e:	4834      	ldr	r0, [pc, #208]	@ (8008c50 <_strtol_l.constprop.0+0xf0>)
 8008b80:	460d      	mov	r5, r1
 8008b82:	462a      	mov	r2, r5
 8008b84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b88:	5d06      	ldrb	r6, [r0, r4]
 8008b8a:	f016 0608 	ands.w	r6, r6, #8
 8008b8e:	d1f8      	bne.n	8008b82 <_strtol_l.constprop.0+0x22>
 8008b90:	2c2d      	cmp	r4, #45	@ 0x2d
 8008b92:	d12d      	bne.n	8008bf0 <_strtol_l.constprop.0+0x90>
 8008b94:	782c      	ldrb	r4, [r5, #0]
 8008b96:	2601      	movs	r6, #1
 8008b98:	1c95      	adds	r5, r2, #2
 8008b9a:	f033 0210 	bics.w	r2, r3, #16
 8008b9e:	d109      	bne.n	8008bb4 <_strtol_l.constprop.0+0x54>
 8008ba0:	2c30      	cmp	r4, #48	@ 0x30
 8008ba2:	d12a      	bne.n	8008bfa <_strtol_l.constprop.0+0x9a>
 8008ba4:	782a      	ldrb	r2, [r5, #0]
 8008ba6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008baa:	2a58      	cmp	r2, #88	@ 0x58
 8008bac:	d125      	bne.n	8008bfa <_strtol_l.constprop.0+0x9a>
 8008bae:	786c      	ldrb	r4, [r5, #1]
 8008bb0:	2310      	movs	r3, #16
 8008bb2:	3502      	adds	r5, #2
 8008bb4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008bb8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	fbbc f9f3 	udiv	r9, ip, r3
 8008bc2:	4610      	mov	r0, r2
 8008bc4:	fb03 ca19 	mls	sl, r3, r9, ip
 8008bc8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008bcc:	2f09      	cmp	r7, #9
 8008bce:	d81b      	bhi.n	8008c08 <_strtol_l.constprop.0+0xa8>
 8008bd0:	463c      	mov	r4, r7
 8008bd2:	42a3      	cmp	r3, r4
 8008bd4:	dd27      	ble.n	8008c26 <_strtol_l.constprop.0+0xc6>
 8008bd6:	1c57      	adds	r7, r2, #1
 8008bd8:	d007      	beq.n	8008bea <_strtol_l.constprop.0+0x8a>
 8008bda:	4581      	cmp	r9, r0
 8008bdc:	d320      	bcc.n	8008c20 <_strtol_l.constprop.0+0xc0>
 8008bde:	d101      	bne.n	8008be4 <_strtol_l.constprop.0+0x84>
 8008be0:	45a2      	cmp	sl, r4
 8008be2:	db1d      	blt.n	8008c20 <_strtol_l.constprop.0+0xc0>
 8008be4:	fb00 4003 	mla	r0, r0, r3, r4
 8008be8:	2201      	movs	r2, #1
 8008bea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bee:	e7eb      	b.n	8008bc8 <_strtol_l.constprop.0+0x68>
 8008bf0:	2c2b      	cmp	r4, #43	@ 0x2b
 8008bf2:	bf04      	itt	eq
 8008bf4:	782c      	ldrbeq	r4, [r5, #0]
 8008bf6:	1c95      	addeq	r5, r2, #2
 8008bf8:	e7cf      	b.n	8008b9a <_strtol_l.constprop.0+0x3a>
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1da      	bne.n	8008bb4 <_strtol_l.constprop.0+0x54>
 8008bfe:	2c30      	cmp	r4, #48	@ 0x30
 8008c00:	bf0c      	ite	eq
 8008c02:	2308      	moveq	r3, #8
 8008c04:	230a      	movne	r3, #10
 8008c06:	e7d5      	b.n	8008bb4 <_strtol_l.constprop.0+0x54>
 8008c08:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008c0c:	2f19      	cmp	r7, #25
 8008c0e:	d801      	bhi.n	8008c14 <_strtol_l.constprop.0+0xb4>
 8008c10:	3c37      	subs	r4, #55	@ 0x37
 8008c12:	e7de      	b.n	8008bd2 <_strtol_l.constprop.0+0x72>
 8008c14:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008c18:	2f19      	cmp	r7, #25
 8008c1a:	d804      	bhi.n	8008c26 <_strtol_l.constprop.0+0xc6>
 8008c1c:	3c57      	subs	r4, #87	@ 0x57
 8008c1e:	e7d8      	b.n	8008bd2 <_strtol_l.constprop.0+0x72>
 8008c20:	f04f 32ff 	mov.w	r2, #4294967295
 8008c24:	e7e1      	b.n	8008bea <_strtol_l.constprop.0+0x8a>
 8008c26:	1c53      	adds	r3, r2, #1
 8008c28:	d108      	bne.n	8008c3c <_strtol_l.constprop.0+0xdc>
 8008c2a:	2322      	movs	r3, #34	@ 0x22
 8008c2c:	f8ce 3000 	str.w	r3, [lr]
 8008c30:	4660      	mov	r0, ip
 8008c32:	f1b8 0f00 	cmp.w	r8, #0
 8008c36:	d0a0      	beq.n	8008b7a <_strtol_l.constprop.0+0x1a>
 8008c38:	1e69      	subs	r1, r5, #1
 8008c3a:	e006      	b.n	8008c4a <_strtol_l.constprop.0+0xea>
 8008c3c:	b106      	cbz	r6, 8008c40 <_strtol_l.constprop.0+0xe0>
 8008c3e:	4240      	negs	r0, r0
 8008c40:	f1b8 0f00 	cmp.w	r8, #0
 8008c44:	d099      	beq.n	8008b7a <_strtol_l.constprop.0+0x1a>
 8008c46:	2a00      	cmp	r2, #0
 8008c48:	d1f6      	bne.n	8008c38 <_strtol_l.constprop.0+0xd8>
 8008c4a:	f8c8 1000 	str.w	r1, [r8]
 8008c4e:	e794      	b.n	8008b7a <_strtol_l.constprop.0+0x1a>
 8008c50:	0800a135 	.word	0x0800a135

08008c54 <strtol>:
 8008c54:	4613      	mov	r3, r2
 8008c56:	460a      	mov	r2, r1
 8008c58:	4601      	mov	r1, r0
 8008c5a:	4802      	ldr	r0, [pc, #8]	@ (8008c64 <strtol+0x10>)
 8008c5c:	6800      	ldr	r0, [r0, #0]
 8008c5e:	f7ff bf7f 	b.w	8008b60 <_strtol_l.constprop.0>
 8008c62:	bf00      	nop
 8008c64:	200000f8 	.word	0x200000f8

08008c68 <std>:
 8008c68:	2300      	movs	r3, #0
 8008c6a:	b510      	push	{r4, lr}
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c76:	6083      	str	r3, [r0, #8]
 8008c78:	8181      	strh	r1, [r0, #12]
 8008c7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c7c:	81c2      	strh	r2, [r0, #14]
 8008c7e:	6183      	str	r3, [r0, #24]
 8008c80:	4619      	mov	r1, r3
 8008c82:	2208      	movs	r2, #8
 8008c84:	305c      	adds	r0, #92	@ 0x5c
 8008c86:	f000 f928 	bl	8008eda <memset>
 8008c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc0 <std+0x58>)
 8008c8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc4 <std+0x5c>)
 8008c90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c92:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc8 <std+0x60>)
 8008c94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c96:	4b0d      	ldr	r3, [pc, #52]	@ (8008ccc <std+0x64>)
 8008c98:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd0 <std+0x68>)
 8008c9c:	6224      	str	r4, [r4, #32]
 8008c9e:	429c      	cmp	r4, r3
 8008ca0:	d006      	beq.n	8008cb0 <std+0x48>
 8008ca2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ca6:	4294      	cmp	r4, r2
 8008ca8:	d002      	beq.n	8008cb0 <std+0x48>
 8008caa:	33d0      	adds	r3, #208	@ 0xd0
 8008cac:	429c      	cmp	r4, r3
 8008cae:	d105      	bne.n	8008cbc <std+0x54>
 8008cb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cb8:	f000 b9e4 	b.w	8009084 <__retarget_lock_init_recursive>
 8008cbc:	bd10      	pop	{r4, pc}
 8008cbe:	bf00      	nop
 8008cc0:	08008e55 	.word	0x08008e55
 8008cc4:	08008e77 	.word	0x08008e77
 8008cc8:	08008eaf 	.word	0x08008eaf
 8008ccc:	08008ed3 	.word	0x08008ed3
 8008cd0:	20000570 	.word	0x20000570

08008cd4 <stdio_exit_handler>:
 8008cd4:	4a02      	ldr	r2, [pc, #8]	@ (8008ce0 <stdio_exit_handler+0xc>)
 8008cd6:	4903      	ldr	r1, [pc, #12]	@ (8008ce4 <stdio_exit_handler+0x10>)
 8008cd8:	4803      	ldr	r0, [pc, #12]	@ (8008ce8 <stdio_exit_handler+0x14>)
 8008cda:	f000 b869 	b.w	8008db0 <_fwalk_sglue>
 8008cde:	bf00      	nop
 8008ce0:	200000ec 	.word	0x200000ec
 8008ce4:	0800999d 	.word	0x0800999d
 8008ce8:	200000fc 	.word	0x200000fc

08008cec <cleanup_stdio>:
 8008cec:	6841      	ldr	r1, [r0, #4]
 8008cee:	4b0c      	ldr	r3, [pc, #48]	@ (8008d20 <cleanup_stdio+0x34>)
 8008cf0:	4299      	cmp	r1, r3
 8008cf2:	b510      	push	{r4, lr}
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	d001      	beq.n	8008cfc <cleanup_stdio+0x10>
 8008cf8:	f000 fe50 	bl	800999c <_fflush_r>
 8008cfc:	68a1      	ldr	r1, [r4, #8]
 8008cfe:	4b09      	ldr	r3, [pc, #36]	@ (8008d24 <cleanup_stdio+0x38>)
 8008d00:	4299      	cmp	r1, r3
 8008d02:	d002      	beq.n	8008d0a <cleanup_stdio+0x1e>
 8008d04:	4620      	mov	r0, r4
 8008d06:	f000 fe49 	bl	800999c <_fflush_r>
 8008d0a:	68e1      	ldr	r1, [r4, #12]
 8008d0c:	4b06      	ldr	r3, [pc, #24]	@ (8008d28 <cleanup_stdio+0x3c>)
 8008d0e:	4299      	cmp	r1, r3
 8008d10:	d004      	beq.n	8008d1c <cleanup_stdio+0x30>
 8008d12:	4620      	mov	r0, r4
 8008d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d18:	f000 be40 	b.w	800999c <_fflush_r>
 8008d1c:	bd10      	pop	{r4, pc}
 8008d1e:	bf00      	nop
 8008d20:	20000570 	.word	0x20000570
 8008d24:	200005d8 	.word	0x200005d8
 8008d28:	20000640 	.word	0x20000640

08008d2c <global_stdio_init.part.0>:
 8008d2c:	b510      	push	{r4, lr}
 8008d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d5c <global_stdio_init.part.0+0x30>)
 8008d30:	4c0b      	ldr	r4, [pc, #44]	@ (8008d60 <global_stdio_init.part.0+0x34>)
 8008d32:	4a0c      	ldr	r2, [pc, #48]	@ (8008d64 <global_stdio_init.part.0+0x38>)
 8008d34:	601a      	str	r2, [r3, #0]
 8008d36:	4620      	mov	r0, r4
 8008d38:	2200      	movs	r2, #0
 8008d3a:	2104      	movs	r1, #4
 8008d3c:	f7ff ff94 	bl	8008c68 <std>
 8008d40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d44:	2201      	movs	r2, #1
 8008d46:	2109      	movs	r1, #9
 8008d48:	f7ff ff8e 	bl	8008c68 <std>
 8008d4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d50:	2202      	movs	r2, #2
 8008d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d56:	2112      	movs	r1, #18
 8008d58:	f7ff bf86 	b.w	8008c68 <std>
 8008d5c:	200006a8 	.word	0x200006a8
 8008d60:	20000570 	.word	0x20000570
 8008d64:	08008cd5 	.word	0x08008cd5

08008d68 <__sfp_lock_acquire>:
 8008d68:	4801      	ldr	r0, [pc, #4]	@ (8008d70 <__sfp_lock_acquire+0x8>)
 8008d6a:	f000 b98c 	b.w	8009086 <__retarget_lock_acquire_recursive>
 8008d6e:	bf00      	nop
 8008d70:	200006b1 	.word	0x200006b1

08008d74 <__sfp_lock_release>:
 8008d74:	4801      	ldr	r0, [pc, #4]	@ (8008d7c <__sfp_lock_release+0x8>)
 8008d76:	f000 b987 	b.w	8009088 <__retarget_lock_release_recursive>
 8008d7a:	bf00      	nop
 8008d7c:	200006b1 	.word	0x200006b1

08008d80 <__sinit>:
 8008d80:	b510      	push	{r4, lr}
 8008d82:	4604      	mov	r4, r0
 8008d84:	f7ff fff0 	bl	8008d68 <__sfp_lock_acquire>
 8008d88:	6a23      	ldr	r3, [r4, #32]
 8008d8a:	b11b      	cbz	r3, 8008d94 <__sinit+0x14>
 8008d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d90:	f7ff bff0 	b.w	8008d74 <__sfp_lock_release>
 8008d94:	4b04      	ldr	r3, [pc, #16]	@ (8008da8 <__sinit+0x28>)
 8008d96:	6223      	str	r3, [r4, #32]
 8008d98:	4b04      	ldr	r3, [pc, #16]	@ (8008dac <__sinit+0x2c>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1f5      	bne.n	8008d8c <__sinit+0xc>
 8008da0:	f7ff ffc4 	bl	8008d2c <global_stdio_init.part.0>
 8008da4:	e7f2      	b.n	8008d8c <__sinit+0xc>
 8008da6:	bf00      	nop
 8008da8:	08008ced 	.word	0x08008ced
 8008dac:	200006a8 	.word	0x200006a8

08008db0 <_fwalk_sglue>:
 8008db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db4:	4607      	mov	r7, r0
 8008db6:	4688      	mov	r8, r1
 8008db8:	4614      	mov	r4, r2
 8008dba:	2600      	movs	r6, #0
 8008dbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dc0:	f1b9 0901 	subs.w	r9, r9, #1
 8008dc4:	d505      	bpl.n	8008dd2 <_fwalk_sglue+0x22>
 8008dc6:	6824      	ldr	r4, [r4, #0]
 8008dc8:	2c00      	cmp	r4, #0
 8008dca:	d1f7      	bne.n	8008dbc <_fwalk_sglue+0xc>
 8008dcc:	4630      	mov	r0, r6
 8008dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd2:	89ab      	ldrh	r3, [r5, #12]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d907      	bls.n	8008de8 <_fwalk_sglue+0x38>
 8008dd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	d003      	beq.n	8008de8 <_fwalk_sglue+0x38>
 8008de0:	4629      	mov	r1, r5
 8008de2:	4638      	mov	r0, r7
 8008de4:	47c0      	blx	r8
 8008de6:	4306      	orrs	r6, r0
 8008de8:	3568      	adds	r5, #104	@ 0x68
 8008dea:	e7e9      	b.n	8008dc0 <_fwalk_sglue+0x10>

08008dec <sniprintf>:
 8008dec:	b40c      	push	{r2, r3}
 8008dee:	b530      	push	{r4, r5, lr}
 8008df0:	4b17      	ldr	r3, [pc, #92]	@ (8008e50 <sniprintf+0x64>)
 8008df2:	1e0c      	subs	r4, r1, #0
 8008df4:	681d      	ldr	r5, [r3, #0]
 8008df6:	b09d      	sub	sp, #116	@ 0x74
 8008df8:	da08      	bge.n	8008e0c <sniprintf+0x20>
 8008dfa:	238b      	movs	r3, #139	@ 0x8b
 8008dfc:	602b      	str	r3, [r5, #0]
 8008dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008e02:	b01d      	add	sp, #116	@ 0x74
 8008e04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e08:	b002      	add	sp, #8
 8008e0a:	4770      	bx	lr
 8008e0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008e10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008e14:	bf14      	ite	ne
 8008e16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008e1a:	4623      	moveq	r3, r4
 8008e1c:	9304      	str	r3, [sp, #16]
 8008e1e:	9307      	str	r3, [sp, #28]
 8008e20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008e24:	9002      	str	r0, [sp, #8]
 8008e26:	9006      	str	r0, [sp, #24]
 8008e28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008e2c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008e2e:	ab21      	add	r3, sp, #132	@ 0x84
 8008e30:	a902      	add	r1, sp, #8
 8008e32:	4628      	mov	r0, r5
 8008e34:	9301      	str	r3, [sp, #4]
 8008e36:	f000 faa3 	bl	8009380 <_svfiprintf_r>
 8008e3a:	1c43      	adds	r3, r0, #1
 8008e3c:	bfbc      	itt	lt
 8008e3e:	238b      	movlt	r3, #139	@ 0x8b
 8008e40:	602b      	strlt	r3, [r5, #0]
 8008e42:	2c00      	cmp	r4, #0
 8008e44:	d0dd      	beq.n	8008e02 <sniprintf+0x16>
 8008e46:	9b02      	ldr	r3, [sp, #8]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	701a      	strb	r2, [r3, #0]
 8008e4c:	e7d9      	b.n	8008e02 <sniprintf+0x16>
 8008e4e:	bf00      	nop
 8008e50:	200000f8 	.word	0x200000f8

08008e54 <__sread>:
 8008e54:	b510      	push	{r4, lr}
 8008e56:	460c      	mov	r4, r1
 8008e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e5c:	f000 f8c4 	bl	8008fe8 <_read_r>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	bfab      	itete	ge
 8008e64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e66:	89a3      	ldrhlt	r3, [r4, #12]
 8008e68:	181b      	addge	r3, r3, r0
 8008e6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e6e:	bfac      	ite	ge
 8008e70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e72:	81a3      	strhlt	r3, [r4, #12]
 8008e74:	bd10      	pop	{r4, pc}

08008e76 <__swrite>:
 8008e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e7a:	461f      	mov	r7, r3
 8008e7c:	898b      	ldrh	r3, [r1, #12]
 8008e7e:	05db      	lsls	r3, r3, #23
 8008e80:	4605      	mov	r5, r0
 8008e82:	460c      	mov	r4, r1
 8008e84:	4616      	mov	r6, r2
 8008e86:	d505      	bpl.n	8008e94 <__swrite+0x1e>
 8008e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f000 f898 	bl	8008fc4 <_lseek_r>
 8008e94:	89a3      	ldrh	r3, [r4, #12]
 8008e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e9e:	81a3      	strh	r3, [r4, #12]
 8008ea0:	4632      	mov	r2, r6
 8008ea2:	463b      	mov	r3, r7
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eaa:	f000 b8af 	b.w	800900c <_write_r>

08008eae <__sseek>:
 8008eae:	b510      	push	{r4, lr}
 8008eb0:	460c      	mov	r4, r1
 8008eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eb6:	f000 f885 	bl	8008fc4 <_lseek_r>
 8008eba:	1c43      	adds	r3, r0, #1
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	bf15      	itete	ne
 8008ec0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ec2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008ec6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008eca:	81a3      	strheq	r3, [r4, #12]
 8008ecc:	bf18      	it	ne
 8008ece:	81a3      	strhne	r3, [r4, #12]
 8008ed0:	bd10      	pop	{r4, pc}

08008ed2 <__sclose>:
 8008ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed6:	f000 b865 	b.w	8008fa4 <_close_r>

08008eda <memset>:
 8008eda:	4402      	add	r2, r0
 8008edc:	4603      	mov	r3, r0
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d100      	bne.n	8008ee4 <memset+0xa>
 8008ee2:	4770      	bx	lr
 8008ee4:	f803 1b01 	strb.w	r1, [r3], #1
 8008ee8:	e7f9      	b.n	8008ede <memset+0x4>
	...

08008eec <strtok>:
 8008eec:	4b16      	ldr	r3, [pc, #88]	@ (8008f48 <strtok+0x5c>)
 8008eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef2:	681f      	ldr	r7, [r3, #0]
 8008ef4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	460e      	mov	r6, r1
 8008efa:	b9ec      	cbnz	r4, 8008f38 <strtok+0x4c>
 8008efc:	2050      	movs	r0, #80	@ 0x50
 8008efe:	f000 f92d 	bl	800915c <malloc>
 8008f02:	4602      	mov	r2, r0
 8008f04:	6478      	str	r0, [r7, #68]	@ 0x44
 8008f06:	b920      	cbnz	r0, 8008f12 <strtok+0x26>
 8008f08:	4b10      	ldr	r3, [pc, #64]	@ (8008f4c <strtok+0x60>)
 8008f0a:	4811      	ldr	r0, [pc, #68]	@ (8008f50 <strtok+0x64>)
 8008f0c:	215b      	movs	r1, #91	@ 0x5b
 8008f0e:	f000 f8bd 	bl	800908c <__assert_func>
 8008f12:	e9c0 4400 	strd	r4, r4, [r0]
 8008f16:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008f1a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008f1e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008f22:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008f26:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008f2a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008f2e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008f32:	6184      	str	r4, [r0, #24]
 8008f34:	7704      	strb	r4, [r0, #28]
 8008f36:	6244      	str	r4, [r0, #36]	@ 0x24
 8008f38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f3a:	4631      	mov	r1, r6
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f44:	f000 b806 	b.w	8008f54 <__strtok_r>
 8008f48:	200000f8 	.word	0x200000f8
 8008f4c:	0800a235 	.word	0x0800a235
 8008f50:	0800a24c 	.word	0x0800a24c

08008f54 <__strtok_r>:
 8008f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f56:	4604      	mov	r4, r0
 8008f58:	b908      	cbnz	r0, 8008f5e <__strtok_r+0xa>
 8008f5a:	6814      	ldr	r4, [r2, #0]
 8008f5c:	b144      	cbz	r4, 8008f70 <__strtok_r+0x1c>
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008f64:	460f      	mov	r7, r1
 8008f66:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008f6a:	b91e      	cbnz	r6, 8008f74 <__strtok_r+0x20>
 8008f6c:	b965      	cbnz	r5, 8008f88 <__strtok_r+0x34>
 8008f6e:	6015      	str	r5, [r2, #0]
 8008f70:	2000      	movs	r0, #0
 8008f72:	e005      	b.n	8008f80 <__strtok_r+0x2c>
 8008f74:	42b5      	cmp	r5, r6
 8008f76:	d1f6      	bne.n	8008f66 <__strtok_r+0x12>
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1f0      	bne.n	8008f5e <__strtok_r+0xa>
 8008f7c:	6014      	str	r4, [r2, #0]
 8008f7e:	7003      	strb	r3, [r0, #0]
 8008f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f82:	461c      	mov	r4, r3
 8008f84:	e00c      	b.n	8008fa0 <__strtok_r+0x4c>
 8008f86:	b915      	cbnz	r5, 8008f8e <__strtok_r+0x3a>
 8008f88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f8c:	460e      	mov	r6, r1
 8008f8e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008f92:	42ab      	cmp	r3, r5
 8008f94:	d1f7      	bne.n	8008f86 <__strtok_r+0x32>
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d0f3      	beq.n	8008f82 <__strtok_r+0x2e>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008fa0:	6014      	str	r4, [r2, #0]
 8008fa2:	e7ed      	b.n	8008f80 <__strtok_r+0x2c>

08008fa4 <_close_r>:
 8008fa4:	b538      	push	{r3, r4, r5, lr}
 8008fa6:	4d06      	ldr	r5, [pc, #24]	@ (8008fc0 <_close_r+0x1c>)
 8008fa8:	2300      	movs	r3, #0
 8008faa:	4604      	mov	r4, r0
 8008fac:	4608      	mov	r0, r1
 8008fae:	602b      	str	r3, [r5, #0]
 8008fb0:	f7f7 ffbc 	bl	8000f2c <_close>
 8008fb4:	1c43      	adds	r3, r0, #1
 8008fb6:	d102      	bne.n	8008fbe <_close_r+0x1a>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	b103      	cbz	r3, 8008fbe <_close_r+0x1a>
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	bd38      	pop	{r3, r4, r5, pc}
 8008fc0:	200006ac 	.word	0x200006ac

08008fc4 <_lseek_r>:
 8008fc4:	b538      	push	{r3, r4, r5, lr}
 8008fc6:	4d07      	ldr	r5, [pc, #28]	@ (8008fe4 <_lseek_r+0x20>)
 8008fc8:	4604      	mov	r4, r0
 8008fca:	4608      	mov	r0, r1
 8008fcc:	4611      	mov	r1, r2
 8008fce:	2200      	movs	r2, #0
 8008fd0:	602a      	str	r2, [r5, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	f7f7 ffd1 	bl	8000f7a <_lseek>
 8008fd8:	1c43      	adds	r3, r0, #1
 8008fda:	d102      	bne.n	8008fe2 <_lseek_r+0x1e>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	b103      	cbz	r3, 8008fe2 <_lseek_r+0x1e>
 8008fe0:	6023      	str	r3, [r4, #0]
 8008fe2:	bd38      	pop	{r3, r4, r5, pc}
 8008fe4:	200006ac 	.word	0x200006ac

08008fe8 <_read_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	4d07      	ldr	r5, [pc, #28]	@ (8009008 <_read_r+0x20>)
 8008fec:	4604      	mov	r4, r0
 8008fee:	4608      	mov	r0, r1
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	602a      	str	r2, [r5, #0]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	f7f7 ff5f 	bl	8000eba <_read>
 8008ffc:	1c43      	adds	r3, r0, #1
 8008ffe:	d102      	bne.n	8009006 <_read_r+0x1e>
 8009000:	682b      	ldr	r3, [r5, #0]
 8009002:	b103      	cbz	r3, 8009006 <_read_r+0x1e>
 8009004:	6023      	str	r3, [r4, #0]
 8009006:	bd38      	pop	{r3, r4, r5, pc}
 8009008:	200006ac 	.word	0x200006ac

0800900c <_write_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4d07      	ldr	r5, [pc, #28]	@ (800902c <_write_r+0x20>)
 8009010:	4604      	mov	r4, r0
 8009012:	4608      	mov	r0, r1
 8009014:	4611      	mov	r1, r2
 8009016:	2200      	movs	r2, #0
 8009018:	602a      	str	r2, [r5, #0]
 800901a:	461a      	mov	r2, r3
 800901c:	f7f7 ff6a 	bl	8000ef4 <_write>
 8009020:	1c43      	adds	r3, r0, #1
 8009022:	d102      	bne.n	800902a <_write_r+0x1e>
 8009024:	682b      	ldr	r3, [r5, #0]
 8009026:	b103      	cbz	r3, 800902a <_write_r+0x1e>
 8009028:	6023      	str	r3, [r4, #0]
 800902a:	bd38      	pop	{r3, r4, r5, pc}
 800902c:	200006ac 	.word	0x200006ac

08009030 <__errno>:
 8009030:	4b01      	ldr	r3, [pc, #4]	@ (8009038 <__errno+0x8>)
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	200000f8 	.word	0x200000f8

0800903c <__libc_init_array>:
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	4d0d      	ldr	r5, [pc, #52]	@ (8009074 <__libc_init_array+0x38>)
 8009040:	4c0d      	ldr	r4, [pc, #52]	@ (8009078 <__libc_init_array+0x3c>)
 8009042:	1b64      	subs	r4, r4, r5
 8009044:	10a4      	asrs	r4, r4, #2
 8009046:	2600      	movs	r6, #0
 8009048:	42a6      	cmp	r6, r4
 800904a:	d109      	bne.n	8009060 <__libc_init_array+0x24>
 800904c:	4d0b      	ldr	r5, [pc, #44]	@ (800907c <__libc_init_array+0x40>)
 800904e:	4c0c      	ldr	r4, [pc, #48]	@ (8009080 <__libc_init_array+0x44>)
 8009050:	f000 fff0 	bl	800a034 <_init>
 8009054:	1b64      	subs	r4, r4, r5
 8009056:	10a4      	asrs	r4, r4, #2
 8009058:	2600      	movs	r6, #0
 800905a:	42a6      	cmp	r6, r4
 800905c:	d105      	bne.n	800906a <__libc_init_array+0x2e>
 800905e:	bd70      	pop	{r4, r5, r6, pc}
 8009060:	f855 3b04 	ldr.w	r3, [r5], #4
 8009064:	4798      	blx	r3
 8009066:	3601      	adds	r6, #1
 8009068:	e7ee      	b.n	8009048 <__libc_init_array+0xc>
 800906a:	f855 3b04 	ldr.w	r3, [r5], #4
 800906e:	4798      	blx	r3
 8009070:	3601      	adds	r6, #1
 8009072:	e7f2      	b.n	800905a <__libc_init_array+0x1e>
 8009074:	0800a320 	.word	0x0800a320
 8009078:	0800a320 	.word	0x0800a320
 800907c:	0800a320 	.word	0x0800a320
 8009080:	0800a324 	.word	0x0800a324

08009084 <__retarget_lock_init_recursive>:
 8009084:	4770      	bx	lr

08009086 <__retarget_lock_acquire_recursive>:
 8009086:	4770      	bx	lr

08009088 <__retarget_lock_release_recursive>:
 8009088:	4770      	bx	lr
	...

0800908c <__assert_func>:
 800908c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800908e:	4614      	mov	r4, r2
 8009090:	461a      	mov	r2, r3
 8009092:	4b09      	ldr	r3, [pc, #36]	@ (80090b8 <__assert_func+0x2c>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4605      	mov	r5, r0
 8009098:	68d8      	ldr	r0, [r3, #12]
 800909a:	b954      	cbnz	r4, 80090b2 <__assert_func+0x26>
 800909c:	4b07      	ldr	r3, [pc, #28]	@ (80090bc <__assert_func+0x30>)
 800909e:	461c      	mov	r4, r3
 80090a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090a4:	9100      	str	r1, [sp, #0]
 80090a6:	462b      	mov	r3, r5
 80090a8:	4905      	ldr	r1, [pc, #20]	@ (80090c0 <__assert_func+0x34>)
 80090aa:	f000 fc9f 	bl	80099ec <fiprintf>
 80090ae:	f000 fce7 	bl	8009a80 <abort>
 80090b2:	4b04      	ldr	r3, [pc, #16]	@ (80090c4 <__assert_func+0x38>)
 80090b4:	e7f4      	b.n	80090a0 <__assert_func+0x14>
 80090b6:	bf00      	nop
 80090b8:	200000f8 	.word	0x200000f8
 80090bc:	0800a2e1 	.word	0x0800a2e1
 80090c0:	0800a2b3 	.word	0x0800a2b3
 80090c4:	0800a2a6 	.word	0x0800a2a6

080090c8 <_free_r>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4605      	mov	r5, r0
 80090cc:	2900      	cmp	r1, #0
 80090ce:	d041      	beq.n	8009154 <_free_r+0x8c>
 80090d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090d4:	1f0c      	subs	r4, r1, #4
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	bfb8      	it	lt
 80090da:	18e4      	addlt	r4, r4, r3
 80090dc:	f000 f8e8 	bl	80092b0 <__malloc_lock>
 80090e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009158 <_free_r+0x90>)
 80090e2:	6813      	ldr	r3, [r2, #0]
 80090e4:	b933      	cbnz	r3, 80090f4 <_free_r+0x2c>
 80090e6:	6063      	str	r3, [r4, #4]
 80090e8:	6014      	str	r4, [r2, #0]
 80090ea:	4628      	mov	r0, r5
 80090ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090f0:	f000 b8e4 	b.w	80092bc <__malloc_unlock>
 80090f4:	42a3      	cmp	r3, r4
 80090f6:	d908      	bls.n	800910a <_free_r+0x42>
 80090f8:	6820      	ldr	r0, [r4, #0]
 80090fa:	1821      	adds	r1, r4, r0
 80090fc:	428b      	cmp	r3, r1
 80090fe:	bf01      	itttt	eq
 8009100:	6819      	ldreq	r1, [r3, #0]
 8009102:	685b      	ldreq	r3, [r3, #4]
 8009104:	1809      	addeq	r1, r1, r0
 8009106:	6021      	streq	r1, [r4, #0]
 8009108:	e7ed      	b.n	80090e6 <_free_r+0x1e>
 800910a:	461a      	mov	r2, r3
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	b10b      	cbz	r3, 8009114 <_free_r+0x4c>
 8009110:	42a3      	cmp	r3, r4
 8009112:	d9fa      	bls.n	800910a <_free_r+0x42>
 8009114:	6811      	ldr	r1, [r2, #0]
 8009116:	1850      	adds	r0, r2, r1
 8009118:	42a0      	cmp	r0, r4
 800911a:	d10b      	bne.n	8009134 <_free_r+0x6c>
 800911c:	6820      	ldr	r0, [r4, #0]
 800911e:	4401      	add	r1, r0
 8009120:	1850      	adds	r0, r2, r1
 8009122:	4283      	cmp	r3, r0
 8009124:	6011      	str	r1, [r2, #0]
 8009126:	d1e0      	bne.n	80090ea <_free_r+0x22>
 8009128:	6818      	ldr	r0, [r3, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	6053      	str	r3, [r2, #4]
 800912e:	4408      	add	r0, r1
 8009130:	6010      	str	r0, [r2, #0]
 8009132:	e7da      	b.n	80090ea <_free_r+0x22>
 8009134:	d902      	bls.n	800913c <_free_r+0x74>
 8009136:	230c      	movs	r3, #12
 8009138:	602b      	str	r3, [r5, #0]
 800913a:	e7d6      	b.n	80090ea <_free_r+0x22>
 800913c:	6820      	ldr	r0, [r4, #0]
 800913e:	1821      	adds	r1, r4, r0
 8009140:	428b      	cmp	r3, r1
 8009142:	bf04      	itt	eq
 8009144:	6819      	ldreq	r1, [r3, #0]
 8009146:	685b      	ldreq	r3, [r3, #4]
 8009148:	6063      	str	r3, [r4, #4]
 800914a:	bf04      	itt	eq
 800914c:	1809      	addeq	r1, r1, r0
 800914e:	6021      	streq	r1, [r4, #0]
 8009150:	6054      	str	r4, [r2, #4]
 8009152:	e7ca      	b.n	80090ea <_free_r+0x22>
 8009154:	bd38      	pop	{r3, r4, r5, pc}
 8009156:	bf00      	nop
 8009158:	200006b8 	.word	0x200006b8

0800915c <malloc>:
 800915c:	4b02      	ldr	r3, [pc, #8]	@ (8009168 <malloc+0xc>)
 800915e:	4601      	mov	r1, r0
 8009160:	6818      	ldr	r0, [r3, #0]
 8009162:	f000 b825 	b.w	80091b0 <_malloc_r>
 8009166:	bf00      	nop
 8009168:	200000f8 	.word	0x200000f8

0800916c <sbrk_aligned>:
 800916c:	b570      	push	{r4, r5, r6, lr}
 800916e:	4e0f      	ldr	r6, [pc, #60]	@ (80091ac <sbrk_aligned+0x40>)
 8009170:	460c      	mov	r4, r1
 8009172:	6831      	ldr	r1, [r6, #0]
 8009174:	4605      	mov	r5, r0
 8009176:	b911      	cbnz	r1, 800917e <sbrk_aligned+0x12>
 8009178:	f000 fc64 	bl	8009a44 <_sbrk_r>
 800917c:	6030      	str	r0, [r6, #0]
 800917e:	4621      	mov	r1, r4
 8009180:	4628      	mov	r0, r5
 8009182:	f000 fc5f 	bl	8009a44 <_sbrk_r>
 8009186:	1c43      	adds	r3, r0, #1
 8009188:	d103      	bne.n	8009192 <sbrk_aligned+0x26>
 800918a:	f04f 34ff 	mov.w	r4, #4294967295
 800918e:	4620      	mov	r0, r4
 8009190:	bd70      	pop	{r4, r5, r6, pc}
 8009192:	1cc4      	adds	r4, r0, #3
 8009194:	f024 0403 	bic.w	r4, r4, #3
 8009198:	42a0      	cmp	r0, r4
 800919a:	d0f8      	beq.n	800918e <sbrk_aligned+0x22>
 800919c:	1a21      	subs	r1, r4, r0
 800919e:	4628      	mov	r0, r5
 80091a0:	f000 fc50 	bl	8009a44 <_sbrk_r>
 80091a4:	3001      	adds	r0, #1
 80091a6:	d1f2      	bne.n	800918e <sbrk_aligned+0x22>
 80091a8:	e7ef      	b.n	800918a <sbrk_aligned+0x1e>
 80091aa:	bf00      	nop
 80091ac:	200006b4 	.word	0x200006b4

080091b0 <_malloc_r>:
 80091b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b4:	1ccd      	adds	r5, r1, #3
 80091b6:	f025 0503 	bic.w	r5, r5, #3
 80091ba:	3508      	adds	r5, #8
 80091bc:	2d0c      	cmp	r5, #12
 80091be:	bf38      	it	cc
 80091c0:	250c      	movcc	r5, #12
 80091c2:	2d00      	cmp	r5, #0
 80091c4:	4606      	mov	r6, r0
 80091c6:	db01      	blt.n	80091cc <_malloc_r+0x1c>
 80091c8:	42a9      	cmp	r1, r5
 80091ca:	d904      	bls.n	80091d6 <_malloc_r+0x26>
 80091cc:	230c      	movs	r3, #12
 80091ce:	6033      	str	r3, [r6, #0]
 80091d0:	2000      	movs	r0, #0
 80091d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80092ac <_malloc_r+0xfc>
 80091da:	f000 f869 	bl	80092b0 <__malloc_lock>
 80091de:	f8d8 3000 	ldr.w	r3, [r8]
 80091e2:	461c      	mov	r4, r3
 80091e4:	bb44      	cbnz	r4, 8009238 <_malloc_r+0x88>
 80091e6:	4629      	mov	r1, r5
 80091e8:	4630      	mov	r0, r6
 80091ea:	f7ff ffbf 	bl	800916c <sbrk_aligned>
 80091ee:	1c43      	adds	r3, r0, #1
 80091f0:	4604      	mov	r4, r0
 80091f2:	d158      	bne.n	80092a6 <_malloc_r+0xf6>
 80091f4:	f8d8 4000 	ldr.w	r4, [r8]
 80091f8:	4627      	mov	r7, r4
 80091fa:	2f00      	cmp	r7, #0
 80091fc:	d143      	bne.n	8009286 <_malloc_r+0xd6>
 80091fe:	2c00      	cmp	r4, #0
 8009200:	d04b      	beq.n	800929a <_malloc_r+0xea>
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	4639      	mov	r1, r7
 8009206:	4630      	mov	r0, r6
 8009208:	eb04 0903 	add.w	r9, r4, r3
 800920c:	f000 fc1a 	bl	8009a44 <_sbrk_r>
 8009210:	4581      	cmp	r9, r0
 8009212:	d142      	bne.n	800929a <_malloc_r+0xea>
 8009214:	6821      	ldr	r1, [r4, #0]
 8009216:	1a6d      	subs	r5, r5, r1
 8009218:	4629      	mov	r1, r5
 800921a:	4630      	mov	r0, r6
 800921c:	f7ff ffa6 	bl	800916c <sbrk_aligned>
 8009220:	3001      	adds	r0, #1
 8009222:	d03a      	beq.n	800929a <_malloc_r+0xea>
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	442b      	add	r3, r5
 8009228:	6023      	str	r3, [r4, #0]
 800922a:	f8d8 3000 	ldr.w	r3, [r8]
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	bb62      	cbnz	r2, 800928c <_malloc_r+0xdc>
 8009232:	f8c8 7000 	str.w	r7, [r8]
 8009236:	e00f      	b.n	8009258 <_malloc_r+0xa8>
 8009238:	6822      	ldr	r2, [r4, #0]
 800923a:	1b52      	subs	r2, r2, r5
 800923c:	d420      	bmi.n	8009280 <_malloc_r+0xd0>
 800923e:	2a0b      	cmp	r2, #11
 8009240:	d917      	bls.n	8009272 <_malloc_r+0xc2>
 8009242:	1961      	adds	r1, r4, r5
 8009244:	42a3      	cmp	r3, r4
 8009246:	6025      	str	r5, [r4, #0]
 8009248:	bf18      	it	ne
 800924a:	6059      	strne	r1, [r3, #4]
 800924c:	6863      	ldr	r3, [r4, #4]
 800924e:	bf08      	it	eq
 8009250:	f8c8 1000 	streq.w	r1, [r8]
 8009254:	5162      	str	r2, [r4, r5]
 8009256:	604b      	str	r3, [r1, #4]
 8009258:	4630      	mov	r0, r6
 800925a:	f000 f82f 	bl	80092bc <__malloc_unlock>
 800925e:	f104 000b 	add.w	r0, r4, #11
 8009262:	1d23      	adds	r3, r4, #4
 8009264:	f020 0007 	bic.w	r0, r0, #7
 8009268:	1ac2      	subs	r2, r0, r3
 800926a:	bf1c      	itt	ne
 800926c:	1a1b      	subne	r3, r3, r0
 800926e:	50a3      	strne	r3, [r4, r2]
 8009270:	e7af      	b.n	80091d2 <_malloc_r+0x22>
 8009272:	6862      	ldr	r2, [r4, #4]
 8009274:	42a3      	cmp	r3, r4
 8009276:	bf0c      	ite	eq
 8009278:	f8c8 2000 	streq.w	r2, [r8]
 800927c:	605a      	strne	r2, [r3, #4]
 800927e:	e7eb      	b.n	8009258 <_malloc_r+0xa8>
 8009280:	4623      	mov	r3, r4
 8009282:	6864      	ldr	r4, [r4, #4]
 8009284:	e7ae      	b.n	80091e4 <_malloc_r+0x34>
 8009286:	463c      	mov	r4, r7
 8009288:	687f      	ldr	r7, [r7, #4]
 800928a:	e7b6      	b.n	80091fa <_malloc_r+0x4a>
 800928c:	461a      	mov	r2, r3
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	42a3      	cmp	r3, r4
 8009292:	d1fb      	bne.n	800928c <_malloc_r+0xdc>
 8009294:	2300      	movs	r3, #0
 8009296:	6053      	str	r3, [r2, #4]
 8009298:	e7de      	b.n	8009258 <_malloc_r+0xa8>
 800929a:	230c      	movs	r3, #12
 800929c:	6033      	str	r3, [r6, #0]
 800929e:	4630      	mov	r0, r6
 80092a0:	f000 f80c 	bl	80092bc <__malloc_unlock>
 80092a4:	e794      	b.n	80091d0 <_malloc_r+0x20>
 80092a6:	6005      	str	r5, [r0, #0]
 80092a8:	e7d6      	b.n	8009258 <_malloc_r+0xa8>
 80092aa:	bf00      	nop
 80092ac:	200006b8 	.word	0x200006b8

080092b0 <__malloc_lock>:
 80092b0:	4801      	ldr	r0, [pc, #4]	@ (80092b8 <__malloc_lock+0x8>)
 80092b2:	f7ff bee8 	b.w	8009086 <__retarget_lock_acquire_recursive>
 80092b6:	bf00      	nop
 80092b8:	200006b0 	.word	0x200006b0

080092bc <__malloc_unlock>:
 80092bc:	4801      	ldr	r0, [pc, #4]	@ (80092c4 <__malloc_unlock+0x8>)
 80092be:	f7ff bee3 	b.w	8009088 <__retarget_lock_release_recursive>
 80092c2:	bf00      	nop
 80092c4:	200006b0 	.word	0x200006b0

080092c8 <__ssputs_r>:
 80092c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092cc:	688e      	ldr	r6, [r1, #8]
 80092ce:	461f      	mov	r7, r3
 80092d0:	42be      	cmp	r6, r7
 80092d2:	680b      	ldr	r3, [r1, #0]
 80092d4:	4682      	mov	sl, r0
 80092d6:	460c      	mov	r4, r1
 80092d8:	4690      	mov	r8, r2
 80092da:	d82d      	bhi.n	8009338 <__ssputs_r+0x70>
 80092dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80092e4:	d026      	beq.n	8009334 <__ssputs_r+0x6c>
 80092e6:	6965      	ldr	r5, [r4, #20]
 80092e8:	6909      	ldr	r1, [r1, #16]
 80092ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092ee:	eba3 0901 	sub.w	r9, r3, r1
 80092f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092f6:	1c7b      	adds	r3, r7, #1
 80092f8:	444b      	add	r3, r9
 80092fa:	106d      	asrs	r5, r5, #1
 80092fc:	429d      	cmp	r5, r3
 80092fe:	bf38      	it	cc
 8009300:	461d      	movcc	r5, r3
 8009302:	0553      	lsls	r3, r2, #21
 8009304:	d527      	bpl.n	8009356 <__ssputs_r+0x8e>
 8009306:	4629      	mov	r1, r5
 8009308:	f7ff ff52 	bl	80091b0 <_malloc_r>
 800930c:	4606      	mov	r6, r0
 800930e:	b360      	cbz	r0, 800936a <__ssputs_r+0xa2>
 8009310:	6921      	ldr	r1, [r4, #16]
 8009312:	464a      	mov	r2, r9
 8009314:	f000 fba6 	bl	8009a64 <memcpy>
 8009318:	89a3      	ldrh	r3, [r4, #12]
 800931a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800931e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009322:	81a3      	strh	r3, [r4, #12]
 8009324:	6126      	str	r6, [r4, #16]
 8009326:	6165      	str	r5, [r4, #20]
 8009328:	444e      	add	r6, r9
 800932a:	eba5 0509 	sub.w	r5, r5, r9
 800932e:	6026      	str	r6, [r4, #0]
 8009330:	60a5      	str	r5, [r4, #8]
 8009332:	463e      	mov	r6, r7
 8009334:	42be      	cmp	r6, r7
 8009336:	d900      	bls.n	800933a <__ssputs_r+0x72>
 8009338:	463e      	mov	r6, r7
 800933a:	6820      	ldr	r0, [r4, #0]
 800933c:	4632      	mov	r2, r6
 800933e:	4641      	mov	r1, r8
 8009340:	f000 fb66 	bl	8009a10 <memmove>
 8009344:	68a3      	ldr	r3, [r4, #8]
 8009346:	1b9b      	subs	r3, r3, r6
 8009348:	60a3      	str	r3, [r4, #8]
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	4433      	add	r3, r6
 800934e:	6023      	str	r3, [r4, #0]
 8009350:	2000      	movs	r0, #0
 8009352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009356:	462a      	mov	r2, r5
 8009358:	f000 fb99 	bl	8009a8e <_realloc_r>
 800935c:	4606      	mov	r6, r0
 800935e:	2800      	cmp	r0, #0
 8009360:	d1e0      	bne.n	8009324 <__ssputs_r+0x5c>
 8009362:	6921      	ldr	r1, [r4, #16]
 8009364:	4650      	mov	r0, sl
 8009366:	f7ff feaf 	bl	80090c8 <_free_r>
 800936a:	230c      	movs	r3, #12
 800936c:	f8ca 3000 	str.w	r3, [sl]
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009376:	81a3      	strh	r3, [r4, #12]
 8009378:	f04f 30ff 	mov.w	r0, #4294967295
 800937c:	e7e9      	b.n	8009352 <__ssputs_r+0x8a>
	...

08009380 <_svfiprintf_r>:
 8009380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009384:	4698      	mov	r8, r3
 8009386:	898b      	ldrh	r3, [r1, #12]
 8009388:	061b      	lsls	r3, r3, #24
 800938a:	b09d      	sub	sp, #116	@ 0x74
 800938c:	4607      	mov	r7, r0
 800938e:	460d      	mov	r5, r1
 8009390:	4614      	mov	r4, r2
 8009392:	d510      	bpl.n	80093b6 <_svfiprintf_r+0x36>
 8009394:	690b      	ldr	r3, [r1, #16]
 8009396:	b973      	cbnz	r3, 80093b6 <_svfiprintf_r+0x36>
 8009398:	2140      	movs	r1, #64	@ 0x40
 800939a:	f7ff ff09 	bl	80091b0 <_malloc_r>
 800939e:	6028      	str	r0, [r5, #0]
 80093a0:	6128      	str	r0, [r5, #16]
 80093a2:	b930      	cbnz	r0, 80093b2 <_svfiprintf_r+0x32>
 80093a4:	230c      	movs	r3, #12
 80093a6:	603b      	str	r3, [r7, #0]
 80093a8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ac:	b01d      	add	sp, #116	@ 0x74
 80093ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b2:	2340      	movs	r3, #64	@ 0x40
 80093b4:	616b      	str	r3, [r5, #20]
 80093b6:	2300      	movs	r3, #0
 80093b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80093ba:	2320      	movs	r3, #32
 80093bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80093c4:	2330      	movs	r3, #48	@ 0x30
 80093c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009564 <_svfiprintf_r+0x1e4>
 80093ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093ce:	f04f 0901 	mov.w	r9, #1
 80093d2:	4623      	mov	r3, r4
 80093d4:	469a      	mov	sl, r3
 80093d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093da:	b10a      	cbz	r2, 80093e0 <_svfiprintf_r+0x60>
 80093dc:	2a25      	cmp	r2, #37	@ 0x25
 80093de:	d1f9      	bne.n	80093d4 <_svfiprintf_r+0x54>
 80093e0:	ebba 0b04 	subs.w	fp, sl, r4
 80093e4:	d00b      	beq.n	80093fe <_svfiprintf_r+0x7e>
 80093e6:	465b      	mov	r3, fp
 80093e8:	4622      	mov	r2, r4
 80093ea:	4629      	mov	r1, r5
 80093ec:	4638      	mov	r0, r7
 80093ee:	f7ff ff6b 	bl	80092c8 <__ssputs_r>
 80093f2:	3001      	adds	r0, #1
 80093f4:	f000 80a7 	beq.w	8009546 <_svfiprintf_r+0x1c6>
 80093f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093fa:	445a      	add	r2, fp
 80093fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80093fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009402:	2b00      	cmp	r3, #0
 8009404:	f000 809f 	beq.w	8009546 <_svfiprintf_r+0x1c6>
 8009408:	2300      	movs	r3, #0
 800940a:	f04f 32ff 	mov.w	r2, #4294967295
 800940e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009412:	f10a 0a01 	add.w	sl, sl, #1
 8009416:	9304      	str	r3, [sp, #16]
 8009418:	9307      	str	r3, [sp, #28]
 800941a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800941e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009420:	4654      	mov	r4, sl
 8009422:	2205      	movs	r2, #5
 8009424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009428:	484e      	ldr	r0, [pc, #312]	@ (8009564 <_svfiprintf_r+0x1e4>)
 800942a:	f7f6 ff11 	bl	8000250 <memchr>
 800942e:	9a04      	ldr	r2, [sp, #16]
 8009430:	b9d8      	cbnz	r0, 800946a <_svfiprintf_r+0xea>
 8009432:	06d0      	lsls	r0, r2, #27
 8009434:	bf44      	itt	mi
 8009436:	2320      	movmi	r3, #32
 8009438:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800943c:	0711      	lsls	r1, r2, #28
 800943e:	bf44      	itt	mi
 8009440:	232b      	movmi	r3, #43	@ 0x2b
 8009442:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009446:	f89a 3000 	ldrb.w	r3, [sl]
 800944a:	2b2a      	cmp	r3, #42	@ 0x2a
 800944c:	d015      	beq.n	800947a <_svfiprintf_r+0xfa>
 800944e:	9a07      	ldr	r2, [sp, #28]
 8009450:	4654      	mov	r4, sl
 8009452:	2000      	movs	r0, #0
 8009454:	f04f 0c0a 	mov.w	ip, #10
 8009458:	4621      	mov	r1, r4
 800945a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800945e:	3b30      	subs	r3, #48	@ 0x30
 8009460:	2b09      	cmp	r3, #9
 8009462:	d94b      	bls.n	80094fc <_svfiprintf_r+0x17c>
 8009464:	b1b0      	cbz	r0, 8009494 <_svfiprintf_r+0x114>
 8009466:	9207      	str	r2, [sp, #28]
 8009468:	e014      	b.n	8009494 <_svfiprintf_r+0x114>
 800946a:	eba0 0308 	sub.w	r3, r0, r8
 800946e:	fa09 f303 	lsl.w	r3, r9, r3
 8009472:	4313      	orrs	r3, r2
 8009474:	9304      	str	r3, [sp, #16]
 8009476:	46a2      	mov	sl, r4
 8009478:	e7d2      	b.n	8009420 <_svfiprintf_r+0xa0>
 800947a:	9b03      	ldr	r3, [sp, #12]
 800947c:	1d19      	adds	r1, r3, #4
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	9103      	str	r1, [sp, #12]
 8009482:	2b00      	cmp	r3, #0
 8009484:	bfbb      	ittet	lt
 8009486:	425b      	neglt	r3, r3
 8009488:	f042 0202 	orrlt.w	r2, r2, #2
 800948c:	9307      	strge	r3, [sp, #28]
 800948e:	9307      	strlt	r3, [sp, #28]
 8009490:	bfb8      	it	lt
 8009492:	9204      	strlt	r2, [sp, #16]
 8009494:	7823      	ldrb	r3, [r4, #0]
 8009496:	2b2e      	cmp	r3, #46	@ 0x2e
 8009498:	d10a      	bne.n	80094b0 <_svfiprintf_r+0x130>
 800949a:	7863      	ldrb	r3, [r4, #1]
 800949c:	2b2a      	cmp	r3, #42	@ 0x2a
 800949e:	d132      	bne.n	8009506 <_svfiprintf_r+0x186>
 80094a0:	9b03      	ldr	r3, [sp, #12]
 80094a2:	1d1a      	adds	r2, r3, #4
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	9203      	str	r2, [sp, #12]
 80094a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094ac:	3402      	adds	r4, #2
 80094ae:	9305      	str	r3, [sp, #20]
 80094b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009574 <_svfiprintf_r+0x1f4>
 80094b4:	7821      	ldrb	r1, [r4, #0]
 80094b6:	2203      	movs	r2, #3
 80094b8:	4650      	mov	r0, sl
 80094ba:	f7f6 fec9 	bl	8000250 <memchr>
 80094be:	b138      	cbz	r0, 80094d0 <_svfiprintf_r+0x150>
 80094c0:	9b04      	ldr	r3, [sp, #16]
 80094c2:	eba0 000a 	sub.w	r0, r0, sl
 80094c6:	2240      	movs	r2, #64	@ 0x40
 80094c8:	4082      	lsls	r2, r0
 80094ca:	4313      	orrs	r3, r2
 80094cc:	3401      	adds	r4, #1
 80094ce:	9304      	str	r3, [sp, #16]
 80094d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094d4:	4824      	ldr	r0, [pc, #144]	@ (8009568 <_svfiprintf_r+0x1e8>)
 80094d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094da:	2206      	movs	r2, #6
 80094dc:	f7f6 feb8 	bl	8000250 <memchr>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d036      	beq.n	8009552 <_svfiprintf_r+0x1d2>
 80094e4:	4b21      	ldr	r3, [pc, #132]	@ (800956c <_svfiprintf_r+0x1ec>)
 80094e6:	bb1b      	cbnz	r3, 8009530 <_svfiprintf_r+0x1b0>
 80094e8:	9b03      	ldr	r3, [sp, #12]
 80094ea:	3307      	adds	r3, #7
 80094ec:	f023 0307 	bic.w	r3, r3, #7
 80094f0:	3308      	adds	r3, #8
 80094f2:	9303      	str	r3, [sp, #12]
 80094f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094f6:	4433      	add	r3, r6
 80094f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80094fa:	e76a      	b.n	80093d2 <_svfiprintf_r+0x52>
 80094fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009500:	460c      	mov	r4, r1
 8009502:	2001      	movs	r0, #1
 8009504:	e7a8      	b.n	8009458 <_svfiprintf_r+0xd8>
 8009506:	2300      	movs	r3, #0
 8009508:	3401      	adds	r4, #1
 800950a:	9305      	str	r3, [sp, #20]
 800950c:	4619      	mov	r1, r3
 800950e:	f04f 0c0a 	mov.w	ip, #10
 8009512:	4620      	mov	r0, r4
 8009514:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009518:	3a30      	subs	r2, #48	@ 0x30
 800951a:	2a09      	cmp	r2, #9
 800951c:	d903      	bls.n	8009526 <_svfiprintf_r+0x1a6>
 800951e:	2b00      	cmp	r3, #0
 8009520:	d0c6      	beq.n	80094b0 <_svfiprintf_r+0x130>
 8009522:	9105      	str	r1, [sp, #20]
 8009524:	e7c4      	b.n	80094b0 <_svfiprintf_r+0x130>
 8009526:	fb0c 2101 	mla	r1, ip, r1, r2
 800952a:	4604      	mov	r4, r0
 800952c:	2301      	movs	r3, #1
 800952e:	e7f0      	b.n	8009512 <_svfiprintf_r+0x192>
 8009530:	ab03      	add	r3, sp, #12
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	462a      	mov	r2, r5
 8009536:	4b0e      	ldr	r3, [pc, #56]	@ (8009570 <_svfiprintf_r+0x1f0>)
 8009538:	a904      	add	r1, sp, #16
 800953a:	4638      	mov	r0, r7
 800953c:	f3af 8000 	nop.w
 8009540:	1c42      	adds	r2, r0, #1
 8009542:	4606      	mov	r6, r0
 8009544:	d1d6      	bne.n	80094f4 <_svfiprintf_r+0x174>
 8009546:	89ab      	ldrh	r3, [r5, #12]
 8009548:	065b      	lsls	r3, r3, #25
 800954a:	f53f af2d 	bmi.w	80093a8 <_svfiprintf_r+0x28>
 800954e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009550:	e72c      	b.n	80093ac <_svfiprintf_r+0x2c>
 8009552:	ab03      	add	r3, sp, #12
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	462a      	mov	r2, r5
 8009558:	4b05      	ldr	r3, [pc, #20]	@ (8009570 <_svfiprintf_r+0x1f0>)
 800955a:	a904      	add	r1, sp, #16
 800955c:	4638      	mov	r0, r7
 800955e:	f000 f879 	bl	8009654 <_printf_i>
 8009562:	e7ed      	b.n	8009540 <_svfiprintf_r+0x1c0>
 8009564:	0800a2e2 	.word	0x0800a2e2
 8009568:	0800a2ec 	.word	0x0800a2ec
 800956c:	00000000 	.word	0x00000000
 8009570:	080092c9 	.word	0x080092c9
 8009574:	0800a2e8 	.word	0x0800a2e8

08009578 <_printf_common>:
 8009578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800957c:	4616      	mov	r6, r2
 800957e:	4698      	mov	r8, r3
 8009580:	688a      	ldr	r2, [r1, #8]
 8009582:	690b      	ldr	r3, [r1, #16]
 8009584:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009588:	4293      	cmp	r3, r2
 800958a:	bfb8      	it	lt
 800958c:	4613      	movlt	r3, r2
 800958e:	6033      	str	r3, [r6, #0]
 8009590:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009594:	4607      	mov	r7, r0
 8009596:	460c      	mov	r4, r1
 8009598:	b10a      	cbz	r2, 800959e <_printf_common+0x26>
 800959a:	3301      	adds	r3, #1
 800959c:	6033      	str	r3, [r6, #0]
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	0699      	lsls	r1, r3, #26
 80095a2:	bf42      	ittt	mi
 80095a4:	6833      	ldrmi	r3, [r6, #0]
 80095a6:	3302      	addmi	r3, #2
 80095a8:	6033      	strmi	r3, [r6, #0]
 80095aa:	6825      	ldr	r5, [r4, #0]
 80095ac:	f015 0506 	ands.w	r5, r5, #6
 80095b0:	d106      	bne.n	80095c0 <_printf_common+0x48>
 80095b2:	f104 0a19 	add.w	sl, r4, #25
 80095b6:	68e3      	ldr	r3, [r4, #12]
 80095b8:	6832      	ldr	r2, [r6, #0]
 80095ba:	1a9b      	subs	r3, r3, r2
 80095bc:	42ab      	cmp	r3, r5
 80095be:	dc26      	bgt.n	800960e <_printf_common+0x96>
 80095c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80095c4:	6822      	ldr	r2, [r4, #0]
 80095c6:	3b00      	subs	r3, #0
 80095c8:	bf18      	it	ne
 80095ca:	2301      	movne	r3, #1
 80095cc:	0692      	lsls	r2, r2, #26
 80095ce:	d42b      	bmi.n	8009628 <_printf_common+0xb0>
 80095d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80095d4:	4641      	mov	r1, r8
 80095d6:	4638      	mov	r0, r7
 80095d8:	47c8      	blx	r9
 80095da:	3001      	adds	r0, #1
 80095dc:	d01e      	beq.n	800961c <_printf_common+0xa4>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	6922      	ldr	r2, [r4, #16]
 80095e2:	f003 0306 	and.w	r3, r3, #6
 80095e6:	2b04      	cmp	r3, #4
 80095e8:	bf02      	ittt	eq
 80095ea:	68e5      	ldreq	r5, [r4, #12]
 80095ec:	6833      	ldreq	r3, [r6, #0]
 80095ee:	1aed      	subeq	r5, r5, r3
 80095f0:	68a3      	ldr	r3, [r4, #8]
 80095f2:	bf0c      	ite	eq
 80095f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095f8:	2500      	movne	r5, #0
 80095fa:	4293      	cmp	r3, r2
 80095fc:	bfc4      	itt	gt
 80095fe:	1a9b      	subgt	r3, r3, r2
 8009600:	18ed      	addgt	r5, r5, r3
 8009602:	2600      	movs	r6, #0
 8009604:	341a      	adds	r4, #26
 8009606:	42b5      	cmp	r5, r6
 8009608:	d11a      	bne.n	8009640 <_printf_common+0xc8>
 800960a:	2000      	movs	r0, #0
 800960c:	e008      	b.n	8009620 <_printf_common+0xa8>
 800960e:	2301      	movs	r3, #1
 8009610:	4652      	mov	r2, sl
 8009612:	4641      	mov	r1, r8
 8009614:	4638      	mov	r0, r7
 8009616:	47c8      	blx	r9
 8009618:	3001      	adds	r0, #1
 800961a:	d103      	bne.n	8009624 <_printf_common+0xac>
 800961c:	f04f 30ff 	mov.w	r0, #4294967295
 8009620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009624:	3501      	adds	r5, #1
 8009626:	e7c6      	b.n	80095b6 <_printf_common+0x3e>
 8009628:	18e1      	adds	r1, r4, r3
 800962a:	1c5a      	adds	r2, r3, #1
 800962c:	2030      	movs	r0, #48	@ 0x30
 800962e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009632:	4422      	add	r2, r4
 8009634:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009638:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800963c:	3302      	adds	r3, #2
 800963e:	e7c7      	b.n	80095d0 <_printf_common+0x58>
 8009640:	2301      	movs	r3, #1
 8009642:	4622      	mov	r2, r4
 8009644:	4641      	mov	r1, r8
 8009646:	4638      	mov	r0, r7
 8009648:	47c8      	blx	r9
 800964a:	3001      	adds	r0, #1
 800964c:	d0e6      	beq.n	800961c <_printf_common+0xa4>
 800964e:	3601      	adds	r6, #1
 8009650:	e7d9      	b.n	8009606 <_printf_common+0x8e>
	...

08009654 <_printf_i>:
 8009654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009658:	7e0f      	ldrb	r7, [r1, #24]
 800965a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800965c:	2f78      	cmp	r7, #120	@ 0x78
 800965e:	4691      	mov	r9, r2
 8009660:	4680      	mov	r8, r0
 8009662:	460c      	mov	r4, r1
 8009664:	469a      	mov	sl, r3
 8009666:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800966a:	d807      	bhi.n	800967c <_printf_i+0x28>
 800966c:	2f62      	cmp	r7, #98	@ 0x62
 800966e:	d80a      	bhi.n	8009686 <_printf_i+0x32>
 8009670:	2f00      	cmp	r7, #0
 8009672:	f000 80d2 	beq.w	800981a <_printf_i+0x1c6>
 8009676:	2f58      	cmp	r7, #88	@ 0x58
 8009678:	f000 80b9 	beq.w	80097ee <_printf_i+0x19a>
 800967c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009680:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009684:	e03a      	b.n	80096fc <_printf_i+0xa8>
 8009686:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800968a:	2b15      	cmp	r3, #21
 800968c:	d8f6      	bhi.n	800967c <_printf_i+0x28>
 800968e:	a101      	add	r1, pc, #4	@ (adr r1, 8009694 <_printf_i+0x40>)
 8009690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009694:	080096ed 	.word	0x080096ed
 8009698:	08009701 	.word	0x08009701
 800969c:	0800967d 	.word	0x0800967d
 80096a0:	0800967d 	.word	0x0800967d
 80096a4:	0800967d 	.word	0x0800967d
 80096a8:	0800967d 	.word	0x0800967d
 80096ac:	08009701 	.word	0x08009701
 80096b0:	0800967d 	.word	0x0800967d
 80096b4:	0800967d 	.word	0x0800967d
 80096b8:	0800967d 	.word	0x0800967d
 80096bc:	0800967d 	.word	0x0800967d
 80096c0:	08009801 	.word	0x08009801
 80096c4:	0800972b 	.word	0x0800972b
 80096c8:	080097bb 	.word	0x080097bb
 80096cc:	0800967d 	.word	0x0800967d
 80096d0:	0800967d 	.word	0x0800967d
 80096d4:	08009823 	.word	0x08009823
 80096d8:	0800967d 	.word	0x0800967d
 80096dc:	0800972b 	.word	0x0800972b
 80096e0:	0800967d 	.word	0x0800967d
 80096e4:	0800967d 	.word	0x0800967d
 80096e8:	080097c3 	.word	0x080097c3
 80096ec:	6833      	ldr	r3, [r6, #0]
 80096ee:	1d1a      	adds	r2, r3, #4
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6032      	str	r2, [r6, #0]
 80096f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80096fc:	2301      	movs	r3, #1
 80096fe:	e09d      	b.n	800983c <_printf_i+0x1e8>
 8009700:	6833      	ldr	r3, [r6, #0]
 8009702:	6820      	ldr	r0, [r4, #0]
 8009704:	1d19      	adds	r1, r3, #4
 8009706:	6031      	str	r1, [r6, #0]
 8009708:	0606      	lsls	r6, r0, #24
 800970a:	d501      	bpl.n	8009710 <_printf_i+0xbc>
 800970c:	681d      	ldr	r5, [r3, #0]
 800970e:	e003      	b.n	8009718 <_printf_i+0xc4>
 8009710:	0645      	lsls	r5, r0, #25
 8009712:	d5fb      	bpl.n	800970c <_printf_i+0xb8>
 8009714:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009718:	2d00      	cmp	r5, #0
 800971a:	da03      	bge.n	8009724 <_printf_i+0xd0>
 800971c:	232d      	movs	r3, #45	@ 0x2d
 800971e:	426d      	negs	r5, r5
 8009720:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009724:	4859      	ldr	r0, [pc, #356]	@ (800988c <_printf_i+0x238>)
 8009726:	230a      	movs	r3, #10
 8009728:	e011      	b.n	800974e <_printf_i+0xfa>
 800972a:	6821      	ldr	r1, [r4, #0]
 800972c:	6833      	ldr	r3, [r6, #0]
 800972e:	0608      	lsls	r0, r1, #24
 8009730:	f853 5b04 	ldr.w	r5, [r3], #4
 8009734:	d402      	bmi.n	800973c <_printf_i+0xe8>
 8009736:	0649      	lsls	r1, r1, #25
 8009738:	bf48      	it	mi
 800973a:	b2ad      	uxthmi	r5, r5
 800973c:	2f6f      	cmp	r7, #111	@ 0x6f
 800973e:	4853      	ldr	r0, [pc, #332]	@ (800988c <_printf_i+0x238>)
 8009740:	6033      	str	r3, [r6, #0]
 8009742:	bf14      	ite	ne
 8009744:	230a      	movne	r3, #10
 8009746:	2308      	moveq	r3, #8
 8009748:	2100      	movs	r1, #0
 800974a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800974e:	6866      	ldr	r6, [r4, #4]
 8009750:	60a6      	str	r6, [r4, #8]
 8009752:	2e00      	cmp	r6, #0
 8009754:	bfa2      	ittt	ge
 8009756:	6821      	ldrge	r1, [r4, #0]
 8009758:	f021 0104 	bicge.w	r1, r1, #4
 800975c:	6021      	strge	r1, [r4, #0]
 800975e:	b90d      	cbnz	r5, 8009764 <_printf_i+0x110>
 8009760:	2e00      	cmp	r6, #0
 8009762:	d04b      	beq.n	80097fc <_printf_i+0x1a8>
 8009764:	4616      	mov	r6, r2
 8009766:	fbb5 f1f3 	udiv	r1, r5, r3
 800976a:	fb03 5711 	mls	r7, r3, r1, r5
 800976e:	5dc7      	ldrb	r7, [r0, r7]
 8009770:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009774:	462f      	mov	r7, r5
 8009776:	42bb      	cmp	r3, r7
 8009778:	460d      	mov	r5, r1
 800977a:	d9f4      	bls.n	8009766 <_printf_i+0x112>
 800977c:	2b08      	cmp	r3, #8
 800977e:	d10b      	bne.n	8009798 <_printf_i+0x144>
 8009780:	6823      	ldr	r3, [r4, #0]
 8009782:	07df      	lsls	r7, r3, #31
 8009784:	d508      	bpl.n	8009798 <_printf_i+0x144>
 8009786:	6923      	ldr	r3, [r4, #16]
 8009788:	6861      	ldr	r1, [r4, #4]
 800978a:	4299      	cmp	r1, r3
 800978c:	bfde      	ittt	le
 800978e:	2330      	movle	r3, #48	@ 0x30
 8009790:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009794:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009798:	1b92      	subs	r2, r2, r6
 800979a:	6122      	str	r2, [r4, #16]
 800979c:	f8cd a000 	str.w	sl, [sp]
 80097a0:	464b      	mov	r3, r9
 80097a2:	aa03      	add	r2, sp, #12
 80097a4:	4621      	mov	r1, r4
 80097a6:	4640      	mov	r0, r8
 80097a8:	f7ff fee6 	bl	8009578 <_printf_common>
 80097ac:	3001      	adds	r0, #1
 80097ae:	d14a      	bne.n	8009846 <_printf_i+0x1f2>
 80097b0:	f04f 30ff 	mov.w	r0, #4294967295
 80097b4:	b004      	add	sp, #16
 80097b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	f043 0320 	orr.w	r3, r3, #32
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	4833      	ldr	r0, [pc, #204]	@ (8009890 <_printf_i+0x23c>)
 80097c4:	2778      	movs	r7, #120	@ 0x78
 80097c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	6831      	ldr	r1, [r6, #0]
 80097ce:	061f      	lsls	r7, r3, #24
 80097d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80097d4:	d402      	bmi.n	80097dc <_printf_i+0x188>
 80097d6:	065f      	lsls	r7, r3, #25
 80097d8:	bf48      	it	mi
 80097da:	b2ad      	uxthmi	r5, r5
 80097dc:	6031      	str	r1, [r6, #0]
 80097de:	07d9      	lsls	r1, r3, #31
 80097e0:	bf44      	itt	mi
 80097e2:	f043 0320 	orrmi.w	r3, r3, #32
 80097e6:	6023      	strmi	r3, [r4, #0]
 80097e8:	b11d      	cbz	r5, 80097f2 <_printf_i+0x19e>
 80097ea:	2310      	movs	r3, #16
 80097ec:	e7ac      	b.n	8009748 <_printf_i+0xf4>
 80097ee:	4827      	ldr	r0, [pc, #156]	@ (800988c <_printf_i+0x238>)
 80097f0:	e7e9      	b.n	80097c6 <_printf_i+0x172>
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	f023 0320 	bic.w	r3, r3, #32
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	e7f6      	b.n	80097ea <_printf_i+0x196>
 80097fc:	4616      	mov	r6, r2
 80097fe:	e7bd      	b.n	800977c <_printf_i+0x128>
 8009800:	6833      	ldr	r3, [r6, #0]
 8009802:	6825      	ldr	r5, [r4, #0]
 8009804:	6961      	ldr	r1, [r4, #20]
 8009806:	1d18      	adds	r0, r3, #4
 8009808:	6030      	str	r0, [r6, #0]
 800980a:	062e      	lsls	r6, r5, #24
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	d501      	bpl.n	8009814 <_printf_i+0x1c0>
 8009810:	6019      	str	r1, [r3, #0]
 8009812:	e002      	b.n	800981a <_printf_i+0x1c6>
 8009814:	0668      	lsls	r0, r5, #25
 8009816:	d5fb      	bpl.n	8009810 <_printf_i+0x1bc>
 8009818:	8019      	strh	r1, [r3, #0]
 800981a:	2300      	movs	r3, #0
 800981c:	6123      	str	r3, [r4, #16]
 800981e:	4616      	mov	r6, r2
 8009820:	e7bc      	b.n	800979c <_printf_i+0x148>
 8009822:	6833      	ldr	r3, [r6, #0]
 8009824:	1d1a      	adds	r2, r3, #4
 8009826:	6032      	str	r2, [r6, #0]
 8009828:	681e      	ldr	r6, [r3, #0]
 800982a:	6862      	ldr	r2, [r4, #4]
 800982c:	2100      	movs	r1, #0
 800982e:	4630      	mov	r0, r6
 8009830:	f7f6 fd0e 	bl	8000250 <memchr>
 8009834:	b108      	cbz	r0, 800983a <_printf_i+0x1e6>
 8009836:	1b80      	subs	r0, r0, r6
 8009838:	6060      	str	r0, [r4, #4]
 800983a:	6863      	ldr	r3, [r4, #4]
 800983c:	6123      	str	r3, [r4, #16]
 800983e:	2300      	movs	r3, #0
 8009840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009844:	e7aa      	b.n	800979c <_printf_i+0x148>
 8009846:	6923      	ldr	r3, [r4, #16]
 8009848:	4632      	mov	r2, r6
 800984a:	4649      	mov	r1, r9
 800984c:	4640      	mov	r0, r8
 800984e:	47d0      	blx	sl
 8009850:	3001      	adds	r0, #1
 8009852:	d0ad      	beq.n	80097b0 <_printf_i+0x15c>
 8009854:	6823      	ldr	r3, [r4, #0]
 8009856:	079b      	lsls	r3, r3, #30
 8009858:	d413      	bmi.n	8009882 <_printf_i+0x22e>
 800985a:	68e0      	ldr	r0, [r4, #12]
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	4298      	cmp	r0, r3
 8009860:	bfb8      	it	lt
 8009862:	4618      	movlt	r0, r3
 8009864:	e7a6      	b.n	80097b4 <_printf_i+0x160>
 8009866:	2301      	movs	r3, #1
 8009868:	4632      	mov	r2, r6
 800986a:	4649      	mov	r1, r9
 800986c:	4640      	mov	r0, r8
 800986e:	47d0      	blx	sl
 8009870:	3001      	adds	r0, #1
 8009872:	d09d      	beq.n	80097b0 <_printf_i+0x15c>
 8009874:	3501      	adds	r5, #1
 8009876:	68e3      	ldr	r3, [r4, #12]
 8009878:	9903      	ldr	r1, [sp, #12]
 800987a:	1a5b      	subs	r3, r3, r1
 800987c:	42ab      	cmp	r3, r5
 800987e:	dcf2      	bgt.n	8009866 <_printf_i+0x212>
 8009880:	e7eb      	b.n	800985a <_printf_i+0x206>
 8009882:	2500      	movs	r5, #0
 8009884:	f104 0619 	add.w	r6, r4, #25
 8009888:	e7f5      	b.n	8009876 <_printf_i+0x222>
 800988a:	bf00      	nop
 800988c:	0800a2f3 	.word	0x0800a2f3
 8009890:	0800a304 	.word	0x0800a304

08009894 <__sflush_r>:
 8009894:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800989c:	0716      	lsls	r6, r2, #28
 800989e:	4605      	mov	r5, r0
 80098a0:	460c      	mov	r4, r1
 80098a2:	d454      	bmi.n	800994e <__sflush_r+0xba>
 80098a4:	684b      	ldr	r3, [r1, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	dc02      	bgt.n	80098b0 <__sflush_r+0x1c>
 80098aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	dd48      	ble.n	8009942 <__sflush_r+0xae>
 80098b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098b2:	2e00      	cmp	r6, #0
 80098b4:	d045      	beq.n	8009942 <__sflush_r+0xae>
 80098b6:	2300      	movs	r3, #0
 80098b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098bc:	682f      	ldr	r7, [r5, #0]
 80098be:	6a21      	ldr	r1, [r4, #32]
 80098c0:	602b      	str	r3, [r5, #0]
 80098c2:	d030      	beq.n	8009926 <__sflush_r+0x92>
 80098c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	0759      	lsls	r1, r3, #29
 80098ca:	d505      	bpl.n	80098d8 <__sflush_r+0x44>
 80098cc:	6863      	ldr	r3, [r4, #4]
 80098ce:	1ad2      	subs	r2, r2, r3
 80098d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098d2:	b10b      	cbz	r3, 80098d8 <__sflush_r+0x44>
 80098d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098d6:	1ad2      	subs	r2, r2, r3
 80098d8:	2300      	movs	r3, #0
 80098da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098dc:	6a21      	ldr	r1, [r4, #32]
 80098de:	4628      	mov	r0, r5
 80098e0:	47b0      	blx	r6
 80098e2:	1c43      	adds	r3, r0, #1
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	d106      	bne.n	80098f6 <__sflush_r+0x62>
 80098e8:	6829      	ldr	r1, [r5, #0]
 80098ea:	291d      	cmp	r1, #29
 80098ec:	d82b      	bhi.n	8009946 <__sflush_r+0xb2>
 80098ee:	4a2a      	ldr	r2, [pc, #168]	@ (8009998 <__sflush_r+0x104>)
 80098f0:	410a      	asrs	r2, r1
 80098f2:	07d6      	lsls	r6, r2, #31
 80098f4:	d427      	bmi.n	8009946 <__sflush_r+0xb2>
 80098f6:	2200      	movs	r2, #0
 80098f8:	6062      	str	r2, [r4, #4]
 80098fa:	04d9      	lsls	r1, r3, #19
 80098fc:	6922      	ldr	r2, [r4, #16]
 80098fe:	6022      	str	r2, [r4, #0]
 8009900:	d504      	bpl.n	800990c <__sflush_r+0x78>
 8009902:	1c42      	adds	r2, r0, #1
 8009904:	d101      	bne.n	800990a <__sflush_r+0x76>
 8009906:	682b      	ldr	r3, [r5, #0]
 8009908:	b903      	cbnz	r3, 800990c <__sflush_r+0x78>
 800990a:	6560      	str	r0, [r4, #84]	@ 0x54
 800990c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800990e:	602f      	str	r7, [r5, #0]
 8009910:	b1b9      	cbz	r1, 8009942 <__sflush_r+0xae>
 8009912:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009916:	4299      	cmp	r1, r3
 8009918:	d002      	beq.n	8009920 <__sflush_r+0x8c>
 800991a:	4628      	mov	r0, r5
 800991c:	f7ff fbd4 	bl	80090c8 <_free_r>
 8009920:	2300      	movs	r3, #0
 8009922:	6363      	str	r3, [r4, #52]	@ 0x34
 8009924:	e00d      	b.n	8009942 <__sflush_r+0xae>
 8009926:	2301      	movs	r3, #1
 8009928:	4628      	mov	r0, r5
 800992a:	47b0      	blx	r6
 800992c:	4602      	mov	r2, r0
 800992e:	1c50      	adds	r0, r2, #1
 8009930:	d1c9      	bne.n	80098c6 <__sflush_r+0x32>
 8009932:	682b      	ldr	r3, [r5, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d0c6      	beq.n	80098c6 <__sflush_r+0x32>
 8009938:	2b1d      	cmp	r3, #29
 800993a:	d001      	beq.n	8009940 <__sflush_r+0xac>
 800993c:	2b16      	cmp	r3, #22
 800993e:	d11e      	bne.n	800997e <__sflush_r+0xea>
 8009940:	602f      	str	r7, [r5, #0]
 8009942:	2000      	movs	r0, #0
 8009944:	e022      	b.n	800998c <__sflush_r+0xf8>
 8009946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800994a:	b21b      	sxth	r3, r3
 800994c:	e01b      	b.n	8009986 <__sflush_r+0xf2>
 800994e:	690f      	ldr	r7, [r1, #16]
 8009950:	2f00      	cmp	r7, #0
 8009952:	d0f6      	beq.n	8009942 <__sflush_r+0xae>
 8009954:	0793      	lsls	r3, r2, #30
 8009956:	680e      	ldr	r6, [r1, #0]
 8009958:	bf08      	it	eq
 800995a:	694b      	ldreq	r3, [r1, #20]
 800995c:	600f      	str	r7, [r1, #0]
 800995e:	bf18      	it	ne
 8009960:	2300      	movne	r3, #0
 8009962:	eba6 0807 	sub.w	r8, r6, r7
 8009966:	608b      	str	r3, [r1, #8]
 8009968:	f1b8 0f00 	cmp.w	r8, #0
 800996c:	dde9      	ble.n	8009942 <__sflush_r+0xae>
 800996e:	6a21      	ldr	r1, [r4, #32]
 8009970:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009972:	4643      	mov	r3, r8
 8009974:	463a      	mov	r2, r7
 8009976:	4628      	mov	r0, r5
 8009978:	47b0      	blx	r6
 800997a:	2800      	cmp	r0, #0
 800997c:	dc08      	bgt.n	8009990 <__sflush_r+0xfc>
 800997e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009986:	81a3      	strh	r3, [r4, #12]
 8009988:	f04f 30ff 	mov.w	r0, #4294967295
 800998c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009990:	4407      	add	r7, r0
 8009992:	eba8 0800 	sub.w	r8, r8, r0
 8009996:	e7e7      	b.n	8009968 <__sflush_r+0xd4>
 8009998:	dfbffffe 	.word	0xdfbffffe

0800999c <_fflush_r>:
 800999c:	b538      	push	{r3, r4, r5, lr}
 800999e:	690b      	ldr	r3, [r1, #16]
 80099a0:	4605      	mov	r5, r0
 80099a2:	460c      	mov	r4, r1
 80099a4:	b913      	cbnz	r3, 80099ac <_fflush_r+0x10>
 80099a6:	2500      	movs	r5, #0
 80099a8:	4628      	mov	r0, r5
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
 80099ac:	b118      	cbz	r0, 80099b6 <_fflush_r+0x1a>
 80099ae:	6a03      	ldr	r3, [r0, #32]
 80099b0:	b90b      	cbnz	r3, 80099b6 <_fflush_r+0x1a>
 80099b2:	f7ff f9e5 	bl	8008d80 <__sinit>
 80099b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0f3      	beq.n	80099a6 <_fflush_r+0xa>
 80099be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099c0:	07d0      	lsls	r0, r2, #31
 80099c2:	d404      	bmi.n	80099ce <_fflush_r+0x32>
 80099c4:	0599      	lsls	r1, r3, #22
 80099c6:	d402      	bmi.n	80099ce <_fflush_r+0x32>
 80099c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099ca:	f7ff fb5c 	bl	8009086 <__retarget_lock_acquire_recursive>
 80099ce:	4628      	mov	r0, r5
 80099d0:	4621      	mov	r1, r4
 80099d2:	f7ff ff5f 	bl	8009894 <__sflush_r>
 80099d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099d8:	07da      	lsls	r2, r3, #31
 80099da:	4605      	mov	r5, r0
 80099dc:	d4e4      	bmi.n	80099a8 <_fflush_r+0xc>
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	059b      	lsls	r3, r3, #22
 80099e2:	d4e1      	bmi.n	80099a8 <_fflush_r+0xc>
 80099e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099e6:	f7ff fb4f 	bl	8009088 <__retarget_lock_release_recursive>
 80099ea:	e7dd      	b.n	80099a8 <_fflush_r+0xc>

080099ec <fiprintf>:
 80099ec:	b40e      	push	{r1, r2, r3}
 80099ee:	b503      	push	{r0, r1, lr}
 80099f0:	4601      	mov	r1, r0
 80099f2:	ab03      	add	r3, sp, #12
 80099f4:	4805      	ldr	r0, [pc, #20]	@ (8009a0c <fiprintf+0x20>)
 80099f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80099fa:	6800      	ldr	r0, [r0, #0]
 80099fc:	9301      	str	r3, [sp, #4]
 80099fe:	f000 f89d 	bl	8009b3c <_vfiprintf_r>
 8009a02:	b002      	add	sp, #8
 8009a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a08:	b003      	add	sp, #12
 8009a0a:	4770      	bx	lr
 8009a0c:	200000f8 	.word	0x200000f8

08009a10 <memmove>:
 8009a10:	4288      	cmp	r0, r1
 8009a12:	b510      	push	{r4, lr}
 8009a14:	eb01 0402 	add.w	r4, r1, r2
 8009a18:	d902      	bls.n	8009a20 <memmove+0x10>
 8009a1a:	4284      	cmp	r4, r0
 8009a1c:	4623      	mov	r3, r4
 8009a1e:	d807      	bhi.n	8009a30 <memmove+0x20>
 8009a20:	1e43      	subs	r3, r0, #1
 8009a22:	42a1      	cmp	r1, r4
 8009a24:	d008      	beq.n	8009a38 <memmove+0x28>
 8009a26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a2e:	e7f8      	b.n	8009a22 <memmove+0x12>
 8009a30:	4402      	add	r2, r0
 8009a32:	4601      	mov	r1, r0
 8009a34:	428a      	cmp	r2, r1
 8009a36:	d100      	bne.n	8009a3a <memmove+0x2a>
 8009a38:	bd10      	pop	{r4, pc}
 8009a3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a42:	e7f7      	b.n	8009a34 <memmove+0x24>

08009a44 <_sbrk_r>:
 8009a44:	b538      	push	{r3, r4, r5, lr}
 8009a46:	4d06      	ldr	r5, [pc, #24]	@ (8009a60 <_sbrk_r+0x1c>)
 8009a48:	2300      	movs	r3, #0
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	4608      	mov	r0, r1
 8009a4e:	602b      	str	r3, [r5, #0]
 8009a50:	f7f7 faa0 	bl	8000f94 <_sbrk>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	d102      	bne.n	8009a5e <_sbrk_r+0x1a>
 8009a58:	682b      	ldr	r3, [r5, #0]
 8009a5a:	b103      	cbz	r3, 8009a5e <_sbrk_r+0x1a>
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	bd38      	pop	{r3, r4, r5, pc}
 8009a60:	200006ac 	.word	0x200006ac

08009a64 <memcpy>:
 8009a64:	440a      	add	r2, r1
 8009a66:	4291      	cmp	r1, r2
 8009a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a6c:	d100      	bne.n	8009a70 <memcpy+0xc>
 8009a6e:	4770      	bx	lr
 8009a70:	b510      	push	{r4, lr}
 8009a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a7a:	4291      	cmp	r1, r2
 8009a7c:	d1f9      	bne.n	8009a72 <memcpy+0xe>
 8009a7e:	bd10      	pop	{r4, pc}

08009a80 <abort>:
 8009a80:	b508      	push	{r3, lr}
 8009a82:	2006      	movs	r0, #6
 8009a84:	f000 fa2e 	bl	8009ee4 <raise>
 8009a88:	2001      	movs	r0, #1
 8009a8a:	f7f7 fa0b 	bl	8000ea4 <_exit>

08009a8e <_realloc_r>:
 8009a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a92:	4680      	mov	r8, r0
 8009a94:	4615      	mov	r5, r2
 8009a96:	460c      	mov	r4, r1
 8009a98:	b921      	cbnz	r1, 8009aa4 <_realloc_r+0x16>
 8009a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	f7ff bb86 	b.w	80091b0 <_malloc_r>
 8009aa4:	b92a      	cbnz	r2, 8009ab2 <_realloc_r+0x24>
 8009aa6:	f7ff fb0f 	bl	80090c8 <_free_r>
 8009aaa:	2400      	movs	r4, #0
 8009aac:	4620      	mov	r0, r4
 8009aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab2:	f000 fa33 	bl	8009f1c <_malloc_usable_size_r>
 8009ab6:	4285      	cmp	r5, r0
 8009ab8:	4606      	mov	r6, r0
 8009aba:	d802      	bhi.n	8009ac2 <_realloc_r+0x34>
 8009abc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009ac0:	d8f4      	bhi.n	8009aac <_realloc_r+0x1e>
 8009ac2:	4629      	mov	r1, r5
 8009ac4:	4640      	mov	r0, r8
 8009ac6:	f7ff fb73 	bl	80091b0 <_malloc_r>
 8009aca:	4607      	mov	r7, r0
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d0ec      	beq.n	8009aaa <_realloc_r+0x1c>
 8009ad0:	42b5      	cmp	r5, r6
 8009ad2:	462a      	mov	r2, r5
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	bf28      	it	cs
 8009ad8:	4632      	movcs	r2, r6
 8009ada:	f7ff ffc3 	bl	8009a64 <memcpy>
 8009ade:	4621      	mov	r1, r4
 8009ae0:	4640      	mov	r0, r8
 8009ae2:	f7ff faf1 	bl	80090c8 <_free_r>
 8009ae6:	463c      	mov	r4, r7
 8009ae8:	e7e0      	b.n	8009aac <_realloc_r+0x1e>

08009aea <__sfputc_r>:
 8009aea:	6893      	ldr	r3, [r2, #8]
 8009aec:	3b01      	subs	r3, #1
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	b410      	push	{r4}
 8009af2:	6093      	str	r3, [r2, #8]
 8009af4:	da08      	bge.n	8009b08 <__sfputc_r+0x1e>
 8009af6:	6994      	ldr	r4, [r2, #24]
 8009af8:	42a3      	cmp	r3, r4
 8009afa:	db01      	blt.n	8009b00 <__sfputc_r+0x16>
 8009afc:	290a      	cmp	r1, #10
 8009afe:	d103      	bne.n	8009b08 <__sfputc_r+0x1e>
 8009b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b04:	f000 b932 	b.w	8009d6c <__swbuf_r>
 8009b08:	6813      	ldr	r3, [r2, #0]
 8009b0a:	1c58      	adds	r0, r3, #1
 8009b0c:	6010      	str	r0, [r2, #0]
 8009b0e:	7019      	strb	r1, [r3, #0]
 8009b10:	4608      	mov	r0, r1
 8009b12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <__sfputs_r>:
 8009b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	460f      	mov	r7, r1
 8009b1e:	4614      	mov	r4, r2
 8009b20:	18d5      	adds	r5, r2, r3
 8009b22:	42ac      	cmp	r4, r5
 8009b24:	d101      	bne.n	8009b2a <__sfputs_r+0x12>
 8009b26:	2000      	movs	r0, #0
 8009b28:	e007      	b.n	8009b3a <__sfputs_r+0x22>
 8009b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b2e:	463a      	mov	r2, r7
 8009b30:	4630      	mov	r0, r6
 8009b32:	f7ff ffda 	bl	8009aea <__sfputc_r>
 8009b36:	1c43      	adds	r3, r0, #1
 8009b38:	d1f3      	bne.n	8009b22 <__sfputs_r+0xa>
 8009b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b3c <_vfiprintf_r>:
 8009b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b40:	460d      	mov	r5, r1
 8009b42:	b09d      	sub	sp, #116	@ 0x74
 8009b44:	4614      	mov	r4, r2
 8009b46:	4698      	mov	r8, r3
 8009b48:	4606      	mov	r6, r0
 8009b4a:	b118      	cbz	r0, 8009b54 <_vfiprintf_r+0x18>
 8009b4c:	6a03      	ldr	r3, [r0, #32]
 8009b4e:	b90b      	cbnz	r3, 8009b54 <_vfiprintf_r+0x18>
 8009b50:	f7ff f916 	bl	8008d80 <__sinit>
 8009b54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b56:	07d9      	lsls	r1, r3, #31
 8009b58:	d405      	bmi.n	8009b66 <_vfiprintf_r+0x2a>
 8009b5a:	89ab      	ldrh	r3, [r5, #12]
 8009b5c:	059a      	lsls	r2, r3, #22
 8009b5e:	d402      	bmi.n	8009b66 <_vfiprintf_r+0x2a>
 8009b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b62:	f7ff fa90 	bl	8009086 <__retarget_lock_acquire_recursive>
 8009b66:	89ab      	ldrh	r3, [r5, #12]
 8009b68:	071b      	lsls	r3, r3, #28
 8009b6a:	d501      	bpl.n	8009b70 <_vfiprintf_r+0x34>
 8009b6c:	692b      	ldr	r3, [r5, #16]
 8009b6e:	b99b      	cbnz	r3, 8009b98 <_vfiprintf_r+0x5c>
 8009b70:	4629      	mov	r1, r5
 8009b72:	4630      	mov	r0, r6
 8009b74:	f000 f938 	bl	8009de8 <__swsetup_r>
 8009b78:	b170      	cbz	r0, 8009b98 <_vfiprintf_r+0x5c>
 8009b7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b7c:	07dc      	lsls	r4, r3, #31
 8009b7e:	d504      	bpl.n	8009b8a <_vfiprintf_r+0x4e>
 8009b80:	f04f 30ff 	mov.w	r0, #4294967295
 8009b84:	b01d      	add	sp, #116	@ 0x74
 8009b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b8a:	89ab      	ldrh	r3, [r5, #12]
 8009b8c:	0598      	lsls	r0, r3, #22
 8009b8e:	d4f7      	bmi.n	8009b80 <_vfiprintf_r+0x44>
 8009b90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b92:	f7ff fa79 	bl	8009088 <__retarget_lock_release_recursive>
 8009b96:	e7f3      	b.n	8009b80 <_vfiprintf_r+0x44>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b9c:	2320      	movs	r3, #32
 8009b9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ba2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ba6:	2330      	movs	r3, #48	@ 0x30
 8009ba8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009d58 <_vfiprintf_r+0x21c>
 8009bac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bb0:	f04f 0901 	mov.w	r9, #1
 8009bb4:	4623      	mov	r3, r4
 8009bb6:	469a      	mov	sl, r3
 8009bb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bbc:	b10a      	cbz	r2, 8009bc2 <_vfiprintf_r+0x86>
 8009bbe:	2a25      	cmp	r2, #37	@ 0x25
 8009bc0:	d1f9      	bne.n	8009bb6 <_vfiprintf_r+0x7a>
 8009bc2:	ebba 0b04 	subs.w	fp, sl, r4
 8009bc6:	d00b      	beq.n	8009be0 <_vfiprintf_r+0xa4>
 8009bc8:	465b      	mov	r3, fp
 8009bca:	4622      	mov	r2, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f7ff ffa2 	bl	8009b18 <__sfputs_r>
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	f000 80a7 	beq.w	8009d28 <_vfiprintf_r+0x1ec>
 8009bda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bdc:	445a      	add	r2, fp
 8009bde:	9209      	str	r2, [sp, #36]	@ 0x24
 8009be0:	f89a 3000 	ldrb.w	r3, [sl]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 809f 	beq.w	8009d28 <_vfiprintf_r+0x1ec>
 8009bea:	2300      	movs	r3, #0
 8009bec:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bf4:	f10a 0a01 	add.w	sl, sl, #1
 8009bf8:	9304      	str	r3, [sp, #16]
 8009bfa:	9307      	str	r3, [sp, #28]
 8009bfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c00:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c02:	4654      	mov	r4, sl
 8009c04:	2205      	movs	r2, #5
 8009c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c0a:	4853      	ldr	r0, [pc, #332]	@ (8009d58 <_vfiprintf_r+0x21c>)
 8009c0c:	f7f6 fb20 	bl	8000250 <memchr>
 8009c10:	9a04      	ldr	r2, [sp, #16]
 8009c12:	b9d8      	cbnz	r0, 8009c4c <_vfiprintf_r+0x110>
 8009c14:	06d1      	lsls	r1, r2, #27
 8009c16:	bf44      	itt	mi
 8009c18:	2320      	movmi	r3, #32
 8009c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c1e:	0713      	lsls	r3, r2, #28
 8009c20:	bf44      	itt	mi
 8009c22:	232b      	movmi	r3, #43	@ 0x2b
 8009c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c28:	f89a 3000 	ldrb.w	r3, [sl]
 8009c2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c2e:	d015      	beq.n	8009c5c <_vfiprintf_r+0x120>
 8009c30:	9a07      	ldr	r2, [sp, #28]
 8009c32:	4654      	mov	r4, sl
 8009c34:	2000      	movs	r0, #0
 8009c36:	f04f 0c0a 	mov.w	ip, #10
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c40:	3b30      	subs	r3, #48	@ 0x30
 8009c42:	2b09      	cmp	r3, #9
 8009c44:	d94b      	bls.n	8009cde <_vfiprintf_r+0x1a2>
 8009c46:	b1b0      	cbz	r0, 8009c76 <_vfiprintf_r+0x13a>
 8009c48:	9207      	str	r2, [sp, #28]
 8009c4a:	e014      	b.n	8009c76 <_vfiprintf_r+0x13a>
 8009c4c:	eba0 0308 	sub.w	r3, r0, r8
 8009c50:	fa09 f303 	lsl.w	r3, r9, r3
 8009c54:	4313      	orrs	r3, r2
 8009c56:	9304      	str	r3, [sp, #16]
 8009c58:	46a2      	mov	sl, r4
 8009c5a:	e7d2      	b.n	8009c02 <_vfiprintf_r+0xc6>
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	1d19      	adds	r1, r3, #4
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	9103      	str	r1, [sp, #12]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bfbb      	ittet	lt
 8009c68:	425b      	neglt	r3, r3
 8009c6a:	f042 0202 	orrlt.w	r2, r2, #2
 8009c6e:	9307      	strge	r3, [sp, #28]
 8009c70:	9307      	strlt	r3, [sp, #28]
 8009c72:	bfb8      	it	lt
 8009c74:	9204      	strlt	r2, [sp, #16]
 8009c76:	7823      	ldrb	r3, [r4, #0]
 8009c78:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c7a:	d10a      	bne.n	8009c92 <_vfiprintf_r+0x156>
 8009c7c:	7863      	ldrb	r3, [r4, #1]
 8009c7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c80:	d132      	bne.n	8009ce8 <_vfiprintf_r+0x1ac>
 8009c82:	9b03      	ldr	r3, [sp, #12]
 8009c84:	1d1a      	adds	r2, r3, #4
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	9203      	str	r2, [sp, #12]
 8009c8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c8e:	3402      	adds	r4, #2
 8009c90:	9305      	str	r3, [sp, #20]
 8009c92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009d68 <_vfiprintf_r+0x22c>
 8009c96:	7821      	ldrb	r1, [r4, #0]
 8009c98:	2203      	movs	r2, #3
 8009c9a:	4650      	mov	r0, sl
 8009c9c:	f7f6 fad8 	bl	8000250 <memchr>
 8009ca0:	b138      	cbz	r0, 8009cb2 <_vfiprintf_r+0x176>
 8009ca2:	9b04      	ldr	r3, [sp, #16]
 8009ca4:	eba0 000a 	sub.w	r0, r0, sl
 8009ca8:	2240      	movs	r2, #64	@ 0x40
 8009caa:	4082      	lsls	r2, r0
 8009cac:	4313      	orrs	r3, r2
 8009cae:	3401      	adds	r4, #1
 8009cb0:	9304      	str	r3, [sp, #16]
 8009cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb6:	4829      	ldr	r0, [pc, #164]	@ (8009d5c <_vfiprintf_r+0x220>)
 8009cb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cbc:	2206      	movs	r2, #6
 8009cbe:	f7f6 fac7 	bl	8000250 <memchr>
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d03f      	beq.n	8009d46 <_vfiprintf_r+0x20a>
 8009cc6:	4b26      	ldr	r3, [pc, #152]	@ (8009d60 <_vfiprintf_r+0x224>)
 8009cc8:	bb1b      	cbnz	r3, 8009d12 <_vfiprintf_r+0x1d6>
 8009cca:	9b03      	ldr	r3, [sp, #12]
 8009ccc:	3307      	adds	r3, #7
 8009cce:	f023 0307 	bic.w	r3, r3, #7
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	9303      	str	r3, [sp, #12]
 8009cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd8:	443b      	add	r3, r7
 8009cda:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cdc:	e76a      	b.n	8009bb4 <_vfiprintf_r+0x78>
 8009cde:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ce2:	460c      	mov	r4, r1
 8009ce4:	2001      	movs	r0, #1
 8009ce6:	e7a8      	b.n	8009c3a <_vfiprintf_r+0xfe>
 8009ce8:	2300      	movs	r3, #0
 8009cea:	3401      	adds	r4, #1
 8009cec:	9305      	str	r3, [sp, #20]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	f04f 0c0a 	mov.w	ip, #10
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cfa:	3a30      	subs	r2, #48	@ 0x30
 8009cfc:	2a09      	cmp	r2, #9
 8009cfe:	d903      	bls.n	8009d08 <_vfiprintf_r+0x1cc>
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d0c6      	beq.n	8009c92 <_vfiprintf_r+0x156>
 8009d04:	9105      	str	r1, [sp, #20]
 8009d06:	e7c4      	b.n	8009c92 <_vfiprintf_r+0x156>
 8009d08:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e7f0      	b.n	8009cf4 <_vfiprintf_r+0x1b8>
 8009d12:	ab03      	add	r3, sp, #12
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	462a      	mov	r2, r5
 8009d18:	4b12      	ldr	r3, [pc, #72]	@ (8009d64 <_vfiprintf_r+0x228>)
 8009d1a:	a904      	add	r1, sp, #16
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f3af 8000 	nop.w
 8009d22:	4607      	mov	r7, r0
 8009d24:	1c78      	adds	r0, r7, #1
 8009d26:	d1d6      	bne.n	8009cd6 <_vfiprintf_r+0x19a>
 8009d28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d2a:	07d9      	lsls	r1, r3, #31
 8009d2c:	d405      	bmi.n	8009d3a <_vfiprintf_r+0x1fe>
 8009d2e:	89ab      	ldrh	r3, [r5, #12]
 8009d30:	059a      	lsls	r2, r3, #22
 8009d32:	d402      	bmi.n	8009d3a <_vfiprintf_r+0x1fe>
 8009d34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d36:	f7ff f9a7 	bl	8009088 <__retarget_lock_release_recursive>
 8009d3a:	89ab      	ldrh	r3, [r5, #12]
 8009d3c:	065b      	lsls	r3, r3, #25
 8009d3e:	f53f af1f 	bmi.w	8009b80 <_vfiprintf_r+0x44>
 8009d42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d44:	e71e      	b.n	8009b84 <_vfiprintf_r+0x48>
 8009d46:	ab03      	add	r3, sp, #12
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	462a      	mov	r2, r5
 8009d4c:	4b05      	ldr	r3, [pc, #20]	@ (8009d64 <_vfiprintf_r+0x228>)
 8009d4e:	a904      	add	r1, sp, #16
 8009d50:	4630      	mov	r0, r6
 8009d52:	f7ff fc7f 	bl	8009654 <_printf_i>
 8009d56:	e7e4      	b.n	8009d22 <_vfiprintf_r+0x1e6>
 8009d58:	0800a2e2 	.word	0x0800a2e2
 8009d5c:	0800a2ec 	.word	0x0800a2ec
 8009d60:	00000000 	.word	0x00000000
 8009d64:	08009b19 	.word	0x08009b19
 8009d68:	0800a2e8 	.word	0x0800a2e8

08009d6c <__swbuf_r>:
 8009d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6e:	460e      	mov	r6, r1
 8009d70:	4614      	mov	r4, r2
 8009d72:	4605      	mov	r5, r0
 8009d74:	b118      	cbz	r0, 8009d7e <__swbuf_r+0x12>
 8009d76:	6a03      	ldr	r3, [r0, #32]
 8009d78:	b90b      	cbnz	r3, 8009d7e <__swbuf_r+0x12>
 8009d7a:	f7ff f801 	bl	8008d80 <__sinit>
 8009d7e:	69a3      	ldr	r3, [r4, #24]
 8009d80:	60a3      	str	r3, [r4, #8]
 8009d82:	89a3      	ldrh	r3, [r4, #12]
 8009d84:	071a      	lsls	r2, r3, #28
 8009d86:	d501      	bpl.n	8009d8c <__swbuf_r+0x20>
 8009d88:	6923      	ldr	r3, [r4, #16]
 8009d8a:	b943      	cbnz	r3, 8009d9e <__swbuf_r+0x32>
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	4628      	mov	r0, r5
 8009d90:	f000 f82a 	bl	8009de8 <__swsetup_r>
 8009d94:	b118      	cbz	r0, 8009d9e <__swbuf_r+0x32>
 8009d96:	f04f 37ff 	mov.w	r7, #4294967295
 8009d9a:	4638      	mov	r0, r7
 8009d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	6922      	ldr	r2, [r4, #16]
 8009da2:	1a98      	subs	r0, r3, r2
 8009da4:	6963      	ldr	r3, [r4, #20]
 8009da6:	b2f6      	uxtb	r6, r6
 8009da8:	4283      	cmp	r3, r0
 8009daa:	4637      	mov	r7, r6
 8009dac:	dc05      	bgt.n	8009dba <__swbuf_r+0x4e>
 8009dae:	4621      	mov	r1, r4
 8009db0:	4628      	mov	r0, r5
 8009db2:	f7ff fdf3 	bl	800999c <_fflush_r>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d1ed      	bne.n	8009d96 <__swbuf_r+0x2a>
 8009dba:	68a3      	ldr	r3, [r4, #8]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	60a3      	str	r3, [r4, #8]
 8009dc0:	6823      	ldr	r3, [r4, #0]
 8009dc2:	1c5a      	adds	r2, r3, #1
 8009dc4:	6022      	str	r2, [r4, #0]
 8009dc6:	701e      	strb	r6, [r3, #0]
 8009dc8:	6962      	ldr	r2, [r4, #20]
 8009dca:	1c43      	adds	r3, r0, #1
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d004      	beq.n	8009dda <__swbuf_r+0x6e>
 8009dd0:	89a3      	ldrh	r3, [r4, #12]
 8009dd2:	07db      	lsls	r3, r3, #31
 8009dd4:	d5e1      	bpl.n	8009d9a <__swbuf_r+0x2e>
 8009dd6:	2e0a      	cmp	r6, #10
 8009dd8:	d1df      	bne.n	8009d9a <__swbuf_r+0x2e>
 8009dda:	4621      	mov	r1, r4
 8009ddc:	4628      	mov	r0, r5
 8009dde:	f7ff fddd 	bl	800999c <_fflush_r>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	d0d9      	beq.n	8009d9a <__swbuf_r+0x2e>
 8009de6:	e7d6      	b.n	8009d96 <__swbuf_r+0x2a>

08009de8 <__swsetup_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	4b29      	ldr	r3, [pc, #164]	@ (8009e90 <__swsetup_r+0xa8>)
 8009dec:	4605      	mov	r5, r0
 8009dee:	6818      	ldr	r0, [r3, #0]
 8009df0:	460c      	mov	r4, r1
 8009df2:	b118      	cbz	r0, 8009dfc <__swsetup_r+0x14>
 8009df4:	6a03      	ldr	r3, [r0, #32]
 8009df6:	b90b      	cbnz	r3, 8009dfc <__swsetup_r+0x14>
 8009df8:	f7fe ffc2 	bl	8008d80 <__sinit>
 8009dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e00:	0719      	lsls	r1, r3, #28
 8009e02:	d422      	bmi.n	8009e4a <__swsetup_r+0x62>
 8009e04:	06da      	lsls	r2, r3, #27
 8009e06:	d407      	bmi.n	8009e18 <__swsetup_r+0x30>
 8009e08:	2209      	movs	r2, #9
 8009e0a:	602a      	str	r2, [r5, #0]
 8009e0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e10:	81a3      	strh	r3, [r4, #12]
 8009e12:	f04f 30ff 	mov.w	r0, #4294967295
 8009e16:	e033      	b.n	8009e80 <__swsetup_r+0x98>
 8009e18:	0758      	lsls	r0, r3, #29
 8009e1a:	d512      	bpl.n	8009e42 <__swsetup_r+0x5a>
 8009e1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e1e:	b141      	cbz	r1, 8009e32 <__swsetup_r+0x4a>
 8009e20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e24:	4299      	cmp	r1, r3
 8009e26:	d002      	beq.n	8009e2e <__swsetup_r+0x46>
 8009e28:	4628      	mov	r0, r5
 8009e2a:	f7ff f94d 	bl	80090c8 <_free_r>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e38:	81a3      	strh	r3, [r4, #12]
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	6063      	str	r3, [r4, #4]
 8009e3e:	6923      	ldr	r3, [r4, #16]
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	89a3      	ldrh	r3, [r4, #12]
 8009e44:	f043 0308 	orr.w	r3, r3, #8
 8009e48:	81a3      	strh	r3, [r4, #12]
 8009e4a:	6923      	ldr	r3, [r4, #16]
 8009e4c:	b94b      	cbnz	r3, 8009e62 <__swsetup_r+0x7a>
 8009e4e:	89a3      	ldrh	r3, [r4, #12]
 8009e50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e58:	d003      	beq.n	8009e62 <__swsetup_r+0x7a>
 8009e5a:	4621      	mov	r1, r4
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	f000 f88b 	bl	8009f78 <__smakebuf_r>
 8009e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e66:	f013 0201 	ands.w	r2, r3, #1
 8009e6a:	d00a      	beq.n	8009e82 <__swsetup_r+0x9a>
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	60a2      	str	r2, [r4, #8]
 8009e70:	6962      	ldr	r2, [r4, #20]
 8009e72:	4252      	negs	r2, r2
 8009e74:	61a2      	str	r2, [r4, #24]
 8009e76:	6922      	ldr	r2, [r4, #16]
 8009e78:	b942      	cbnz	r2, 8009e8c <__swsetup_r+0xa4>
 8009e7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e7e:	d1c5      	bne.n	8009e0c <__swsetup_r+0x24>
 8009e80:	bd38      	pop	{r3, r4, r5, pc}
 8009e82:	0799      	lsls	r1, r3, #30
 8009e84:	bf58      	it	pl
 8009e86:	6962      	ldrpl	r2, [r4, #20]
 8009e88:	60a2      	str	r2, [r4, #8]
 8009e8a:	e7f4      	b.n	8009e76 <__swsetup_r+0x8e>
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	e7f7      	b.n	8009e80 <__swsetup_r+0x98>
 8009e90:	200000f8 	.word	0x200000f8

08009e94 <_raise_r>:
 8009e94:	291f      	cmp	r1, #31
 8009e96:	b538      	push	{r3, r4, r5, lr}
 8009e98:	4605      	mov	r5, r0
 8009e9a:	460c      	mov	r4, r1
 8009e9c:	d904      	bls.n	8009ea8 <_raise_r+0x14>
 8009e9e:	2316      	movs	r3, #22
 8009ea0:	6003      	str	r3, [r0, #0]
 8009ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea6:	bd38      	pop	{r3, r4, r5, pc}
 8009ea8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009eaa:	b112      	cbz	r2, 8009eb2 <_raise_r+0x1e>
 8009eac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009eb0:	b94b      	cbnz	r3, 8009ec6 <_raise_r+0x32>
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	f000 f830 	bl	8009f18 <_getpid_r>
 8009eb8:	4622      	mov	r2, r4
 8009eba:	4601      	mov	r1, r0
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ec2:	f000 b817 	b.w	8009ef4 <_kill_r>
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d00a      	beq.n	8009ee0 <_raise_r+0x4c>
 8009eca:	1c59      	adds	r1, r3, #1
 8009ecc:	d103      	bne.n	8009ed6 <_raise_r+0x42>
 8009ece:	2316      	movs	r3, #22
 8009ed0:	6003      	str	r3, [r0, #0]
 8009ed2:	2001      	movs	r0, #1
 8009ed4:	e7e7      	b.n	8009ea6 <_raise_r+0x12>
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009edc:	4620      	mov	r0, r4
 8009ede:	4798      	blx	r3
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	e7e0      	b.n	8009ea6 <_raise_r+0x12>

08009ee4 <raise>:
 8009ee4:	4b02      	ldr	r3, [pc, #8]	@ (8009ef0 <raise+0xc>)
 8009ee6:	4601      	mov	r1, r0
 8009ee8:	6818      	ldr	r0, [r3, #0]
 8009eea:	f7ff bfd3 	b.w	8009e94 <_raise_r>
 8009eee:	bf00      	nop
 8009ef0:	200000f8 	.word	0x200000f8

08009ef4 <_kill_r>:
 8009ef4:	b538      	push	{r3, r4, r5, lr}
 8009ef6:	4d07      	ldr	r5, [pc, #28]	@ (8009f14 <_kill_r+0x20>)
 8009ef8:	2300      	movs	r3, #0
 8009efa:	4604      	mov	r4, r0
 8009efc:	4608      	mov	r0, r1
 8009efe:	4611      	mov	r1, r2
 8009f00:	602b      	str	r3, [r5, #0]
 8009f02:	f7f6 ffbf 	bl	8000e84 <_kill>
 8009f06:	1c43      	adds	r3, r0, #1
 8009f08:	d102      	bne.n	8009f10 <_kill_r+0x1c>
 8009f0a:	682b      	ldr	r3, [r5, #0]
 8009f0c:	b103      	cbz	r3, 8009f10 <_kill_r+0x1c>
 8009f0e:	6023      	str	r3, [r4, #0]
 8009f10:	bd38      	pop	{r3, r4, r5, pc}
 8009f12:	bf00      	nop
 8009f14:	200006ac 	.word	0x200006ac

08009f18 <_getpid_r>:
 8009f18:	f7f6 bfac 	b.w	8000e74 <_getpid>

08009f1c <_malloc_usable_size_r>:
 8009f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f20:	1f18      	subs	r0, r3, #4
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	bfbc      	itt	lt
 8009f26:	580b      	ldrlt	r3, [r1, r0]
 8009f28:	18c0      	addlt	r0, r0, r3
 8009f2a:	4770      	bx	lr

08009f2c <__swhatbuf_r>:
 8009f2c:	b570      	push	{r4, r5, r6, lr}
 8009f2e:	460c      	mov	r4, r1
 8009f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f34:	2900      	cmp	r1, #0
 8009f36:	b096      	sub	sp, #88	@ 0x58
 8009f38:	4615      	mov	r5, r2
 8009f3a:	461e      	mov	r6, r3
 8009f3c:	da0d      	bge.n	8009f5a <__swhatbuf_r+0x2e>
 8009f3e:	89a3      	ldrh	r3, [r4, #12]
 8009f40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f44:	f04f 0100 	mov.w	r1, #0
 8009f48:	bf14      	ite	ne
 8009f4a:	2340      	movne	r3, #64	@ 0x40
 8009f4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f50:	2000      	movs	r0, #0
 8009f52:	6031      	str	r1, [r6, #0]
 8009f54:	602b      	str	r3, [r5, #0]
 8009f56:	b016      	add	sp, #88	@ 0x58
 8009f58:	bd70      	pop	{r4, r5, r6, pc}
 8009f5a:	466a      	mov	r2, sp
 8009f5c:	f000 f848 	bl	8009ff0 <_fstat_r>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	dbec      	blt.n	8009f3e <__swhatbuf_r+0x12>
 8009f64:	9901      	ldr	r1, [sp, #4]
 8009f66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f6e:	4259      	negs	r1, r3
 8009f70:	4159      	adcs	r1, r3
 8009f72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f76:	e7eb      	b.n	8009f50 <__swhatbuf_r+0x24>

08009f78 <__smakebuf_r>:
 8009f78:	898b      	ldrh	r3, [r1, #12]
 8009f7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f7c:	079d      	lsls	r5, r3, #30
 8009f7e:	4606      	mov	r6, r0
 8009f80:	460c      	mov	r4, r1
 8009f82:	d507      	bpl.n	8009f94 <__smakebuf_r+0x1c>
 8009f84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	6123      	str	r3, [r4, #16]
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	6163      	str	r3, [r4, #20]
 8009f90:	b003      	add	sp, #12
 8009f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f94:	ab01      	add	r3, sp, #4
 8009f96:	466a      	mov	r2, sp
 8009f98:	f7ff ffc8 	bl	8009f2c <__swhatbuf_r>
 8009f9c:	9f00      	ldr	r7, [sp, #0]
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	4639      	mov	r1, r7
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f7ff f904 	bl	80091b0 <_malloc_r>
 8009fa8:	b948      	cbnz	r0, 8009fbe <__smakebuf_r+0x46>
 8009faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fae:	059a      	lsls	r2, r3, #22
 8009fb0:	d4ee      	bmi.n	8009f90 <__smakebuf_r+0x18>
 8009fb2:	f023 0303 	bic.w	r3, r3, #3
 8009fb6:	f043 0302 	orr.w	r3, r3, #2
 8009fba:	81a3      	strh	r3, [r4, #12]
 8009fbc:	e7e2      	b.n	8009f84 <__smakebuf_r+0xc>
 8009fbe:	89a3      	ldrh	r3, [r4, #12]
 8009fc0:	6020      	str	r0, [r4, #0]
 8009fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fc6:	81a3      	strh	r3, [r4, #12]
 8009fc8:	9b01      	ldr	r3, [sp, #4]
 8009fca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009fce:	b15b      	cbz	r3, 8009fe8 <__smakebuf_r+0x70>
 8009fd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	f000 f81d 	bl	800a014 <_isatty_r>
 8009fda:	b128      	cbz	r0, 8009fe8 <__smakebuf_r+0x70>
 8009fdc:	89a3      	ldrh	r3, [r4, #12]
 8009fde:	f023 0303 	bic.w	r3, r3, #3
 8009fe2:	f043 0301 	orr.w	r3, r3, #1
 8009fe6:	81a3      	strh	r3, [r4, #12]
 8009fe8:	89a3      	ldrh	r3, [r4, #12]
 8009fea:	431d      	orrs	r5, r3
 8009fec:	81a5      	strh	r5, [r4, #12]
 8009fee:	e7cf      	b.n	8009f90 <__smakebuf_r+0x18>

08009ff0 <_fstat_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4d07      	ldr	r5, [pc, #28]	@ (800a010 <_fstat_r+0x20>)
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	4608      	mov	r0, r1
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	602b      	str	r3, [r5, #0]
 8009ffe:	f7f6 ffa1 	bl	8000f44 <_fstat>
 800a002:	1c43      	adds	r3, r0, #1
 800a004:	d102      	bne.n	800a00c <_fstat_r+0x1c>
 800a006:	682b      	ldr	r3, [r5, #0]
 800a008:	b103      	cbz	r3, 800a00c <_fstat_r+0x1c>
 800a00a:	6023      	str	r3, [r4, #0]
 800a00c:	bd38      	pop	{r3, r4, r5, pc}
 800a00e:	bf00      	nop
 800a010:	200006ac 	.word	0x200006ac

0800a014 <_isatty_r>:
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	4d06      	ldr	r5, [pc, #24]	@ (800a030 <_isatty_r+0x1c>)
 800a018:	2300      	movs	r3, #0
 800a01a:	4604      	mov	r4, r0
 800a01c:	4608      	mov	r0, r1
 800a01e:	602b      	str	r3, [r5, #0]
 800a020:	f7f6 ffa0 	bl	8000f64 <_isatty>
 800a024:	1c43      	adds	r3, r0, #1
 800a026:	d102      	bne.n	800a02e <_isatty_r+0x1a>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	b103      	cbz	r3, 800a02e <_isatty_r+0x1a>
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	200006ac 	.word	0x200006ac

0800a034 <_init>:
 800a034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a036:	bf00      	nop
 800a038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a03a:	bc08      	pop	{r3}
 800a03c:	469e      	mov	lr, r3
 800a03e:	4770      	bx	lr

0800a040 <_fini>:
 800a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a042:	bf00      	nop
 800a044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a046:	bc08      	pop	{r3}
 800a048:	469e      	mov	lr, r3
 800a04a:	4770      	bx	lr
