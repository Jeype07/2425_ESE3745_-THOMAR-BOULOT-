
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009370  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08009550  08009550  0000a550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009814  08009814  0000b144  2**0
                  CONTENTS
  4 .ARM          00000008  08009814  08009814  0000a814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800981c  0800981c  0000b144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800981c  0800981c  0000a81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009820  08009820  0000a820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  08009824  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000144  08009968  0000b144  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  08009968  0000b650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b144  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5f0  00000000  00000000  0000b174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000368c  00000000  00000000  00025764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  00028df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001102  00000000  00000000  0002a3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a23e  00000000  00000000  0002b4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b424  00000000  00000000  00055730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114699  00000000  00000000  00070b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001851ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006910  00000000  00000000  00185230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0018bb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000144 	.word	0x20000144
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009538 	.word	0x08009538

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000148 	.word	0x20000148
 800021c:	08009538 	.word	0x08009538

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f007 fef0 	bl	80083de <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000600:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000604:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000606:	4b30      	ldr	r3, [pc, #192]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000608:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b2c      	ldr	r3, [pc, #176]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061a:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000620:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000628:	2204      	movs	r2, #4
 800062a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062c:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000632:	4b25      	ldr	r3, [pc, #148]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000634:	2200      	movs	r2, #0
 8000636:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800063a:	2201      	movs	r2, #1
 800063c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065a:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4817      	ldr	r0, [pc, #92]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800066a:	f001 fc01 	bl	8001e70 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000674:	f000 fa90 	bl	8000b98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000680:	4619      	mov	r1, r3
 8000682:	4811      	ldr	r0, [pc, #68]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000684:	f002 fa1c 	bl	8002ac0 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800068e:	f000 fa83 	bl	8000b98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_ADC1_Init+0xec>)
 8000694:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	237f      	movs	r3, #127	@ 0x7f
 80006a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a2:	2304      	movs	r3, #4
 80006a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 80006b0:	f001 fda0 	bl	80021f4 <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ba:	f000 fa6d 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	@ 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000160 	.word	0x20000160
 80006cc:	21800100 	.word	0x21800100

080006d0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2220      	movs	r2, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f007 fe7e 	bl	80083de <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000794 <MX_ADC2_Init+0xc4>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000702:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000708:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800070a:	2204      	movs	r2, #4
 800070c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000716:	2200      	movs	r2, #0
 8000718:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800071c:	2201      	movs	r2, #1
 800071e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000728:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000734:	4b16      	ldr	r3, [pc, #88]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800074a:	4811      	ldr	r0, [pc, #68]	@ (8000790 <MX_ADC2_Init+0xc0>)
 800074c:	f001 fb90 	bl	8001e70 <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000756:	f000 fa1f 	bl	8000b98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_ADC2_Init+0xc8>)
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800075e:	2306      	movs	r3, #6
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000766:	237f      	movs	r3, #127	@ 0x7f
 8000768:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076a:	2304      	movs	r3, #4
 800076c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	@ (8000790 <MX_ADC2_Init+0xc0>)
 8000778:	f001 fd3c 	bl	80021f4 <HAL_ADC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000782:	f000 fa09 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200001cc 	.word	0x200001cc
 8000794:	50000100 	.word	0x50000100
 8000798:	19200040 	.word	0x19200040

0800079c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0a4      	sub	sp, #144	@ 0x90
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b8:	2254      	movs	r2, #84	@ 0x54
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 fe0e 	bl	80083de <memset>
  if(adcHandle->Instance==ADC1)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80007ca:	d174      	bne.n	80008b6 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80007d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fbef 	bl	8003fc0 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007e8:	f000 f9d6 	bl	8000b98 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007ec:	4b63      	ldr	r3, [pc, #396]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a62      	ldr	r2, [pc, #392]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007f6:	4b61      	ldr	r3, [pc, #388]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d10b      	bne.n	8000816 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007fe:	4b60      	ldr	r3, [pc, #384]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a5f      	ldr	r2, [pc, #380]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000804:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b5d      	ldr	r3, [pc, #372]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b5a      	ldr	r3, [pc, #360]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a59      	ldr	r2, [pc, #356]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b57      	ldr	r3, [pc, #348]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b54      	ldr	r3, [pc, #336]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a53      	ldr	r2, [pc, #332]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b51      	ldr	r3, [pc, #324]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
 8000844:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b4e      	ldr	r3, [pc, #312]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a4d      	ldr	r2, [pc, #308]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b4b      	ldr	r3, [pc, #300]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800085e:	2304      	movs	r3, #4
 8000860:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000872:	4619      	mov	r1, r3
 8000874:	4843      	ldr	r0, [pc, #268]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000876:	f002 fbcb 	bl	8003010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800087a:	2302      	movs	r3, #2
 800087c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000894:	f002 fbbc 	bl	8003010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000898:	2303      	movs	r3, #3
 800089a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089c:	2303      	movs	r3, #3
 800089e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008ac:	4619      	mov	r1, r3
 80008ae:	4836      	ldr	r0, [pc, #216]	@ (8000988 <HAL_ADC_MspInit+0x1ec>)
 80008b0:	f002 fbae 	bl	8003010 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008b4:	e05e      	b.n	8000974 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a34      	ldr	r2, [pc, #208]	@ (800098c <HAL_ADC_MspInit+0x1f0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d159      	bne.n	8000974 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008c6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80008ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 fb75 	bl	8003fc0 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008dc:	f000 f95c 	bl	8000b98 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008e0:	4b26      	ldr	r3, [pc, #152]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a25      	ldr	r2, [pc, #148]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008ea:	4b24      	ldr	r3, [pc, #144]	@ (800097c <HAL_ADC_MspInit+0x1e0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d10b      	bne.n	800090a <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 80008f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fe:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a16      	ldr	r2, [pc, #88]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800093a:	230b      	movs	r3, #11
 800093c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093e:	2303      	movs	r3, #3
 8000940:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <HAL_ADC_MspInit+0x1e8>)
 8000952:	f002 fb5d 	bl	8003010 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000956:	2301      	movs	r3, #1
 8000958:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095a:	2303      	movs	r3, #3
 800095c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000970:	f002 fb4e 	bl	8003010 <HAL_GPIO_Init>
}
 8000974:	bf00      	nop
 8000976:	3790      	adds	r7, #144	@ 0x90
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000238 	.word	0x20000238
 8000980:	40021000 	.word	0x40021000
 8000984:	48000800 	.word	0x48000800
 8000988:	48000400 	.word	0x48000400
 800098c:	50000100 	.word	0x50000100

08000990 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b3f      	ldr	r3, [pc, #252]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a3e      	ldr	r2, [pc, #248]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4b3c      	ldr	r3, [pc, #240]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009be:	4b39      	ldr	r3, [pc, #228]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	4a38      	ldr	r2, [pc, #224]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009c4:	f043 0320 	orr.w	r3, r3, #32
 80009c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ca:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	f003 0320 	and.w	r3, r3, #32
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b33      	ldr	r3, [pc, #204]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4a32      	ldr	r2, [pc, #200]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4b30      	ldr	r3, [pc, #192]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	4a2c      	ldr	r2, [pc, #176]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fa:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	4a26      	ldr	r2, [pc, #152]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a12:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <MX_GPIO_Init+0x114>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a26:	f002 fc75 	bl	8003314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	481e      	ldr	r0, [pc, #120]	@ (8000aa8 <MX_GPIO_Init+0x118>)
 8000a30:	f002 fc70 	bl	8003314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4818      	ldr	r0, [pc, #96]	@ (8000aac <MX_GPIO_Init+0x11c>)
 8000a4c:	f002 fae0 	bl	8003010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a50:	2320      	movs	r3, #32
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f002 fad1 	bl	8003010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4808      	ldr	r0, [pc, #32]	@ (8000aa8 <MX_GPIO_Init+0x118>)
 8000a86:	f002 fac3 	bl	8003010 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2028      	movs	r0, #40	@ 0x28
 8000a90:	f002 f9d6 	bl	8002e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a94:	2028      	movs	r0, #40	@ 0x28
 8000a96:	f002 f9ed 	bl	8002e74 <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	@ 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	48000c00 	.word	0x48000c00
 8000aac:	48000800 	.word	0x48000800

08000ab0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ab4:	f000 ffa9 	bl	8001a0a <HAL_Init>
	/* USER CODE BEGIN Init */
	//Start_PWM_Signals();
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ab8:	f000 f813 	bl	8000ae2 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000abc:	f7ff ff68 	bl	8000990 <MX_GPIO_Init>
	MX_ADC2_Init();
 8000ac0:	f7ff fe06 	bl	80006d0 <MX_ADC2_Init>
	MX_ADC1_Init();
 8000ac4:	f7ff fd8c 	bl	80005e0 <MX_ADC1_Init>
	MX_TIM1_Init();
 8000ac8:	f000 fa2a 	bl	8000f20 <MX_TIM1_Init>
	MX_TIM3_Init();
 8000acc:	f000 fad4 	bl	8001078 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8000ad0:	f000 fc08 	bl	80012e4 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000ad4:	f000 fc52 	bl	800137c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	Shell_Init();
 8000ad8:	f000 fd44 	bl	8001564 <Shell_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000adc:	f000 fd82 	bl	80015e4 <Shell_Loop>
 8000ae0:	e7fc      	b.n	8000adc <main+0x2c>

08000ae2 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b094      	sub	sp, #80	@ 0x50
 8000ae6:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae8:	f107 0318 	add.w	r3, r7, #24
 8000aec:	2238      	movs	r2, #56	@ 0x38
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f007 fc74 	bl	80083de <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b04:	2000      	movs	r0, #0
 8000b06:	f002 fc41 	bl	800338c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b12:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b14:	2302      	movs	r3, #2
 8000b16:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000b1c:	2306      	movs	r3, #6
 8000b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000b20:	2355      	movs	r3, #85	@ 0x55
 8000b22:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b30:	f107 0318 	add.w	r3, r7, #24
 8000b34:	4618      	mov	r0, r3
 8000b36:	f002 fcdd 	bl	80034f4 <HAL_RCC_OscConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000b40:	f000 f82a 	bl	8000b98 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b44:	230f      	movs	r3, #15
 8000b46:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f002 ffe1 	bl	8003b24 <HAL_RCC_ClockConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000b68:	f000 f816 	bl	8000b98 <Error_Handler>
	}
}
 8000b6c:	bf00      	nop
 8000b6e:	3750      	adds	r7, #80	@ 0x50
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d101      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000b86:	f000 ff59 	bl	8001a3c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40001000 	.word	0x40001000

08000b98 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <Error_Handler+0x8>

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <HAL_MspInit+0x44>)
 8000bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bae:	4a0e      	ldr	r2, [pc, #56]	@ (8000be8 <HAL_MspInit+0x44>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <HAL_MspInit+0x44>)
 8000bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <HAL_MspInit+0x44>)
 8000bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bc6:	4a08      	ldr	r2, [pc, #32]	@ (8000be8 <HAL_MspInit+0x44>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_MspInit+0x44>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bda:	f002 fc7b 	bl	80034d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000

08000bec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08c      	sub	sp, #48	@ 0x30
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb0 <HAL_InitTick+0xc4>)
 8000bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c00:	4a2b      	ldr	r2, [pc, #172]	@ (8000cb0 <HAL_InitTick+0xc4>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c08:	4b29      	ldr	r3, [pc, #164]	@ (8000cb0 <HAL_InitTick+0xc4>)
 8000c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0c:	f003 0310 	and.w	r3, r3, #16
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c14:	f107 020c 	add.w	r2, r7, #12
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 f956 	bl	8003ed0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c24:	f003 f928 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 8000c28:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c2c:	4a21      	ldr	r2, [pc, #132]	@ (8000cb4 <HAL_InitTick+0xc8>)
 8000c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c32:	0c9b      	lsrs	r3, r3, #18
 8000c34:	3b01      	subs	r3, #1
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c38:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb8 <HAL_InitTick+0xcc>)
 8000c3a:	4a20      	ldr	r2, [pc, #128]	@ (8000cbc <HAL_InitTick+0xd0>)
 8000c3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb8 <HAL_InitTick+0xcc>)
 8000c40:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c44:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c46:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb8 <HAL_InitTick+0xcc>)
 8000c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <HAL_InitTick+0xcc>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c52:	4b19      	ldr	r3, [pc, #100]	@ (8000cb8 <HAL_InitTick+0xcc>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000c58:	4817      	ldr	r0, [pc, #92]	@ (8000cb8 <HAL_InitTick+0xcc>)
 8000c5a:	f003 fbff 	bl	800445c <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d11b      	bne.n	8000ca4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c6c:	4812      	ldr	r0, [pc, #72]	@ (8000cb8 <HAL_InitTick+0xcc>)
 8000c6e:	f003 fc57 	bl	8004520 <HAL_TIM_Base_Start_IT>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d111      	bne.n	8000ca4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c80:	2036      	movs	r0, #54	@ 0x36
 8000c82:	f002 f8f7 	bl	8002e74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d808      	bhi.n	8000c9e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	2036      	movs	r0, #54	@ 0x36
 8000c92:	f002 f8d5 	bl	8002e40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <HAL_InitTick+0xd4>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	e002      	b.n	8000ca4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ca4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3730      	adds	r7, #48	@ 0x30
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	431bde83 	.word	0x431bde83
 8000cb8:	2000023c 	.word	0x2000023c
 8000cbc:	40001000 	.word	0x40001000
 8000cc0:	200000e0 	.word	0x200000e0

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <NMI_Handler+0x4>

08000ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d28:	4802      	ldr	r0, [pc, #8]	@ (8000d34 <USART2_IRQHandler+0x10>)
 8000d2a:	f005 fa5d 	bl	80061e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000324 	.word	0x20000324

08000d38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d3c:	4802      	ldr	r0, [pc, #8]	@ (8000d48 <USART3_IRQHandler+0x10>)
 8000d3e:	f005 fa53 	bl	80061e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200003b4 	.word	0x200003b4

08000d4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000d50:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d54:	f002 faf6 	bl	8003344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d60:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <TIM6_DAC_IRQHandler+0x10>)
 8000d62:	f003 fe5b 	bl	8004a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000023c 	.word	0x2000023c

08000d70 <_getpid>:
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	2301      	movs	r3, #1
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <_kill>:
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	f007 fbd3 	bl	8008534 <__errno>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2216      	movs	r2, #22
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <_exit>:
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ffe7 	bl	8000d80 <_kill>
 8000db2:	bf00      	nop
 8000db4:	e7fd      	b.n	8000db2 <_exit+0x12>

08000db6 <_read>:
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	60f8      	str	r0, [r7, #12]
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	e00a      	b.n	8000dde <_read+0x28>
 8000dc8:	f3af 8000 	nop.w
 8000dcc:	4601      	mov	r1, r0
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	60ba      	str	r2, [r7, #8]
 8000dd4:	b2ca      	uxtb	r2, r1
 8000dd6:	701a      	strb	r2, [r3, #0]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	dbf0      	blt.n	8000dc8 <_read+0x12>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <_write>:
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	e009      	b.n	8000e16 <_write+0x26>
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1c5a      	adds	r2, r3, #1
 8000e06:	60ba      	str	r2, [r7, #8]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f3af 8000 	nop.w
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3301      	adds	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	dbf1      	blt.n	8000e02 <_write+0x12>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <_close>:
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_fstat>:
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	2300      	movs	r3, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <_isatty>:
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <_lseek>:
 8000e76:	b480      	push	{r7}
 8000e78:	b085      	sub	sp, #20
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	2300      	movs	r3, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_sbrk>:
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	4a14      	ldr	r2, [pc, #80]	@ (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
 8000eac:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	@ (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
 8000ec0:	f007 fb38 	bl	8008534 <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	@ (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20020000 	.word	0x20020000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	20000288 	.word	0x20000288
 8000ef8:	20000650 	.word	0x20000650

08000efc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b098      	sub	sp, #96	@ 0x60
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f26:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2234      	movs	r2, #52	@ 0x34
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f007 fa46 	bl	80083de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f52:	4b47      	ldr	r3, [pc, #284]	@ (8001070 <MX_TIM1_Init+0x150>)
 8000f54:	4a47      	ldr	r2, [pc, #284]	@ (8001074 <MX_TIM1_Init+0x154>)
 8000f56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f58:	4b45      	ldr	r3, [pc, #276]	@ (8001070 <MX_TIM1_Init+0x150>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f5e:	4b44      	ldr	r3, [pc, #272]	@ (8001070 <MX_TIM1_Init+0x150>)
 8000f60:	2220      	movs	r2, #32
 8000f62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8000f64:	4b42      	ldr	r3, [pc, #264]	@ (8001070 <MX_TIM1_Init+0x150>)
 8000f66:	f241 0299 	movw	r2, #4249	@ 0x1099
 8000f6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b40      	ldr	r3, [pc, #256]	@ (8001070 <MX_TIM1_Init+0x150>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f72:	4b3f      	ldr	r3, [pc, #252]	@ (8001070 <MX_TIM1_Init+0x150>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b3d      	ldr	r3, [pc, #244]	@ (8001070 <MX_TIM1_Init+0x150>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f7e:	483c      	ldr	r0, [pc, #240]	@ (8001070 <MX_TIM1_Init+0x150>)
 8000f80:	f003 fb46 	bl	8004610 <HAL_TIM_PWM_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000f8a:	f7ff fe05 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f92:	2300      	movs	r3, #0
 8000f94:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f9a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4833      	ldr	r0, [pc, #204]	@ (8001070 <MX_TIM1_Init+0x150>)
 8000fa2:	f004 fe31 	bl	8005c08 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fac:	f7ff fdf4 	bl	8000b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb0:	2360      	movs	r3, #96	@ 0x60
 8000fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fcc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4826      	ldr	r0, [pc, #152]	@ (8001070 <MX_TIM1_Init+0x150>)
 8000fd6:	f003 fea1 	bl	8004d1c <HAL_TIM_PWM_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000fe0:	f7ff fdda 	bl	8000b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fe4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fe8:	2204      	movs	r2, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4820      	ldr	r0, [pc, #128]	@ (8001070 <MX_TIM1_Init+0x150>)
 8000fee:	f003 fe95 	bl	8004d1c <HAL_TIM_PWM_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000ff8:	f7ff fdce 	bl	8000b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ffc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001000:	2208      	movs	r2, #8
 8001002:	4619      	mov	r1, r3
 8001004:	481a      	ldr	r0, [pc, #104]	@ (8001070 <MX_TIM1_Init+0x150>)
 8001006:	f003 fe89 	bl	8004d1c <HAL_TIM_PWM_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001010:	f7ff fdc2 	bl	8000b98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 15;
 8001020:	230f      	movs	r3, #15
 8001022:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001028:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800102c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800103a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800103e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	4619      	mov	r1, r3
 8001050:	4807      	ldr	r0, [pc, #28]	@ (8001070 <MX_TIM1_Init+0x150>)
 8001052:	f004 fe6f 	bl	8005d34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800105c:	f7ff fd9c 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001060:	4803      	ldr	r0, [pc, #12]	@ (8001070 <MX_TIM1_Init+0x150>)
 8001062:	f000 f8d7 	bl	8001214 <HAL_TIM_MspPostInit>

}
 8001066:	bf00      	nop
 8001068:	3760      	adds	r7, #96	@ 0x60
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000028c 	.word	0x2000028c
 8001074:	40012c00 	.word	0x40012c00

08001078 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001096:	4b1c      	ldr	r3, [pc, #112]	@ (8001108 <MX_TIM3_Init+0x90>)
 8001098:	4a1c      	ldr	r2, [pc, #112]	@ (800110c <MX_TIM3_Init+0x94>)
 800109a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800109c:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <MX_TIM3_Init+0x90>)
 800109e:	2200      	movs	r2, #0
 80010a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <MX_TIM3_Init+0x90>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010a8:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <MX_TIM3_Init+0x90>)
 80010aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b0:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <MX_TIM3_Init+0x90>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b6:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <MX_TIM3_Init+0x90>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	4619      	mov	r1, r3
 80010d2:	480d      	ldr	r0, [pc, #52]	@ (8001108 <MX_TIM3_Init+0x90>)
 80010d4:	f004 fbc9 	bl	800586a <HAL_TIMEx_HallSensor_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80010de:	f7ff fd5b 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80010e2:	2350      	movs	r3, #80	@ 0x50
 80010e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	4619      	mov	r1, r3
 80010ee:	4806      	ldr	r0, [pc, #24]	@ (8001108 <MX_TIM3_Init+0x90>)
 80010f0:	f004 fd8a 	bl	8005c08 <HAL_TIMEx_MasterConfigSynchronization>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80010fa:	f7ff fd4d 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	3720      	adds	r7, #32
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200002d8 	.word	0x200002d8
 800110c:	40000400 	.word	0x40000400

08001110 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <HAL_TIM_PWM_MspInit+0x38>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d10b      	bne.n	800113a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001122:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <HAL_TIM_PWM_MspInit+0x3c>)
 8001124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001126:	4a09      	ldr	r2, [pc, #36]	@ (800114c <HAL_TIM_PWM_MspInit+0x3c>)
 8001128:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800112c:	6613      	str	r3, [r2, #96]	@ 0x60
 800112e:	4b07      	ldr	r3, [pc, #28]	@ (800114c <HAL_TIM_PWM_MspInit+0x3c>)
 8001130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40012c00 	.word	0x40012c00
 800114c:	40021000 	.word	0x40021000

08001150 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a26      	ldr	r2, [pc, #152]	@ (8001208 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d145      	bne.n	80011fe <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001172:	4b26      	ldr	r3, [pc, #152]	@ (800120c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	6593      	str	r3, [r2, #88]	@ 0x58
 800117e:	4b23      	ldr	r3, [pc, #140]	@ (800120c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	4b20      	ldr	r3, [pc, #128]	@ (800120c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	4a1f      	ldr	r2, [pc, #124]	@ (800120c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001196:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	4a19      	ldr	r2, [pc, #100]	@ (800120c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ae:	4b17      	ldr	r3, [pc, #92]	@ (800120c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80011ba:	2350      	movs	r3, #80	@ 0x50
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011ca:	2302      	movs	r3, #2
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d8:	f001 ff1a 	bl	8003010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011ee:	2302      	movs	r3, #2
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	@ (8001210 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80011fa:	f001 ff09 	bl	8003010 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	@ 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40000400 	.word	0x40000400
 800120c:	40021000 	.word	0x40021000
 8001210:	48000800 	.word	0x48000800

08001214 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	@ 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a29      	ldr	r2, [pc, #164]	@ (80012d8 <HAL_TIM_MspPostInit+0xc4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d14b      	bne.n	80012ce <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	4b29      	ldr	r3, [pc, #164]	@ (80012dc <HAL_TIM_MspPostInit+0xc8>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	4a28      	ldr	r2, [pc, #160]	@ (80012dc <HAL_TIM_MspPostInit+0xc8>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001242:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <HAL_TIM_MspPostInit+0xc8>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <HAL_TIM_MspPostInit+0xc8>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	4a22      	ldr	r2, [pc, #136]	@ (80012dc <HAL_TIM_MspPostInit+0xc8>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125a:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <HAL_TIM_MspPostInit+0xc8>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001266:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001278:	2306      	movs	r3, #6
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4817      	ldr	r0, [pc, #92]	@ (80012e0 <HAL_TIM_MspPostInit+0xcc>)
 8001284:	f001 fec4 	bl	8003010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001288:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800129a:	2304      	movs	r3, #4
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	480e      	ldr	r0, [pc, #56]	@ (80012e0 <HAL_TIM_MspPostInit+0xcc>)
 80012a6:	f001 feb3 	bl	8003010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80012aa:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80012bc:	2306      	movs	r3, #6
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ca:	f001 fea1 	bl	8003010 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	@ 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40012c00 	.word	0x40012c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	48000400 	.word	0x48000400

080012e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012e8:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <MX_USART2_UART_Init+0x90>)
 80012ea:	4a23      	ldr	r2, [pc, #140]	@ (8001378 <MX_USART2_UART_Init+0x94>)
 80012ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ee:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <MX_USART2_UART_Init+0x90>)
 80012f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001374 <MX_USART2_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001374 <MX_USART2_UART_Init+0x90>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001302:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <MX_USART2_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001308:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <MX_USART2_UART_Init+0x90>)
 800130a:	220c      	movs	r2, #12
 800130c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130e:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <MX_USART2_UART_Init+0x90>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001314:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <MX_USART2_UART_Init+0x90>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131a:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <MX_USART2_UART_Init+0x90>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001320:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <MX_USART2_UART_Init+0x90>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001326:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <MX_USART2_UART_Init+0x90>)
 8001328:	2200      	movs	r2, #0
 800132a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800132c:	4811      	ldr	r0, [pc, #68]	@ (8001374 <MX_USART2_UART_Init+0x90>)
 800132e:	f004 fe1e 	bl	8005f6e <HAL_UART_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001338:	f7ff fc2e 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800133c:	2100      	movs	r1, #0
 800133e:	480d      	ldr	r0, [pc, #52]	@ (8001374 <MX_USART2_UART_Init+0x90>)
 8001340:	f006 fdc1 	bl	8007ec6 <HAL_UARTEx_SetTxFifoThreshold>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800134a:	f7ff fc25 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134e:	2100      	movs	r1, #0
 8001350:	4808      	ldr	r0, [pc, #32]	@ (8001374 <MX_USART2_UART_Init+0x90>)
 8001352:	f006 fdf6 	bl	8007f42 <HAL_UARTEx_SetRxFifoThreshold>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800135c:	f7ff fc1c 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	@ (8001374 <MX_USART2_UART_Init+0x90>)
 8001362:	f006 fd77 	bl	8007e54 <HAL_UARTEx_DisableFifoMode>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800136c:	f7ff fc14 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000324 	.word	0x20000324
 8001378:	40004400 	.word	0x40004400

0800137c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001380:	4b22      	ldr	r3, [pc, #136]	@ (800140c <MX_USART3_UART_Init+0x90>)
 8001382:	4a23      	ldr	r2, [pc, #140]	@ (8001410 <MX_USART3_UART_Init+0x94>)
 8001384:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <MX_USART3_UART_Init+0x90>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <MX_USART3_UART_Init+0x90>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <MX_USART3_UART_Init+0x90>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800139a:	4b1c      	ldr	r3, [pc, #112]	@ (800140c <MX_USART3_UART_Init+0x90>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b19      	ldr	r3, [pc, #100]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b17      	ldr	r3, [pc, #92]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b2:	4b16      	ldr	r3, [pc, #88]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013b8:	4b14      	ldr	r3, [pc, #80]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013be:	4b13      	ldr	r3, [pc, #76]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013c4:	4811      	ldr	r0, [pc, #68]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013c6:	f004 fdd2 	bl	8005f6e <HAL_UART_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013d0:	f7ff fbe2 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d4:	2100      	movs	r1, #0
 80013d6:	480d      	ldr	r0, [pc, #52]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013d8:	f006 fd75 	bl	8007ec6 <HAL_UARTEx_SetTxFifoThreshold>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013e2:	f7ff fbd9 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e6:	2100      	movs	r1, #0
 80013e8:	4808      	ldr	r0, [pc, #32]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013ea:	f006 fdaa 	bl	8007f42 <HAL_UARTEx_SetRxFifoThreshold>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013f4:	f7ff fbd0 	bl	8000b98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013f8:	4804      	ldr	r0, [pc, #16]	@ (800140c <MX_USART3_UART_Init+0x90>)
 80013fa:	f006 fd2b 	bl	8007e54 <HAL_UARTEx_DisableFifoMode>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001404:	f7ff fbc8 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200003b4 	.word	0x200003b4
 8001410:	40004800 	.word	0x40004800

08001414 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b0a0      	sub	sp, #128	@ 0x80
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800142c:	f107 0318 	add.w	r3, r7, #24
 8001430:	2254      	movs	r2, #84	@ 0x54
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f006 ffd2 	bl	80083de <memset>
  if(uartHandle->Instance==USART2)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a45      	ldr	r2, [pc, #276]	@ (8001554 <HAL_UART_MspInit+0x140>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d13f      	bne.n	80014c4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001444:	2302      	movs	r3, #2
 8001446:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800144c:	f107 0318 	add.w	r3, r7, #24
 8001450:	4618      	mov	r0, r3
 8001452:	f002 fdb5 	bl	8003fc0 <HAL_RCCEx_PeriphCLKConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800145c:	f7ff fb9c 	bl	8000b98 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001460:	4b3d      	ldr	r3, [pc, #244]	@ (8001558 <HAL_UART_MspInit+0x144>)
 8001462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001464:	4a3c      	ldr	r2, [pc, #240]	@ (8001558 <HAL_UART_MspInit+0x144>)
 8001466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800146a:	6593      	str	r3, [r2, #88]	@ 0x58
 800146c:	4b3a      	ldr	r3, [pc, #232]	@ (8001558 <HAL_UART_MspInit+0x144>)
 800146e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001478:	4b37      	ldr	r3, [pc, #220]	@ (8001558 <HAL_UART_MspInit+0x144>)
 800147a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147c:	4a36      	ldr	r2, [pc, #216]	@ (8001558 <HAL_UART_MspInit+0x144>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001484:	4b34      	ldr	r3, [pc, #208]	@ (8001558 <HAL_UART_MspInit+0x144>)
 8001486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001490:	230c      	movs	r3, #12
 8001492:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014a0:	2307      	movs	r3, #7
 80014a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014a8:	4619      	mov	r1, r3
 80014aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ae:	f001 fdaf 	bl	8003010 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	2026      	movs	r0, #38	@ 0x26
 80014b8:	f001 fcc2 	bl	8002e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014bc:	2026      	movs	r0, #38	@ 0x26
 80014be:	f001 fcd9 	bl	8002e74 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014c2:	e043      	b.n	800154c <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a24      	ldr	r2, [pc, #144]	@ (800155c <HAL_UART_MspInit+0x148>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d13e      	bne.n	800154c <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014ce:	2304      	movs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d6:	f107 0318 	add.w	r3, r7, #24
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 fd70 	bl	8003fc0 <HAL_RCCEx_PeriphCLKConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80014e6:	f7ff fb57 	bl	8000b98 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <HAL_UART_MspInit+0x144>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001558 <HAL_UART_MspInit+0x144>)
 80014f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f6:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <HAL_UART_MspInit+0x144>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <HAL_UART_MspInit+0x144>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	4a14      	ldr	r2, [pc, #80]	@ (8001558 <HAL_UART_MspInit+0x144>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150e:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <HAL_UART_MspInit+0x144>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800151a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800151e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800152c:	2307      	movs	r3, #7
 800152e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001530:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001534:	4619      	mov	r1, r3
 8001536:	480a      	ldr	r0, [pc, #40]	@ (8001560 <HAL_UART_MspInit+0x14c>)
 8001538:	f001 fd6a 	bl	8003010 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	2027      	movs	r0, #39	@ 0x27
 8001542:	f001 fc7d 	bl	8002e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001546:	2027      	movs	r0, #39	@ 0x27
 8001548:	f001 fc94 	bl	8002e74 <HAL_NVIC_EnableIRQ>
}
 800154c:	bf00      	nop
 800154e:	3780      	adds	r7, #128	@ 0x80
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40004400 	.word	0x40004400
 8001558:	40021000 	.word	0x40021000
 800155c:	40004800 	.word	0x40004800
 8001560:	48000800 	.word	0x48000800

08001564 <Shell_Init>:
int 		nbcommand = 4;
int 		pas = 1;
int 		delai = 100;
int 		trigger = 50; //valeur du rapport après start

void Shell_Init(void){
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS*sizeof(char*));
 8001568:	2224      	movs	r2, #36	@ 0x24
 800156a:	2100      	movs	r1, #0
 800156c:	4816      	ldr	r0, [pc, #88]	@ (80015c8 <Shell_Init+0x64>)
 800156e:	f006 ff36 	bl	80083de <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE*sizeof(char));
 8001572:	2240      	movs	r2, #64	@ 0x40
 8001574:	2100      	movs	r1, #0
 8001576:	4815      	ldr	r0, [pc, #84]	@ (80015cc <Shell_Init+0x68>)
 8001578:	f006 ff31 	bl	80083de <memset>
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE*sizeof(char));
 800157c:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <Shell_Init+0x6c>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE*sizeof(char));
 8001582:	2240      	movs	r2, #64	@ 0x40
 8001584:	2100      	movs	r1, #0
 8001586:	4813      	ldr	r0, [pc, #76]	@ (80015d4 <Shell_Init+0x70>)
 8001588:	f006 ff29 	bl	80083de <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800158c:	2201      	movs	r2, #1
 800158e:	4910      	ldr	r1, [pc, #64]	@ (80015d0 <Shell_Init+0x6c>)
 8001590:	4811      	ldr	r0, [pc, #68]	@ (80015d8 <Shell_Init+0x74>)
 8001592:	f004 fdd3 	bl	800613c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8001596:	4811      	ldr	r0, [pc, #68]	@ (80015dc <Shell_Init+0x78>)
 8001598:	f7fe fe4c 	bl	8000234 <strlen>
 800159c:	4603      	mov	r3, r0
 800159e:	b29a      	uxth	r2, r3
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295
 80015a4:	490d      	ldr	r1, [pc, #52]	@ (80015dc <Shell_Init+0x78>)
 80015a6:	480c      	ldr	r0, [pc, #48]	@ (80015d8 <Shell_Init+0x74>)
 80015a8:	f004 fd31 	bl	800600e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80015ac:	480c      	ldr	r0, [pc, #48]	@ (80015e0 <Shell_Init+0x7c>)
 80015ae:	f7fe fe41 	bl	8000234 <strlen>
 80015b2:	4603      	mov	r3, r0
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	4909      	ldr	r1, [pc, #36]	@ (80015e0 <Shell_Init+0x7c>)
 80015bc:	4806      	ldr	r0, [pc, #24]	@ (80015d8 <Shell_Init+0x74>)
 80015be:	f004 fd26 	bl	800600e <HAL_UART_Transmit>
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200004d0 	.word	0x200004d0
 80015cc:	2000048c 	.word	0x2000048c
 80015d0:	20000448 	.word	0x20000448
 80015d4:	2000044c 	.word	0x2000044c
 80015d8:	20000324 	.word	0x20000324
 80015dc:	20000020 	.word	0x20000020
 80015e0:	20000004 	.word	0x20000004

080015e4 <Shell_Loop>:

void Shell_Loop(void){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 80015ea:	4ba1      	ldr	r3, [pc, #644]	@ (8001870 <Shell_Loop+0x28c>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d05b      	beq.n	80016aa <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 80015f2:	4ba0      	ldr	r3, [pc, #640]	@ (8001874 <Shell_Loop+0x290>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d034      	beq.n	8001664 <Shell_Loop+0x80>
 80015fa:	2b0d      	cmp	r3, #13
 80015fc:	d142      	bne.n	8001684 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	2203      	movs	r2, #3
 8001604:	499c      	ldr	r1, [pc, #624]	@ (8001878 <Shell_Loop+0x294>)
 8001606:	489d      	ldr	r0, [pc, #628]	@ (800187c <Shell_Loop+0x298>)
 8001608:	f004 fd01 	bl	800600e <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 800160c:	4b9c      	ldr	r3, [pc, #624]	@ (8001880 <Shell_Loop+0x29c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a9c      	ldr	r2, [pc, #624]	@ (8001884 <Shell_Loop+0x2a0>)
 8001612:	2100      	movs	r1, #0
 8001614:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8001616:	4b9c      	ldr	r3, [pc, #624]	@ (8001888 <Shell_Loop+0x2a4>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 800161c:	499b      	ldr	r1, [pc, #620]	@ (800188c <Shell_Loop+0x2a8>)
 800161e:	4899      	ldr	r0, [pc, #612]	@ (8001884 <Shell_Loop+0x2a0>)
 8001620:	f006 fee6 	bl	80083f0 <strtok>
 8001624:	4603      	mov	r3, r0
 8001626:	4a9a      	ldr	r2, [pc, #616]	@ (8001890 <Shell_Loop+0x2ac>)
 8001628:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800162a:	e010      	b.n	800164e <Shell_Loop+0x6a>
				argv[argc++] = token;
 800162c:	4b96      	ldr	r3, [pc, #600]	@ (8001888 <Shell_Loop+0x2a4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	4995      	ldr	r1, [pc, #596]	@ (8001888 <Shell_Loop+0x2a4>)
 8001634:	600a      	str	r2, [r1, #0]
 8001636:	4a96      	ldr	r2, [pc, #600]	@ (8001890 <Shell_Loop+0x2ac>)
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	4996      	ldr	r1, [pc, #600]	@ (8001894 <Shell_Loop+0x2b0>)
 800163c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001640:	4992      	ldr	r1, [pc, #584]	@ (800188c <Shell_Loop+0x2a8>)
 8001642:	2000      	movs	r0, #0
 8001644:	f006 fed4 	bl	80083f0 <strtok>
 8001648:	4603      	mov	r3, r0
 800164a:	4a91      	ldr	r2, [pc, #580]	@ (8001890 <Shell_Loop+0x2ac>)
 800164c:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800164e:	4b90      	ldr	r3, [pc, #576]	@ (8001890 <Shell_Loop+0x2ac>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ea      	bne.n	800162c <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8001656:	4b8a      	ldr	r3, [pc, #552]	@ (8001880 <Shell_Loop+0x29c>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 800165c:	4b8e      	ldr	r3, [pc, #568]	@ (8001898 <Shell_Loop+0x2b4>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]
			break;
 8001662:	e01f      	b.n	80016a4 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8001664:	4b86      	ldr	r3, [pc, #536]	@ (8001880 <Shell_Loop+0x29c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	1e5a      	subs	r2, r3, #1
 800166a:	4985      	ldr	r1, [pc, #532]	@ (8001880 <Shell_Loop+0x29c>)
 800166c:	600a      	str	r2, [r1, #0]
 800166e:	4a85      	ldr	r2, [pc, #532]	@ (8001884 <Shell_Loop+0x2a0>)
 8001670:	2100      	movs	r1, #0
 8001672:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8001674:	f04f 33ff 	mov.w	r3, #4294967295
 8001678:	2204      	movs	r2, #4
 800167a:	4988      	ldr	r1, [pc, #544]	@ (800189c <Shell_Loop+0x2b8>)
 800167c:	487f      	ldr	r0, [pc, #508]	@ (800187c <Shell_Loop+0x298>)
 800167e:	f004 fcc6 	bl	800600e <HAL_UART_Transmit>
			break;
 8001682:	e00f      	b.n	80016a4 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001684:	4b7e      	ldr	r3, [pc, #504]	@ (8001880 <Shell_Loop+0x29c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	497d      	ldr	r1, [pc, #500]	@ (8001880 <Shell_Loop+0x29c>)
 800168c:	600a      	str	r2, [r1, #0]
 800168e:	4a79      	ldr	r2, [pc, #484]	@ (8001874 <Shell_Loop+0x290>)
 8001690:	7811      	ldrb	r1, [r2, #0]
 8001692:	4a7c      	ldr	r2, [pc, #496]	@ (8001884 <Shell_Loop+0x2a0>)
 8001694:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	2201      	movs	r2, #1
 800169c:	4975      	ldr	r1, [pc, #468]	@ (8001874 <Shell_Loop+0x290>)
 800169e:	4877      	ldr	r0, [pc, #476]	@ (800187c <Shell_Loop+0x298>)
 80016a0:	f004 fcb5 	bl	800600e <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 80016a4:	4b72      	ldr	r3, [pc, #456]	@ (8001870 <Shell_Loop+0x28c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 80016aa:	4b7b      	ldr	r3, [pc, #492]	@ (8001898 <Shell_Loop+0x2b4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 8139 	beq.w	8001926 <Shell_Loop+0x342>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 80016b4:	4b77      	ldr	r3, [pc, #476]	@ (8001894 <Shell_Loop+0x2b0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4979      	ldr	r1, [pc, #484]	@ (80018a0 <Shell_Loop+0x2bc>)
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fdb0 	bl	8000220 <strcmp>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d107      	bne.n	80016d6 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	221a      	movs	r2, #26
 80016cc:	4975      	ldr	r1, [pc, #468]	@ (80018a4 <Shell_Loop+0x2c0>)
 80016ce:	486b      	ldr	r0, [pc, #428]	@ (800187c <Shell_Loop+0x298>)
 80016d0:	f004 fc9d 	bl	800600e <HAL_UART_Transmit>
 80016d4:	e11d      	b.n	8001912 <Shell_Loop+0x32e>
		}
		else if(strcmp(argv[0],"help")==0){
 80016d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001894 <Shell_Loop+0x2b0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4973      	ldr	r1, [pc, #460]	@ (80018a8 <Shell_Loop+0x2c4>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fd9f 	bl	8000220 <strcmp>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d12c      	bne.n	8001742 <Shell_Loop+0x15e>

			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 80016e8:	4a70      	ldr	r2, [pc, #448]	@ (80018ac <Shell_Loop+0x2c8>)
 80016ea:	2140      	movs	r1, #64	@ 0x40
 80016ec:	4870      	ldr	r0, [pc, #448]	@ (80018b0 <Shell_Loop+0x2cc>)
 80016ee:	f006 fdff 	bl	80082f0 <sniprintf>
 80016f2:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
 80016fc:	496c      	ldr	r1, [pc, #432]	@ (80018b0 <Shell_Loop+0x2cc>)
 80016fe:	485f      	ldr	r0, [pc, #380]	@ (800187c <Shell_Loop+0x298>)
 8001700:	f004 fc85 	bl	800600e <HAL_UART_Transmit>

			for (size_t i = 0; i < nbcommand; i++) {
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
 8001708:	e014      	b.n	8001734 <Shell_Loop+0x150>
				// Convertir l'élément du tableau en chaîne de caractères
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "%s\r\n", command[i]);
 800170a:	4a6a      	ldr	r2, [pc, #424]	@ (80018b4 <Shell_Loop+0x2d0>)
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001712:	4a69      	ldr	r2, [pc, #420]	@ (80018b8 <Shell_Loop+0x2d4>)
 8001714:	2140      	movs	r1, #64	@ 0x40
 8001716:	4866      	ldr	r0, [pc, #408]	@ (80018b0 <Shell_Loop+0x2cc>)
 8001718:	f006 fdea 	bl	80082f0 <sniprintf>
 800171c:	6078      	str	r0, [r7, #4]
				// Transmettre le texte via UART
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	b29a      	uxth	r2, r3
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	4962      	ldr	r1, [pc, #392]	@ (80018b0 <Shell_Loop+0x2cc>)
 8001728:	4854      	ldr	r0, [pc, #336]	@ (800187c <Shell_Loop+0x298>)
 800172a:	f004 fc70 	bl	800600e <HAL_UART_Transmit>
			for (size_t i = 0; i < nbcommand; i++) {
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3301      	adds	r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	4b61      	ldr	r3, [pc, #388]	@ (80018bc <Shell_Loop+0x2d8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	4293      	cmp	r3, r2
 800173e:	d3e4      	bcc.n	800170a <Shell_Loop+0x126>
 8001740:	e0e7      	b.n	8001912 <Shell_Loop+0x32e>
			}

		}

		else if(strcmp(argv[0],"start")==0){
 8001742:	4b54      	ldr	r3, [pc, #336]	@ (8001894 <Shell_Loop+0x2b0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	495e      	ldr	r1, [pc, #376]	@ (80018c0 <Shell_Loop+0x2dc>)
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fd69 	bl	8000220 <strcmp>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d121      	bne.n	8001798 <Shell_Loop+0x1b4>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Power on\r\n");
 8001754:	4a5b      	ldr	r2, [pc, #364]	@ (80018c4 <Shell_Loop+0x2e0>)
 8001756:	2140      	movs	r1, #64	@ 0x40
 8001758:	4855      	ldr	r0, [pc, #340]	@ (80018b0 <Shell_Loop+0x2cc>)
 800175a:	f006 fdc9 	bl	80082f0 <sniprintf>
 800175e:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	b29a      	uxth	r2, r3
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
 8001768:	4951      	ldr	r1, [pc, #324]	@ (80018b0 <Shell_Loop+0x2cc>)
 800176a:	4844      	ldr	r0, [pc, #272]	@ (800187c <Shell_Loop+0x298>)
 800176c:	f004 fc4f 	bl	800600e <HAL_UART_Transmit>
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001770:	2100      	movs	r1, #0
 8001772:	4855      	ldr	r0, [pc, #340]	@ (80018c8 <Shell_Loop+0x2e4>)
 8001774:	f002 ffa4 	bl	80046c0 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001778:	2100      	movs	r1, #0
 800177a:	4853      	ldr	r0, [pc, #332]	@ (80018c8 <Shell_Loop+0x2e4>)
 800177c:	f004 f924 	bl	80059c8 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001780:	2104      	movs	r1, #4
 8001782:	4851      	ldr	r0, [pc, #324]	@ (80018c8 <Shell_Loop+0x2e4>)
 8001784:	f002 ff9c 	bl	80046c0 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001788:	2104      	movs	r1, #4
 800178a:	484f      	ldr	r0, [pc, #316]	@ (80018c8 <Shell_Loop+0x2e4>)
 800178c:	f004 f91c 	bl	80059c8 <HAL_TIMEx_PWMN_Start>
			setPWM(50);
 8001790:	2032      	movs	r0, #50	@ 0x32
 8001792:	f000 f8ef 	bl	8001974 <setPWM>
 8001796:	e0bc      	b.n	8001912 <Shell_Loop+0x32e>
		}
		else if(strcmp(argv[0],"stop")==0){
 8001798:	4b3e      	ldr	r3, [pc, #248]	@ (8001894 <Shell_Loop+0x2b0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	494b      	ldr	r1, [pc, #300]	@ (80018cc <Shell_Loop+0x2e8>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fd3e 	bl	8000220 <strcmp>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d11e      	bne.n	80017e8 <Shell_Loop+0x204>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Power off\r\n");
 80017aa:	4a49      	ldr	r2, [pc, #292]	@ (80018d0 <Shell_Loop+0x2ec>)
 80017ac:	2140      	movs	r1, #64	@ 0x40
 80017ae:	4840      	ldr	r0, [pc, #256]	@ (80018b0 <Shell_Loop+0x2cc>)
 80017b0:	f006 fd9e 	bl	80082f0 <sniprintf>
 80017b4:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	493c      	ldr	r1, [pc, #240]	@ (80018b0 <Shell_Loop+0x2cc>)
 80017c0:	482e      	ldr	r0, [pc, #184]	@ (800187c <Shell_Loop+0x298>)
 80017c2:	f004 fc24 	bl	800600e <HAL_UART_Transmit>
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 80017c6:	2100      	movs	r1, #0
 80017c8:	483f      	ldr	r0, [pc, #252]	@ (80018c8 <Shell_Loop+0x2e4>)
 80017ca:	f003 f88b 	bl	80048e4 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80017ce:	2100      	movs	r1, #0
 80017d0:	483d      	ldr	r0, [pc, #244]	@ (80018c8 <Shell_Loop+0x2e4>)
 80017d2:	f004 f9bb 	bl	8005b4c <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 80017d6:	2104      	movs	r1, #4
 80017d8:	483b      	ldr	r0, [pc, #236]	@ (80018c8 <Shell_Loop+0x2e4>)
 80017da:	f003 f883 	bl	80048e4 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80017de:	2104      	movs	r1, #4
 80017e0:	4839      	ldr	r0, [pc, #228]	@ (80018c8 <Shell_Loop+0x2e4>)
 80017e2:	f004 f9b3 	bl	8005b4c <HAL_TIMEx_PWMN_Stop>
 80017e6:	e094      	b.n	8001912 <Shell_Loop+0x32e>
		}

		else if(argc == 2 && strcmp(argv[0], "speed") == 0){
 80017e8:	4b27      	ldr	r3, [pc, #156]	@ (8001888 <Shell_Loop+0x2a4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	f040 8089 	bne.w	8001904 <Shell_Loop+0x320>
 80017f2:	4b28      	ldr	r3, [pc, #160]	@ (8001894 <Shell_Loop+0x2b0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4937      	ldr	r1, [pc, #220]	@ (80018d4 <Shell_Loop+0x2f0>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fd11 	bl	8000220 <strcmp>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d17f      	bne.n	8001904 <Shell_Loop+0x320>
			int percentage = atoi(argv[1]);  // Convertit l'argument en pourcentage
 8001804:	4b23      	ldr	r3, [pc, #140]	@ (8001894 <Shell_Loop+0x2b0>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4618      	mov	r0, r3
 800180a:	f006 fc27 	bl	800805c <atoi>
 800180e:	61b8      	str	r0, [r7, #24]
			if(percentage>=0 && percentage<=100){
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2b00      	cmp	r3, #0
 8001814:	db66      	blt.n	80018e4 <Shell_Loop+0x300>
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	2b64      	cmp	r3, #100	@ 0x64
 800181a:	dc63      	bgt.n	80018e4 <Shell_Loop+0x300>


				while(trigger!=percentage){
 800181c:	e022      	b.n	8001864 <Shell_Loop+0x280>
					HAL_Delay(delai);
 800181e:	4b2e      	ldr	r3, [pc, #184]	@ (80018d8 <Shell_Loop+0x2f4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f928 	bl	8001a78 <HAL_Delay>
					if(trigger>percentage){
 8001828:	4b2c      	ldr	r3, [pc, #176]	@ (80018dc <Shell_Loop+0x2f8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	429a      	cmp	r2, r3
 8001830:	da0c      	bge.n	800184c <Shell_Loop+0x268>
						trigger -= pas;
 8001832:	4b2a      	ldr	r3, [pc, #168]	@ (80018dc <Shell_Loop+0x2f8>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <Shell_Loop+0x2fc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	4a27      	ldr	r2, [pc, #156]	@ (80018dc <Shell_Loop+0x2f8>)
 800183e:	6013      	str	r3, [r2, #0]
						setPWM(trigger);
 8001840:	4b26      	ldr	r3, [pc, #152]	@ (80018dc <Shell_Loop+0x2f8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f000 f895 	bl	8001974 <setPWM>
 800184a:	e00b      	b.n	8001864 <Shell_Loop+0x280>
					}
					else{
						trigger += pas;
 800184c:	4b23      	ldr	r3, [pc, #140]	@ (80018dc <Shell_Loop+0x2f8>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b23      	ldr	r3, [pc, #140]	@ (80018e0 <Shell_Loop+0x2fc>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4413      	add	r3, r2
 8001856:	4a21      	ldr	r2, [pc, #132]	@ (80018dc <Shell_Loop+0x2f8>)
 8001858:	6013      	str	r3, [r2, #0]
						setPWM(trigger);
 800185a:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <Shell_Loop+0x2f8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f888 	bl	8001974 <setPWM>
				while(trigger!=percentage){
 8001864:	4b1d      	ldr	r3, [pc, #116]	@ (80018dc <Shell_Loop+0x2f8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	429a      	cmp	r2, r3
 800186c:	d1d7      	bne.n	800181e <Shell_Loop+0x23a>
			if(percentage>=0 && percentage<=100){
 800186e:	e048      	b.n	8001902 <Shell_Loop+0x31e>
 8001870:	20000444 	.word	0x20000444
 8001874:	20000448 	.word	0x20000448
 8001878:	20000088 	.word	0x20000088
 800187c:	20000324 	.word	0x20000324
 8001880:	200004cc 	.word	0x200004cc
 8001884:	2000048c 	.word	0x2000048c
 8001888:	200004f4 	.word	0x200004f4
 800188c:	08009578 	.word	0x08009578
 8001890:	200004f8 	.word	0x200004f8
 8001894:	200004d0 	.word	0x200004d0
 8001898:	200004fc 	.word	0x200004fc
 800189c:	2000008c 	.word	0x2000008c
 80018a0:	08009550 	.word	0x08009550
 80018a4:	200000a4 	.word	0x200000a4
 80018a8:	0800957c 	.word	0x0800957c
 80018ac:	08009584 	.word	0x08009584
 80018b0:	2000044c 	.word	0x2000044c
 80018b4:	200000c0 	.word	0x200000c0
 80018b8:	080095ac 	.word	0x080095ac
 80018bc:	200000d0 	.word	0x200000d0
 80018c0:	08009560 	.word	0x08009560
 80018c4:	080095b4 	.word	0x080095b4
 80018c8:	2000028c 	.word	0x2000028c
 80018cc:	08009568 	.word	0x08009568
 80018d0:	080095c0 	.word	0x080095c0
 80018d4:	08009570 	.word	0x08009570
 80018d8:	200000d8 	.word	0x200000d8
 80018dc:	200000dc 	.word	0x200000dc
 80018e0:	200000d4 	.word	0x200000d4
					}
				}

			}
			else{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Value must be between 0 and 100\r\n");
 80018e4:	4a12      	ldr	r2, [pc, #72]	@ (8001930 <Shell_Loop+0x34c>)
 80018e6:	2140      	movs	r1, #64	@ 0x40
 80018e8:	4812      	ldr	r0, [pc, #72]	@ (8001934 <Shell_Loop+0x350>)
 80018ea:	f006 fd01 	bl	80082f0 <sniprintf>
 80018ee:	6178      	str	r0, [r7, #20]
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	f04f 33ff 	mov.w	r3, #4294967295
 80018f8:	490e      	ldr	r1, [pc, #56]	@ (8001934 <Shell_Loop+0x350>)
 80018fa:	480f      	ldr	r0, [pc, #60]	@ (8001938 <Shell_Loop+0x354>)
 80018fc:	f004 fb87 	bl	800600e <HAL_UART_Transmit>
		else if(argc == 2 && strcmp(argv[0], "speed") == 0){
 8001900:	e007      	b.n	8001912 <Shell_Loop+0x32e>
 8001902:	e006      	b.n	8001912 <Shell_Loop+0x32e>
			}
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001904:	f04f 33ff 	mov.w	r3, #4294967295
 8001908:	2214      	movs	r2, #20
 800190a:	490c      	ldr	r1, [pc, #48]	@ (800193c <Shell_Loop+0x358>)
 800190c:	480a      	ldr	r0, [pc, #40]	@ (8001938 <Shell_Loop+0x354>)
 800190e:	f004 fb7e 	bl	800600e <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	221c      	movs	r2, #28
 8001918:	4909      	ldr	r1, [pc, #36]	@ (8001940 <Shell_Loop+0x35c>)
 800191a:	4807      	ldr	r0, [pc, #28]	@ (8001938 <Shell_Loop+0x354>)
 800191c:	f004 fb77 	bl	800600e <HAL_UART_Transmit>
		newCmdReady = 0;
 8001920:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <Shell_Loop+0x360>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
	}
}
 8001926:	bf00      	nop
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	080095cc 	.word	0x080095cc
 8001934:	2000044c 	.word	0x2000044c
 8001938:	20000324 	.word	0x20000324
 800193c:	20000090 	.word	0x20000090
 8001940:	20000004 	.word	0x20000004
 8001944:	200004fc 	.word	0x200004fc

08001948 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_UART_RxCpltCallback+0x20>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001956:	2201      	movs	r2, #1
 8001958:	4904      	ldr	r1, [pc, #16]	@ (800196c <HAL_UART_RxCpltCallback+0x24>)
 800195a:	4805      	ldr	r0, [pc, #20]	@ (8001970 <HAL_UART_RxCpltCallback+0x28>)
 800195c:	f004 fbee 	bl	800613c <HAL_UART_Receive_IT>
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000444 	.word	0x20000444
 800196c:	20000448 	.word	0x20000448
 8001970:	20000324 	.word	0x20000324

08001974 <setPWM>:

void setPWM(int dutycycle){
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	int val_CCR = (TIM1->ARR*dutycycle)/100;
 800197c:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <setPWM+0x3c>)
 800197e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	fb02 f303 	mul.w	r3, r2, r3
 8001986:	4a0b      	ldr	r2, [pc, #44]	@ (80019b4 <setPWM+0x40>)
 8001988:	fba2 2303 	umull	r2, r3, r2, r3
 800198c:	095b      	lsrs	r3, r3, #5
 800198e:	60fb      	str	r3, [r7, #12]
	TIM1->CCR1=val_CCR;
 8001990:	4a07      	ldr	r2, [pc, #28]	@ (80019b0 <setPWM+0x3c>)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->CCR2=TIM1->ARR-val_CCR;
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <setPWM+0x3c>)
 8001998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4904      	ldr	r1, [pc, #16]	@ (80019b0 <setPWM+0x3c>)
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80019a2:	bf00      	nop
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40012c00 	.word	0x40012c00
 80019b4:	51eb851f 	.word	0x51eb851f

080019b8 <Reset_Handler>:
 80019b8:	480d      	ldr	r0, [pc, #52]	@ (80019f0 <LoopForever+0x2>)
 80019ba:	4685      	mov	sp, r0
 80019bc:	480d      	ldr	r0, [pc, #52]	@ (80019f4 <LoopForever+0x6>)
 80019be:	490e      	ldr	r1, [pc, #56]	@ (80019f8 <LoopForever+0xa>)
 80019c0:	4a0e      	ldr	r2, [pc, #56]	@ (80019fc <LoopForever+0xe>)
 80019c2:	2300      	movs	r3, #0
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:
 80019c6:	58d4      	ldr	r4, [r2, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:
 80019cc:	18c4      	adds	r4, r0, r3
 80019ce:	428c      	cmp	r4, r1
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
 80019d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001a00 <LoopForever+0x12>)
 80019d4:	4c0b      	ldr	r4, [pc, #44]	@ (8001a04 <LoopForever+0x16>)
 80019d6:	2300      	movs	r3, #0
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:
 80019de:	42a2      	cmp	r2, r4
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>
 80019e2:	f7ff fa8b 	bl	8000efc <SystemInit>
 80019e6:	f006 fdab 	bl	8008540 <__libc_init_array>
 80019ea:	f7ff f861 	bl	8000ab0 <main>

080019ee <LoopForever>:
 80019ee:	e7fe      	b.n	80019ee <LoopForever>
 80019f0:	20020000 	.word	0x20020000
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000144 	.word	0x20000144
 80019fc:	08009824 	.word	0x08009824
 8001a00:	20000144 	.word	0x20000144
 8001a04:	20000650 	.word	0x20000650

08001a08 <ADC1_2_IRQHandler>:
 8001a08:	e7fe      	b.n	8001a08 <ADC1_2_IRQHandler>

08001a0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f001 fa08 	bl	8002e2a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a1a:	200f      	movs	r0, #15
 8001a1c:	f7ff f8e6 	bl	8000bec <HAL_InitTick>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	e001      	b.n	8001a30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a2c:	f7ff f8ba 	bl	8000ba4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a30:	79fb      	ldrb	r3, [r7, #7]

}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <HAL_IncTick+0x1c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <HAL_IncTick+0x20>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a03      	ldr	r2, [pc, #12]	@ (8001a58 <HAL_IncTick+0x1c>)
 8001a4c:	6013      	str	r3, [r2, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	20000500 	.word	0x20000500
 8001a5c:	200000e4 	.word	0x200000e4

08001a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return uwTick;
 8001a64:	4b03      	ldr	r3, [pc, #12]	@ (8001a74 <HAL_GetTick+0x14>)
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000500 	.word	0x20000500

08001a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff ffee 	bl	8001a60 <HAL_GetTick>
 8001a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d004      	beq.n	8001a9c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a92:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <HAL_Delay+0x40>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4413      	add	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a9c:	bf00      	nop
 8001a9e:	f7ff ffdf 	bl	8001a60 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d8f7      	bhi.n	8001a9e <HAL_Delay+0x26>
  {
  }
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200000e4 	.word	0x200000e4

08001abc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	609a      	str	r2, [r3, #8]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3360      	adds	r3, #96	@ 0x60
 8001b36:	461a      	mov	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <LL_ADC_SetOffset+0x44>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	4313      	orrs	r3, r2
 8001b54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b5c:	bf00      	nop
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	03fff000 	.word	0x03fff000

08001b6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3360      	adds	r3, #96	@ 0x60
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3360      	adds	r3, #96	@ 0x60
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bc2:	bf00      	nop
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b087      	sub	sp, #28
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	3360      	adds	r3, #96	@ 0x60
 8001bde:	461a      	mov	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001bf8:	bf00      	nop
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3360      	adds	r3, #96	@ 0x60
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	615a      	str	r2, [r3, #20]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3330      	adds	r3, #48	@ 0x30
 8001c70:	461a      	mov	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	4413      	add	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	211f      	movs	r1, #31
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	401a      	ands	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	0e9b      	lsrs	r3, r3, #26
 8001c98:	f003 011f 	and.w	r1, r3, #31
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f003 031f 	and.w	r3, r3, #31
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cac:	bf00      	nop
 8001cae:	371c      	adds	r7, #28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3314      	adds	r3, #20
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	0e5b      	lsrs	r3, r3, #25
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	4413      	add	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	0d1b      	lsrs	r3, r3, #20
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	2107      	movs	r1, #7
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	401a      	ands	r2, r3
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	0d1b      	lsrs	r3, r3, #20
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d02:	bf00      	nop
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d5c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d10a      	bne.n	8001d3a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d30:	431a      	orrs	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001d38:	e00a      	b.n	8001d50 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d46:	43db      	mvns	r3, r3
 8001d48:	401a      	ands	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	407f0000 	.word	0x407f0000

08001d60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001d70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6093      	str	r3, [r2, #8]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d98:	d101      	bne.n	8001d9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001dbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dc0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001de8:	d101      	bne.n	8001dee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <LL_ADC_IsEnabled+0x18>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <LL_ADC_IsEnabled+0x1a>
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d101      	bne.n	8001e3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d101      	bne.n	8001e60 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b089      	sub	sp, #36	@ 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e1af      	b.n	80021ea <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d109      	bne.n	8001eac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7fe fc7f 	bl	800079c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff67 	bl	8001d84 <LL_ADC_IsDeepPowerDownEnabled>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d004      	beq.n	8001ec6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff4d 	bl	8001d60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ff82 	bl	8001dd4 <LL_ADC_IsInternalRegulatorEnabled>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d115      	bne.n	8001f02 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff ff66 	bl	8001dac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ee0:	4b9f      	ldr	r3, [pc, #636]	@ (8002160 <HAL_ADC_Init+0x2f0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	099b      	lsrs	r3, r3, #6
 8001ee6:	4a9f      	ldr	r2, [pc, #636]	@ (8002164 <HAL_ADC_Init+0x2f4>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	099b      	lsrs	r3, r3, #6
 8001eee:	3301      	adds	r3, #1
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ef4:	e002      	b.n	8001efc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f9      	bne.n	8001ef6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff64 	bl	8001dd4 <LL_ADC_IsInternalRegulatorEnabled>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10d      	bne.n	8001f2e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f16:	f043 0210 	orr.w	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f22:	f043 0201 	orr.w	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ff75 	bl	8001e22 <LL_ADC_REG_IsConversionOngoing>
 8001f38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 8148 	bne.w	80021d8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 8144 	bne.w	80021d8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f54:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f58:	f043 0202 	orr.w	r2, r3, #2
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff49 	bl	8001dfc <LL_ADC_IsEnabled>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d141      	bne.n	8001ff4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f78:	d004      	beq.n	8001f84 <HAL_ADC_Init+0x114>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a7a      	ldr	r2, [pc, #488]	@ (8002168 <HAL_ADC_Init+0x2f8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d10f      	bne.n	8001fa4 <HAL_ADC_Init+0x134>
 8001f84:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001f88:	f7ff ff38 	bl	8001dfc <LL_ADC_IsEnabled>
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	4876      	ldr	r0, [pc, #472]	@ (8002168 <HAL_ADC_Init+0x2f8>)
 8001f90:	f7ff ff34 	bl	8001dfc <LL_ADC_IsEnabled>
 8001f94:	4603      	mov	r3, r0
 8001f96:	4323      	orrs	r3, r4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bf0c      	ite	eq
 8001f9c:	2301      	moveq	r3, #1
 8001f9e:	2300      	movne	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	e012      	b.n	8001fca <HAL_ADC_Init+0x15a>
 8001fa4:	4871      	ldr	r0, [pc, #452]	@ (800216c <HAL_ADC_Init+0x2fc>)
 8001fa6:	f7ff ff29 	bl	8001dfc <LL_ADC_IsEnabled>
 8001faa:	4604      	mov	r4, r0
 8001fac:	4870      	ldr	r0, [pc, #448]	@ (8002170 <HAL_ADC_Init+0x300>)
 8001fae:	f7ff ff25 	bl	8001dfc <LL_ADC_IsEnabled>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	431c      	orrs	r4, r3
 8001fb6:	486f      	ldr	r0, [pc, #444]	@ (8002174 <HAL_ADC_Init+0x304>)
 8001fb8:	f7ff ff20 	bl	8001dfc <LL_ADC_IsEnabled>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4323      	orrs	r3, r4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2301      	moveq	r3, #1
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d012      	beq.n	8001ff4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fd6:	d004      	beq.n	8001fe2 <HAL_ADC_Init+0x172>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a62      	ldr	r2, [pc, #392]	@ (8002168 <HAL_ADC_Init+0x2f8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_Init+0x176>
 8001fe2:	4a65      	ldr	r2, [pc, #404]	@ (8002178 <HAL_ADC_Init+0x308>)
 8001fe4:	e000      	b.n	8001fe8 <HAL_ADC_Init+0x178>
 8001fe6:	4a65      	ldr	r2, [pc, #404]	@ (800217c <HAL_ADC_Init+0x30c>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	4619      	mov	r1, r3
 8001fee:	4610      	mov	r0, r2
 8001ff0:	f7ff fd64 	bl	8001abc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7f5b      	ldrb	r3, [r3, #29]
 8001ff8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ffe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002004:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800200a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002012:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800201e:	2b01      	cmp	r3, #1
 8002020:	d106      	bne.n	8002030 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002026:	3b01      	subs	r3, #1
 8002028:	045b      	lsls	r3, r3, #17
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d009      	beq.n	800204c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002044:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	4b4b      	ldr	r3, [pc, #300]	@ (8002180 <HAL_ADC_Init+0x310>)
 8002054:	4013      	ands	r3, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	69b9      	ldr	r1, [r7, #24]
 800205c:	430b      	orrs	r3, r1
 800205e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fed1 	bl	8001e22 <LL_ADC_REG_IsConversionOngoing>
 8002080:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fede 	bl	8001e48 <LL_ADC_INJ_IsConversionOngoing>
 800208c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d17f      	bne.n	8002194 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d17c      	bne.n	8002194 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800209e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020a6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020b6:	f023 0302 	bic.w	r3, r3, #2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	69b9      	ldr	r1, [r7, #24]
 80020c0:	430b      	orrs	r3, r1
 80020c2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d017      	beq.n	80020fc <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80020da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80020e4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80020e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6911      	ldr	r1, [r2, #16]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	430b      	orrs	r3, r1
 80020f6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80020fa:	e013      	b.n	8002124 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800210a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800211c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002120:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800212a:	2b01      	cmp	r3, #1
 800212c:	d12a      	bne.n	8002184 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002138:	f023 0304 	bic.w	r3, r3, #4
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002144:	4311      	orrs	r1, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002150:	430a      	orrs	r2, r1
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	611a      	str	r2, [r3, #16]
 800215e:	e019      	b.n	8002194 <HAL_ADC_Init+0x324>
 8002160:	20000000 	.word	0x20000000
 8002164:	053e2d63 	.word	0x053e2d63
 8002168:	50000100 	.word	0x50000100
 800216c:	50000400 	.word	0x50000400
 8002170:	50000500 	.word	0x50000500
 8002174:	50000600 	.word	0x50000600
 8002178:	50000300 	.word	0x50000300
 800217c:	50000700 	.word	0x50000700
 8002180:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691a      	ldr	r2, [r3, #16]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d10c      	bne.n	80021b6 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	f023 010f 	bic.w	r1, r3, #15
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	1e5a      	subs	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80021b4:	e007      	b.n	80021c6 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 020f 	bic.w	r2, r2, #15
 80021c4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	f043 0201 	orr.w	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021d6:	e007      	b.n	80021e8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021dc:	f043 0210 	orr.w	r2, r3, #16
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	@ 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd90      	pop	{r4, r7, pc}
 80021f2:	bf00      	nop

080021f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b0b6      	sub	sp, #216	@ 0xd8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x24>
 8002212:	2302      	movs	r3, #2
 8002214:	f000 bc13 	b.w	8002a3e <HAL_ADC_ConfigChannel+0x84a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fdfc 	bl	8001e22 <LL_ADC_REG_IsConversionOngoing>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	f040 83f3 	bne.w	8002a18 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6859      	ldr	r1, [r3, #4]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	f7ff fd0e 	bl	8001c60 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fdea 	bl	8001e22 <LL_ADC_REG_IsConversionOngoing>
 800224e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fdf6 	bl	8001e48 <LL_ADC_INJ_IsConversionOngoing>
 800225c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002260:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002264:	2b00      	cmp	r3, #0
 8002266:	f040 81d9 	bne.w	800261c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800226a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 81d4 	bne.w	800261c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800227c:	d10f      	bne.n	800229e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2200      	movs	r2, #0
 8002288:	4619      	mov	r1, r3
 800228a:	f7ff fd15 	bl	8001cb8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fccf 	bl	8001c3a <LL_ADC_SetSamplingTimeCommonConfig>
 800229c:	e00e      	b.n	80022bc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6819      	ldr	r1, [r3, #0]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	461a      	mov	r2, r3
 80022ac:	f7ff fd04 	bl	8001cb8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fcbf 	bl	8001c3a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	08db      	lsrs	r3, r3, #3
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d022      	beq.n	8002324 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6919      	ldr	r1, [r3, #16]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80022ee:	f7ff fc19 	bl	8001b24 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	6919      	ldr	r1, [r3, #16]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	461a      	mov	r2, r3
 8002300:	f7ff fc65 	bl	8001bce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	6919      	ldr	r1, [r3, #16]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	7f1b      	ldrb	r3, [r3, #28]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d102      	bne.n	800231a <HAL_ADC_ConfigChannel+0x126>
 8002314:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002318:	e000      	b.n	800231c <HAL_ADC_ConfigChannel+0x128>
 800231a:	2300      	movs	r3, #0
 800231c:	461a      	mov	r2, r3
 800231e:	f7ff fc71 	bl	8001c04 <LL_ADC_SetOffsetSaturation>
 8002322:	e17b      	b.n	800261c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fc1e 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002330:	4603      	mov	r3, r0
 8002332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10a      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x15c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fc13 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	0e9b      	lsrs	r3, r3, #26
 800234a:	f003 021f 	and.w	r2, r3, #31
 800234e:	e01e      	b.n	800238e <HAL_ADC_ConfigChannel+0x19a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fc08 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 800235c:	4603      	mov	r3, r0
 800235e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800236e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002372:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002376:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800237e:	2320      	movs	r3, #32
 8002380:	e004      	b.n	800238c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002382:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002396:	2b00      	cmp	r3, #0
 8002398:	d105      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x1b2>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	0e9b      	lsrs	r3, r3, #26
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	e018      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x1e4>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80023ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80023c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80023ca:	2320      	movs	r3, #32
 80023cc:	e004      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80023ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023d8:	429a      	cmp	r2, r3
 80023da:	d106      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2200      	movs	r2, #0
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fbd7 	bl	8001b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2101      	movs	r1, #1
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fbbb 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10a      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x222>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2101      	movs	r1, #1
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fbb0 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	0e9b      	lsrs	r3, r3, #26
 8002410:	f003 021f 	and.w	r2, r3, #31
 8002414:	e01e      	b.n	8002454 <HAL_ADC_ConfigChannel+0x260>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2101      	movs	r1, #1
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fba5 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002434:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002438:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800243c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002444:	2320      	movs	r3, #32
 8002446:	e004      	b.n	8002452 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002448:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800244c:	fab3 f383 	clz	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245c:	2b00      	cmp	r3, #0
 800245e:	d105      	bne.n	800246c <HAL_ADC_ConfigChannel+0x278>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0e9b      	lsrs	r3, r3, #26
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	e018      	b.n	800249e <HAL_ADC_ConfigChannel+0x2aa>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002480:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002484:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002488:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002490:	2320      	movs	r3, #32
 8002492:	e004      	b.n	800249e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002494:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800249e:	429a      	cmp	r2, r3
 80024a0:	d106      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2200      	movs	r2, #0
 80024a8:	2101      	movs	r1, #1
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fb74 	bl	8001b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2102      	movs	r1, #2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fb58 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80024bc:	4603      	mov	r3, r0
 80024be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10a      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x2e8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2102      	movs	r1, #2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fb4d 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	0e9b      	lsrs	r3, r3, #26
 80024d6:	f003 021f 	and.w	r2, r3, #31
 80024da:	e01e      	b.n	800251a <HAL_ADC_ConfigChannel+0x326>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2102      	movs	r1, #2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fb42 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80024fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002502:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800250a:	2320      	movs	r3, #32
 800250c:	e004      	b.n	8002518 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800250e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002522:	2b00      	cmp	r3, #0
 8002524:	d105      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x33e>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	0e9b      	lsrs	r3, r3, #26
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	e016      	b.n	8002560 <HAL_ADC_ConfigChannel+0x36c>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002544:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002546:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800254a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002552:	2320      	movs	r3, #32
 8002554:	e004      	b.n	8002560 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002556:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002560:	429a      	cmp	r2, r3
 8002562:	d106      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2200      	movs	r2, #0
 800256a:	2102      	movs	r1, #2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fb13 	bl	8001b98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2103      	movs	r1, #3
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff faf7 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 800257e:	4603      	mov	r3, r0
 8002580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <HAL_ADC_ConfigChannel+0x3aa>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2103      	movs	r1, #3
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff faec 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 8002594:	4603      	mov	r3, r0
 8002596:	0e9b      	lsrs	r3, r3, #26
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	e017      	b.n	80025ce <HAL_ADC_ConfigChannel+0x3da>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2103      	movs	r1, #3
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fae1 	bl	8001b6c <LL_ADC_GetOffsetChannel>
 80025aa:	4603      	mov	r3, r0
 80025ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80025b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025b8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80025ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80025c0:	2320      	movs	r3, #32
 80025c2:	e003      	b.n	80025cc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80025c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x3f2>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0e9b      	lsrs	r3, r3, #26
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	e011      	b.n	800260a <HAL_ADC_ConfigChannel+0x416>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80025f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80025f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80025f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80025fe:	2320      	movs	r3, #32
 8002600:	e003      	b.n	800260a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800260a:	429a      	cmp	r2, r3
 800260c:	d106      	bne.n	800261c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	2103      	movs	r1, #3
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fabe 	bl	8001b98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fbeb 	bl	8001dfc <LL_ADC_IsEnabled>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 813d 	bne.w	80028a8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6819      	ldr	r1, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	461a      	mov	r2, r3
 800263c:	f7ff fb68 	bl	8001d10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4aa2      	ldr	r2, [pc, #648]	@ (80028d0 <HAL_ADC_ConfigChannel+0x6dc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	f040 812e 	bne.w	80028a8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10b      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x480>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0e9b      	lsrs	r3, r3, #26
 8002662:	3301      	adds	r3, #1
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	2b09      	cmp	r3, #9
 800266a:	bf94      	ite	ls
 800266c:	2301      	movls	r3, #1
 800266e:	2300      	movhi	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e019      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x4b4>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002682:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002684:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002686:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800268c:	2320      	movs	r3, #32
 800268e:	e003      	b.n	8002698 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002690:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	3301      	adds	r3, #1
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	2b09      	cmp	r3, #9
 80026a0:	bf94      	ite	ls
 80026a2:	2301      	movls	r3, #1
 80026a4:	2300      	movhi	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d079      	beq.n	80027a0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d107      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x4d4>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	3301      	adds	r3, #1
 80026c0:	069b      	lsls	r3, r3, #26
 80026c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026c6:	e015      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x500>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80026d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026d8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80026da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80026e0:	2320      	movs	r3, #32
 80026e2:	e003      	b.n	80026ec <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80026e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	069b      	lsls	r3, r3, #26
 80026f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x520>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	0e9b      	lsrs	r3, r3, #26
 8002706:	3301      	adds	r3, #1
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	e017      	b.n	8002744 <HAL_ADC_ConfigChannel+0x550>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002724:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800272c:	2320      	movs	r3, #32
 800272e:	e003      	b.n	8002738 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	ea42 0103 	orr.w	r1, r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <HAL_ADC_ConfigChannel+0x576>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0e9b      	lsrs	r3, r3, #26
 800275a:	3301      	adds	r3, #1
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	051b      	lsls	r3, r3, #20
 8002768:	e018      	b.n	800279c <HAL_ADC_ConfigChannel+0x5a8>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800277a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800277c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002782:	2320      	movs	r3, #32
 8002784:	e003      	b.n	800278e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
 800278e:	3301      	adds	r3, #1
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800279c:	430b      	orrs	r3, r1
 800279e:	e07e      	b.n	800289e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x5c8>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	0e9b      	lsrs	r3, r3, #26
 80027b2:	3301      	adds	r3, #1
 80027b4:	069b      	lsls	r3, r3, #26
 80027b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ba:	e015      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x5f4>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80027ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027cc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80027ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e003      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80027d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	069b      	lsls	r3, r3, #26
 80027e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d109      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x614>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0e9b      	lsrs	r3, r3, #26
 80027fa:	3301      	adds	r3, #1
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2101      	movs	r1, #1
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	e017      	b.n	8002838 <HAL_ADC_ConfigChannel+0x644>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	61fb      	str	r3, [r7, #28]
  return result;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002820:	2320      	movs	r3, #32
 8002822:	e003      	b.n	800282c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	3301      	adds	r3, #1
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	ea42 0103 	orr.w	r1, r2, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10d      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x670>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0e9b      	lsrs	r3, r3, #26
 800284e:	3301      	adds	r3, #1
 8002850:	f003 021f 	and.w	r2, r3, #31
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	3b1e      	subs	r3, #30
 800285c:	051b      	lsls	r3, r3, #20
 800285e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002862:	e01b      	b.n	800289c <HAL_ADC_ConfigChannel+0x6a8>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	613b      	str	r3, [r7, #16]
  return result;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800287c:	2320      	movs	r3, #32
 800287e:	e003      	b.n	8002888 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	3301      	adds	r3, #1
 800288a:	f003 021f 	and.w	r2, r3, #31
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	3b1e      	subs	r3, #30
 8002896:	051b      	lsls	r3, r3, #20
 8002898:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800289c:	430b      	orrs	r3, r1
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	6892      	ldr	r2, [r2, #8]
 80028a2:	4619      	mov	r1, r3
 80028a4:	f7ff fa08 	bl	8001cb8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <HAL_ADC_ConfigChannel+0x6e0>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80be 	beq.w	8002a32 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028be:	d004      	beq.n	80028ca <HAL_ADC_ConfigChannel+0x6d6>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a04      	ldr	r2, [pc, #16]	@ (80028d8 <HAL_ADC_ConfigChannel+0x6e4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10a      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x6ec>
 80028ca:	4b04      	ldr	r3, [pc, #16]	@ (80028dc <HAL_ADC_ConfigChannel+0x6e8>)
 80028cc:	e009      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x6ee>
 80028ce:	bf00      	nop
 80028d0:	407f0000 	.word	0x407f0000
 80028d4:	80080000 	.word	0x80080000
 80028d8:	50000100 	.word	0x50000100
 80028dc:	50000300 	.word	0x50000300
 80028e0:	4b59      	ldr	r3, [pc, #356]	@ (8002a48 <HAL_ADC_ConfigChannel+0x854>)
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff f910 	bl	8001b08 <LL_ADC_GetCommonPathInternalCh>
 80028e8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a56      	ldr	r2, [pc, #344]	@ (8002a4c <HAL_ADC_ConfigChannel+0x858>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d004      	beq.n	8002900 <HAL_ADC_ConfigChannel+0x70c>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a55      	ldr	r2, [pc, #340]	@ (8002a50 <HAL_ADC_ConfigChannel+0x85c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d13a      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002900:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002904:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d134      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002914:	d005      	beq.n	8002922 <HAL_ADC_ConfigChannel+0x72e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a4e      	ldr	r2, [pc, #312]	@ (8002a54 <HAL_ADC_ConfigChannel+0x860>)
 800291c:	4293      	cmp	r3, r2
 800291e:	f040 8085 	bne.w	8002a2c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800292a:	d004      	beq.n	8002936 <HAL_ADC_ConfigChannel+0x742>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a49      	ldr	r2, [pc, #292]	@ (8002a58 <HAL_ADC_ConfigChannel+0x864>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_ADC_ConfigChannel+0x746>
 8002936:	4a49      	ldr	r2, [pc, #292]	@ (8002a5c <HAL_ADC_ConfigChannel+0x868>)
 8002938:	e000      	b.n	800293c <HAL_ADC_ConfigChannel+0x748>
 800293a:	4a43      	ldr	r2, [pc, #268]	@ (8002a48 <HAL_ADC_ConfigChannel+0x854>)
 800293c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002940:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f7ff f8cb 	bl	8001ae2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800294c:	4b44      	ldr	r3, [pc, #272]	@ (8002a60 <HAL_ADC_ConfigChannel+0x86c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	4a44      	ldr	r2, [pc, #272]	@ (8002a64 <HAL_ADC_ConfigChannel+0x870>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	099b      	lsrs	r3, r3, #6
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	4613      	mov	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002966:	e002      	b.n	800296e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3b01      	subs	r3, #1
 800296c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f9      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002974:	e05a      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a68 <HAL_ADC_ConfigChannel+0x874>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d125      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x7d8>
 8002980:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002984:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d11f      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a31      	ldr	r2, [pc, #196]	@ (8002a58 <HAL_ADC_ConfigChannel+0x864>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d104      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x7ac>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a34      	ldr	r2, [pc, #208]	@ (8002a6c <HAL_ADC_ConfigChannel+0x878>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d047      	beq.n	8002a30 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029a8:	d004      	beq.n	80029b4 <HAL_ADC_ConfigChannel+0x7c0>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002a58 <HAL_ADC_ConfigChannel+0x864>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d101      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x7c4>
 80029b4:	4a29      	ldr	r2, [pc, #164]	@ (8002a5c <HAL_ADC_ConfigChannel+0x868>)
 80029b6:	e000      	b.n	80029ba <HAL_ADC_ConfigChannel+0x7c6>
 80029b8:	4a23      	ldr	r2, [pc, #140]	@ (8002a48 <HAL_ADC_ConfigChannel+0x854>)
 80029ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029c2:	4619      	mov	r1, r3
 80029c4:	4610      	mov	r0, r2
 80029c6:	f7ff f88c 	bl	8001ae2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029ca:	e031      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a27      	ldr	r2, [pc, #156]	@ (8002a70 <HAL_ADC_ConfigChannel+0x87c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d12d      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d127      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a58 <HAL_ADC_ConfigChannel+0x864>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d022      	beq.n	8002a32 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029f4:	d004      	beq.n	8002a00 <HAL_ADC_ConfigChannel+0x80c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a17      	ldr	r2, [pc, #92]	@ (8002a58 <HAL_ADC_ConfigChannel+0x864>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x810>
 8002a00:	4a16      	ldr	r2, [pc, #88]	@ (8002a5c <HAL_ADC_ConfigChannel+0x868>)
 8002a02:	e000      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x812>
 8002a04:	4a10      	ldr	r2, [pc, #64]	@ (8002a48 <HAL_ADC_ConfigChannel+0x854>)
 8002a06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4610      	mov	r0, r2
 8002a12:	f7ff f866 	bl	8001ae2 <LL_ADC_SetCommonPathInternalCh>
 8002a16:	e00c      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1c:	f043 0220 	orr.w	r2, r3, #32
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002a2a:	e002      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a2c:	bf00      	nop
 8002a2e:	e000      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a3a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	37d8      	adds	r7, #216	@ 0xd8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	50000700 	.word	0x50000700
 8002a4c:	c3210000 	.word	0xc3210000
 8002a50:	90c00010 	.word	0x90c00010
 8002a54:	50000600 	.word	0x50000600
 8002a58:	50000100 	.word	0x50000100
 8002a5c:	50000300 	.word	0x50000300
 8002a60:	20000000 	.word	0x20000000
 8002a64:	053e2d63 	.word	0x053e2d63
 8002a68:	c7520000 	.word	0xc7520000
 8002a6c:	50000500 	.word	0x50000500
 8002a70:	cb840000 	.word	0xcb840000

08002a74 <LL_ADC_IsEnabled>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <LL_ADC_IsEnabled+0x18>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <LL_ADC_IsEnabled+0x1a>
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <LL_ADC_REG_IsConversionOngoing>:
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d101      	bne.n	8002ab2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b0a1      	sub	sp, #132	@ 0x84
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e0e7      	b.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002aea:	2300      	movs	r3, #0
 8002aec:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002af6:	d102      	bne.n	8002afe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002af8:	4b6f      	ldr	r3, [pc, #444]	@ (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	e009      	b.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a6e      	ldr	r2, [pc, #440]	@ (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d102      	bne.n	8002b0e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002b08:	4b6d      	ldr	r3, [pc, #436]	@ (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	e001      	b.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10b      	bne.n	8002b30 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1c:	f043 0220 	orr.w	r2, r3, #32
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0be      	b.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff ffb1 	bl	8002a9a <LL_ADC_REG_IsConversionOngoing>
 8002b38:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ffab 	bl	8002a9a <LL_ADC_REG_IsConversionOngoing>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f040 80a0 	bne.w	8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 809c 	bne.w	8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b5c:	d004      	beq.n	8002b68 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a55      	ldr	r2, [pc, #340]	@ (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d101      	bne.n	8002b6c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002b68:	4b56      	ldr	r3, [pc, #344]	@ (8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002b6a:	e000      	b.n	8002b6e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002b6c:	4b56      	ldr	r3, [pc, #344]	@ (8002cc8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002b6e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d04b      	beq.n	8002c10 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	6859      	ldr	r1, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b8a:	035b      	lsls	r3, r3, #13
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b92:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b9c:	d004      	beq.n	8002ba8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a45      	ldr	r2, [pc, #276]	@ (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d10f      	bne.n	8002bc8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002ba8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002bac:	f7ff ff62 	bl	8002a74 <LL_ADC_IsEnabled>
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	4841      	ldr	r0, [pc, #260]	@ (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bb4:	f7ff ff5e 	bl	8002a74 <LL_ADC_IsEnabled>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4323      	orrs	r3, r4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e012      	b.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002bc8:	483c      	ldr	r0, [pc, #240]	@ (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002bca:	f7ff ff53 	bl	8002a74 <LL_ADC_IsEnabled>
 8002bce:	4604      	mov	r4, r0
 8002bd0:	483b      	ldr	r0, [pc, #236]	@ (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002bd2:	f7ff ff4f 	bl	8002a74 <LL_ADC_IsEnabled>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	431c      	orrs	r4, r3
 8002bda:	483c      	ldr	r0, [pc, #240]	@ (8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002bdc:	f7ff ff4a 	bl	8002a74 <LL_ADC_IsEnabled>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4323      	orrs	r3, r4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf0c      	ite	eq
 8002be8:	2301      	moveq	r3, #1
 8002bea:	2300      	movne	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d056      	beq.n	8002ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002bfa:	f023 030f 	bic.w	r3, r3, #15
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	6811      	ldr	r1, [r2, #0]
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	6892      	ldr	r2, [r2, #8]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c0c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c0e:	e047      	b.n	8002ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c1a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c24:	d004      	beq.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a23      	ldr	r2, [pc, #140]	@ (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d10f      	bne.n	8002c50 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002c30:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c34:	f7ff ff1e 	bl	8002a74 <LL_ADC_IsEnabled>
 8002c38:	4604      	mov	r4, r0
 8002c3a:	481f      	ldr	r0, [pc, #124]	@ (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c3c:	f7ff ff1a 	bl	8002a74 <LL_ADC_IsEnabled>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4323      	orrs	r3, r4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	e012      	b.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002c50:	481a      	ldr	r0, [pc, #104]	@ (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c52:	f7ff ff0f 	bl	8002a74 <LL_ADC_IsEnabled>
 8002c56:	4604      	mov	r4, r0
 8002c58:	4819      	ldr	r0, [pc, #100]	@ (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c5a:	f7ff ff0b 	bl	8002a74 <LL_ADC_IsEnabled>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	431c      	orrs	r4, r3
 8002c62:	481a      	ldr	r0, [pc, #104]	@ (8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002c64:	f7ff ff06 	bl	8002a74 <LL_ADC_IsEnabled>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4323      	orrs	r3, r4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d012      	beq.n	8002ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c82:	f023 030f 	bic.w	r3, r3, #15
 8002c86:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002c88:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c8a:	e009      	b.n	8002ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c90:	f043 0220 	orr.w	r2, r3, #32
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002c9e:	e000      	b.n	8002ca2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ca0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002caa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3784      	adds	r7, #132	@ 0x84
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd90      	pop	{r4, r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	50000100 	.word	0x50000100
 8002cbc:	50000400 	.word	0x50000400
 8002cc0:	50000500 	.word	0x50000500
 8002cc4:	50000300 	.word	0x50000300
 8002cc8:	50000700 	.word	0x50000700
 8002ccc:	50000600 	.word	0x50000600

08002cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cec:	4013      	ands	r3, r2
 8002cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d02:	4a04      	ldr	r2, [pc, #16]	@ (8002d14 <__NVIC_SetPriorityGrouping+0x44>)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	60d3      	str	r3, [r2, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d1c:	4b04      	ldr	r3, [pc, #16]	@ (8002d30 <__NVIC_GetPriorityGrouping+0x18>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	f003 0307 	and.w	r3, r3, #7
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	db0b      	blt.n	8002d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	f003 021f 	and.w	r2, r3, #31
 8002d4c:	4907      	ldr	r1, [pc, #28]	@ (8002d6c <__NVIC_EnableIRQ+0x38>)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	2001      	movs	r0, #1
 8002d56:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	e000e100 	.word	0xe000e100

08002d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	6039      	str	r1, [r7, #0]
 8002d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	db0a      	blt.n	8002d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	490c      	ldr	r1, [pc, #48]	@ (8002dbc <__NVIC_SetPriority+0x4c>)
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	0112      	lsls	r2, r2, #4
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	440b      	add	r3, r1
 8002d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d98:	e00a      	b.n	8002db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4908      	ldr	r1, [pc, #32]	@ (8002dc0 <__NVIC_SetPriority+0x50>)
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	3b04      	subs	r3, #4
 8002da8:	0112      	lsls	r2, r2, #4
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	440b      	add	r3, r1
 8002dae:	761a      	strb	r2, [r3, #24]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000e100 	.word	0xe000e100
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b089      	sub	sp, #36	@ 0x24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f1c3 0307 	rsb	r3, r3, #7
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	bf28      	it	cs
 8002de2:	2304      	movcs	r3, #4
 8002de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3304      	adds	r3, #4
 8002dea:	2b06      	cmp	r3, #6
 8002dec:	d902      	bls.n	8002df4 <NVIC_EncodePriority+0x30>
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3b03      	subs	r3, #3
 8002df2:	e000      	b.n	8002df6 <NVIC_EncodePriority+0x32>
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43da      	mvns	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	401a      	ands	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	43d9      	mvns	r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e1c:	4313      	orrs	r3, r2
         );
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3724      	adds	r7, #36	@ 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ff4c 	bl	8002cd0 <__NVIC_SetPriorityGrouping>
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e4e:	f7ff ff63 	bl	8002d18 <__NVIC_GetPriorityGrouping>
 8002e52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	6978      	ldr	r0, [r7, #20]
 8002e5a:	f7ff ffb3 	bl	8002dc4 <NVIC_EncodePriority>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff ff82 	bl	8002d70 <__NVIC_SetPriority>
}
 8002e6c:	bf00      	nop
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff ff56 	bl	8002d34 <__NVIC_EnableIRQ>
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d005      	beq.n	8002eb4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2204      	movs	r2, #4
 8002eac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
 8002eb2:	e037      	b.n	8002f24 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 020e 	bic.w	r2, r2, #14
 8002ec2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ece:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ed2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee8:	f003 021f 	and.w	r2, r3, #31
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef6:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f00:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00c      	beq.n	8002f24 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f18:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f22:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d00d      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
 8002f74:	e047      	b.n	8003006 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 020e 	bic.w	r2, r2, #14
 8002f84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0201 	bic.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fa4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002faa:	f003 021f 	and.w	r2, r3, #31
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002fc2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00c      	beq.n	8002fe6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fda:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002fe4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	4798      	blx	r3
    }
  }
  return status;
 8003006:	7bfb      	ldrb	r3, [r7, #15]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800301e:	e15a      	b.n	80032d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	2101      	movs	r1, #1
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	fa01 f303 	lsl.w	r3, r1, r3
 800302c:	4013      	ands	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 814c 	beq.w	80032d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d005      	beq.n	8003050 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800304c:	2b02      	cmp	r3, #2
 800304e:	d130      	bne.n	80030b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	2203      	movs	r2, #3
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003086:	2201      	movs	r2, #1
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	091b      	lsrs	r3, r3, #4
 800309c:	f003 0201 	and.w	r2, r3, #1
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d017      	beq.n	80030ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	2203      	movs	r2, #3
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4013      	ands	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d123      	bne.n	8003142 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	08da      	lsrs	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3208      	adds	r2, #8
 8003102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003106:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	220f      	movs	r2, #15
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4013      	ands	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	08da      	lsrs	r2, r3, #3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3208      	adds	r2, #8
 800313c:	6939      	ldr	r1, [r7, #16]
 800313e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	2203      	movs	r2, #3
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4013      	ands	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 0203 	and.w	r2, r3, #3
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 80a6 	beq.w	80032d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003184:	4b5b      	ldr	r3, [pc, #364]	@ (80032f4 <HAL_GPIO_Init+0x2e4>)
 8003186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003188:	4a5a      	ldr	r2, [pc, #360]	@ (80032f4 <HAL_GPIO_Init+0x2e4>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003190:	4b58      	ldr	r3, [pc, #352]	@ (80032f4 <HAL_GPIO_Init+0x2e4>)
 8003192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800319c:	4a56      	ldr	r2, [pc, #344]	@ (80032f8 <HAL_GPIO_Init+0x2e8>)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	3302      	adds	r3, #2
 80031a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	220f      	movs	r2, #15
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031c6:	d01f      	beq.n	8003208 <HAL_GPIO_Init+0x1f8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a4c      	ldr	r2, [pc, #304]	@ (80032fc <HAL_GPIO_Init+0x2ec>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d019      	beq.n	8003204 <HAL_GPIO_Init+0x1f4>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a4b      	ldr	r2, [pc, #300]	@ (8003300 <HAL_GPIO_Init+0x2f0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d013      	beq.n	8003200 <HAL_GPIO_Init+0x1f0>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a4a      	ldr	r2, [pc, #296]	@ (8003304 <HAL_GPIO_Init+0x2f4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00d      	beq.n	80031fc <HAL_GPIO_Init+0x1ec>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a49      	ldr	r2, [pc, #292]	@ (8003308 <HAL_GPIO_Init+0x2f8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d007      	beq.n	80031f8 <HAL_GPIO_Init+0x1e8>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a48      	ldr	r2, [pc, #288]	@ (800330c <HAL_GPIO_Init+0x2fc>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d101      	bne.n	80031f4 <HAL_GPIO_Init+0x1e4>
 80031f0:	2305      	movs	r3, #5
 80031f2:	e00a      	b.n	800320a <HAL_GPIO_Init+0x1fa>
 80031f4:	2306      	movs	r3, #6
 80031f6:	e008      	b.n	800320a <HAL_GPIO_Init+0x1fa>
 80031f8:	2304      	movs	r3, #4
 80031fa:	e006      	b.n	800320a <HAL_GPIO_Init+0x1fa>
 80031fc:	2303      	movs	r3, #3
 80031fe:	e004      	b.n	800320a <HAL_GPIO_Init+0x1fa>
 8003200:	2302      	movs	r3, #2
 8003202:	e002      	b.n	800320a <HAL_GPIO_Init+0x1fa>
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <HAL_GPIO_Init+0x1fa>
 8003208:	2300      	movs	r3, #0
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	f002 0203 	and.w	r2, r2, #3
 8003210:	0092      	lsls	r2, r2, #2
 8003212:	4093      	lsls	r3, r2
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800321a:	4937      	ldr	r1, [pc, #220]	@ (80032f8 <HAL_GPIO_Init+0x2e8>)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	089b      	lsrs	r3, r3, #2
 8003220:	3302      	adds	r3, #2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003228:	4b39      	ldr	r3, [pc, #228]	@ (8003310 <HAL_GPIO_Init+0x300>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	43db      	mvns	r3, r3
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4013      	ands	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800324c:	4a30      	ldr	r2, [pc, #192]	@ (8003310 <HAL_GPIO_Init+0x300>)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003252:	4b2f      	ldr	r3, [pc, #188]	@ (8003310 <HAL_GPIO_Init+0x300>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	43db      	mvns	r3, r3
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003276:	4a26      	ldr	r2, [pc, #152]	@ (8003310 <HAL_GPIO_Init+0x300>)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800327c:	4b24      	ldr	r3, [pc, #144]	@ (8003310 <HAL_GPIO_Init+0x300>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	43db      	mvns	r3, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003310 <HAL_GPIO_Init+0x300>)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003310 <HAL_GPIO_Init+0x300>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032ca:	4a11      	ldr	r2, [pc, #68]	@ (8003310 <HAL_GPIO_Init+0x300>)
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	3301      	adds	r3, #1
 80032d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f47f ae9d 	bne.w	8003020 <HAL_GPIO_Init+0x10>
  }
}
 80032e6:	bf00      	nop
 80032e8:	bf00      	nop
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40010000 	.word	0x40010000
 80032fc:	48000400 	.word	0x48000400
 8003300:	48000800 	.word	0x48000800
 8003304:	48000c00 	.word	0x48000c00
 8003308:	48001000 	.word	0x48001000
 800330c:	48001400 	.word	0x48001400
 8003310:	40010400 	.word	0x40010400

08003314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]
 8003320:	4613      	mov	r3, r2
 8003322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003324:	787b      	ldrb	r3, [r7, #1]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003330:	e002      	b.n	8003338 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003332:	887a      	ldrh	r2, [r7, #2]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800334e:	4b08      	ldr	r3, [pc, #32]	@ (8003370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	4013      	ands	r3, r2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d006      	beq.n	8003368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800335a:	4a05      	ldr	r2, [pc, #20]	@ (8003370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f806 	bl	8003374 <HAL_GPIO_EXTI_Callback>
  }
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40010400 	.word	0x40010400

08003374 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d141      	bne.n	800341e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800339a:	4b4b      	ldr	r3, [pc, #300]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a6:	d131      	bne.n	800340c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033a8:	4b47      	ldr	r3, [pc, #284]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033ae:	4a46      	ldr	r2, [pc, #280]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033b8:	4b43      	ldr	r3, [pc, #268]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033c0:	4a41      	ldr	r2, [pc, #260]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033c8:	4b40      	ldr	r3, [pc, #256]	@ (80034cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2232      	movs	r2, #50	@ 0x32
 80033ce:	fb02 f303 	mul.w	r3, r2, r3
 80033d2:	4a3f      	ldr	r2, [pc, #252]	@ (80034d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	0c9b      	lsrs	r3, r3, #18
 80033da:	3301      	adds	r3, #1
 80033dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033de:	e002      	b.n	80033e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033e6:	4b38      	ldr	r3, [pc, #224]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033f2:	d102      	bne.n	80033fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f2      	bne.n	80033e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033fa:	4b33      	ldr	r3, [pc, #204]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003406:	d158      	bne.n	80034ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e057      	b.n	80034bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800340c:	4b2e      	ldr	r3, [pc, #184]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003412:	4a2d      	ldr	r2, [pc, #180]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003418:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800341c:	e04d      	b.n	80034ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003424:	d141      	bne.n	80034aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003426:	4b28      	ldr	r3, [pc, #160]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800342e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003432:	d131      	bne.n	8003498 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003434:	4b24      	ldr	r3, [pc, #144]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800343a:	4a23      	ldr	r2, [pc, #140]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003440:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003444:	4b20      	ldr	r3, [pc, #128]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800344c:	4a1e      	ldr	r2, [pc, #120]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003452:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003454:	4b1d      	ldr	r3, [pc, #116]	@ (80034cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2232      	movs	r2, #50	@ 0x32
 800345a:	fb02 f303 	mul.w	r3, r2, r3
 800345e:	4a1c      	ldr	r2, [pc, #112]	@ (80034d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003460:	fba2 2303 	umull	r2, r3, r2, r3
 8003464:	0c9b      	lsrs	r3, r3, #18
 8003466:	3301      	adds	r3, #1
 8003468:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800346a:	e002      	b.n	8003472 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3b01      	subs	r3, #1
 8003470:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003472:	4b15      	ldr	r3, [pc, #84]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800347a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800347e:	d102      	bne.n	8003486 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f2      	bne.n	800346c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003486:	4b10      	ldr	r3, [pc, #64]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003492:	d112      	bne.n	80034ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e011      	b.n	80034bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003498:	4b0b      	ldr	r3, [pc, #44]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800349e:	4a0a      	ldr	r2, [pc, #40]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80034a8:	e007      	b.n	80034ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034aa:	4b07      	ldr	r3, [pc, #28]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034b2:	4a05      	ldr	r2, [pc, #20]	@ (80034c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	40007000 	.word	0x40007000
 80034cc:	20000000 	.word	0x20000000
 80034d0:	431bde83 	.word	0x431bde83

080034d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80034d8:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4a04      	ldr	r2, [pc, #16]	@ (80034f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034e2:	6093      	str	r3, [r2, #8]
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40007000 	.word	0x40007000

080034f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e306      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d075      	beq.n	80035fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003512:	4b97      	ldr	r3, [pc, #604]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800351c:	4b94      	ldr	r3, [pc, #592]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b0c      	cmp	r3, #12
 800352a:	d102      	bne.n	8003532 <HAL_RCC_OscConfig+0x3e>
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d002      	beq.n	8003538 <HAL_RCC_OscConfig+0x44>
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d10b      	bne.n	8003550 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	4b8d      	ldr	r3, [pc, #564]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d05b      	beq.n	80035fc <HAL_RCC_OscConfig+0x108>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d157      	bne.n	80035fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e2e1      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003558:	d106      	bne.n	8003568 <HAL_RCC_OscConfig+0x74>
 800355a:	4b85      	ldr	r3, [pc, #532]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a84      	ldr	r2, [pc, #528]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e01d      	b.n	80035a4 <HAL_RCC_OscConfig+0xb0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0x98>
 8003572:	4b7f      	ldr	r3, [pc, #508]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a7e      	ldr	r2, [pc, #504]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 8003578:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b7c      	ldr	r3, [pc, #496]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a7b      	ldr	r2, [pc, #492]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e00b      	b.n	80035a4 <HAL_RCC_OscConfig+0xb0>
 800358c:	4b78      	ldr	r3, [pc, #480]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a77      	ldr	r2, [pc, #476]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 8003592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b75      	ldr	r3, [pc, #468]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a74      	ldr	r2, [pc, #464]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 800359e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d013      	beq.n	80035d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fe fa58 	bl	8001a60 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b4:	f7fe fa54 	bl	8001a60 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	@ 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e2a6      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0xc0>
 80035d2:	e014      	b.n	80035fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d4:	f7fe fa44 	bl	8001a60 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035dc:	f7fe fa40 	bl	8001a60 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b64      	cmp	r3, #100	@ 0x64
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e292      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ee:	4b60      	ldr	r3, [pc, #384]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0xe8>
 80035fa:	e000      	b.n	80035fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d075      	beq.n	80036f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800360a:	4b59      	ldr	r3, [pc, #356]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003614:	4b56      	ldr	r3, [pc, #344]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b0c      	cmp	r3, #12
 8003622:	d102      	bne.n	800362a <HAL_RCC_OscConfig+0x136>
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d002      	beq.n	8003630 <HAL_RCC_OscConfig+0x13c>
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2b04      	cmp	r3, #4
 800362e:	d11f      	bne.n	8003670 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003630:	4b4f      	ldr	r3, [pc, #316]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_OscConfig+0x154>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e265      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003648:	4b49      	ldr	r3, [pc, #292]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	4946      	ldr	r1, [pc, #280]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 8003658:	4313      	orrs	r3, r2
 800365a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800365c:	4b45      	ldr	r3, [pc, #276]	@ (8003774 <HAL_RCC_OscConfig+0x280>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fd fac3 	bl	8000bec <HAL_InitTick>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d043      	beq.n	80036f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e251      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d023      	beq.n	80036c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003678:	4b3d      	ldr	r3, [pc, #244]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a3c      	ldr	r2, [pc, #240]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 800367e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fe f9ec 	bl	8001a60 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368c:	f7fe f9e8 	bl	8001a60 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e23a      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800369e:	4b34      	ldr	r3, [pc, #208]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036aa:	4b31      	ldr	r3, [pc, #196]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	061b      	lsls	r3, r3, #24
 80036b8:	492d      	ldr	r1, [pc, #180]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	604b      	str	r3, [r1, #4]
 80036be:	e01a      	b.n	80036f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 80036c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe f9c8 	bl	8001a60 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d4:	f7fe f9c4 	bl	8001a60 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e216      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036e6:	4b22      	ldr	r3, [pc, #136]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x1e0>
 80036f2:	e000      	b.n	80036f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d041      	beq.n	8003786 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d01c      	beq.n	8003744 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370a:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 800370c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003710:	4a17      	ldr	r2, [pc, #92]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371a:	f7fe f9a1 	bl	8001a60 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003722:	f7fe f99d 	bl	8001a60 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e1ef      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003734:	4b0e      	ldr	r3, [pc, #56]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0ef      	beq.n	8003722 <HAL_RCC_OscConfig+0x22e>
 8003742:	e020      	b.n	8003786 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003744:	4b0a      	ldr	r3, [pc, #40]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 8003746:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800374a:	4a09      	ldr	r2, [pc, #36]	@ (8003770 <HAL_RCC_OscConfig+0x27c>)
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7fe f984 	bl	8001a60 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800375a:	e00d      	b.n	8003778 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375c:	f7fe f980 	bl	8001a60 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d906      	bls.n	8003778 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e1d2      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	200000e0 	.word	0x200000e0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003778:	4b8c      	ldr	r3, [pc, #560]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 800377a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1ea      	bne.n	800375c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80a6 	beq.w	80038e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003794:	2300      	movs	r3, #0
 8003796:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003798:	4b84      	ldr	r3, [pc, #528]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 800379a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_RCC_OscConfig+0x2b4>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_RCC_OscConfig+0x2b6>
 80037a8:	2300      	movs	r3, #0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00d      	beq.n	80037ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ae:	4b7f      	ldr	r3, [pc, #508]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 80037b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b2:	4a7e      	ldr	r2, [pc, #504]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 80037b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80037ba:	4b7c      	ldr	r3, [pc, #496]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 80037bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037c6:	2301      	movs	r3, #1
 80037c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ca:	4b79      	ldr	r3, [pc, #484]	@ (80039b0 <HAL_RCC_OscConfig+0x4bc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d118      	bne.n	8003808 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037d6:	4b76      	ldr	r3, [pc, #472]	@ (80039b0 <HAL_RCC_OscConfig+0x4bc>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a75      	ldr	r2, [pc, #468]	@ (80039b0 <HAL_RCC_OscConfig+0x4bc>)
 80037dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e2:	f7fe f93d 	bl	8001a60 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ea:	f7fe f939 	bl	8001a60 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e18b      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037fc:	4b6c      	ldr	r3, [pc, #432]	@ (80039b0 <HAL_RCC_OscConfig+0x4bc>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d108      	bne.n	8003822 <HAL_RCC_OscConfig+0x32e>
 8003810:	4b66      	ldr	r3, [pc, #408]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003816:	4a65      	ldr	r2, [pc, #404]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003820:	e024      	b.n	800386c <HAL_RCC_OscConfig+0x378>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2b05      	cmp	r3, #5
 8003828:	d110      	bne.n	800384c <HAL_RCC_OscConfig+0x358>
 800382a:	4b60      	ldr	r3, [pc, #384]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003830:	4a5e      	ldr	r2, [pc, #376]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 8003832:	f043 0304 	orr.w	r3, r3, #4
 8003836:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800383a:	4b5c      	ldr	r3, [pc, #368]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003840:	4a5a      	ldr	r2, [pc, #360]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800384a:	e00f      	b.n	800386c <HAL_RCC_OscConfig+0x378>
 800384c:	4b57      	ldr	r3, [pc, #348]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003852:	4a56      	ldr	r2, [pc, #344]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800385c:	4b53      	ldr	r3, [pc, #332]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003862:	4a52      	ldr	r2, [pc, #328]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 8003864:	f023 0304 	bic.w	r3, r3, #4
 8003868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d016      	beq.n	80038a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fe f8f4 	bl	8001a60 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800387a:	e00a      	b.n	8003892 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387c:	f7fe f8f0 	bl	8001a60 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e140      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003892:	4b46      	ldr	r3, [pc, #280]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0ed      	beq.n	800387c <HAL_RCC_OscConfig+0x388>
 80038a0:	e015      	b.n	80038ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a2:	f7fe f8dd 	bl	8001a60 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038a8:	e00a      	b.n	80038c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038aa:	f7fe f8d9 	bl	8001a60 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e129      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038c0:	4b3a      	ldr	r3, [pc, #232]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 80038c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1ed      	bne.n	80038aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038ce:	7ffb      	ldrb	r3, [r7, #31]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d105      	bne.n	80038e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d4:	4b35      	ldr	r3, [pc, #212]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 80038d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d8:	4a34      	ldr	r2, [pc, #208]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 80038da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d03c      	beq.n	8003966 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01c      	beq.n	800392e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038f4:	4b2d      	ldr	r3, [pc, #180]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 80038f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038fa:	4a2c      	ldr	r2, [pc, #176]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003904:	f7fe f8ac 	bl	8001a60 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800390c:	f7fe f8a8 	bl	8001a60 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e0fa      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800391e:	4b23      	ldr	r3, [pc, #140]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 8003920:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0ef      	beq.n	800390c <HAL_RCC_OscConfig+0x418>
 800392c:	e01b      	b.n	8003966 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800392e:	4b1f      	ldr	r3, [pc, #124]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 8003930:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003934:	4a1d      	ldr	r2, [pc, #116]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393e:	f7fe f88f 	bl	8001a60 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003946:	f7fe f88b 	bl	8001a60 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e0dd      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003958:	4b14      	ldr	r3, [pc, #80]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 800395a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1ef      	bne.n	8003946 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 80d1 	beq.w	8003b12 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003970:	4b0e      	ldr	r3, [pc, #56]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b0c      	cmp	r3, #12
 800397a:	f000 808b 	beq.w	8003a94 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d15e      	bne.n	8003a44 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003986:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a08      	ldr	r2, [pc, #32]	@ (80039ac <HAL_RCC_OscConfig+0x4b8>)
 800398c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003992:	f7fe f865 	bl	8001a60 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003998:	e00c      	b.n	80039b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399a:	f7fe f861 	bl	8001a60 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d905      	bls.n	80039b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e0b3      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039b4:	4b59      	ldr	r3, [pc, #356]	@ (8003b1c <HAL_RCC_OscConfig+0x628>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1ec      	bne.n	800399a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039c0:	4b56      	ldr	r3, [pc, #344]	@ (8003b1c <HAL_RCC_OscConfig+0x628>)
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	4b56      	ldr	r3, [pc, #344]	@ (8003b20 <HAL_RCC_OscConfig+0x62c>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6a11      	ldr	r1, [r2, #32]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039d0:	3a01      	subs	r2, #1
 80039d2:	0112      	lsls	r2, r2, #4
 80039d4:	4311      	orrs	r1, r2
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80039da:	0212      	lsls	r2, r2, #8
 80039dc:	4311      	orrs	r1, r2
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80039e2:	0852      	lsrs	r2, r2, #1
 80039e4:	3a01      	subs	r2, #1
 80039e6:	0552      	lsls	r2, r2, #21
 80039e8:	4311      	orrs	r1, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80039ee:	0852      	lsrs	r2, r2, #1
 80039f0:	3a01      	subs	r2, #1
 80039f2:	0652      	lsls	r2, r2, #25
 80039f4:	4311      	orrs	r1, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80039fa:	06d2      	lsls	r2, r2, #27
 80039fc:	430a      	orrs	r2, r1
 80039fe:	4947      	ldr	r1, [pc, #284]	@ (8003b1c <HAL_RCC_OscConfig+0x628>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a04:	4b45      	ldr	r3, [pc, #276]	@ (8003b1c <HAL_RCC_OscConfig+0x628>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a44      	ldr	r2, [pc, #272]	@ (8003b1c <HAL_RCC_OscConfig+0x628>)
 8003a0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a0e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a10:	4b42      	ldr	r3, [pc, #264]	@ (8003b1c <HAL_RCC_OscConfig+0x628>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4a41      	ldr	r2, [pc, #260]	@ (8003b1c <HAL_RCC_OscConfig+0x628>)
 8003a16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a1a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fe f820 	bl	8001a60 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a24:	f7fe f81c 	bl	8001a60 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e06e      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a36:	4b39      	ldr	r3, [pc, #228]	@ (8003b1c <HAL_RCC_OscConfig+0x628>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0x530>
 8003a42:	e066      	b.n	8003b12 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a44:	4b35      	ldr	r3, [pc, #212]	@ (8003b1c <HAL_RCC_OscConfig+0x628>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a34      	ldr	r2, [pc, #208]	@ (8003b1c <HAL_RCC_OscConfig+0x628>)
 8003a4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a4e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a50:	4b32      	ldr	r3, [pc, #200]	@ (8003b1c <HAL_RCC_OscConfig+0x628>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a31      	ldr	r2, [pc, #196]	@ (8003b1c <HAL_RCC_OscConfig+0x628>)
 8003a56:	f023 0303 	bic.w	r3, r3, #3
 8003a5a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8003b1c <HAL_RCC_OscConfig+0x628>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4a2e      	ldr	r2, [pc, #184]	@ (8003b1c <HAL_RCC_OscConfig+0x628>)
 8003a62:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8003a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fd fff8 	bl	8001a60 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fd fff4 	bl	8001a60 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e046      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a86:	4b25      	ldr	r3, [pc, #148]	@ (8003b1c <HAL_RCC_OscConfig+0x628>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x580>
 8003a92:	e03e      	b.n	8003b12 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e039      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b1c <HAL_RCC_OscConfig+0x628>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f003 0203 	and.w	r2, r3, #3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d12c      	bne.n	8003b0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d123      	bne.n	8003b0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d11b      	bne.n	8003b0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d113      	bne.n	8003b0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af0:	085b      	lsrs	r3, r3, #1
 8003af2:	3b01      	subs	r3, #1
 8003af4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d109      	bne.n	8003b0e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	3b01      	subs	r3, #1
 8003b08:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d001      	beq.n	8003b12 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3720      	adds	r7, #32
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	019f800c 	.word	0x019f800c

08003b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e11e      	b.n	8003d7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b91      	ldr	r3, [pc, #580]	@ (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d910      	bls.n	8003b6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b8e      	ldr	r3, [pc, #568]	@ (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 020f 	bic.w	r2, r3, #15
 8003b52:	498c      	ldr	r1, [pc, #560]	@ (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5a:	4b8a      	ldr	r3, [pc, #552]	@ (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e106      	b.n	8003d7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d073      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d129      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b80:	4b81      	ldr	r3, [pc, #516]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0f4      	b.n	8003d7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b90:	f000 f9d0 	bl	8003f34 <RCC_GetSysClockFreqFromPLLSource>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4a7c      	ldr	r2, [pc, #496]	@ (8003d8c <HAL_RCC_ClockConfig+0x268>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d93f      	bls.n	8003c1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b9e:	4b7a      	ldr	r3, [pc, #488]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d033      	beq.n	8003c1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d12f      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bbe:	4b72      	ldr	r3, [pc, #456]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bc6:	4a70      	ldr	r2, [pc, #448]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bcc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003bce:	2380      	movs	r3, #128	@ 0x80
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	e024      	b.n	8003c1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d107      	bne.n	8003bec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d109      	bne.n	8003bfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0c6      	b.n	8003d7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bec:	4b66      	ldr	r3, [pc, #408]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e0be      	b.n	8003d7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003bfc:	f000 f8ce 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8003c00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4a61      	ldr	r2, [pc, #388]	@ (8003d8c <HAL_RCC_ClockConfig+0x268>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d909      	bls.n	8003c1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c12:	4a5d      	ldr	r2, [pc, #372]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c1a:	2380      	movs	r3, #128	@ 0x80
 8003c1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c1e:	4b5a      	ldr	r3, [pc, #360]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f023 0203 	bic.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4957      	ldr	r1, [pc, #348]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c30:	f7fd ff16 	bl	8001a60 <HAL_GetTick>
 8003c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c38:	f7fd ff12 	bl	8001a60 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e095      	b.n	8003d7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4e:	4b4e      	ldr	r3, [pc, #312]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 020c 	and.w	r2, r3, #12
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d1eb      	bne.n	8003c38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d023      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c78:	4b43      	ldr	r3, [pc, #268]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	4a42      	ldr	r2, [pc, #264]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003c7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d007      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c90:	4b3d      	ldr	r3, [pc, #244]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c98:	4a3b      	ldr	r2, [pc, #236]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003c9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca0:	4b39      	ldr	r3, [pc, #228]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4936      	ldr	r1, [pc, #216]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	608b      	str	r3, [r1, #8]
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2b80      	cmp	r3, #128	@ 0x80
 8003cb8:	d105      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003cba:	4b33      	ldr	r3, [pc, #204]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	4a32      	ldr	r2, [pc, #200]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003cc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cc4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d21d      	bcs.n	8003d10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f023 020f 	bic.w	r2, r3, #15
 8003cdc:	4929      	ldr	r1, [pc, #164]	@ (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ce4:	f7fd febc 	bl	8001a60 <HAL_GetTick>
 8003ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cec:	f7fd feb8 	bl	8001a60 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e03b      	b.n	8003d7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d02:	4b20      	ldr	r3, [pc, #128]	@ (8003d84 <HAL_RCC_ClockConfig+0x260>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d1ed      	bne.n	8003cec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4917      	ldr	r1, [pc, #92]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d3a:	4b13      	ldr	r3, [pc, #76]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	490f      	ldr	r1, [pc, #60]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d4e:	f000 f825 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8003d52:	4602      	mov	r2, r0
 8003d54:	4b0c      	ldr	r3, [pc, #48]	@ (8003d88 <HAL_RCC_ClockConfig+0x264>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	490c      	ldr	r1, [pc, #48]	@ (8003d90 <HAL_RCC_ClockConfig+0x26c>)
 8003d60:	5ccb      	ldrb	r3, [r1, r3]
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d94 <HAL_RCC_ClockConfig+0x270>)
 8003d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d98 <HAL_RCC_ClockConfig+0x274>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fc ff3a 	bl	8000bec <HAL_InitTick>
 8003d78:	4603      	mov	r3, r0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40022000 	.word	0x40022000
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	04c4b400 	.word	0x04c4b400
 8003d90:	080095f0 	.word	0x080095f0
 8003d94:	20000000 	.word	0x20000000
 8003d98:	200000e0 	.word	0x200000e0

08003d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003da2:	4b2c      	ldr	r3, [pc, #176]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 030c 	and.w	r3, r3, #12
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d102      	bne.n	8003db4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dae:	4b2a      	ldr	r3, [pc, #168]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	e047      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003db4:	4b27      	ldr	r3, [pc, #156]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d102      	bne.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dc0:	4b26      	ldr	r3, [pc, #152]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	e03e      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003dc6:	4b23      	ldr	r3, [pc, #140]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b0c      	cmp	r3, #12
 8003dd0:	d136      	bne.n	8003e40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dd2:	4b20      	ldr	r3, [pc, #128]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	3301      	adds	r3, #1
 8003de8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d10c      	bne.n	8003e0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003df0:	4a1a      	ldr	r2, [pc, #104]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	4a16      	ldr	r2, [pc, #88]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dfa:	68d2      	ldr	r2, [r2, #12]
 8003dfc:	0a12      	lsrs	r2, r2, #8
 8003dfe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	617b      	str	r3, [r7, #20]
      break;
 8003e08:	e00c      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e0a:	4a13      	ldr	r2, [pc, #76]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e12:	4a10      	ldr	r2, [pc, #64]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e14:	68d2      	ldr	r2, [r2, #12]
 8003e16:	0a12      	lsrs	r2, r2, #8
 8003e18:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e1c:	fb02 f303 	mul.w	r3, r2, r3
 8003e20:	617b      	str	r3, [r7, #20]
      break;
 8003e22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e24:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	0e5b      	lsrs	r3, r3, #25
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	3301      	adds	r3, #1
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	e001      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e44:	693b      	ldr	r3, [r7, #16]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000
 8003e58:	00f42400 	.word	0x00f42400
 8003e5c:	016e3600 	.word	0x016e3600

08003e60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e64:	4b03      	ldr	r3, [pc, #12]	@ (8003e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e66:	681b      	ldr	r3, [r3, #0]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	20000000 	.word	0x20000000

08003e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e7c:	f7ff fff0 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	0a1b      	lsrs	r3, r3, #8
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	4904      	ldr	r1, [pc, #16]	@ (8003ea0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e8e:	5ccb      	ldrb	r3, [r1, r3]
 8003e90:	f003 031f 	and.w	r3, r3, #31
 8003e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	08009600 	.word	0x08009600

08003ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ea8:	f7ff ffda 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	0adb      	lsrs	r3, r3, #11
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4904      	ldr	r1, [pc, #16]	@ (8003ecc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eba:	5ccb      	ldrb	r3, [r1, r3]
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	08009600 	.word	0x08009600

08003ed0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	220f      	movs	r2, #15
 8003ede:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003ee0:	4b12      	ldr	r3, [pc, #72]	@ (8003f2c <HAL_RCC_GetClockConfig+0x5c>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0203 	and.w	r2, r3, #3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003eec:	4b0f      	ldr	r3, [pc, #60]	@ (8003f2c <HAL_RCC_GetClockConfig+0x5c>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f2c <HAL_RCC_GetClockConfig+0x5c>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003f04:	4b09      	ldr	r3, [pc, #36]	@ (8003f2c <HAL_RCC_GetClockConfig+0x5c>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	08db      	lsrs	r3, r3, #3
 8003f0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003f12:	4b07      	ldr	r3, [pc, #28]	@ (8003f30 <HAL_RCC_GetClockConfig+0x60>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 020f 	and.w	r2, r3, #15
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	601a      	str	r2, [r3, #0]
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	40022000 	.word	0x40022000

08003f34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f44:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	3301      	adds	r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d10c      	bne.n	8003f72 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f58:	4a17      	ldr	r2, [pc, #92]	@ (8003fb8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f60:	4a14      	ldr	r2, [pc, #80]	@ (8003fb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f62:	68d2      	ldr	r2, [r2, #12]
 8003f64:	0a12      	lsrs	r2, r2, #8
 8003f66:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f6a:	fb02 f303 	mul.w	r3, r2, r3
 8003f6e:	617b      	str	r3, [r7, #20]
    break;
 8003f70:	e00c      	b.n	8003f8c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f72:	4a12      	ldr	r2, [pc, #72]	@ (8003fbc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8003fb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f7c:	68d2      	ldr	r2, [r2, #12]
 8003f7e:	0a12      	lsrs	r2, r2, #8
 8003f80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f84:	fb02 f303 	mul.w	r3, r2, r3
 8003f88:	617b      	str	r3, [r7, #20]
    break;
 8003f8a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f8c:	4b09      	ldr	r3, [pc, #36]	@ (8003fb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	0e5b      	lsrs	r3, r3, #25
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	3301      	adds	r3, #1
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003fa6:	687b      	ldr	r3, [r7, #4]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	016e3600 	.word	0x016e3600
 8003fbc:	00f42400 	.word	0x00f42400

08003fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fc8:	2300      	movs	r3, #0
 8003fca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fcc:	2300      	movs	r3, #0
 8003fce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 8098 	beq.w	800410e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe2:	4b43      	ldr	r3, [pc, #268]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10d      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fee:	4b40      	ldr	r3, [pc, #256]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff2:	4a3f      	ldr	r2, [pc, #252]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ff8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004006:	2301      	movs	r3, #1
 8004008:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800400a:	4b3a      	ldr	r3, [pc, #232]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a39      	ldr	r2, [pc, #228]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004014:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004016:	f7fd fd23 	bl	8001a60 <HAL_GetTick>
 800401a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800401c:	e009      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401e:	f7fd fd1f 	bl	8001a60 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d902      	bls.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	74fb      	strb	r3, [r7, #19]
        break;
 8004030:	e005      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004032:	4b30      	ldr	r3, [pc, #192]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0ef      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800403e:	7cfb      	ldrb	r3, [r7, #19]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d159      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004044:	4b2a      	ldr	r3, [pc, #168]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800404e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01e      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	429a      	cmp	r2, r3
 800405e:	d019      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004060:	4b23      	ldr	r3, [pc, #140]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004066:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800406a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800406c:	4b20      	ldr	r3, [pc, #128]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004072:	4a1f      	ldr	r2, [pc, #124]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800407c:	4b1c      	ldr	r3, [pc, #112]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004082:	4a1b      	ldr	r2, [pc, #108]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800408c:	4a18      	ldr	r2, [pc, #96]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d016      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409e:	f7fd fcdf 	bl	8001a60 <HAL_GetTick>
 80040a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a4:	e00b      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a6:	f7fd fcdb 	bl	8001a60 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d902      	bls.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	74fb      	strb	r3, [r7, #19]
            break;
 80040bc:	e006      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040be:	4b0c      	ldr	r3, [pc, #48]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0ec      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10b      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d2:	4b07      	ldr	r3, [pc, #28]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e0:	4903      	ldr	r1, [pc, #12]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040e8:	e008      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040ea:	7cfb      	ldrb	r3, [r7, #19]
 80040ec:	74bb      	strb	r3, [r7, #18]
 80040ee:	e005      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80040f0:	40021000 	.word	0x40021000
 80040f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f8:	7cfb      	ldrb	r3, [r7, #19]
 80040fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040fc:	7c7b      	ldrb	r3, [r7, #17]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d105      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004102:	4ba7      	ldr	r3, [pc, #668]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004106:	4aa6      	ldr	r2, [pc, #664]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004108:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800410c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800411a:	4ba1      	ldr	r3, [pc, #644]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004120:	f023 0203 	bic.w	r2, r3, #3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	499d      	ldr	r1, [pc, #628]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800413c:	4b98      	ldr	r3, [pc, #608]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004142:	f023 020c 	bic.w	r2, r3, #12
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	4995      	ldr	r1, [pc, #596]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800415e:	4b90      	ldr	r3, [pc, #576]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004164:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	498c      	ldr	r1, [pc, #560]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004180:	4b87      	ldr	r3, [pc, #540]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004186:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	4984      	ldr	r1, [pc, #528]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041a2:	4b7f      	ldr	r3, [pc, #508]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	497b      	ldr	r1, [pc, #492]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041c4:	4b76      	ldr	r3, [pc, #472]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	4973      	ldr	r1, [pc, #460]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041e6:	4b6e      	ldr	r3, [pc, #440]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	496a      	ldr	r1, [pc, #424]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004208:	4b65      	ldr	r3, [pc, #404]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	4962      	ldr	r1, [pc, #392]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800422a:	4b5d      	ldr	r3, [pc, #372]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004230:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	4959      	ldr	r1, [pc, #356]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800424c:	4b54      	ldr	r3, [pc, #336]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004252:	f023 0203 	bic.w	r2, r3, #3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425a:	4951      	ldr	r1, [pc, #324]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800426e:	4b4c      	ldr	r3, [pc, #304]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004274:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427c:	4948      	ldr	r1, [pc, #288]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800428c:	2b00      	cmp	r3, #0
 800428e:	d015      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004290:	4b43      	ldr	r3, [pc, #268]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004296:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429e:	4940      	ldr	r1, [pc, #256]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042ae:	d105      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b0:	4b3b      	ldr	r3, [pc, #236]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4a3a      	ldr	r2, [pc, #232]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d015      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042c8:	4b35      	ldr	r3, [pc, #212]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d6:	4932      	ldr	r1, [pc, #200]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042e6:	d105      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e8:	4b2d      	ldr	r3, [pc, #180]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4a2c      	ldr	r2, [pc, #176]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042f2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d015      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004300:	4b27      	ldr	r3, [pc, #156]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004306:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430e:	4924      	ldr	r1, [pc, #144]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800431e:	d105      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004320:	4b1f      	ldr	r3, [pc, #124]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4a1e      	ldr	r2, [pc, #120]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004326:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800432a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d015      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004338:	4b19      	ldr	r3, [pc, #100]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004346:	4916      	ldr	r1, [pc, #88]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004352:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004356:	d105      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004358:	4b11      	ldr	r3, [pc, #68]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4a10      	ldr	r2, [pc, #64]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004362:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d019      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004370:	4b0b      	ldr	r3, [pc, #44]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004376:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	4908      	ldr	r1, [pc, #32]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800438e:	d109      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004390:	4b03      	ldr	r3, [pc, #12]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	4a02      	ldr	r2, [pc, #8]	@ (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004396:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800439a:	60d3      	str	r3, [r2, #12]
 800439c:	e002      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d015      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043b0:	4b29      	ldr	r3, [pc, #164]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043be:	4926      	ldr	r1, [pc, #152]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043ce:	d105      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043d0:	4b21      	ldr	r3, [pc, #132]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4a20      	ldr	r2, [pc, #128]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043da:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d015      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80043e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f6:	4918      	ldr	r1, [pc, #96]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004406:	d105      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004408:	4b13      	ldr	r3, [pc, #76]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a12      	ldr	r2, [pc, #72]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800440e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004412:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d015      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004420:	4b0d      	ldr	r3, [pc, #52]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004422:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004426:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800442e:	490a      	ldr	r1, [pc, #40]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800443e:	d105      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004440:	4b05      	ldr	r3, [pc, #20]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4a04      	ldr	r2, [pc, #16]	@ (8004458 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004446:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800444a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800444c:	7cbb      	ldrb	r3, [r7, #18]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40021000 	.word	0x40021000

0800445c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e049      	b.n	8004502 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f841 	bl	800450a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3304      	adds	r3, #4
 8004498:	4619      	mov	r1, r3
 800449a:	4610      	mov	r0, r2
 800449c:	f000 fd7a 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
	...

08004520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b01      	cmp	r3, #1
 8004532:	d001      	beq.n	8004538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e054      	b.n	80045e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a26      	ldr	r2, [pc, #152]	@ (80045f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d022      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x80>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004562:	d01d      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x80>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a22      	ldr	r2, [pc, #136]	@ (80045f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d018      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x80>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a21      	ldr	r2, [pc, #132]	@ (80045f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d013      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x80>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1f      	ldr	r2, [pc, #124]	@ (80045fc <HAL_TIM_Base_Start_IT+0xdc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00e      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x80>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1e      	ldr	r2, [pc, #120]	@ (8004600 <HAL_TIM_Base_Start_IT+0xe0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x80>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1c      	ldr	r2, [pc, #112]	@ (8004604 <HAL_TIM_Base_Start_IT+0xe4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0x80>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1b      	ldr	r2, [pc, #108]	@ (8004608 <HAL_TIM_Base_Start_IT+0xe8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d115      	bne.n	80045cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	4b19      	ldr	r3, [pc, #100]	@ (800460c <HAL_TIM_Base_Start_IT+0xec>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b06      	cmp	r3, #6
 80045b0:	d015      	beq.n	80045de <HAL_TIM_Base_Start_IT+0xbe>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b8:	d011      	beq.n	80045de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ca:	e008      	b.n	80045de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	e000      	b.n	80045e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800
 80045fc:	40000c00 	.word	0x40000c00
 8004600:	40013400 	.word	0x40013400
 8004604:	40014000 	.word	0x40014000
 8004608:	40015000 	.word	0x40015000
 800460c:	00010007 	.word	0x00010007

08004610 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e049      	b.n	80046b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fc fd6a 	bl	8001110 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3304      	adds	r3, #4
 800464c:	4619      	mov	r1, r3
 800464e:	4610      	mov	r0, r2
 8004650:	f000 fca0 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d109      	bne.n	80046e4 <HAL_TIM_PWM_Start+0x24>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	bf14      	ite	ne
 80046dc:	2301      	movne	r3, #1
 80046de:	2300      	moveq	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	e03c      	b.n	800475e <HAL_TIM_PWM_Start+0x9e>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d109      	bne.n	80046fe <HAL_TIM_PWM_Start+0x3e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	bf14      	ite	ne
 80046f6:	2301      	movne	r3, #1
 80046f8:	2300      	moveq	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	e02f      	b.n	800475e <HAL_TIM_PWM_Start+0x9e>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b08      	cmp	r3, #8
 8004702:	d109      	bne.n	8004718 <HAL_TIM_PWM_Start+0x58>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b01      	cmp	r3, #1
 800470e:	bf14      	ite	ne
 8004710:	2301      	movne	r3, #1
 8004712:	2300      	moveq	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	e022      	b.n	800475e <HAL_TIM_PWM_Start+0x9e>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d109      	bne.n	8004732 <HAL_TIM_PWM_Start+0x72>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b01      	cmp	r3, #1
 8004728:	bf14      	ite	ne
 800472a:	2301      	movne	r3, #1
 800472c:	2300      	moveq	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	e015      	b.n	800475e <HAL_TIM_PWM_Start+0x9e>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b10      	cmp	r3, #16
 8004736:	d109      	bne.n	800474c <HAL_TIM_PWM_Start+0x8c>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e008      	b.n	800475e <HAL_TIM_PWM_Start+0x9e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	bf14      	ite	ne
 8004758:	2301      	movne	r3, #1
 800475a:	2300      	moveq	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e0a6      	b.n	80048b4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d104      	bne.n	8004776 <HAL_TIM_PWM_Start+0xb6>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004774:	e023      	b.n	80047be <HAL_TIM_PWM_Start+0xfe>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b04      	cmp	r3, #4
 800477a:	d104      	bne.n	8004786 <HAL_TIM_PWM_Start+0xc6>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004784:	e01b      	b.n	80047be <HAL_TIM_PWM_Start+0xfe>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b08      	cmp	r3, #8
 800478a:	d104      	bne.n	8004796 <HAL_TIM_PWM_Start+0xd6>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004794:	e013      	b.n	80047be <HAL_TIM_PWM_Start+0xfe>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b0c      	cmp	r3, #12
 800479a:	d104      	bne.n	80047a6 <HAL_TIM_PWM_Start+0xe6>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047a4:	e00b      	b.n	80047be <HAL_TIM_PWM_Start+0xfe>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d104      	bne.n	80047b6 <HAL_TIM_PWM_Start+0xf6>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047b4:	e003      	b.n	80047be <HAL_TIM_PWM_Start+0xfe>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2202      	movs	r2, #2
 80047ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2201      	movs	r2, #1
 80047c4:	6839      	ldr	r1, [r7, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f001 f82a 	bl	8005820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a3a      	ldr	r2, [pc, #232]	@ (80048bc <HAL_TIM_PWM_Start+0x1fc>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d018      	beq.n	8004808 <HAL_TIM_PWM_Start+0x148>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a39      	ldr	r2, [pc, #228]	@ (80048c0 <HAL_TIM_PWM_Start+0x200>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d013      	beq.n	8004808 <HAL_TIM_PWM_Start+0x148>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a37      	ldr	r2, [pc, #220]	@ (80048c4 <HAL_TIM_PWM_Start+0x204>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00e      	beq.n	8004808 <HAL_TIM_PWM_Start+0x148>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a36      	ldr	r2, [pc, #216]	@ (80048c8 <HAL_TIM_PWM_Start+0x208>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d009      	beq.n	8004808 <HAL_TIM_PWM_Start+0x148>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a34      	ldr	r2, [pc, #208]	@ (80048cc <HAL_TIM_PWM_Start+0x20c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d004      	beq.n	8004808 <HAL_TIM_PWM_Start+0x148>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a33      	ldr	r2, [pc, #204]	@ (80048d0 <HAL_TIM_PWM_Start+0x210>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d101      	bne.n	800480c <HAL_TIM_PWM_Start+0x14c>
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <HAL_TIM_PWM_Start+0x14e>
 800480c:	2300      	movs	r3, #0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d007      	beq.n	8004822 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004820:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a25      	ldr	r2, [pc, #148]	@ (80048bc <HAL_TIM_PWM_Start+0x1fc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d022      	beq.n	8004872 <HAL_TIM_PWM_Start+0x1b2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004834:	d01d      	beq.n	8004872 <HAL_TIM_PWM_Start+0x1b2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a26      	ldr	r2, [pc, #152]	@ (80048d4 <HAL_TIM_PWM_Start+0x214>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d018      	beq.n	8004872 <HAL_TIM_PWM_Start+0x1b2>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a24      	ldr	r2, [pc, #144]	@ (80048d8 <HAL_TIM_PWM_Start+0x218>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <HAL_TIM_PWM_Start+0x1b2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a23      	ldr	r2, [pc, #140]	@ (80048dc <HAL_TIM_PWM_Start+0x21c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00e      	beq.n	8004872 <HAL_TIM_PWM_Start+0x1b2>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a19      	ldr	r2, [pc, #100]	@ (80048c0 <HAL_TIM_PWM_Start+0x200>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d009      	beq.n	8004872 <HAL_TIM_PWM_Start+0x1b2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a18      	ldr	r2, [pc, #96]	@ (80048c4 <HAL_TIM_PWM_Start+0x204>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d004      	beq.n	8004872 <HAL_TIM_PWM_Start+0x1b2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a18      	ldr	r2, [pc, #96]	@ (80048d0 <HAL_TIM_PWM_Start+0x210>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d115      	bne.n	800489e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	4b19      	ldr	r3, [pc, #100]	@ (80048e0 <HAL_TIM_PWM_Start+0x220>)
 800487a:	4013      	ands	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b06      	cmp	r3, #6
 8004882:	d015      	beq.n	80048b0 <HAL_TIM_PWM_Start+0x1f0>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800488a:	d011      	beq.n	80048b0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489c:	e008      	b.n	80048b0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0201 	orr.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	e000      	b.n	80048b2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40012c00 	.word	0x40012c00
 80048c0:	40013400 	.word	0x40013400
 80048c4:	40014000 	.word	0x40014000
 80048c8:	40014400 	.word	0x40014400
 80048cc:	40014800 	.word	0x40014800
 80048d0:	40015000 	.word	0x40015000
 80048d4:	40000400 	.word	0x40000400
 80048d8:	40000800 	.word	0x40000800
 80048dc:	40000c00 	.word	0x40000c00
 80048e0:	00010007 	.word	0x00010007

080048e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2200      	movs	r2, #0
 80048f4:	6839      	ldr	r1, [r7, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 ff92 	bl	8005820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a40      	ldr	r2, [pc, #256]	@ (8004a04 <HAL_TIM_PWM_Stop+0x120>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d018      	beq.n	8004938 <HAL_TIM_PWM_Stop+0x54>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a3f      	ldr	r2, [pc, #252]	@ (8004a08 <HAL_TIM_PWM_Stop+0x124>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d013      	beq.n	8004938 <HAL_TIM_PWM_Stop+0x54>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a3d      	ldr	r2, [pc, #244]	@ (8004a0c <HAL_TIM_PWM_Stop+0x128>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00e      	beq.n	8004938 <HAL_TIM_PWM_Stop+0x54>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a3c      	ldr	r2, [pc, #240]	@ (8004a10 <HAL_TIM_PWM_Stop+0x12c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d009      	beq.n	8004938 <HAL_TIM_PWM_Stop+0x54>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a3a      	ldr	r2, [pc, #232]	@ (8004a14 <HAL_TIM_PWM_Stop+0x130>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d004      	beq.n	8004938 <HAL_TIM_PWM_Stop+0x54>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a39      	ldr	r2, [pc, #228]	@ (8004a18 <HAL_TIM_PWM_Stop+0x134>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d101      	bne.n	800493c <HAL_TIM_PWM_Stop+0x58>
 8004938:	2301      	movs	r3, #1
 800493a:	e000      	b.n	800493e <HAL_TIM_PWM_Stop+0x5a>
 800493c:	2300      	movs	r3, #0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d017      	beq.n	8004972 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6a1a      	ldr	r2, [r3, #32]
 8004948:	f241 1311 	movw	r3, #4369	@ 0x1111
 800494c:	4013      	ands	r3, r2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10f      	bne.n	8004972 <HAL_TIM_PWM_Stop+0x8e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6a1a      	ldr	r2, [r3, #32]
 8004958:	f244 4344 	movw	r3, #17476	@ 0x4444
 800495c:	4013      	ands	r3, r2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d107      	bne.n	8004972 <HAL_TIM_PWM_Stop+0x8e>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004970:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a1a      	ldr	r2, [r3, #32]
 8004978:	f241 1311 	movw	r3, #4369	@ 0x1111
 800497c:	4013      	ands	r3, r2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10f      	bne.n	80049a2 <HAL_TIM_PWM_Stop+0xbe>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6a1a      	ldr	r2, [r3, #32]
 8004988:	f244 4344 	movw	r3, #17476	@ 0x4444
 800498c:	4013      	ands	r3, r2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d107      	bne.n	80049a2 <HAL_TIM_PWM_Stop+0xbe>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d104      	bne.n	80049b2 <HAL_TIM_PWM_Stop+0xce>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049b0:	e023      	b.n	80049fa <HAL_TIM_PWM_Stop+0x116>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d104      	bne.n	80049c2 <HAL_TIM_PWM_Stop+0xde>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049c0:	e01b      	b.n	80049fa <HAL_TIM_PWM_Stop+0x116>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d104      	bne.n	80049d2 <HAL_TIM_PWM_Stop+0xee>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049d0:	e013      	b.n	80049fa <HAL_TIM_PWM_Stop+0x116>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b0c      	cmp	r3, #12
 80049d6:	d104      	bne.n	80049e2 <HAL_TIM_PWM_Stop+0xfe>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049e0:	e00b      	b.n	80049fa <HAL_TIM_PWM_Stop+0x116>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d104      	bne.n	80049f2 <HAL_TIM_PWM_Stop+0x10e>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049f0:	e003      	b.n	80049fa <HAL_TIM_PWM_Stop+0x116>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40012c00 	.word	0x40012c00
 8004a08:	40013400 	.word	0x40013400
 8004a0c:	40014000 	.word	0x40014000
 8004a10:	40014400 	.word	0x40014400
 8004a14:	40014800 	.word	0x40014800
 8004a18:	40015000 	.word	0x40015000

08004a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d122      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d11b      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0202 	mvn.w	r2, #2
 8004a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fa7a 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fa6c 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fa7d 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d122      	bne.n	8004acc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d11b      	bne.n	8004acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0204 	mvn.w	r2, #4
 8004a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fa50 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004ab8:	e005      	b.n	8004ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa42 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fa53 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d122      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d11b      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0208 	mvn.w	r2, #8
 8004af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2204      	movs	r2, #4
 8004af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fa26 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004b0c:	e005      	b.n	8004b1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fa18 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fa29 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b10      	cmp	r3, #16
 8004b2c:	d122      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d11b      	bne.n	8004b74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f06f 0210 	mvn.w	r2, #16
 8004b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2208      	movs	r2, #8
 8004b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f9fc 	bl	8004f58 <HAL_TIM_IC_CaptureCallback>
 8004b60:	e005      	b.n	8004b6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f9ee 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f9ff 	bl	8004f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d10e      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d107      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0201 	mvn.w	r2, #1
 8004b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fb ffea 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004baa:	2b80      	cmp	r3, #128	@ 0x80
 8004bac:	d10e      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb8:	2b80      	cmp	r3, #128	@ 0x80
 8004bba:	d107      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f001 f970 	bl	8005eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bda:	d10e      	bne.n	8004bfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be6:	2b80      	cmp	r3, #128	@ 0x80
 8004be8:	d107      	bne.n	8004bfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f001 f963 	bl	8005ec0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c04:	2b40      	cmp	r3, #64	@ 0x40
 8004c06:	d10e      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c12:	2b40      	cmp	r3, #64	@ 0x40
 8004c14:	d107      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f9ad 	bl	8004f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	f003 0320 	and.w	r3, r3, #32
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d10e      	bne.n	8004c52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d107      	bne.n	8004c52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f06f 0220 	mvn.w	r2, #32
 8004c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f001 f923 	bl	8005e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c60:	d10f      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c70:	d107      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f001 f929 	bl	8005ed4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c90:	d10f      	bne.n	8004cb2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ca0:	d107      	bne.n	8004cb2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f001 f91b 	bl	8005ee8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cc0:	d10f      	bne.n	8004ce2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ccc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cd0:	d107      	bne.n	8004ce2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f001 f90d 	bl	8005efc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cf0:	d10f      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cfc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d00:	d107      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f001 f8ff 	bl	8005f10 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d12:	bf00      	nop
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e0ff      	b.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b14      	cmp	r3, #20
 8004d46:	f200 80f0 	bhi.w	8004f2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d50:	08004da5 	.word	0x08004da5
 8004d54:	08004f2b 	.word	0x08004f2b
 8004d58:	08004f2b 	.word	0x08004f2b
 8004d5c:	08004f2b 	.word	0x08004f2b
 8004d60:	08004de5 	.word	0x08004de5
 8004d64:	08004f2b 	.word	0x08004f2b
 8004d68:	08004f2b 	.word	0x08004f2b
 8004d6c:	08004f2b 	.word	0x08004f2b
 8004d70:	08004e27 	.word	0x08004e27
 8004d74:	08004f2b 	.word	0x08004f2b
 8004d78:	08004f2b 	.word	0x08004f2b
 8004d7c:	08004f2b 	.word	0x08004f2b
 8004d80:	08004e67 	.word	0x08004e67
 8004d84:	08004f2b 	.word	0x08004f2b
 8004d88:	08004f2b 	.word	0x08004f2b
 8004d8c:	08004f2b 	.word	0x08004f2b
 8004d90:	08004ea9 	.word	0x08004ea9
 8004d94:	08004f2b 	.word	0x08004f2b
 8004d98:	08004f2b 	.word	0x08004f2b
 8004d9c:	08004f2b 	.word	0x08004f2b
 8004da0:	08004ee9 	.word	0x08004ee9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 f99a 	bl	80050e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0208 	orr.w	r2, r2, #8
 8004dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0204 	bic.w	r2, r2, #4
 8004dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6999      	ldr	r1, [r3, #24]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	619a      	str	r2, [r3, #24]
      break;
 8004de2:	e0a5      	b.n	8004f30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fa14 	bl	8005218 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6999      	ldr	r1, [r3, #24]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	021a      	lsls	r2, r3, #8
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	619a      	str	r2, [r3, #24]
      break;
 8004e24:	e084      	b.n	8004f30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fa87 	bl	8005340 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f042 0208 	orr.w	r2, r2, #8
 8004e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69da      	ldr	r2, [r3, #28]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0204 	bic.w	r2, r2, #4
 8004e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69d9      	ldr	r1, [r3, #28]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	61da      	str	r2, [r3, #28]
      break;
 8004e64:	e064      	b.n	8004f30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 faf9 	bl	8005464 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69d9      	ldr	r1, [r3, #28]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	021a      	lsls	r2, r3, #8
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	61da      	str	r2, [r3, #28]
      break;
 8004ea6:	e043      	b.n	8004f30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68b9      	ldr	r1, [r7, #8]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fb6c 	bl	800558c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0208 	orr.w	r2, r2, #8
 8004ec2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0204 	bic.w	r2, r2, #4
 8004ed2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004ee6:	e023      	b.n	8004f30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fbb6 	bl	8005660 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f12:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	021a      	lsls	r2, r3, #8
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004f28:	e002      	b.n	8004f30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop

08004f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a46      	ldr	r2, [pc, #280]	@ (80050c0 <TIM_Base_SetConfig+0x12c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d017      	beq.n	8004fdc <TIM_Base_SetConfig+0x48>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb2:	d013      	beq.n	8004fdc <TIM_Base_SetConfig+0x48>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a43      	ldr	r2, [pc, #268]	@ (80050c4 <TIM_Base_SetConfig+0x130>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00f      	beq.n	8004fdc <TIM_Base_SetConfig+0x48>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a42      	ldr	r2, [pc, #264]	@ (80050c8 <TIM_Base_SetConfig+0x134>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00b      	beq.n	8004fdc <TIM_Base_SetConfig+0x48>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a41      	ldr	r2, [pc, #260]	@ (80050cc <TIM_Base_SetConfig+0x138>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d007      	beq.n	8004fdc <TIM_Base_SetConfig+0x48>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a40      	ldr	r2, [pc, #256]	@ (80050d0 <TIM_Base_SetConfig+0x13c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d003      	beq.n	8004fdc <TIM_Base_SetConfig+0x48>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a3f      	ldr	r2, [pc, #252]	@ (80050d4 <TIM_Base_SetConfig+0x140>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d108      	bne.n	8004fee <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a33      	ldr	r2, [pc, #204]	@ (80050c0 <TIM_Base_SetConfig+0x12c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d023      	beq.n	800503e <TIM_Base_SetConfig+0xaa>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ffc:	d01f      	beq.n	800503e <TIM_Base_SetConfig+0xaa>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a30      	ldr	r2, [pc, #192]	@ (80050c4 <TIM_Base_SetConfig+0x130>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01b      	beq.n	800503e <TIM_Base_SetConfig+0xaa>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a2f      	ldr	r2, [pc, #188]	@ (80050c8 <TIM_Base_SetConfig+0x134>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d017      	beq.n	800503e <TIM_Base_SetConfig+0xaa>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a2e      	ldr	r2, [pc, #184]	@ (80050cc <TIM_Base_SetConfig+0x138>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <TIM_Base_SetConfig+0xaa>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a2d      	ldr	r2, [pc, #180]	@ (80050d0 <TIM_Base_SetConfig+0x13c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00f      	beq.n	800503e <TIM_Base_SetConfig+0xaa>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2d      	ldr	r2, [pc, #180]	@ (80050d8 <TIM_Base_SetConfig+0x144>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00b      	beq.n	800503e <TIM_Base_SetConfig+0xaa>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2c      	ldr	r2, [pc, #176]	@ (80050dc <TIM_Base_SetConfig+0x148>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d007      	beq.n	800503e <TIM_Base_SetConfig+0xaa>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2b      	ldr	r2, [pc, #172]	@ (80050e0 <TIM_Base_SetConfig+0x14c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d003      	beq.n	800503e <TIM_Base_SetConfig+0xaa>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a26      	ldr	r2, [pc, #152]	@ (80050d4 <TIM_Base_SetConfig+0x140>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d108      	bne.n	8005050 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a12      	ldr	r2, [pc, #72]	@ (80050c0 <TIM_Base_SetConfig+0x12c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d013      	beq.n	80050a4 <TIM_Base_SetConfig+0x110>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a14      	ldr	r2, [pc, #80]	@ (80050d0 <TIM_Base_SetConfig+0x13c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00f      	beq.n	80050a4 <TIM_Base_SetConfig+0x110>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a14      	ldr	r2, [pc, #80]	@ (80050d8 <TIM_Base_SetConfig+0x144>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00b      	beq.n	80050a4 <TIM_Base_SetConfig+0x110>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a13      	ldr	r2, [pc, #76]	@ (80050dc <TIM_Base_SetConfig+0x148>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d007      	beq.n	80050a4 <TIM_Base_SetConfig+0x110>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a12      	ldr	r2, [pc, #72]	@ (80050e0 <TIM_Base_SetConfig+0x14c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d003      	beq.n	80050a4 <TIM_Base_SetConfig+0x110>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a0d      	ldr	r2, [pc, #52]	@ (80050d4 <TIM_Base_SetConfig+0x140>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d103      	bne.n	80050ac <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	615a      	str	r2, [r3, #20]
}
 80050b2:	bf00      	nop
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40012c00 	.word	0x40012c00
 80050c4:	40000400 	.word	0x40000400
 80050c8:	40000800 	.word	0x40000800
 80050cc:	40000c00 	.word	0x40000c00
 80050d0:	40013400 	.word	0x40013400
 80050d4:	40015000 	.word	0x40015000
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40014400 	.word	0x40014400
 80050e0:	40014800 	.word	0x40014800

080050e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f023 0201 	bic.w	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0303 	bic.w	r3, r3, #3
 800511e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f023 0302 	bic.w	r3, r3, #2
 8005130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4313      	orrs	r3, r2
 800513a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a30      	ldr	r2, [pc, #192]	@ (8005200 <TIM_OC1_SetConfig+0x11c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d013      	beq.n	800516c <TIM_OC1_SetConfig+0x88>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a2f      	ldr	r2, [pc, #188]	@ (8005204 <TIM_OC1_SetConfig+0x120>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00f      	beq.n	800516c <TIM_OC1_SetConfig+0x88>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a2e      	ldr	r2, [pc, #184]	@ (8005208 <TIM_OC1_SetConfig+0x124>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00b      	beq.n	800516c <TIM_OC1_SetConfig+0x88>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a2d      	ldr	r2, [pc, #180]	@ (800520c <TIM_OC1_SetConfig+0x128>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d007      	beq.n	800516c <TIM_OC1_SetConfig+0x88>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a2c      	ldr	r2, [pc, #176]	@ (8005210 <TIM_OC1_SetConfig+0x12c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_OC1_SetConfig+0x88>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a2b      	ldr	r2, [pc, #172]	@ (8005214 <TIM_OC1_SetConfig+0x130>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d10c      	bne.n	8005186 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f023 0308 	bic.w	r3, r3, #8
 8005172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f023 0304 	bic.w	r3, r3, #4
 8005184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a1d      	ldr	r2, [pc, #116]	@ (8005200 <TIM_OC1_SetConfig+0x11c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d013      	beq.n	80051b6 <TIM_OC1_SetConfig+0xd2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1c      	ldr	r2, [pc, #112]	@ (8005204 <TIM_OC1_SetConfig+0x120>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00f      	beq.n	80051b6 <TIM_OC1_SetConfig+0xd2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1b      	ldr	r2, [pc, #108]	@ (8005208 <TIM_OC1_SetConfig+0x124>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00b      	beq.n	80051b6 <TIM_OC1_SetConfig+0xd2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a1a      	ldr	r2, [pc, #104]	@ (800520c <TIM_OC1_SetConfig+0x128>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d007      	beq.n	80051b6 <TIM_OC1_SetConfig+0xd2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a19      	ldr	r2, [pc, #100]	@ (8005210 <TIM_OC1_SetConfig+0x12c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_OC1_SetConfig+0xd2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a18      	ldr	r2, [pc, #96]	@ (8005214 <TIM_OC1_SetConfig+0x130>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d111      	bne.n	80051da <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	621a      	str	r2, [r3, #32]
}
 80051f4:	bf00      	nop
 80051f6:	371c      	adds	r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40013400 	.word	0x40013400
 8005208:	40014000 	.word	0x40014000
 800520c:	40014400 	.word	0x40014400
 8005210:	40014800 	.word	0x40014800
 8005214:	40015000 	.word	0x40015000

08005218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0210 	bic.w	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800524a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	021b      	lsls	r3, r3, #8
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f023 0320 	bic.w	r3, r3, #32
 8005266:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a2c      	ldr	r2, [pc, #176]	@ (8005328 <TIM_OC2_SetConfig+0x110>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d007      	beq.n	800528c <TIM_OC2_SetConfig+0x74>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a2b      	ldr	r2, [pc, #172]	@ (800532c <TIM_OC2_SetConfig+0x114>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_OC2_SetConfig+0x74>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a2a      	ldr	r2, [pc, #168]	@ (8005330 <TIM_OC2_SetConfig+0x118>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d10d      	bne.n	80052a8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005328 <TIM_OC2_SetConfig+0x110>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d013      	beq.n	80052d8 <TIM_OC2_SetConfig+0xc0>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a1e      	ldr	r2, [pc, #120]	@ (800532c <TIM_OC2_SetConfig+0x114>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00f      	beq.n	80052d8 <TIM_OC2_SetConfig+0xc0>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005334 <TIM_OC2_SetConfig+0x11c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00b      	beq.n	80052d8 <TIM_OC2_SetConfig+0xc0>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005338 <TIM_OC2_SetConfig+0x120>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d007      	beq.n	80052d8 <TIM_OC2_SetConfig+0xc0>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a1c      	ldr	r2, [pc, #112]	@ (800533c <TIM_OC2_SetConfig+0x124>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d003      	beq.n	80052d8 <TIM_OC2_SetConfig+0xc0>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a17      	ldr	r2, [pc, #92]	@ (8005330 <TIM_OC2_SetConfig+0x118>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d113      	bne.n	8005300 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	621a      	str	r2, [r3, #32]
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40012c00 	.word	0x40012c00
 800532c:	40013400 	.word	0x40013400
 8005330:	40015000 	.word	0x40015000
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400
 800533c:	40014800 	.word	0x40014800

08005340 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800536e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0303 	bic.w	r3, r3, #3
 800537a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800538c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2b      	ldr	r2, [pc, #172]	@ (800544c <TIM_OC3_SetConfig+0x10c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d007      	beq.n	80053b2 <TIM_OC3_SetConfig+0x72>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2a      	ldr	r2, [pc, #168]	@ (8005450 <TIM_OC3_SetConfig+0x110>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d003      	beq.n	80053b2 <TIM_OC3_SetConfig+0x72>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a29      	ldr	r2, [pc, #164]	@ (8005454 <TIM_OC3_SetConfig+0x114>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d10d      	bne.n	80053ce <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a1e      	ldr	r2, [pc, #120]	@ (800544c <TIM_OC3_SetConfig+0x10c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <TIM_OC3_SetConfig+0xbe>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005450 <TIM_OC3_SetConfig+0x110>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00f      	beq.n	80053fe <TIM_OC3_SetConfig+0xbe>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005458 <TIM_OC3_SetConfig+0x118>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00b      	beq.n	80053fe <TIM_OC3_SetConfig+0xbe>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a1c      	ldr	r2, [pc, #112]	@ (800545c <TIM_OC3_SetConfig+0x11c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d007      	beq.n	80053fe <TIM_OC3_SetConfig+0xbe>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005460 <TIM_OC3_SetConfig+0x120>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d003      	beq.n	80053fe <TIM_OC3_SetConfig+0xbe>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a16      	ldr	r2, [pc, #88]	@ (8005454 <TIM_OC3_SetConfig+0x114>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d113      	bne.n	8005426 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800540c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	621a      	str	r2, [r3, #32]
}
 8005440:	bf00      	nop
 8005442:	371c      	adds	r7, #28
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	40012c00 	.word	0x40012c00
 8005450:	40013400 	.word	0x40013400
 8005454:	40015000 	.word	0x40015000
 8005458:	40014000 	.word	0x40014000
 800545c:	40014400 	.word	0x40014400
 8005460:	40014800 	.word	0x40014800

08005464 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005492:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800549e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	021b      	lsls	r3, r3, #8
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	031b      	lsls	r3, r3, #12
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005574 <TIM_OC4_SetConfig+0x110>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d007      	beq.n	80054d8 <TIM_OC4_SetConfig+0x74>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005578 <TIM_OC4_SetConfig+0x114>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_OC4_SetConfig+0x74>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a2a      	ldr	r2, [pc, #168]	@ (800557c <TIM_OC4_SetConfig+0x118>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d10d      	bne.n	80054f4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80054de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	031b      	lsls	r3, r3, #12
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a1f      	ldr	r2, [pc, #124]	@ (8005574 <TIM_OC4_SetConfig+0x110>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d013      	beq.n	8005524 <TIM_OC4_SetConfig+0xc0>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005578 <TIM_OC4_SetConfig+0x114>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00f      	beq.n	8005524 <TIM_OC4_SetConfig+0xc0>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a1e      	ldr	r2, [pc, #120]	@ (8005580 <TIM_OC4_SetConfig+0x11c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00b      	beq.n	8005524 <TIM_OC4_SetConfig+0xc0>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a1d      	ldr	r2, [pc, #116]	@ (8005584 <TIM_OC4_SetConfig+0x120>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d007      	beq.n	8005524 <TIM_OC4_SetConfig+0xc0>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a1c      	ldr	r2, [pc, #112]	@ (8005588 <TIM_OC4_SetConfig+0x124>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_OC4_SetConfig+0xc0>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a17      	ldr	r2, [pc, #92]	@ (800557c <TIM_OC4_SetConfig+0x118>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d113      	bne.n	800554c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800552a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005532:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	019b      	lsls	r3, r3, #6
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	019b      	lsls	r3, r3, #6
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40012c00 	.word	0x40012c00
 8005578:	40013400 	.word	0x40013400
 800557c:	40015000 	.word	0x40015000
 8005580:	40014000 	.word	0x40014000
 8005584:	40014400 	.word	0x40014400
 8005588:	40014800 	.word	0x40014800

0800558c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80055d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	041b      	lsls	r3, r3, #16
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4313      	orrs	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a19      	ldr	r2, [pc, #100]	@ (8005648 <TIM_OC5_SetConfig+0xbc>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d013      	beq.n	800560e <TIM_OC5_SetConfig+0x82>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a18      	ldr	r2, [pc, #96]	@ (800564c <TIM_OC5_SetConfig+0xc0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00f      	beq.n	800560e <TIM_OC5_SetConfig+0x82>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a17      	ldr	r2, [pc, #92]	@ (8005650 <TIM_OC5_SetConfig+0xc4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00b      	beq.n	800560e <TIM_OC5_SetConfig+0x82>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a16      	ldr	r2, [pc, #88]	@ (8005654 <TIM_OC5_SetConfig+0xc8>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d007      	beq.n	800560e <TIM_OC5_SetConfig+0x82>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a15      	ldr	r2, [pc, #84]	@ (8005658 <TIM_OC5_SetConfig+0xcc>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d003      	beq.n	800560e <TIM_OC5_SetConfig+0x82>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a14      	ldr	r2, [pc, #80]	@ (800565c <TIM_OC5_SetConfig+0xd0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d109      	bne.n	8005622 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005614:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	021b      	lsls	r3, r3, #8
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	621a      	str	r2, [r3, #32]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40013400 	.word	0x40013400
 8005650:	40014000 	.word	0x40014000
 8005654:	40014400 	.word	0x40014400
 8005658:	40014800 	.word	0x40014800
 800565c:	40015000 	.word	0x40015000

08005660 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800568e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	021b      	lsls	r3, r3, #8
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4313      	orrs	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80056a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	051b      	lsls	r3, r3, #20
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005720 <TIM_OC6_SetConfig+0xc0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d013      	beq.n	80056e4 <TIM_OC6_SetConfig+0x84>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a19      	ldr	r2, [pc, #100]	@ (8005724 <TIM_OC6_SetConfig+0xc4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00f      	beq.n	80056e4 <TIM_OC6_SetConfig+0x84>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a18      	ldr	r2, [pc, #96]	@ (8005728 <TIM_OC6_SetConfig+0xc8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00b      	beq.n	80056e4 <TIM_OC6_SetConfig+0x84>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a17      	ldr	r2, [pc, #92]	@ (800572c <TIM_OC6_SetConfig+0xcc>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d007      	beq.n	80056e4 <TIM_OC6_SetConfig+0x84>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a16      	ldr	r2, [pc, #88]	@ (8005730 <TIM_OC6_SetConfig+0xd0>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d003      	beq.n	80056e4 <TIM_OC6_SetConfig+0x84>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a15      	ldr	r2, [pc, #84]	@ (8005734 <TIM_OC6_SetConfig+0xd4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d109      	bne.n	80056f8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	029b      	lsls	r3, r3, #10
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	621a      	str	r2, [r3, #32]
}
 8005712:	bf00      	nop
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40012c00 	.word	0x40012c00
 8005724:	40013400 	.word	0x40013400
 8005728:	40014000 	.word	0x40014000
 800572c:	40014400 	.word	0x40014400
 8005730:	40014800 	.word	0x40014800
 8005734:	40015000 	.word	0x40015000

08005738 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f023 0201 	bic.w	r2, r3, #1
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4a28      	ldr	r2, [pc, #160]	@ (8005804 <TIM_TI1_SetConfig+0xcc>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d01b      	beq.n	800579e <TIM_TI1_SetConfig+0x66>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800576c:	d017      	beq.n	800579e <TIM_TI1_SetConfig+0x66>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4a25      	ldr	r2, [pc, #148]	@ (8005808 <TIM_TI1_SetConfig+0xd0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d013      	beq.n	800579e <TIM_TI1_SetConfig+0x66>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4a24      	ldr	r2, [pc, #144]	@ (800580c <TIM_TI1_SetConfig+0xd4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00f      	beq.n	800579e <TIM_TI1_SetConfig+0x66>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4a23      	ldr	r2, [pc, #140]	@ (8005810 <TIM_TI1_SetConfig+0xd8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00b      	beq.n	800579e <TIM_TI1_SetConfig+0x66>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4a22      	ldr	r2, [pc, #136]	@ (8005814 <TIM_TI1_SetConfig+0xdc>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d007      	beq.n	800579e <TIM_TI1_SetConfig+0x66>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4a21      	ldr	r2, [pc, #132]	@ (8005818 <TIM_TI1_SetConfig+0xe0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d003      	beq.n	800579e <TIM_TI1_SetConfig+0x66>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4a20      	ldr	r2, [pc, #128]	@ (800581c <TIM_TI1_SetConfig+0xe4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d101      	bne.n	80057a2 <TIM_TI1_SetConfig+0x6a>
 800579e:	2301      	movs	r3, #1
 80057a0:	e000      	b.n	80057a4 <TIM_TI1_SetConfig+0x6c>
 80057a2:	2300      	movs	r3, #0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f023 0303 	bic.w	r3, r3, #3
 80057ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	e003      	b.n	80057c2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f043 0301 	orr.w	r3, r3, #1
 80057c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f023 030a 	bic.w	r3, r3, #10
 80057dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f003 030a 	and.w	r3, r3, #10
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	621a      	str	r2, [r3, #32]
}
 80057f6:	bf00      	nop
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40012c00 	.word	0x40012c00
 8005808:	40000400 	.word	0x40000400
 800580c:	40000800 	.word	0x40000800
 8005810:	40000c00 	.word	0x40000c00
 8005814:	40013400 	.word	0x40013400
 8005818:	40014000 	.word	0x40014000
 800581c:	40015000 	.word	0x40015000

08005820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	2201      	movs	r2, #1
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a1a      	ldr	r2, [r3, #32]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	43db      	mvns	r3, r3
 8005842:	401a      	ands	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a1a      	ldr	r2, [r3, #32]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	fa01 f303 	lsl.w	r3, r1, r3
 8005858:	431a      	orrs	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b08a      	sub	sp, #40	@ 0x28
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e0a0      	b.n	80059c0 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fb fc5c 	bl	8001150 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f7ff fb72 	bl	8004f94 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	6819      	ldr	r1, [r3, #0]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2203      	movs	r2, #3
 80058be:	f7ff ff3b 	bl	8005738 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699a      	ldr	r2, [r3, #24]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 020c 	bic.w	r2, r2, #12
 80058d0:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6999      	ldr	r1, [r3, #24]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80058f2:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005906:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005916:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6812      	ldr	r2, [r2, #0]
 8005922:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005926:	f023 0307 	bic.w	r3, r3, #7
 800592a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0204 	orr.w	r2, r2, #4
 800593a:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800593c:	2300      	movs	r3, #0
 800593e:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005940:	2300      	movs	r3, #0
 8005942:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005944:	2370      	movs	r3, #112	@ 0x70
 8005946:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005948:	2300      	movs	r3, #0
 800594a:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800594c:	2300      	movs	r3, #0
 800594e:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005950:	2300      	movs	r3, #0
 8005952:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f107 020c 	add.w	r2, r7, #12
 8005962:	4611      	mov	r1, r2
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff fc57 	bl	8005218 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6812      	ldr	r2, [r2, #0]
 8005974:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800597c:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 800598c:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3728      	adds	r7, #40	@ 0x28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <HAL_TIMEx_PWMN_Start+0x24>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	bf14      	ite	ne
 80059e4:	2301      	movne	r3, #1
 80059e6:	2300      	moveq	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	e022      	b.n	8005a32 <HAL_TIMEx_PWMN_Start+0x6a>
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d109      	bne.n	8005a06 <HAL_TIMEx_PWMN_Start+0x3e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	bf14      	ite	ne
 80059fe:	2301      	movne	r3, #1
 8005a00:	2300      	moveq	r3, #0
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	e015      	b.n	8005a32 <HAL_TIMEx_PWMN_Start+0x6a>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d109      	bne.n	8005a20 <HAL_TIMEx_PWMN_Start+0x58>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	bf14      	ite	ne
 8005a18:	2301      	movne	r3, #1
 8005a1a:	2300      	moveq	r3, #0
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	e008      	b.n	8005a32 <HAL_TIMEx_PWMN_Start+0x6a>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	bf14      	ite	ne
 8005a2c:	2301      	movne	r3, #1
 8005a2e:	2300      	moveq	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e073      	b.n	8005b22 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d104      	bne.n	8005a4a <HAL_TIMEx_PWMN_Start+0x82>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a48:	e013      	b.n	8005a72 <HAL_TIMEx_PWMN_Start+0xaa>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d104      	bne.n	8005a5a <HAL_TIMEx_PWMN_Start+0x92>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a58:	e00b      	b.n	8005a72 <HAL_TIMEx_PWMN_Start+0xaa>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d104      	bne.n	8005a6a <HAL_TIMEx_PWMN_Start+0xa2>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a68:	e003      	b.n	8005a72 <HAL_TIMEx_PWMN_Start+0xaa>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2204      	movs	r2, #4
 8005a78:	6839      	ldr	r1, [r7, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fa52 	bl	8005f24 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a8e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a25      	ldr	r2, [pc, #148]	@ (8005b2c <HAL_TIMEx_PWMN_Start+0x164>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d022      	beq.n	8005ae0 <HAL_TIMEx_PWMN_Start+0x118>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa2:	d01d      	beq.n	8005ae0 <HAL_TIMEx_PWMN_Start+0x118>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a21      	ldr	r2, [pc, #132]	@ (8005b30 <HAL_TIMEx_PWMN_Start+0x168>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d018      	beq.n	8005ae0 <HAL_TIMEx_PWMN_Start+0x118>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a20      	ldr	r2, [pc, #128]	@ (8005b34 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d013      	beq.n	8005ae0 <HAL_TIMEx_PWMN_Start+0x118>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a1e      	ldr	r2, [pc, #120]	@ (8005b38 <HAL_TIMEx_PWMN_Start+0x170>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00e      	beq.n	8005ae0 <HAL_TIMEx_PWMN_Start+0x118>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8005b3c <HAL_TIMEx_PWMN_Start+0x174>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d009      	beq.n	8005ae0 <HAL_TIMEx_PWMN_Start+0x118>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b40 <HAL_TIMEx_PWMN_Start+0x178>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <HAL_TIMEx_PWMN_Start+0x118>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a1a      	ldr	r2, [pc, #104]	@ (8005b44 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d115      	bne.n	8005b0c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	4b18      	ldr	r3, [pc, #96]	@ (8005b48 <HAL_TIMEx_PWMN_Start+0x180>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b06      	cmp	r3, #6
 8005af0:	d015      	beq.n	8005b1e <HAL_TIMEx_PWMN_Start+0x156>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005af8:	d011      	beq.n	8005b1e <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0201 	orr.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0a:	e008      	b.n	8005b1e <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e000      	b.n	8005b20 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40012c00 	.word	0x40012c00
 8005b30:	40000400 	.word	0x40000400
 8005b34:	40000800 	.word	0x40000800
 8005b38:	40000c00 	.word	0x40000c00
 8005b3c:	40013400 	.word	0x40013400
 8005b40:	40014000 	.word	0x40014000
 8005b44:	40015000 	.word	0x40015000
 8005b48:	00010007 	.word	0x00010007

08005b4c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 f9e0 	bl	8005f24 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6a1a      	ldr	r2, [r3, #32]
 8005b6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10f      	bne.n	8005b94 <HAL_TIMEx_PWMN_Stop+0x48>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6a1a      	ldr	r2, [r3, #32]
 8005b7a:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005b7e:	4013      	ands	r3, r2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d107      	bne.n	8005b94 <HAL_TIMEx_PWMN_Stop+0x48>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6a1a      	ldr	r2, [r3, #32]
 8005b9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10f      	bne.n	8005bc4 <HAL_TIMEx_PWMN_Stop+0x78>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6a1a      	ldr	r2, [r3, #32]
 8005baa:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005bae:	4013      	ands	r3, r2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d107      	bne.n	8005bc4 <HAL_TIMEx_PWMN_Stop+0x78>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0201 	bic.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d104      	bne.n	8005bd4 <HAL_TIMEx_PWMN_Stop+0x88>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bd2:	e013      	b.n	8005bfc <HAL_TIMEx_PWMN_Stop+0xb0>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d104      	bne.n	8005be4 <HAL_TIMEx_PWMN_Stop+0x98>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005be2:	e00b      	b.n	8005bfc <HAL_TIMEx_PWMN_Stop+0xb0>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d104      	bne.n	8005bf4 <HAL_TIMEx_PWMN_Stop+0xa8>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005bf2:	e003      	b.n	8005bfc <HAL_TIMEx_PWMN_Stop+0xb0>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e074      	b.n	8005d0a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a34      	ldr	r2, [pc, #208]	@ (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d009      	beq.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a33      	ldr	r2, [pc, #204]	@ (8005d1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d004      	beq.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a31      	ldr	r2, [pc, #196]	@ (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d108      	bne.n	8005c70 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a21      	ldr	r2, [pc, #132]	@ (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d022      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ca0:	d01d      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d018      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d013      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1c      	ldr	r2, [pc, #112]	@ (8005d2c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00e      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a15      	ldr	r2, [pc, #84]	@ (8005d1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d009      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a18      	ldr	r2, [pc, #96]	@ (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d004      	beq.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a11      	ldr	r2, [pc, #68]	@ (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d10c      	bne.n	8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40013400 	.word	0x40013400
 8005d20:	40015000 	.word	0x40015000
 8005d24:	40000400 	.word	0x40000400
 8005d28:	40000800 	.word	0x40000800
 8005d2c:	40000c00 	.word	0x40000c00
 8005d30:	40014000 	.word	0x40014000

08005d34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d101      	bne.n	8005d50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e096      	b.n	8005e7e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	041b      	lsls	r3, r3, #16
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a2f      	ldr	r2, [pc, #188]	@ (8005e8c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d009      	beq.n	8005de8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a2d      	ldr	r2, [pc, #180]	@ (8005e90 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d004      	beq.n	8005de8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a2c      	ldr	r2, [pc, #176]	@ (8005e94 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d106      	bne.n	8005df6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a24      	ldr	r2, [pc, #144]	@ (8005e8c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d009      	beq.n	8005e14 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a22      	ldr	r2, [pc, #136]	@ (8005e90 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d004      	beq.n	8005e14 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a21      	ldr	r2, [pc, #132]	@ (8005e94 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d12b      	bne.n	8005e6c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1e:	051b      	lsls	r3, r3, #20
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a11      	ldr	r2, [pc, #68]	@ (8005e8c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d009      	beq.n	8005e5e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a10      	ldr	r2, [pc, #64]	@ (8005e90 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d004      	beq.n	8005e5e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a0e      	ldr	r2, [pc, #56]	@ (8005e94 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d106      	bne.n	8005e6c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40012c00 	.word	0x40012c00
 8005e90:	40013400 	.word	0x40013400
 8005e94:	40015000 	.word	0x40015000

08005e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f003 031f 	and.w	r3, r3, #31
 8005f36:	2204      	movs	r2, #4
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6a1a      	ldr	r2, [r3, #32]
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	43db      	mvns	r3, r3
 8005f46:	401a      	ands	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a1a      	ldr	r2, [r3, #32]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 031f 	and.w	r3, r3, #31
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	fa01 f303 	lsl.w	r3, r1, r3
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	621a      	str	r2, [r3, #32]
}
 8005f62:	bf00      	nop
 8005f64:	371c      	adds	r7, #28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b082      	sub	sp, #8
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e042      	b.n	8006006 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fb fa3e 	bl	8001414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2224      	movs	r2, #36	@ 0x24
 8005f9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0201 	bic.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fc51 	bl	8006858 <UART_SetConfig>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e022      	b.n	8006006 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 ff41 	bl	8006e50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fdc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 0201 	orr.w	r2, r2, #1
 8005ffc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 ffc8 	bl	8006f94 <UART_CheckIdleState>
 8006004:	4603      	mov	r3, r0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b08a      	sub	sp, #40	@ 0x28
 8006012:	af02      	add	r7, sp, #8
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	603b      	str	r3, [r7, #0]
 800601a:	4613      	mov	r3, r2
 800601c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006024:	2b20      	cmp	r3, #32
 8006026:	f040 8083 	bne.w	8006130 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <HAL_UART_Transmit+0x28>
 8006030:	88fb      	ldrh	r3, [r7, #6]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e07b      	b.n	8006132 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_UART_Transmit+0x3a>
 8006044:	2302      	movs	r3, #2
 8006046:	e074      	b.n	8006132 <HAL_UART_Transmit+0x124>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2221      	movs	r2, #33	@ 0x21
 800605c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006060:	f7fb fcfe 	bl	8001a60 <HAL_GetTick>
 8006064:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	88fa      	ldrh	r2, [r7, #6]
 800606a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	88fa      	ldrh	r2, [r7, #6]
 8006072:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800607e:	d108      	bne.n	8006092 <HAL_UART_Transmit+0x84>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d104      	bne.n	8006092 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006088:	2300      	movs	r3, #0
 800608a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	61bb      	str	r3, [r7, #24]
 8006090:	e003      	b.n	800609a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006096:	2300      	movs	r3, #0
 8006098:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 80060a2:	e02c      	b.n	80060fe <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2200      	movs	r2, #0
 80060ac:	2180      	movs	r1, #128	@ 0x80
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 ffbb 	bl	800702a <UART_WaitOnFlagUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e039      	b.n	8006132 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10b      	bne.n	80060dc <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	3302      	adds	r3, #2
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	e007      	b.n	80060ec <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	781a      	ldrb	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	3301      	adds	r3, #1
 80060ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1cc      	bne.n	80060a4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2200      	movs	r2, #0
 8006112:	2140      	movs	r1, #64	@ 0x40
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 ff88 	bl	800702a <UART_WaitOnFlagUntilTimeout>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e006      	b.n	8006132 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2220      	movs	r2, #32
 8006128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 800612c:	2300      	movs	r3, #0
 800612e:	e000      	b.n	8006132 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006130:	2302      	movs	r3, #2
  }
}
 8006132:	4618      	mov	r0, r3
 8006134:	3720      	adds	r7, #32
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08a      	sub	sp, #40	@ 0x28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006150:	2b20      	cmp	r3, #32
 8006152:	d142      	bne.n	80061da <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <HAL_UART_Receive_IT+0x24>
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e03b      	b.n	80061dc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800616a:	2b01      	cmp	r3, #1
 800616c:	d101      	bne.n	8006172 <HAL_UART_Receive_IT+0x36>
 800616e:	2302      	movs	r3, #2
 8006170:	e034      	b.n	80061dc <HAL_UART_Receive_IT+0xa0>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a17      	ldr	r2, [pc, #92]	@ (80061e4 <HAL_UART_Receive_IT+0xa8>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d01f      	beq.n	80061ca <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d018      	beq.n	80061ca <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	613b      	str	r3, [r7, #16]
   return(result);
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	623b      	str	r3, [r7, #32]
 80061b8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	69f9      	ldr	r1, [r7, #28]
 80061bc:	6a3a      	ldr	r2, [r7, #32]
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e6      	bne.n	8006198 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061ca:	88fb      	ldrh	r3, [r7, #6]
 80061cc:	461a      	mov	r2, r3
 80061ce:	68b9      	ldr	r1, [r7, #8]
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 fff3 	bl	80071bc <UART_Start_Receive_IT>
 80061d6:	4603      	mov	r3, r0
 80061d8:	e000      	b.n	80061dc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80061da:	2302      	movs	r3, #2
  }
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3728      	adds	r7, #40	@ 0x28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40008000 	.word	0x40008000

080061e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b0ba      	sub	sp, #232	@ 0xe8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800620e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006212:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006216:	4013      	ands	r3, r2
 8006218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800621c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006220:	2b00      	cmp	r3, #0
 8006222:	d11b      	bne.n	800625c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006228:	f003 0320 	and.w	r3, r3, #32
 800622c:	2b00      	cmp	r3, #0
 800622e:	d015      	beq.n	800625c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006234:	f003 0320 	and.w	r3, r3, #32
 8006238:	2b00      	cmp	r3, #0
 800623a:	d105      	bne.n	8006248 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800623c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d009      	beq.n	800625c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 82d6 	beq.w	80067fe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	4798      	blx	r3
      }
      return;
 800625a:	e2d0      	b.n	80067fe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800625c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 811f 	beq.w	80064a4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006266:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800626a:	4b8b      	ldr	r3, [pc, #556]	@ (8006498 <HAL_UART_IRQHandler+0x2b0>)
 800626c:	4013      	ands	r3, r2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006272:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006276:	4b89      	ldr	r3, [pc, #548]	@ (800649c <HAL_UART_IRQHandler+0x2b4>)
 8006278:	4013      	ands	r3, r2
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 8112 	beq.w	80064a4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d011      	beq.n	80062b0 <HAL_UART_IRQHandler+0xc8>
 800628c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00b      	beq.n	80062b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2201      	movs	r2, #1
 800629e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062a6:	f043 0201 	orr.w	r2, r3, #1
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d011      	beq.n	80062e0 <HAL_UART_IRQHandler+0xf8>
 80062bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00b      	beq.n	80062e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2202      	movs	r2, #2
 80062ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062d6:	f043 0204 	orr.w	r2, r3, #4
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d011      	beq.n	8006310 <HAL_UART_IRQHandler+0x128>
 80062ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00b      	beq.n	8006310 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2204      	movs	r2, #4
 80062fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006306:	f043 0202 	orr.w	r2, r3, #2
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006314:	f003 0308 	and.w	r3, r3, #8
 8006318:	2b00      	cmp	r3, #0
 800631a:	d017      	beq.n	800634c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800631c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006320:	f003 0320 	and.w	r3, r3, #32
 8006324:	2b00      	cmp	r3, #0
 8006326:	d105      	bne.n	8006334 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006328:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800632c:	4b5a      	ldr	r3, [pc, #360]	@ (8006498 <HAL_UART_IRQHandler+0x2b0>)
 800632e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00b      	beq.n	800634c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2208      	movs	r2, #8
 800633a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006342:	f043 0208 	orr.w	r2, r3, #8
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800634c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006350:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006354:	2b00      	cmp	r3, #0
 8006356:	d012      	beq.n	800637e <HAL_UART_IRQHandler+0x196>
 8006358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800635c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00c      	beq.n	800637e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800636c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006374:	f043 0220 	orr.w	r2, r3, #32
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 823c 	beq.w	8006802 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800638a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d013      	beq.n	80063be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800639a:	f003 0320 	and.w	r3, r3, #32
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d105      	bne.n	80063ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d007      	beq.n	80063be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80063c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d2:	2b40      	cmp	r3, #64	@ 0x40
 80063d4:	d005      	beq.n	80063e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d04f      	beq.n	8006482 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 f814 	bl	8007410 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f2:	2b40      	cmp	r3, #64	@ 0x40
 80063f4:	d141      	bne.n	800647a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3308      	adds	r3, #8
 80063fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006404:	e853 3f00 	ldrex	r3, [r3]
 8006408:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800640c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006410:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006414:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3308      	adds	r3, #8
 800641e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006422:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006426:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800642e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800643a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1d9      	bne.n	80063f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006446:	2b00      	cmp	r3, #0
 8006448:	d013      	beq.n	8006472 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800644e:	4a14      	ldr	r2, [pc, #80]	@ (80064a0 <HAL_UART_IRQHandler+0x2b8>)
 8006450:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006456:	4618      	mov	r0, r3
 8006458:	f7fc fd73 	bl	8002f42 <HAL_DMA_Abort_IT>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d017      	beq.n	8006492 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 800646c:	4610      	mov	r0, r2
 800646e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006470:	e00f      	b.n	8006492 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f9da 	bl	800682c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006478:	e00b      	b.n	8006492 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f9d6 	bl	800682c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006480:	e007      	b.n	8006492 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f9d2 	bl	800682c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8006490:	e1b7      	b.n	8006802 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006492:	bf00      	nop
    return;
 8006494:	e1b5      	b.n	8006802 <HAL_UART_IRQHandler+0x61a>
 8006496:	bf00      	nop
 8006498:	10000001 	.word	0x10000001
 800649c:	04000120 	.word	0x04000120
 80064a0:	080074dd 	.word	0x080074dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	f040 814a 	bne.w	8006742 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064b2:	f003 0310 	and.w	r3, r3, #16
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 8143 	beq.w	8006742 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064c0:	f003 0310 	and.w	r3, r3, #16
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 813c 	beq.w	8006742 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2210      	movs	r2, #16
 80064d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064dc:	2b40      	cmp	r3, #64	@ 0x40
 80064de:	f040 80b5 	bne.w	800664c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 8187 	beq.w	8006806 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006502:	429a      	cmp	r2, r3
 8006504:	f080 817f 	bcs.w	8006806 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800650e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0320 	and.w	r3, r3, #32
 800651e:	2b00      	cmp	r3, #0
 8006520:	f040 8086 	bne.w	8006630 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006538:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800653c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006540:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	461a      	mov	r2, r3
 800654a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800654e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006552:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800655a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006566:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1da      	bne.n	8006524 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3308      	adds	r3, #8
 8006574:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800657e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006580:	f023 0301 	bic.w	r3, r3, #1
 8006584:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3308      	adds	r3, #8
 800658e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006592:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006596:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800659a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800659e:	e841 2300 	strex	r3, r2, [r1]
 80065a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80065a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1e1      	bne.n	800656e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3308      	adds	r3, #8
 80065b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065b4:	e853 3f00 	ldrex	r3, [r3]
 80065b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80065ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3308      	adds	r3, #8
 80065ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80065d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80065d6:	e841 2300 	strex	r3, r2, [r1]
 80065da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80065dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1e3      	bne.n	80065aa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006600:	f023 0310 	bic.w	r3, r3, #16
 8006604:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006612:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006614:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006618:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e4      	bne.n	80065f0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800662a:	4618      	mov	r0, r3
 800662c:	f7fc fc30 	bl	8002e90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800663c:	b29b      	uxth	r3, r3
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	b29b      	uxth	r3, r3
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f8fb 	bl	8006840 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800664a:	e0dc      	b.n	8006806 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006658:	b29b      	uxth	r3, r3
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006666:	b29b      	uxth	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 80ce 	beq.w	800680a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800666e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 80c9 	beq.w	800680a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800668c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800669a:	647b      	str	r3, [r7, #68]	@ 0x44
 800669c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e4      	bne.n	8006678 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3308      	adds	r3, #8
 80066b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	623b      	str	r3, [r7, #32]
   return(result);
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066c4:	f023 0301 	bic.w	r3, r3, #1
 80066c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3308      	adds	r3, #8
 80066d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80066d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e1      	bne.n	80066ae <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	60fb      	str	r3, [r7, #12]
   return(result);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 0310 	bic.w	r3, r3, #16
 8006712:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006720:	61fb      	str	r3, [r7, #28]
 8006722:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	69b9      	ldr	r1, [r7, #24]
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	617b      	str	r3, [r7, #20]
   return(result);
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e4      	bne.n	80066fe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006734:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006738:	4619      	mov	r1, r3
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f880 	bl	8006840 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006740:	e063      	b.n	800680a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006746:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00e      	beq.n	800676c <HAL_UART_IRQHandler+0x584>
 800674e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d008      	beq.n	800676c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006762:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f001 fb57 	bl	8007e18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800676a:	e051      	b.n	8006810 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800676c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006774:	2b00      	cmp	r3, #0
 8006776:	d014      	beq.n	80067a2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800677c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006780:	2b00      	cmp	r3, #0
 8006782:	d105      	bne.n	8006790 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006788:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d008      	beq.n	80067a2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006794:	2b00      	cmp	r3, #0
 8006796:	d03a      	beq.n	800680e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
    }
    return;
 80067a0:	e035      	b.n	800680e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d009      	beq.n	80067c2 <HAL_UART_IRQHandler+0x5da>
 80067ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fea4 	bl	8007508 <UART_EndTransmit_IT>
    return;
 80067c0:	e026      	b.n	8006810 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80067c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d009      	beq.n	80067e2 <HAL_UART_IRQHandler+0x5fa>
 80067ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 fb30 	bl	8007e40 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067e0:	e016      	b.n	8006810 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80067e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d010      	beq.n	8006810 <HAL_UART_IRQHandler+0x628>
 80067ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	da0c      	bge.n	8006810 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f001 fb18 	bl	8007e2c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067fc:	e008      	b.n	8006810 <HAL_UART_IRQHandler+0x628>
      return;
 80067fe:	bf00      	nop
 8006800:	e006      	b.n	8006810 <HAL_UART_IRQHandler+0x628>
    return;
 8006802:	bf00      	nop
 8006804:	e004      	b.n	8006810 <HAL_UART_IRQHandler+0x628>
      return;
 8006806:	bf00      	nop
 8006808:	e002      	b.n	8006810 <HAL_UART_IRQHandler+0x628>
      return;
 800680a:	bf00      	nop
 800680c:	e000      	b.n	8006810 <HAL_UART_IRQHandler+0x628>
    return;
 800680e:	bf00      	nop
  }
}
 8006810:	37e8      	adds	r7, #232	@ 0xe8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop

08006818 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	460b      	mov	r3, r1
 800684a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800685c:	b08c      	sub	sp, #48	@ 0x30
 800685e:	af00      	add	r7, sp, #0
 8006860:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	431a      	orrs	r2, r3
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	431a      	orrs	r2, r3
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	4313      	orrs	r3, r2
 800687e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	4baa      	ldr	r3, [pc, #680]	@ (8006b30 <UART_SetConfig+0x2d8>)
 8006888:	4013      	ands	r3, r2
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	6812      	ldr	r2, [r2, #0]
 800688e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006890:	430b      	orrs	r3, r1
 8006892:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a9f      	ldr	r2, [pc, #636]	@ (8006b34 <UART_SetConfig+0x2dc>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d004      	beq.n	80068c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068c0:	4313      	orrs	r3, r2
 80068c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80068ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	6812      	ldr	r2, [r2, #0]
 80068d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068d8:	430b      	orrs	r3, r1
 80068da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e2:	f023 010f 	bic.w	r1, r3, #15
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a90      	ldr	r2, [pc, #576]	@ (8006b38 <UART_SetConfig+0x2e0>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d125      	bne.n	8006948 <UART_SetConfig+0xf0>
 80068fc:	4b8f      	ldr	r3, [pc, #572]	@ (8006b3c <UART_SetConfig+0x2e4>)
 80068fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	2b03      	cmp	r3, #3
 8006908:	d81a      	bhi.n	8006940 <UART_SetConfig+0xe8>
 800690a:	a201      	add	r2, pc, #4	@ (adr r2, 8006910 <UART_SetConfig+0xb8>)
 800690c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006910:	08006921 	.word	0x08006921
 8006914:	08006931 	.word	0x08006931
 8006918:	08006929 	.word	0x08006929
 800691c:	08006939 	.word	0x08006939
 8006920:	2301      	movs	r3, #1
 8006922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006926:	e116      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006928:	2302      	movs	r3, #2
 800692a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800692e:	e112      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006930:	2304      	movs	r3, #4
 8006932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006936:	e10e      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006938:	2308      	movs	r3, #8
 800693a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800693e:	e10a      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006940:	2310      	movs	r3, #16
 8006942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006946:	e106      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a7c      	ldr	r2, [pc, #496]	@ (8006b40 <UART_SetConfig+0x2e8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d138      	bne.n	80069c4 <UART_SetConfig+0x16c>
 8006952:	4b7a      	ldr	r3, [pc, #488]	@ (8006b3c <UART_SetConfig+0x2e4>)
 8006954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006958:	f003 030c 	and.w	r3, r3, #12
 800695c:	2b0c      	cmp	r3, #12
 800695e:	d82d      	bhi.n	80069bc <UART_SetConfig+0x164>
 8006960:	a201      	add	r2, pc, #4	@ (adr r2, 8006968 <UART_SetConfig+0x110>)
 8006962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006966:	bf00      	nop
 8006968:	0800699d 	.word	0x0800699d
 800696c:	080069bd 	.word	0x080069bd
 8006970:	080069bd 	.word	0x080069bd
 8006974:	080069bd 	.word	0x080069bd
 8006978:	080069ad 	.word	0x080069ad
 800697c:	080069bd 	.word	0x080069bd
 8006980:	080069bd 	.word	0x080069bd
 8006984:	080069bd 	.word	0x080069bd
 8006988:	080069a5 	.word	0x080069a5
 800698c:	080069bd 	.word	0x080069bd
 8006990:	080069bd 	.word	0x080069bd
 8006994:	080069bd 	.word	0x080069bd
 8006998:	080069b5 	.word	0x080069b5
 800699c:	2300      	movs	r3, #0
 800699e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069a2:	e0d8      	b.n	8006b56 <UART_SetConfig+0x2fe>
 80069a4:	2302      	movs	r3, #2
 80069a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069aa:	e0d4      	b.n	8006b56 <UART_SetConfig+0x2fe>
 80069ac:	2304      	movs	r3, #4
 80069ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069b2:	e0d0      	b.n	8006b56 <UART_SetConfig+0x2fe>
 80069b4:	2308      	movs	r3, #8
 80069b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ba:	e0cc      	b.n	8006b56 <UART_SetConfig+0x2fe>
 80069bc:	2310      	movs	r3, #16
 80069be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069c2:	e0c8      	b.n	8006b56 <UART_SetConfig+0x2fe>
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a5e      	ldr	r2, [pc, #376]	@ (8006b44 <UART_SetConfig+0x2ec>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d125      	bne.n	8006a1a <UART_SetConfig+0x1c2>
 80069ce:	4b5b      	ldr	r3, [pc, #364]	@ (8006b3c <UART_SetConfig+0x2e4>)
 80069d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80069d8:	2b30      	cmp	r3, #48	@ 0x30
 80069da:	d016      	beq.n	8006a0a <UART_SetConfig+0x1b2>
 80069dc:	2b30      	cmp	r3, #48	@ 0x30
 80069de:	d818      	bhi.n	8006a12 <UART_SetConfig+0x1ba>
 80069e0:	2b20      	cmp	r3, #32
 80069e2:	d00a      	beq.n	80069fa <UART_SetConfig+0x1a2>
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d814      	bhi.n	8006a12 <UART_SetConfig+0x1ba>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d002      	beq.n	80069f2 <UART_SetConfig+0x19a>
 80069ec:	2b10      	cmp	r3, #16
 80069ee:	d008      	beq.n	8006a02 <UART_SetConfig+0x1aa>
 80069f0:	e00f      	b.n	8006a12 <UART_SetConfig+0x1ba>
 80069f2:	2300      	movs	r3, #0
 80069f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f8:	e0ad      	b.n	8006b56 <UART_SetConfig+0x2fe>
 80069fa:	2302      	movs	r3, #2
 80069fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a00:	e0a9      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006a02:	2304      	movs	r3, #4
 8006a04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a08:	e0a5      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006a0a:	2308      	movs	r3, #8
 8006a0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a10:	e0a1      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006a12:	2310      	movs	r3, #16
 8006a14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a18:	e09d      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a4a      	ldr	r2, [pc, #296]	@ (8006b48 <UART_SetConfig+0x2f0>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d125      	bne.n	8006a70 <UART_SetConfig+0x218>
 8006a24:	4b45      	ldr	r3, [pc, #276]	@ (8006b3c <UART_SetConfig+0x2e4>)
 8006a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a30:	d016      	beq.n	8006a60 <UART_SetConfig+0x208>
 8006a32:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a34:	d818      	bhi.n	8006a68 <UART_SetConfig+0x210>
 8006a36:	2b80      	cmp	r3, #128	@ 0x80
 8006a38:	d00a      	beq.n	8006a50 <UART_SetConfig+0x1f8>
 8006a3a:	2b80      	cmp	r3, #128	@ 0x80
 8006a3c:	d814      	bhi.n	8006a68 <UART_SetConfig+0x210>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d002      	beq.n	8006a48 <UART_SetConfig+0x1f0>
 8006a42:	2b40      	cmp	r3, #64	@ 0x40
 8006a44:	d008      	beq.n	8006a58 <UART_SetConfig+0x200>
 8006a46:	e00f      	b.n	8006a68 <UART_SetConfig+0x210>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4e:	e082      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006a50:	2302      	movs	r3, #2
 8006a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a56:	e07e      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006a58:	2304      	movs	r3, #4
 8006a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5e:	e07a      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006a60:	2308      	movs	r3, #8
 8006a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a66:	e076      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006a68:	2310      	movs	r3, #16
 8006a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a6e:	e072      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a35      	ldr	r2, [pc, #212]	@ (8006b4c <UART_SetConfig+0x2f4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d12a      	bne.n	8006ad0 <UART_SetConfig+0x278>
 8006a7a:	4b30      	ldr	r3, [pc, #192]	@ (8006b3c <UART_SetConfig+0x2e4>)
 8006a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a88:	d01a      	beq.n	8006ac0 <UART_SetConfig+0x268>
 8006a8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a8e:	d81b      	bhi.n	8006ac8 <UART_SetConfig+0x270>
 8006a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a94:	d00c      	beq.n	8006ab0 <UART_SetConfig+0x258>
 8006a96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a9a:	d815      	bhi.n	8006ac8 <UART_SetConfig+0x270>
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <UART_SetConfig+0x250>
 8006aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aa4:	d008      	beq.n	8006ab8 <UART_SetConfig+0x260>
 8006aa6:	e00f      	b.n	8006ac8 <UART_SetConfig+0x270>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aae:	e052      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab6:	e04e      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006ab8:	2304      	movs	r3, #4
 8006aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006abe:	e04a      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006ac0:	2308      	movs	r3, #8
 8006ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac6:	e046      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006ac8:	2310      	movs	r3, #16
 8006aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ace:	e042      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a17      	ldr	r2, [pc, #92]	@ (8006b34 <UART_SetConfig+0x2dc>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d13a      	bne.n	8006b50 <UART_SetConfig+0x2f8>
 8006ada:	4b18      	ldr	r3, [pc, #96]	@ (8006b3c <UART_SetConfig+0x2e4>)
 8006adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006ae4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ae8:	d01a      	beq.n	8006b20 <UART_SetConfig+0x2c8>
 8006aea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006aee:	d81b      	bhi.n	8006b28 <UART_SetConfig+0x2d0>
 8006af0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006af4:	d00c      	beq.n	8006b10 <UART_SetConfig+0x2b8>
 8006af6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006afa:	d815      	bhi.n	8006b28 <UART_SetConfig+0x2d0>
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d003      	beq.n	8006b08 <UART_SetConfig+0x2b0>
 8006b00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b04:	d008      	beq.n	8006b18 <UART_SetConfig+0x2c0>
 8006b06:	e00f      	b.n	8006b28 <UART_SetConfig+0x2d0>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b0e:	e022      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006b10:	2302      	movs	r3, #2
 8006b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b16:	e01e      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006b18:	2304      	movs	r3, #4
 8006b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b1e:	e01a      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006b20:	2308      	movs	r3, #8
 8006b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b26:	e016      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006b28:	2310      	movs	r3, #16
 8006b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b2e:	e012      	b.n	8006b56 <UART_SetConfig+0x2fe>
 8006b30:	cfff69f3 	.word	0xcfff69f3
 8006b34:	40008000 	.word	0x40008000
 8006b38:	40013800 	.word	0x40013800
 8006b3c:	40021000 	.word	0x40021000
 8006b40:	40004400 	.word	0x40004400
 8006b44:	40004800 	.word	0x40004800
 8006b48:	40004c00 	.word	0x40004c00
 8006b4c:	40005000 	.word	0x40005000
 8006b50:	2310      	movs	r3, #16
 8006b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4aae      	ldr	r2, [pc, #696]	@ (8006e14 <UART_SetConfig+0x5bc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	f040 8097 	bne.w	8006c90 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	d823      	bhi.n	8006bb2 <UART_SetConfig+0x35a>
 8006b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b70 <UART_SetConfig+0x318>)
 8006b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b70:	08006b95 	.word	0x08006b95
 8006b74:	08006bb3 	.word	0x08006bb3
 8006b78:	08006b9d 	.word	0x08006b9d
 8006b7c:	08006bb3 	.word	0x08006bb3
 8006b80:	08006ba3 	.word	0x08006ba3
 8006b84:	08006bb3 	.word	0x08006bb3
 8006b88:	08006bb3 	.word	0x08006bb3
 8006b8c:	08006bb3 	.word	0x08006bb3
 8006b90:	08006bab 	.word	0x08006bab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b94:	f7fd f970 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 8006b98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b9a:	e010      	b.n	8006bbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b9c:	4b9e      	ldr	r3, [pc, #632]	@ (8006e18 <UART_SetConfig+0x5c0>)
 8006b9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ba0:	e00d      	b.n	8006bbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ba2:	f7fd f8fb 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8006ba6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ba8:	e009      	b.n	8006bbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006baa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bb0:	e005      	b.n	8006bbe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006bbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 8130 	beq.w	8006e26 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bca:	4a94      	ldr	r2, [pc, #592]	@ (8006e1c <UART_SetConfig+0x5c4>)
 8006bcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bd8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	4613      	mov	r3, r2
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	4413      	add	r3, r2
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d305      	bcc.n	8006bf6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d903      	bls.n	8006bfe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006bfc:	e113      	b.n	8006e26 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c00:	2200      	movs	r2, #0
 8006c02:	60bb      	str	r3, [r7, #8]
 8006c04:	60fa      	str	r2, [r7, #12]
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0a:	4a84      	ldr	r2, [pc, #528]	@ (8006e1c <UART_SetConfig+0x5c4>)
 8006c0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2200      	movs	r2, #0
 8006c14:	603b      	str	r3, [r7, #0]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c20:	f7f9 fb66 	bl	80002f0 <__aeabi_uldivmod>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	4610      	mov	r0, r2
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	f04f 0200 	mov.w	r2, #0
 8006c30:	f04f 0300 	mov.w	r3, #0
 8006c34:	020b      	lsls	r3, r1, #8
 8006c36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c3a:	0202      	lsls	r2, r0, #8
 8006c3c:	6979      	ldr	r1, [r7, #20]
 8006c3e:	6849      	ldr	r1, [r1, #4]
 8006c40:	0849      	lsrs	r1, r1, #1
 8006c42:	2000      	movs	r0, #0
 8006c44:	460c      	mov	r4, r1
 8006c46:	4605      	mov	r5, r0
 8006c48:	eb12 0804 	adds.w	r8, r2, r4
 8006c4c:	eb43 0905 	adc.w	r9, r3, r5
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	469a      	mov	sl, r3
 8006c58:	4693      	mov	fp, r2
 8006c5a:	4652      	mov	r2, sl
 8006c5c:	465b      	mov	r3, fp
 8006c5e:	4640      	mov	r0, r8
 8006c60:	4649      	mov	r1, r9
 8006c62:	f7f9 fb45 	bl	80002f0 <__aeabi_uldivmod>
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c74:	d308      	bcc.n	8006c88 <UART_SetConfig+0x430>
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c7c:	d204      	bcs.n	8006c88 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6a3a      	ldr	r2, [r7, #32]
 8006c84:	60da      	str	r2, [r3, #12]
 8006c86:	e0ce      	b.n	8006e26 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c8e:	e0ca      	b.n	8006e26 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c98:	d166      	bne.n	8006d68 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006c9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c9e:	2b08      	cmp	r3, #8
 8006ca0:	d827      	bhi.n	8006cf2 <UART_SetConfig+0x49a>
 8006ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca8 <UART_SetConfig+0x450>)
 8006ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca8:	08006ccd 	.word	0x08006ccd
 8006cac:	08006cd5 	.word	0x08006cd5
 8006cb0:	08006cdd 	.word	0x08006cdd
 8006cb4:	08006cf3 	.word	0x08006cf3
 8006cb8:	08006ce3 	.word	0x08006ce3
 8006cbc:	08006cf3 	.word	0x08006cf3
 8006cc0:	08006cf3 	.word	0x08006cf3
 8006cc4:	08006cf3 	.word	0x08006cf3
 8006cc8:	08006ceb 	.word	0x08006ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ccc:	f7fd f8d4 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 8006cd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cd2:	e014      	b.n	8006cfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cd4:	f7fd f8e6 	bl	8003ea4 <HAL_RCC_GetPCLK2Freq>
 8006cd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cda:	e010      	b.n	8006cfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cdc:	4b4e      	ldr	r3, [pc, #312]	@ (8006e18 <UART_SetConfig+0x5c0>)
 8006cde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ce0:	e00d      	b.n	8006cfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ce2:	f7fd f85b 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8006ce6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ce8:	e009      	b.n	8006cfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cf0:	e005      	b.n	8006cfe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006cfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 8090 	beq.w	8006e26 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0a:	4a44      	ldr	r2, [pc, #272]	@ (8006e1c <UART_SetConfig+0x5c4>)
 8006d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d10:	461a      	mov	r2, r3
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d18:	005a      	lsls	r2, r3, #1
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	085b      	lsrs	r3, r3, #1
 8006d20:	441a      	add	r2, r3
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	2b0f      	cmp	r3, #15
 8006d30:	d916      	bls.n	8006d60 <UART_SetConfig+0x508>
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d38:	d212      	bcs.n	8006d60 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	f023 030f 	bic.w	r3, r3, #15
 8006d42:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	085b      	lsrs	r3, r3, #1
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	8bfb      	ldrh	r3, [r7, #30]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	8bfa      	ldrh	r2, [r7, #30]
 8006d5c:	60da      	str	r2, [r3, #12]
 8006d5e:	e062      	b.n	8006e26 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d66:	e05e      	b.n	8006e26 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d828      	bhi.n	8006dc2 <UART_SetConfig+0x56a>
 8006d70:	a201      	add	r2, pc, #4	@ (adr r2, 8006d78 <UART_SetConfig+0x520>)
 8006d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d76:	bf00      	nop
 8006d78:	08006d9d 	.word	0x08006d9d
 8006d7c:	08006da5 	.word	0x08006da5
 8006d80:	08006dad 	.word	0x08006dad
 8006d84:	08006dc3 	.word	0x08006dc3
 8006d88:	08006db3 	.word	0x08006db3
 8006d8c:	08006dc3 	.word	0x08006dc3
 8006d90:	08006dc3 	.word	0x08006dc3
 8006d94:	08006dc3 	.word	0x08006dc3
 8006d98:	08006dbb 	.word	0x08006dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d9c:	f7fd f86c 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 8006da0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006da2:	e014      	b.n	8006dce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006da4:	f7fd f87e 	bl	8003ea4 <HAL_RCC_GetPCLK2Freq>
 8006da8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006daa:	e010      	b.n	8006dce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dac:	4b1a      	ldr	r3, [pc, #104]	@ (8006e18 <UART_SetConfig+0x5c0>)
 8006dae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006db0:	e00d      	b.n	8006dce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006db2:	f7fc fff3 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8006db6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006db8:	e009      	b.n	8006dce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dc0:	e005      	b.n	8006dce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006dcc:	bf00      	nop
    }

    if (pclk != 0U)
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d028      	beq.n	8006e26 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd8:	4a10      	ldr	r2, [pc, #64]	@ (8006e1c <UART_SetConfig+0x5c4>)
 8006dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dde:	461a      	mov	r2, r3
 8006de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	085b      	lsrs	r3, r3, #1
 8006dec:	441a      	add	r2, r3
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	2b0f      	cmp	r3, #15
 8006dfc:	d910      	bls.n	8006e20 <UART_SetConfig+0x5c8>
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e04:	d20c      	bcs.n	8006e20 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	60da      	str	r2, [r3, #12]
 8006e10:	e009      	b.n	8006e26 <UART_SetConfig+0x5ce>
 8006e12:	bf00      	nop
 8006e14:	40008000 	.word	0x40008000
 8006e18:	00f42400 	.word	0x00f42400
 8006e1c:	08009608 	.word	0x08009608
      }
      else
      {
        ret = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8006e42:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3730      	adds	r7, #48	@ 0x30
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006e50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00a      	beq.n	8006e7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7e:	f003 0302 	and.w	r3, r3, #2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00a      	beq.n	8006e9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea0:	f003 0304 	and.w	r3, r3, #4
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00a      	beq.n	8006ebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee4:	f003 0310 	and.w	r3, r3, #16
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00a      	beq.n	8006f02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d01a      	beq.n	8006f66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f4e:	d10a      	bne.n	8006f66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00a      	beq.n	8006f88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	430a      	orrs	r2, r1
 8006f86:	605a      	str	r2, [r3, #4]
  }
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af02      	add	r7, sp, #8
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fa4:	f7fa fd5c 	bl	8001a60 <HAL_GetTick>
 8006fa8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0308 	and.w	r3, r3, #8
 8006fb4:	2b08      	cmp	r3, #8
 8006fb6:	d10e      	bne.n	8006fd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fb8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f82f 	bl	800702a <UART_WaitOnFlagUntilTimeout>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e025      	b.n	8007022 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b04      	cmp	r3, #4
 8006fe2:	d10e      	bne.n	8007002 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fe4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f819 	bl	800702a <UART_WaitOnFlagUntilTimeout>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e00f      	b.n	8007022 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2220      	movs	r2, #32
 8007006:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2220      	movs	r2, #32
 800700e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b09c      	sub	sp, #112	@ 0x70
 800702e:	af00      	add	r7, sp, #0
 8007030:	60f8      	str	r0, [r7, #12]
 8007032:	60b9      	str	r1, [r7, #8]
 8007034:	603b      	str	r3, [r7, #0]
 8007036:	4613      	mov	r3, r2
 8007038:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800703a:	e0a9      	b.n	8007190 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800703c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800703e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007042:	f000 80a5 	beq.w	8007190 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007046:	f7fa fd0b 	bl	8001a60 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007052:	429a      	cmp	r2, r3
 8007054:	d302      	bcc.n	800705c <UART_WaitOnFlagUntilTimeout+0x32>
 8007056:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007058:	2b00      	cmp	r3, #0
 800705a:	d140      	bne.n	80070de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800706a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800706c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007070:	667b      	str	r3, [r7, #100]	@ 0x64
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800707a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800707c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007080:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e6      	bne.n	800705c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3308      	adds	r3, #8
 8007094:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800709e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a0:	f023 0301 	bic.w	r3, r3, #1
 80070a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3308      	adds	r3, #8
 80070ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80070ae:	64ba      	str	r2, [r7, #72]	@ 0x48
 80070b0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80070bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1e5      	bne.n	800708e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e069      	b.n	80071b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d051      	beq.n	8007190 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070fa:	d149      	bne.n	8007190 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007104:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007116:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800711a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	461a      	mov	r2, r3
 8007122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007124:	637b      	str	r3, [r7, #52]	@ 0x34
 8007126:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800712a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800712c:	e841 2300 	strex	r3, r2, [r1]
 8007130:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e6      	bne.n	8007106 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3308      	adds	r3, #8
 800713e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	613b      	str	r3, [r7, #16]
   return(result);
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f023 0301 	bic.w	r3, r3, #1
 800714e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3308      	adds	r3, #8
 8007156:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007158:	623a      	str	r2, [r7, #32]
 800715a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	69f9      	ldr	r1, [r7, #28]
 800715e:	6a3a      	ldr	r2, [r7, #32]
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	61bb      	str	r3, [r7, #24]
   return(result);
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e5      	bne.n	8007138 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2220      	movs	r2, #32
 8007170:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2220      	movs	r2, #32
 8007178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2220      	movs	r2, #32
 8007180:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e010      	b.n	80071b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69da      	ldr	r2, [r3, #28]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	4013      	ands	r3, r2
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	429a      	cmp	r2, r3
 800719e:	bf0c      	ite	eq
 80071a0:	2301      	moveq	r3, #1
 80071a2:	2300      	movne	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	461a      	mov	r2, r3
 80071a8:	79fb      	ldrb	r3, [r7, #7]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	f43f af46 	beq.w	800703c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3770      	adds	r7, #112	@ 0x70
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071bc:	b480      	push	{r7}
 80071be:	b0a3      	sub	sp, #140	@ 0x8c
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	4613      	mov	r3, r2
 80071c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	88fa      	ldrh	r2, [r7, #6]
 80071d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	88fa      	ldrh	r2, [r7, #6]
 80071dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ee:	d10e      	bne.n	800720e <UART_Start_Receive_IT+0x52>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d105      	bne.n	8007204 <UART_Start_Receive_IT+0x48>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80071fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007202:	e02d      	b.n	8007260 <UART_Start_Receive_IT+0xa4>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	22ff      	movs	r2, #255	@ 0xff
 8007208:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800720c:	e028      	b.n	8007260 <UART_Start_Receive_IT+0xa4>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10d      	bne.n	8007232 <UART_Start_Receive_IT+0x76>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d104      	bne.n	8007228 <UART_Start_Receive_IT+0x6c>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	22ff      	movs	r2, #255	@ 0xff
 8007222:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007226:	e01b      	b.n	8007260 <UART_Start_Receive_IT+0xa4>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	227f      	movs	r2, #127	@ 0x7f
 800722c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007230:	e016      	b.n	8007260 <UART_Start_Receive_IT+0xa4>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800723a:	d10d      	bne.n	8007258 <UART_Start_Receive_IT+0x9c>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d104      	bne.n	800724e <UART_Start_Receive_IT+0x92>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	227f      	movs	r2, #127	@ 0x7f
 8007248:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800724c:	e008      	b.n	8007260 <UART_Start_Receive_IT+0xa4>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	223f      	movs	r2, #63	@ 0x3f
 8007252:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007256:	e003      	b.n	8007260 <UART_Start_Receive_IT+0xa4>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2222      	movs	r2, #34	@ 0x22
 800726c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3308      	adds	r3, #8
 8007276:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800727a:	e853 3f00 	ldrex	r3, [r3]
 800727e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007280:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007282:	f043 0301 	orr.w	r3, r3, #1
 8007286:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3308      	adds	r3, #8
 8007290:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007294:	673a      	str	r2, [r7, #112]	@ 0x70
 8007296:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800729a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80072a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e3      	bne.n	8007270 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072b0:	d153      	bne.n	800735a <UART_Start_Receive_IT+0x19e>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80072b8:	88fa      	ldrh	r2, [r7, #6]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d34d      	bcc.n	800735a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072c6:	d107      	bne.n	80072d8 <UART_Start_Receive_IT+0x11c>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d103      	bne.n	80072d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4a4b      	ldr	r2, [pc, #300]	@ (8007400 <UART_Start_Receive_IT+0x244>)
 80072d4:	671a      	str	r2, [r3, #112]	@ 0x70
 80072d6:	e002      	b.n	80072de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	4a4a      	ldr	r2, [pc, #296]	@ (8007404 <UART_Start_Receive_IT+0x248>)
 80072dc:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d01a      	beq.n	8007324 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072f6:	e853 3f00 	ldrex	r3, [r3]
 80072fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80072fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007302:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007310:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007312:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007314:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007316:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007318:	e841 2300 	strex	r3, r2, [r1]
 800731c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800731e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e4      	bne.n	80072ee <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3308      	adds	r3, #8
 800732a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800732e:	e853 3f00 	ldrex	r3, [r3]
 8007332:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800733a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	3308      	adds	r3, #8
 8007342:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007344:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007346:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800734a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800734c:	e841 2300 	strex	r3, r2, [r1]
 8007350:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e5      	bne.n	8007324 <UART_Start_Receive_IT+0x168>
 8007358:	e04a      	b.n	80073f0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007362:	d107      	bne.n	8007374 <UART_Start_Receive_IT+0x1b8>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d103      	bne.n	8007374 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4a26      	ldr	r2, [pc, #152]	@ (8007408 <UART_Start_Receive_IT+0x24c>)
 8007370:	671a      	str	r2, [r3, #112]	@ 0x70
 8007372:	e002      	b.n	800737a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4a25      	ldr	r2, [pc, #148]	@ (800740c <UART_Start_Receive_IT+0x250>)
 8007378:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d019      	beq.n	80073be <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800739e:	677b      	str	r3, [r7, #116]	@ 0x74
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	461a      	mov	r2, r3
 80073a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073aa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073b0:	e841 2300 	strex	r3, r2, [r1]
 80073b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80073b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e6      	bne.n	800738a <UART_Start_Receive_IT+0x1ce>
 80073bc:	e018      	b.n	80073f0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	e853 3f00 	ldrex	r3, [r3]
 80073ca:	613b      	str	r3, [r7, #16]
   return(result);
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f043 0320 	orr.w	r3, r3, #32
 80073d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	461a      	mov	r2, r3
 80073da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073dc:	623b      	str	r3, [r7, #32]
 80073de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e0:	69f9      	ldr	r1, [r7, #28]
 80073e2:	6a3a      	ldr	r2, [r7, #32]
 80073e4:	e841 2300 	strex	r3, r2, [r1]
 80073e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e6      	bne.n	80073be <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	378c      	adds	r7, #140	@ 0x8c
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	08007b19 	.word	0x08007b19
 8007404:	08007821 	.word	0x08007821
 8007408:	080076bf 	.word	0x080076bf
 800740c:	0800755f 	.word	0x0800755f

08007410 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007410:	b480      	push	{r7}
 8007412:	b095      	sub	sp, #84	@ 0x54
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007428:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800742c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007436:	643b      	str	r3, [r7, #64]	@ 0x40
 8007438:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800743c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e6      	bne.n	8007418 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3308      	adds	r3, #8
 8007450:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	61fb      	str	r3, [r7, #28]
   return(result);
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007460:	f023 0301 	bic.w	r3, r3, #1
 8007464:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3308      	adds	r3, #8
 800746c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800746e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007470:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007472:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007474:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007476:	e841 2300 	strex	r3, r2, [r1]
 800747a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800747c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1e3      	bne.n	800744a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007486:	2b01      	cmp	r3, #1
 8007488:	d118      	bne.n	80074bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	60bb      	str	r3, [r7, #8]
   return(result);
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f023 0310 	bic.w	r3, r3, #16
 800749e:	647b      	str	r3, [r7, #68]	@ 0x44
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	461a      	mov	r2, r3
 80074a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074a8:	61bb      	str	r3, [r7, #24]
 80074aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6979      	ldr	r1, [r7, #20]
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	613b      	str	r3, [r7, #16]
   return(result);
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e6      	bne.n	800748a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80074d0:	bf00      	nop
 80074d2:	3754      	adds	r7, #84	@ 0x54
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f7ff f996 	bl	800682c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007500:	bf00      	nop
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b088      	sub	sp, #32
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	60bb      	str	r3, [r7, #8]
   return(result);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007524:	61fb      	str	r3, [r7, #28]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	61bb      	str	r3, [r7, #24]
 8007530:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	6979      	ldr	r1, [r7, #20]
 8007534:	69ba      	ldr	r2, [r7, #24]
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	613b      	str	r3, [r7, #16]
   return(result);
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e6      	bne.n	8007510 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f7ff f961 	bl	8006818 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007556:	bf00      	nop
 8007558:	3720      	adds	r7, #32
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b096      	sub	sp, #88	@ 0x58
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800756c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007576:	2b22      	cmp	r3, #34	@ 0x22
 8007578:	f040 8095 	bne.w	80076a6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007582:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007586:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800758a:	b2d9      	uxtb	r1, r3
 800758c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007590:	b2da      	uxtb	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007596:	400a      	ands	r2, r1
 8007598:	b2d2      	uxtb	r2, r2
 800759a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075be:	b29b      	uxth	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d178      	bne.n	80076b6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80075e4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075ea:	e841 2300 	strex	r3, r2, [r1]
 80075ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1e6      	bne.n	80075c4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3308      	adds	r3, #8
 80075fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	623b      	str	r3, [r7, #32]
   return(result);
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	f023 0301 	bic.w	r3, r3, #1
 800760c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3308      	adds	r3, #8
 8007614:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007616:	633a      	str	r2, [r7, #48]	@ 0x30
 8007618:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800761c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e5      	bne.n	80075f6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2220      	movs	r2, #32
 800762e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800763c:	2b01      	cmp	r3, #1
 800763e:	d12e      	bne.n	800769e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	60fb      	str	r3, [r7, #12]
   return(result);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 0310 	bic.w	r3, r3, #16
 800765a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	461a      	mov	r2, r3
 8007662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007664:	61fb      	str	r3, [r7, #28]
 8007666:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	69b9      	ldr	r1, [r7, #24]
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	617b      	str	r3, [r7, #20]
   return(result);
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e6      	bne.n	8007646 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	f003 0310 	and.w	r3, r3, #16
 8007682:	2b10      	cmp	r3, #16
 8007684:	d103      	bne.n	800768e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2210      	movs	r2, #16
 800768c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007694:	4619      	mov	r1, r3
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7ff f8d2 	bl	8006840 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800769c:	e00b      	b.n	80076b6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7fa f952 	bl	8001948 <HAL_UART_RxCpltCallback>
}
 80076a4:	e007      	b.n	80076b6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	699a      	ldr	r2, [r3, #24]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f042 0208 	orr.w	r2, r2, #8
 80076b4:	619a      	str	r2, [r3, #24]
}
 80076b6:	bf00      	nop
 80076b8:	3758      	adds	r7, #88	@ 0x58
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b096      	sub	sp, #88	@ 0x58
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80076cc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076d6:	2b22      	cmp	r3, #34	@ 0x22
 80076d8:	f040 8095 	bne.w	8007806 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ea:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80076ec:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 80076f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80076f4:	4013      	ands	r3, r2
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076fa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007700:	1c9a      	adds	r2, r3, #2
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800771e:	b29b      	uxth	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d178      	bne.n	8007816 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007734:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007738:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	461a      	mov	r2, r3
 8007740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007742:	643b      	str	r3, [r7, #64]	@ 0x40
 8007744:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007748:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e6      	bne.n	8007724 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3308      	adds	r3, #8
 800775c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	e853 3f00 	ldrex	r3, [r3]
 8007764:	61fb      	str	r3, [r7, #28]
   return(result);
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	f023 0301 	bic.w	r3, r3, #1
 800776c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3308      	adds	r3, #8
 8007774:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007776:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007778:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800777c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800777e:	e841 2300 	strex	r3, r2, [r1]
 8007782:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1e5      	bne.n	8007756 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2220      	movs	r2, #32
 800778e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800779c:	2b01      	cmp	r3, #1
 800779e:	d12e      	bne.n	80077fe <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f023 0310 	bic.w	r3, r3, #16
 80077ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077c4:	61bb      	str	r3, [r7, #24]
 80077c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	6979      	ldr	r1, [r7, #20]
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	613b      	str	r3, [r7, #16]
   return(result);
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e6      	bne.n	80077a6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	f003 0310 	and.w	r3, r3, #16
 80077e2:	2b10      	cmp	r3, #16
 80077e4:	d103      	bne.n	80077ee <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2210      	movs	r2, #16
 80077ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7ff f822 	bl	8006840 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077fc:	e00b      	b.n	8007816 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7fa f8a2 	bl	8001948 <HAL_UART_RxCpltCallback>
}
 8007804:	e007      	b.n	8007816 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	699a      	ldr	r2, [r3, #24]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f042 0208 	orr.w	r2, r2, #8
 8007814:	619a      	str	r2, [r3, #24]
}
 8007816:	bf00      	nop
 8007818:	3758      	adds	r7, #88	@ 0x58
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b0a6      	sub	sp, #152	@ 0x98
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800782e:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	69db      	ldr	r3, [r3, #28]
 8007838:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007856:	2b22      	cmp	r3, #34	@ 0x22
 8007858:	f040 814f 	bne.w	8007afa <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007862:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007866:	e0f6      	b.n	8007a56 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007872:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8007876:	b2d9      	uxtb	r1, r3
 8007878:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800787c:	b2da      	uxtb	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007882:	400a      	ands	r2, r1
 8007884:	b2d2      	uxtb	r2, r2
 8007886:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007898:	b29b      	uxth	r3, r3
 800789a:	3b01      	subs	r3, #1
 800789c:	b29a      	uxth	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80078ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d053      	beq.n	8007962 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d011      	beq.n	80078ea <UART_RxISR_8BIT_FIFOEN+0xca>
 80078c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00b      	beq.n	80078ea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2201      	movs	r2, #1
 80078d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078e0:	f043 0201 	orr.w	r2, r3, #1
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d011      	beq.n	800791a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80078f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00b      	beq.n	800791a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2202      	movs	r2, #2
 8007908:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007910:	f043 0204 	orr.w	r2, r3, #4
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800791a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800791e:	f003 0304 	and.w	r3, r3, #4
 8007922:	2b00      	cmp	r3, #0
 8007924:	d011      	beq.n	800794a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007926:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00b      	beq.n	800794a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2204      	movs	r2, #4
 8007938:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007940:	f043 0202 	orr.w	r2, r3, #2
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d006      	beq.n	8007962 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7fe ff69 	bl	800682c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d173      	bne.n	8007a56 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007974:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007976:	e853 3f00 	ldrex	r3, [r3]
 800797a:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800797c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800797e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007982:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007990:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007992:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007996:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800799e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e4      	bne.n	800796e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3308      	adds	r3, #8
 80079aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80079b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079ba:	f023 0301 	bic.w	r3, r3, #1
 80079be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3308      	adds	r3, #8
 80079c6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80079c8:	657a      	str	r2, [r7, #84]	@ 0x54
 80079ca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80079ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80079d0:	e841 2300 	strex	r3, r2, [r1]
 80079d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80079d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e3      	bne.n	80079a4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2220      	movs	r2, #32
 80079e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d12e      	bne.n	8007a50 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a08:	f023 0310 	bic.w	r3, r3, #16
 8007a0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a16:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e6      	bne.n	80079f8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	69db      	ldr	r3, [r3, #28]
 8007a30:	f003 0310 	and.w	r3, r3, #16
 8007a34:	2b10      	cmp	r3, #16
 8007a36:	d103      	bne.n	8007a40 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2210      	movs	r2, #16
 8007a3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7fe fef9 	bl	8006840 <HAL_UARTEx_RxEventCallback>
 8007a4e:	e002      	b.n	8007a56 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7f9 ff79 	bl	8001948 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d006      	beq.n	8007a6c <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007a5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a62:	f003 0320 	and.w	r3, r3, #32
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f47f aefe 	bne.w	8007868 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a72:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a76:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d045      	beq.n	8007b0a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007a84:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d23e      	bcs.n	8007b0a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3308      	adds	r3, #8
 8007a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	e853 3f00 	ldrex	r3, [r3]
 8007a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007aa2:	673b      	str	r3, [r7, #112]	@ 0x70
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007aac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007aae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ab4:	e841 2300 	strex	r3, r2, [r1]
 8007ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1e5      	bne.n	8007a8c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a14      	ldr	r2, [pc, #80]	@ (8007b14 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007ac4:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	e853 3f00 	ldrex	r3, [r3]
 8007ad2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f043 0320 	orr.w	r3, r3, #32
 8007ada:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ae4:	61bb      	str	r3, [r7, #24]
 8007ae6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	6979      	ldr	r1, [r7, #20]
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	e841 2300 	strex	r3, r2, [r1]
 8007af0:	613b      	str	r3, [r7, #16]
   return(result);
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e6      	bne.n	8007ac6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007af8:	e007      	b.n	8007b0a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	699a      	ldr	r2, [r3, #24]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f042 0208 	orr.w	r2, r2, #8
 8007b08:	619a      	str	r2, [r3, #24]
}
 8007b0a:	bf00      	nop
 8007b0c:	3798      	adds	r7, #152	@ 0x98
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	0800755f 	.word	0x0800755f

08007b18 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b0a8      	sub	sp, #160	@ 0xa0
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007b26:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b4e:	2b22      	cmp	r3, #34	@ 0x22
 8007b50:	f040 8153 	bne.w	8007dfa <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007b5a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b5e:	e0fa      	b.n	8007d56 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b66:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007b72:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8007b76:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b82:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b88:	1c9a      	adds	r2, r3, #2
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	3b01      	subs	r3, #1
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007baa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007bae:	f003 0307 	and.w	r3, r3, #7
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d053      	beq.n	8007c5e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d011      	beq.n	8007be6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007bc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00b      	beq.n	8007be6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bdc:	f043 0201 	orr.w	r2, r3, #1
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d011      	beq.n	8007c16 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007bf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00b      	beq.n	8007c16 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2202      	movs	r2, #2
 8007c04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c0c:	f043 0204 	orr.w	r2, r3, #4
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c1a:	f003 0304 	and.w	r3, r3, #4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d011      	beq.n	8007c46 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007c22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00b      	beq.n	8007c46 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2204      	movs	r2, #4
 8007c34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c3c:	f043 0202 	orr.w	r2, r3, #2
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d006      	beq.n	8007c5e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7fe fdeb 	bl	800682c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d175      	bne.n	8007d56 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c72:	e853 3f00 	ldrex	r3, [r3]
 8007c76:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c8e:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c92:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e4      	bne.n	8007c6a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007cb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cb6:	f023 0301 	bic.w	r3, r3, #1
 8007cba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007cc8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007cca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cd0:	e841 2300 	strex	r3, r2, [r1]
 8007cd4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e1      	bne.n	8007ca0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2220      	movs	r2, #32
 8007ce0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d12e      	bne.n	8007d50 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d08:	f023 0310 	bic.w	r3, r3, #16
 8007d0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d16:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d18:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1e6      	bne.n	8007cf8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	69db      	ldr	r3, [r3, #28]
 8007d30:	f003 0310 	and.w	r3, r3, #16
 8007d34:	2b10      	cmp	r3, #16
 8007d36:	d103      	bne.n	8007d40 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2210      	movs	r2, #16
 8007d3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7fe fd79 	bl	8006840 <HAL_UARTEx_RxEventCallback>
 8007d4e:	e002      	b.n	8007d56 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7f9 fdf9 	bl	8001948 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d56:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d006      	beq.n	8007d6c <UART_RxISR_16BIT_FIFOEN+0x254>
 8007d5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d62:	f003 0320 	and.w	r3, r3, #32
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f47f aefa 	bne.w	8007b60 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d72:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007d76:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d045      	beq.n	8007e0a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d84:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d23e      	bcs.n	8007e0a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	3308      	adds	r3, #8
 8007d92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d96:	e853 3f00 	ldrex	r3, [r3]
 8007d9a:	623b      	str	r3, [r7, #32]
   return(result);
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007da2:	677b      	str	r3, [r7, #116]	@ 0x74
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3308      	adds	r3, #8
 8007daa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007dac:	633a      	str	r2, [r7, #48]	@ 0x30
 8007dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007db4:	e841 2300 	strex	r3, r2, [r1]
 8007db8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1e5      	bne.n	8007d8c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a14      	ldr	r2, [pc, #80]	@ (8007e14 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007dc4:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	e853 3f00 	ldrex	r3, [r3]
 8007dd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f043 0320 	orr.w	r3, r3, #32
 8007dda:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	461a      	mov	r2, r3
 8007de2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007de4:	61fb      	str	r3, [r7, #28]
 8007de6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de8:	69b9      	ldr	r1, [r7, #24]
 8007dea:	69fa      	ldr	r2, [r7, #28]
 8007dec:	e841 2300 	strex	r3, r2, [r1]
 8007df0:	617b      	str	r3, [r7, #20]
   return(result);
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e6      	bne.n	8007dc6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007df8:	e007      	b.n	8007e0a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	699a      	ldr	r2, [r3, #24]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f042 0208 	orr.w	r2, r2, #8
 8007e08:	619a      	str	r2, [r3, #24]
}
 8007e0a:	bf00      	nop
 8007e0c:	37a0      	adds	r7, #160	@ 0xa0
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	080076bf 	.word	0x080076bf

08007e18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d101      	bne.n	8007e6a <HAL_UARTEx_DisableFifoMode+0x16>
 8007e66:	2302      	movs	r3, #2
 8007e68:	e027      	b.n	8007eba <HAL_UARTEx_DisableFifoMode+0x66>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2224      	movs	r2, #36	@ 0x24
 8007e76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 0201 	bic.w	r2, r2, #1
 8007e90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007e98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b084      	sub	sp, #16
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d101      	bne.n	8007ede <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007eda:	2302      	movs	r3, #2
 8007edc:	e02d      	b.n	8007f3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2224      	movs	r2, #36	@ 0x24
 8007eea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f022 0201 	bic.w	r2, r2, #1
 8007f04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f850 	bl	8007fc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d101      	bne.n	8007f5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f56:	2302      	movs	r3, #2
 8007f58:	e02d      	b.n	8007fb6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2224      	movs	r2, #36	@ 0x24
 8007f66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f022 0201 	bic.w	r2, r2, #1
 8007f80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f812 	bl	8007fc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d108      	bne.n	8007fe2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007fe0:	e031      	b.n	8008046 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007fe2:	2308      	movs	r3, #8
 8007fe4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007fe6:	2308      	movs	r3, #8
 8007fe8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	0e5b      	lsrs	r3, r3, #25
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f003 0307 	and.w	r3, r3, #7
 8007ff8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	0f5b      	lsrs	r3, r3, #29
 8008002:	b2db      	uxtb	r3, r3
 8008004:	f003 0307 	and.w	r3, r3, #7
 8008008:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800800a:	7bbb      	ldrb	r3, [r7, #14]
 800800c:	7b3a      	ldrb	r2, [r7, #12]
 800800e:	4911      	ldr	r1, [pc, #68]	@ (8008054 <UARTEx_SetNbDataToProcess+0x94>)
 8008010:	5c8a      	ldrb	r2, [r1, r2]
 8008012:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008016:	7b3a      	ldrb	r2, [r7, #12]
 8008018:	490f      	ldr	r1, [pc, #60]	@ (8008058 <UARTEx_SetNbDataToProcess+0x98>)
 800801a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800801c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008020:	b29a      	uxth	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008028:	7bfb      	ldrb	r3, [r7, #15]
 800802a:	7b7a      	ldrb	r2, [r7, #13]
 800802c:	4909      	ldr	r1, [pc, #36]	@ (8008054 <UARTEx_SetNbDataToProcess+0x94>)
 800802e:	5c8a      	ldrb	r2, [r1, r2]
 8008030:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008034:	7b7a      	ldrb	r2, [r7, #13]
 8008036:	4908      	ldr	r1, [pc, #32]	@ (8008058 <UARTEx_SetNbDataToProcess+0x98>)
 8008038:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800803a:	fb93 f3f2 	sdiv	r3, r3, r2
 800803e:	b29a      	uxth	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008046:	bf00      	nop
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	08009620 	.word	0x08009620
 8008058:	08009628 	.word	0x08009628

0800805c <atoi>:
 800805c:	220a      	movs	r2, #10
 800805e:	2100      	movs	r1, #0
 8008060:	f000 b87a 	b.w	8008158 <strtol>

08008064 <_strtol_l.constprop.0>:
 8008064:	2b24      	cmp	r3, #36	@ 0x24
 8008066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800806a:	4686      	mov	lr, r0
 800806c:	4690      	mov	r8, r2
 800806e:	d801      	bhi.n	8008074 <_strtol_l.constprop.0+0x10>
 8008070:	2b01      	cmp	r3, #1
 8008072:	d106      	bne.n	8008082 <_strtol_l.constprop.0+0x1e>
 8008074:	f000 fa5e 	bl	8008534 <__errno>
 8008078:	2316      	movs	r3, #22
 800807a:	6003      	str	r3, [r0, #0]
 800807c:	2000      	movs	r0, #0
 800807e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008082:	4834      	ldr	r0, [pc, #208]	@ (8008154 <_strtol_l.constprop.0+0xf0>)
 8008084:	460d      	mov	r5, r1
 8008086:	462a      	mov	r2, r5
 8008088:	f815 4b01 	ldrb.w	r4, [r5], #1
 800808c:	5d06      	ldrb	r6, [r0, r4]
 800808e:	f016 0608 	ands.w	r6, r6, #8
 8008092:	d1f8      	bne.n	8008086 <_strtol_l.constprop.0+0x22>
 8008094:	2c2d      	cmp	r4, #45	@ 0x2d
 8008096:	d12d      	bne.n	80080f4 <_strtol_l.constprop.0+0x90>
 8008098:	782c      	ldrb	r4, [r5, #0]
 800809a:	2601      	movs	r6, #1
 800809c:	1c95      	adds	r5, r2, #2
 800809e:	f033 0210 	bics.w	r2, r3, #16
 80080a2:	d109      	bne.n	80080b8 <_strtol_l.constprop.0+0x54>
 80080a4:	2c30      	cmp	r4, #48	@ 0x30
 80080a6:	d12a      	bne.n	80080fe <_strtol_l.constprop.0+0x9a>
 80080a8:	782a      	ldrb	r2, [r5, #0]
 80080aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80080ae:	2a58      	cmp	r2, #88	@ 0x58
 80080b0:	d125      	bne.n	80080fe <_strtol_l.constprop.0+0x9a>
 80080b2:	786c      	ldrb	r4, [r5, #1]
 80080b4:	2310      	movs	r3, #16
 80080b6:	3502      	adds	r5, #2
 80080b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80080bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80080c0:	2200      	movs	r2, #0
 80080c2:	fbbc f9f3 	udiv	r9, ip, r3
 80080c6:	4610      	mov	r0, r2
 80080c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80080cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80080d0:	2f09      	cmp	r7, #9
 80080d2:	d81b      	bhi.n	800810c <_strtol_l.constprop.0+0xa8>
 80080d4:	463c      	mov	r4, r7
 80080d6:	42a3      	cmp	r3, r4
 80080d8:	dd27      	ble.n	800812a <_strtol_l.constprop.0+0xc6>
 80080da:	1c57      	adds	r7, r2, #1
 80080dc:	d007      	beq.n	80080ee <_strtol_l.constprop.0+0x8a>
 80080de:	4581      	cmp	r9, r0
 80080e0:	d320      	bcc.n	8008124 <_strtol_l.constprop.0+0xc0>
 80080e2:	d101      	bne.n	80080e8 <_strtol_l.constprop.0+0x84>
 80080e4:	45a2      	cmp	sl, r4
 80080e6:	db1d      	blt.n	8008124 <_strtol_l.constprop.0+0xc0>
 80080e8:	fb00 4003 	mla	r0, r0, r3, r4
 80080ec:	2201      	movs	r2, #1
 80080ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080f2:	e7eb      	b.n	80080cc <_strtol_l.constprop.0+0x68>
 80080f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80080f6:	bf04      	itt	eq
 80080f8:	782c      	ldrbeq	r4, [r5, #0]
 80080fa:	1c95      	addeq	r5, r2, #2
 80080fc:	e7cf      	b.n	800809e <_strtol_l.constprop.0+0x3a>
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1da      	bne.n	80080b8 <_strtol_l.constprop.0+0x54>
 8008102:	2c30      	cmp	r4, #48	@ 0x30
 8008104:	bf0c      	ite	eq
 8008106:	2308      	moveq	r3, #8
 8008108:	230a      	movne	r3, #10
 800810a:	e7d5      	b.n	80080b8 <_strtol_l.constprop.0+0x54>
 800810c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008110:	2f19      	cmp	r7, #25
 8008112:	d801      	bhi.n	8008118 <_strtol_l.constprop.0+0xb4>
 8008114:	3c37      	subs	r4, #55	@ 0x37
 8008116:	e7de      	b.n	80080d6 <_strtol_l.constprop.0+0x72>
 8008118:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800811c:	2f19      	cmp	r7, #25
 800811e:	d804      	bhi.n	800812a <_strtol_l.constprop.0+0xc6>
 8008120:	3c57      	subs	r4, #87	@ 0x57
 8008122:	e7d8      	b.n	80080d6 <_strtol_l.constprop.0+0x72>
 8008124:	f04f 32ff 	mov.w	r2, #4294967295
 8008128:	e7e1      	b.n	80080ee <_strtol_l.constprop.0+0x8a>
 800812a:	1c53      	adds	r3, r2, #1
 800812c:	d108      	bne.n	8008140 <_strtol_l.constprop.0+0xdc>
 800812e:	2322      	movs	r3, #34	@ 0x22
 8008130:	f8ce 3000 	str.w	r3, [lr]
 8008134:	4660      	mov	r0, ip
 8008136:	f1b8 0f00 	cmp.w	r8, #0
 800813a:	d0a0      	beq.n	800807e <_strtol_l.constprop.0+0x1a>
 800813c:	1e69      	subs	r1, r5, #1
 800813e:	e006      	b.n	800814e <_strtol_l.constprop.0+0xea>
 8008140:	b106      	cbz	r6, 8008144 <_strtol_l.constprop.0+0xe0>
 8008142:	4240      	negs	r0, r0
 8008144:	f1b8 0f00 	cmp.w	r8, #0
 8008148:	d099      	beq.n	800807e <_strtol_l.constprop.0+0x1a>
 800814a:	2a00      	cmp	r2, #0
 800814c:	d1f6      	bne.n	800813c <_strtol_l.constprop.0+0xd8>
 800814e:	f8c8 1000 	str.w	r1, [r8]
 8008152:	e794      	b.n	800807e <_strtol_l.constprop.0+0x1a>
 8008154:	08009631 	.word	0x08009631

08008158 <strtol>:
 8008158:	4613      	mov	r3, r2
 800815a:	460a      	mov	r2, r1
 800815c:	4601      	mov	r1, r0
 800815e:	4802      	ldr	r0, [pc, #8]	@ (8008168 <strtol+0x10>)
 8008160:	6800      	ldr	r0, [r0, #0]
 8008162:	f7ff bf7f 	b.w	8008064 <_strtol_l.constprop.0>
 8008166:	bf00      	nop
 8008168:	200000f4 	.word	0x200000f4

0800816c <std>:
 800816c:	2300      	movs	r3, #0
 800816e:	b510      	push	{r4, lr}
 8008170:	4604      	mov	r4, r0
 8008172:	e9c0 3300 	strd	r3, r3, [r0]
 8008176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800817a:	6083      	str	r3, [r0, #8]
 800817c:	8181      	strh	r1, [r0, #12]
 800817e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008180:	81c2      	strh	r2, [r0, #14]
 8008182:	6183      	str	r3, [r0, #24]
 8008184:	4619      	mov	r1, r3
 8008186:	2208      	movs	r2, #8
 8008188:	305c      	adds	r0, #92	@ 0x5c
 800818a:	f000 f928 	bl	80083de <memset>
 800818e:	4b0d      	ldr	r3, [pc, #52]	@ (80081c4 <std+0x58>)
 8008190:	6263      	str	r3, [r4, #36]	@ 0x24
 8008192:	4b0d      	ldr	r3, [pc, #52]	@ (80081c8 <std+0x5c>)
 8008194:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008196:	4b0d      	ldr	r3, [pc, #52]	@ (80081cc <std+0x60>)
 8008198:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800819a:	4b0d      	ldr	r3, [pc, #52]	@ (80081d0 <std+0x64>)
 800819c:	6323      	str	r3, [r4, #48]	@ 0x30
 800819e:	4b0d      	ldr	r3, [pc, #52]	@ (80081d4 <std+0x68>)
 80081a0:	6224      	str	r4, [r4, #32]
 80081a2:	429c      	cmp	r4, r3
 80081a4:	d006      	beq.n	80081b4 <std+0x48>
 80081a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80081aa:	4294      	cmp	r4, r2
 80081ac:	d002      	beq.n	80081b4 <std+0x48>
 80081ae:	33d0      	adds	r3, #208	@ 0xd0
 80081b0:	429c      	cmp	r4, r3
 80081b2:	d105      	bne.n	80081c0 <std+0x54>
 80081b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80081b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081bc:	f000 b9e4 	b.w	8008588 <__retarget_lock_init_recursive>
 80081c0:	bd10      	pop	{r4, pc}
 80081c2:	bf00      	nop
 80081c4:	08008359 	.word	0x08008359
 80081c8:	0800837b 	.word	0x0800837b
 80081cc:	080083b3 	.word	0x080083b3
 80081d0:	080083d7 	.word	0x080083d7
 80081d4:	20000504 	.word	0x20000504

080081d8 <stdio_exit_handler>:
 80081d8:	4a02      	ldr	r2, [pc, #8]	@ (80081e4 <stdio_exit_handler+0xc>)
 80081da:	4903      	ldr	r1, [pc, #12]	@ (80081e8 <stdio_exit_handler+0x10>)
 80081dc:	4803      	ldr	r0, [pc, #12]	@ (80081ec <stdio_exit_handler+0x14>)
 80081de:	f000 b869 	b.w	80082b4 <_fwalk_sglue>
 80081e2:	bf00      	nop
 80081e4:	200000e8 	.word	0x200000e8
 80081e8:	08008ea1 	.word	0x08008ea1
 80081ec:	200000f8 	.word	0x200000f8

080081f0 <cleanup_stdio>:
 80081f0:	6841      	ldr	r1, [r0, #4]
 80081f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008224 <cleanup_stdio+0x34>)
 80081f4:	4299      	cmp	r1, r3
 80081f6:	b510      	push	{r4, lr}
 80081f8:	4604      	mov	r4, r0
 80081fa:	d001      	beq.n	8008200 <cleanup_stdio+0x10>
 80081fc:	f000 fe50 	bl	8008ea0 <_fflush_r>
 8008200:	68a1      	ldr	r1, [r4, #8]
 8008202:	4b09      	ldr	r3, [pc, #36]	@ (8008228 <cleanup_stdio+0x38>)
 8008204:	4299      	cmp	r1, r3
 8008206:	d002      	beq.n	800820e <cleanup_stdio+0x1e>
 8008208:	4620      	mov	r0, r4
 800820a:	f000 fe49 	bl	8008ea0 <_fflush_r>
 800820e:	68e1      	ldr	r1, [r4, #12]
 8008210:	4b06      	ldr	r3, [pc, #24]	@ (800822c <cleanup_stdio+0x3c>)
 8008212:	4299      	cmp	r1, r3
 8008214:	d004      	beq.n	8008220 <cleanup_stdio+0x30>
 8008216:	4620      	mov	r0, r4
 8008218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800821c:	f000 be40 	b.w	8008ea0 <_fflush_r>
 8008220:	bd10      	pop	{r4, pc}
 8008222:	bf00      	nop
 8008224:	20000504 	.word	0x20000504
 8008228:	2000056c 	.word	0x2000056c
 800822c:	200005d4 	.word	0x200005d4

08008230 <global_stdio_init.part.0>:
 8008230:	b510      	push	{r4, lr}
 8008232:	4b0b      	ldr	r3, [pc, #44]	@ (8008260 <global_stdio_init.part.0+0x30>)
 8008234:	4c0b      	ldr	r4, [pc, #44]	@ (8008264 <global_stdio_init.part.0+0x34>)
 8008236:	4a0c      	ldr	r2, [pc, #48]	@ (8008268 <global_stdio_init.part.0+0x38>)
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	4620      	mov	r0, r4
 800823c:	2200      	movs	r2, #0
 800823e:	2104      	movs	r1, #4
 8008240:	f7ff ff94 	bl	800816c <std>
 8008244:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008248:	2201      	movs	r2, #1
 800824a:	2109      	movs	r1, #9
 800824c:	f7ff ff8e 	bl	800816c <std>
 8008250:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008254:	2202      	movs	r2, #2
 8008256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800825a:	2112      	movs	r1, #18
 800825c:	f7ff bf86 	b.w	800816c <std>
 8008260:	2000063c 	.word	0x2000063c
 8008264:	20000504 	.word	0x20000504
 8008268:	080081d9 	.word	0x080081d9

0800826c <__sfp_lock_acquire>:
 800826c:	4801      	ldr	r0, [pc, #4]	@ (8008274 <__sfp_lock_acquire+0x8>)
 800826e:	f000 b98c 	b.w	800858a <__retarget_lock_acquire_recursive>
 8008272:	bf00      	nop
 8008274:	20000645 	.word	0x20000645

08008278 <__sfp_lock_release>:
 8008278:	4801      	ldr	r0, [pc, #4]	@ (8008280 <__sfp_lock_release+0x8>)
 800827a:	f000 b987 	b.w	800858c <__retarget_lock_release_recursive>
 800827e:	bf00      	nop
 8008280:	20000645 	.word	0x20000645

08008284 <__sinit>:
 8008284:	b510      	push	{r4, lr}
 8008286:	4604      	mov	r4, r0
 8008288:	f7ff fff0 	bl	800826c <__sfp_lock_acquire>
 800828c:	6a23      	ldr	r3, [r4, #32]
 800828e:	b11b      	cbz	r3, 8008298 <__sinit+0x14>
 8008290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008294:	f7ff bff0 	b.w	8008278 <__sfp_lock_release>
 8008298:	4b04      	ldr	r3, [pc, #16]	@ (80082ac <__sinit+0x28>)
 800829a:	6223      	str	r3, [r4, #32]
 800829c:	4b04      	ldr	r3, [pc, #16]	@ (80082b0 <__sinit+0x2c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1f5      	bne.n	8008290 <__sinit+0xc>
 80082a4:	f7ff ffc4 	bl	8008230 <global_stdio_init.part.0>
 80082a8:	e7f2      	b.n	8008290 <__sinit+0xc>
 80082aa:	bf00      	nop
 80082ac:	080081f1 	.word	0x080081f1
 80082b0:	2000063c 	.word	0x2000063c

080082b4 <_fwalk_sglue>:
 80082b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082b8:	4607      	mov	r7, r0
 80082ba:	4688      	mov	r8, r1
 80082bc:	4614      	mov	r4, r2
 80082be:	2600      	movs	r6, #0
 80082c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082c4:	f1b9 0901 	subs.w	r9, r9, #1
 80082c8:	d505      	bpl.n	80082d6 <_fwalk_sglue+0x22>
 80082ca:	6824      	ldr	r4, [r4, #0]
 80082cc:	2c00      	cmp	r4, #0
 80082ce:	d1f7      	bne.n	80082c0 <_fwalk_sglue+0xc>
 80082d0:	4630      	mov	r0, r6
 80082d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082d6:	89ab      	ldrh	r3, [r5, #12]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d907      	bls.n	80082ec <_fwalk_sglue+0x38>
 80082dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082e0:	3301      	adds	r3, #1
 80082e2:	d003      	beq.n	80082ec <_fwalk_sglue+0x38>
 80082e4:	4629      	mov	r1, r5
 80082e6:	4638      	mov	r0, r7
 80082e8:	47c0      	blx	r8
 80082ea:	4306      	orrs	r6, r0
 80082ec:	3568      	adds	r5, #104	@ 0x68
 80082ee:	e7e9      	b.n	80082c4 <_fwalk_sglue+0x10>

080082f0 <sniprintf>:
 80082f0:	b40c      	push	{r2, r3}
 80082f2:	b530      	push	{r4, r5, lr}
 80082f4:	4b17      	ldr	r3, [pc, #92]	@ (8008354 <sniprintf+0x64>)
 80082f6:	1e0c      	subs	r4, r1, #0
 80082f8:	681d      	ldr	r5, [r3, #0]
 80082fa:	b09d      	sub	sp, #116	@ 0x74
 80082fc:	da08      	bge.n	8008310 <sniprintf+0x20>
 80082fe:	238b      	movs	r3, #139	@ 0x8b
 8008300:	602b      	str	r3, [r5, #0]
 8008302:	f04f 30ff 	mov.w	r0, #4294967295
 8008306:	b01d      	add	sp, #116	@ 0x74
 8008308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800830c:	b002      	add	sp, #8
 800830e:	4770      	bx	lr
 8008310:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008314:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008318:	bf14      	ite	ne
 800831a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800831e:	4623      	moveq	r3, r4
 8008320:	9304      	str	r3, [sp, #16]
 8008322:	9307      	str	r3, [sp, #28]
 8008324:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008328:	9002      	str	r0, [sp, #8]
 800832a:	9006      	str	r0, [sp, #24]
 800832c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008330:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008332:	ab21      	add	r3, sp, #132	@ 0x84
 8008334:	a902      	add	r1, sp, #8
 8008336:	4628      	mov	r0, r5
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	f000 faa3 	bl	8008884 <_svfiprintf_r>
 800833e:	1c43      	adds	r3, r0, #1
 8008340:	bfbc      	itt	lt
 8008342:	238b      	movlt	r3, #139	@ 0x8b
 8008344:	602b      	strlt	r3, [r5, #0]
 8008346:	2c00      	cmp	r4, #0
 8008348:	d0dd      	beq.n	8008306 <sniprintf+0x16>
 800834a:	9b02      	ldr	r3, [sp, #8]
 800834c:	2200      	movs	r2, #0
 800834e:	701a      	strb	r2, [r3, #0]
 8008350:	e7d9      	b.n	8008306 <sniprintf+0x16>
 8008352:	bf00      	nop
 8008354:	200000f4 	.word	0x200000f4

08008358 <__sread>:
 8008358:	b510      	push	{r4, lr}
 800835a:	460c      	mov	r4, r1
 800835c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008360:	f000 f8c4 	bl	80084ec <_read_r>
 8008364:	2800      	cmp	r0, #0
 8008366:	bfab      	itete	ge
 8008368:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800836a:	89a3      	ldrhlt	r3, [r4, #12]
 800836c:	181b      	addge	r3, r3, r0
 800836e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008372:	bfac      	ite	ge
 8008374:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008376:	81a3      	strhlt	r3, [r4, #12]
 8008378:	bd10      	pop	{r4, pc}

0800837a <__swrite>:
 800837a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800837e:	461f      	mov	r7, r3
 8008380:	898b      	ldrh	r3, [r1, #12]
 8008382:	05db      	lsls	r3, r3, #23
 8008384:	4605      	mov	r5, r0
 8008386:	460c      	mov	r4, r1
 8008388:	4616      	mov	r6, r2
 800838a:	d505      	bpl.n	8008398 <__swrite+0x1e>
 800838c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008390:	2302      	movs	r3, #2
 8008392:	2200      	movs	r2, #0
 8008394:	f000 f898 	bl	80084c8 <_lseek_r>
 8008398:	89a3      	ldrh	r3, [r4, #12]
 800839a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800839e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083a2:	81a3      	strh	r3, [r4, #12]
 80083a4:	4632      	mov	r2, r6
 80083a6:	463b      	mov	r3, r7
 80083a8:	4628      	mov	r0, r5
 80083aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ae:	f000 b8af 	b.w	8008510 <_write_r>

080083b2 <__sseek>:
 80083b2:	b510      	push	{r4, lr}
 80083b4:	460c      	mov	r4, r1
 80083b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ba:	f000 f885 	bl	80084c8 <_lseek_r>
 80083be:	1c43      	adds	r3, r0, #1
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	bf15      	itete	ne
 80083c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80083c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80083ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80083ce:	81a3      	strheq	r3, [r4, #12]
 80083d0:	bf18      	it	ne
 80083d2:	81a3      	strhne	r3, [r4, #12]
 80083d4:	bd10      	pop	{r4, pc}

080083d6 <__sclose>:
 80083d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083da:	f000 b865 	b.w	80084a8 <_close_r>

080083de <memset>:
 80083de:	4402      	add	r2, r0
 80083e0:	4603      	mov	r3, r0
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d100      	bne.n	80083e8 <memset+0xa>
 80083e6:	4770      	bx	lr
 80083e8:	f803 1b01 	strb.w	r1, [r3], #1
 80083ec:	e7f9      	b.n	80083e2 <memset+0x4>
	...

080083f0 <strtok>:
 80083f0:	4b16      	ldr	r3, [pc, #88]	@ (800844c <strtok+0x5c>)
 80083f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f6:	681f      	ldr	r7, [r3, #0]
 80083f8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80083fa:	4605      	mov	r5, r0
 80083fc:	460e      	mov	r6, r1
 80083fe:	b9ec      	cbnz	r4, 800843c <strtok+0x4c>
 8008400:	2050      	movs	r0, #80	@ 0x50
 8008402:	f000 f92d 	bl	8008660 <malloc>
 8008406:	4602      	mov	r2, r0
 8008408:	6478      	str	r0, [r7, #68]	@ 0x44
 800840a:	b920      	cbnz	r0, 8008416 <strtok+0x26>
 800840c:	4b10      	ldr	r3, [pc, #64]	@ (8008450 <strtok+0x60>)
 800840e:	4811      	ldr	r0, [pc, #68]	@ (8008454 <strtok+0x64>)
 8008410:	215b      	movs	r1, #91	@ 0x5b
 8008412:	f000 f8bd 	bl	8008590 <__assert_func>
 8008416:	e9c0 4400 	strd	r4, r4, [r0]
 800841a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800841e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008422:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008426:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800842a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800842e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008432:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008436:	6184      	str	r4, [r0, #24]
 8008438:	7704      	strb	r4, [r0, #28]
 800843a:	6244      	str	r4, [r0, #36]	@ 0x24
 800843c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800843e:	4631      	mov	r1, r6
 8008440:	4628      	mov	r0, r5
 8008442:	2301      	movs	r3, #1
 8008444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008448:	f000 b806 	b.w	8008458 <__strtok_r>
 800844c:	200000f4 	.word	0x200000f4
 8008450:	08009731 	.word	0x08009731
 8008454:	08009748 	.word	0x08009748

08008458 <__strtok_r>:
 8008458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800845a:	4604      	mov	r4, r0
 800845c:	b908      	cbnz	r0, 8008462 <__strtok_r+0xa>
 800845e:	6814      	ldr	r4, [r2, #0]
 8008460:	b144      	cbz	r4, 8008474 <__strtok_r+0x1c>
 8008462:	4620      	mov	r0, r4
 8008464:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008468:	460f      	mov	r7, r1
 800846a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800846e:	b91e      	cbnz	r6, 8008478 <__strtok_r+0x20>
 8008470:	b965      	cbnz	r5, 800848c <__strtok_r+0x34>
 8008472:	6015      	str	r5, [r2, #0]
 8008474:	2000      	movs	r0, #0
 8008476:	e005      	b.n	8008484 <__strtok_r+0x2c>
 8008478:	42b5      	cmp	r5, r6
 800847a:	d1f6      	bne.n	800846a <__strtok_r+0x12>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1f0      	bne.n	8008462 <__strtok_r+0xa>
 8008480:	6014      	str	r4, [r2, #0]
 8008482:	7003      	strb	r3, [r0, #0]
 8008484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008486:	461c      	mov	r4, r3
 8008488:	e00c      	b.n	80084a4 <__strtok_r+0x4c>
 800848a:	b915      	cbnz	r5, 8008492 <__strtok_r+0x3a>
 800848c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008490:	460e      	mov	r6, r1
 8008492:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008496:	42ab      	cmp	r3, r5
 8008498:	d1f7      	bne.n	800848a <__strtok_r+0x32>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0f3      	beq.n	8008486 <__strtok_r+0x2e>
 800849e:	2300      	movs	r3, #0
 80084a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80084a4:	6014      	str	r4, [r2, #0]
 80084a6:	e7ed      	b.n	8008484 <__strtok_r+0x2c>

080084a8 <_close_r>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	4d06      	ldr	r5, [pc, #24]	@ (80084c4 <_close_r+0x1c>)
 80084ac:	2300      	movs	r3, #0
 80084ae:	4604      	mov	r4, r0
 80084b0:	4608      	mov	r0, r1
 80084b2:	602b      	str	r3, [r5, #0]
 80084b4:	f7f8 fcb8 	bl	8000e28 <_close>
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	d102      	bne.n	80084c2 <_close_r+0x1a>
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	b103      	cbz	r3, 80084c2 <_close_r+0x1a>
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
 80084c4:	20000640 	.word	0x20000640

080084c8 <_lseek_r>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	4d07      	ldr	r5, [pc, #28]	@ (80084e8 <_lseek_r+0x20>)
 80084cc:	4604      	mov	r4, r0
 80084ce:	4608      	mov	r0, r1
 80084d0:	4611      	mov	r1, r2
 80084d2:	2200      	movs	r2, #0
 80084d4:	602a      	str	r2, [r5, #0]
 80084d6:	461a      	mov	r2, r3
 80084d8:	f7f8 fccd 	bl	8000e76 <_lseek>
 80084dc:	1c43      	adds	r3, r0, #1
 80084de:	d102      	bne.n	80084e6 <_lseek_r+0x1e>
 80084e0:	682b      	ldr	r3, [r5, #0]
 80084e2:	b103      	cbz	r3, 80084e6 <_lseek_r+0x1e>
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	bd38      	pop	{r3, r4, r5, pc}
 80084e8:	20000640 	.word	0x20000640

080084ec <_read_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	4d07      	ldr	r5, [pc, #28]	@ (800850c <_read_r+0x20>)
 80084f0:	4604      	mov	r4, r0
 80084f2:	4608      	mov	r0, r1
 80084f4:	4611      	mov	r1, r2
 80084f6:	2200      	movs	r2, #0
 80084f8:	602a      	str	r2, [r5, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	f7f8 fc5b 	bl	8000db6 <_read>
 8008500:	1c43      	adds	r3, r0, #1
 8008502:	d102      	bne.n	800850a <_read_r+0x1e>
 8008504:	682b      	ldr	r3, [r5, #0]
 8008506:	b103      	cbz	r3, 800850a <_read_r+0x1e>
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	20000640 	.word	0x20000640

08008510 <_write_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	4d07      	ldr	r5, [pc, #28]	@ (8008530 <_write_r+0x20>)
 8008514:	4604      	mov	r4, r0
 8008516:	4608      	mov	r0, r1
 8008518:	4611      	mov	r1, r2
 800851a:	2200      	movs	r2, #0
 800851c:	602a      	str	r2, [r5, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	f7f8 fc66 	bl	8000df0 <_write>
 8008524:	1c43      	adds	r3, r0, #1
 8008526:	d102      	bne.n	800852e <_write_r+0x1e>
 8008528:	682b      	ldr	r3, [r5, #0]
 800852a:	b103      	cbz	r3, 800852e <_write_r+0x1e>
 800852c:	6023      	str	r3, [r4, #0]
 800852e:	bd38      	pop	{r3, r4, r5, pc}
 8008530:	20000640 	.word	0x20000640

08008534 <__errno>:
 8008534:	4b01      	ldr	r3, [pc, #4]	@ (800853c <__errno+0x8>)
 8008536:	6818      	ldr	r0, [r3, #0]
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	200000f4 	.word	0x200000f4

08008540 <__libc_init_array>:
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	4d0d      	ldr	r5, [pc, #52]	@ (8008578 <__libc_init_array+0x38>)
 8008544:	4c0d      	ldr	r4, [pc, #52]	@ (800857c <__libc_init_array+0x3c>)
 8008546:	1b64      	subs	r4, r4, r5
 8008548:	10a4      	asrs	r4, r4, #2
 800854a:	2600      	movs	r6, #0
 800854c:	42a6      	cmp	r6, r4
 800854e:	d109      	bne.n	8008564 <__libc_init_array+0x24>
 8008550:	4d0b      	ldr	r5, [pc, #44]	@ (8008580 <__libc_init_array+0x40>)
 8008552:	4c0c      	ldr	r4, [pc, #48]	@ (8008584 <__libc_init_array+0x44>)
 8008554:	f000 fff0 	bl	8009538 <_init>
 8008558:	1b64      	subs	r4, r4, r5
 800855a:	10a4      	asrs	r4, r4, #2
 800855c:	2600      	movs	r6, #0
 800855e:	42a6      	cmp	r6, r4
 8008560:	d105      	bne.n	800856e <__libc_init_array+0x2e>
 8008562:	bd70      	pop	{r4, r5, r6, pc}
 8008564:	f855 3b04 	ldr.w	r3, [r5], #4
 8008568:	4798      	blx	r3
 800856a:	3601      	adds	r6, #1
 800856c:	e7ee      	b.n	800854c <__libc_init_array+0xc>
 800856e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008572:	4798      	blx	r3
 8008574:	3601      	adds	r6, #1
 8008576:	e7f2      	b.n	800855e <__libc_init_array+0x1e>
 8008578:	0800981c 	.word	0x0800981c
 800857c:	0800981c 	.word	0x0800981c
 8008580:	0800981c 	.word	0x0800981c
 8008584:	08009820 	.word	0x08009820

08008588 <__retarget_lock_init_recursive>:
 8008588:	4770      	bx	lr

0800858a <__retarget_lock_acquire_recursive>:
 800858a:	4770      	bx	lr

0800858c <__retarget_lock_release_recursive>:
 800858c:	4770      	bx	lr
	...

08008590 <__assert_func>:
 8008590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008592:	4614      	mov	r4, r2
 8008594:	461a      	mov	r2, r3
 8008596:	4b09      	ldr	r3, [pc, #36]	@ (80085bc <__assert_func+0x2c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4605      	mov	r5, r0
 800859c:	68d8      	ldr	r0, [r3, #12]
 800859e:	b954      	cbnz	r4, 80085b6 <__assert_func+0x26>
 80085a0:	4b07      	ldr	r3, [pc, #28]	@ (80085c0 <__assert_func+0x30>)
 80085a2:	461c      	mov	r4, r3
 80085a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085a8:	9100      	str	r1, [sp, #0]
 80085aa:	462b      	mov	r3, r5
 80085ac:	4905      	ldr	r1, [pc, #20]	@ (80085c4 <__assert_func+0x34>)
 80085ae:	f000 fc9f 	bl	8008ef0 <fiprintf>
 80085b2:	f000 fce7 	bl	8008f84 <abort>
 80085b6:	4b04      	ldr	r3, [pc, #16]	@ (80085c8 <__assert_func+0x38>)
 80085b8:	e7f4      	b.n	80085a4 <__assert_func+0x14>
 80085ba:	bf00      	nop
 80085bc:	200000f4 	.word	0x200000f4
 80085c0:	080097dd 	.word	0x080097dd
 80085c4:	080097af 	.word	0x080097af
 80085c8:	080097a2 	.word	0x080097a2

080085cc <_free_r>:
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	4605      	mov	r5, r0
 80085d0:	2900      	cmp	r1, #0
 80085d2:	d041      	beq.n	8008658 <_free_r+0x8c>
 80085d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085d8:	1f0c      	subs	r4, r1, #4
 80085da:	2b00      	cmp	r3, #0
 80085dc:	bfb8      	it	lt
 80085de:	18e4      	addlt	r4, r4, r3
 80085e0:	f000 f8e8 	bl	80087b4 <__malloc_lock>
 80085e4:	4a1d      	ldr	r2, [pc, #116]	@ (800865c <_free_r+0x90>)
 80085e6:	6813      	ldr	r3, [r2, #0]
 80085e8:	b933      	cbnz	r3, 80085f8 <_free_r+0x2c>
 80085ea:	6063      	str	r3, [r4, #4]
 80085ec:	6014      	str	r4, [r2, #0]
 80085ee:	4628      	mov	r0, r5
 80085f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085f4:	f000 b8e4 	b.w	80087c0 <__malloc_unlock>
 80085f8:	42a3      	cmp	r3, r4
 80085fa:	d908      	bls.n	800860e <_free_r+0x42>
 80085fc:	6820      	ldr	r0, [r4, #0]
 80085fe:	1821      	adds	r1, r4, r0
 8008600:	428b      	cmp	r3, r1
 8008602:	bf01      	itttt	eq
 8008604:	6819      	ldreq	r1, [r3, #0]
 8008606:	685b      	ldreq	r3, [r3, #4]
 8008608:	1809      	addeq	r1, r1, r0
 800860a:	6021      	streq	r1, [r4, #0]
 800860c:	e7ed      	b.n	80085ea <_free_r+0x1e>
 800860e:	461a      	mov	r2, r3
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	b10b      	cbz	r3, 8008618 <_free_r+0x4c>
 8008614:	42a3      	cmp	r3, r4
 8008616:	d9fa      	bls.n	800860e <_free_r+0x42>
 8008618:	6811      	ldr	r1, [r2, #0]
 800861a:	1850      	adds	r0, r2, r1
 800861c:	42a0      	cmp	r0, r4
 800861e:	d10b      	bne.n	8008638 <_free_r+0x6c>
 8008620:	6820      	ldr	r0, [r4, #0]
 8008622:	4401      	add	r1, r0
 8008624:	1850      	adds	r0, r2, r1
 8008626:	4283      	cmp	r3, r0
 8008628:	6011      	str	r1, [r2, #0]
 800862a:	d1e0      	bne.n	80085ee <_free_r+0x22>
 800862c:	6818      	ldr	r0, [r3, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	6053      	str	r3, [r2, #4]
 8008632:	4408      	add	r0, r1
 8008634:	6010      	str	r0, [r2, #0]
 8008636:	e7da      	b.n	80085ee <_free_r+0x22>
 8008638:	d902      	bls.n	8008640 <_free_r+0x74>
 800863a:	230c      	movs	r3, #12
 800863c:	602b      	str	r3, [r5, #0]
 800863e:	e7d6      	b.n	80085ee <_free_r+0x22>
 8008640:	6820      	ldr	r0, [r4, #0]
 8008642:	1821      	adds	r1, r4, r0
 8008644:	428b      	cmp	r3, r1
 8008646:	bf04      	itt	eq
 8008648:	6819      	ldreq	r1, [r3, #0]
 800864a:	685b      	ldreq	r3, [r3, #4]
 800864c:	6063      	str	r3, [r4, #4]
 800864e:	bf04      	itt	eq
 8008650:	1809      	addeq	r1, r1, r0
 8008652:	6021      	streq	r1, [r4, #0]
 8008654:	6054      	str	r4, [r2, #4]
 8008656:	e7ca      	b.n	80085ee <_free_r+0x22>
 8008658:	bd38      	pop	{r3, r4, r5, pc}
 800865a:	bf00      	nop
 800865c:	2000064c 	.word	0x2000064c

08008660 <malloc>:
 8008660:	4b02      	ldr	r3, [pc, #8]	@ (800866c <malloc+0xc>)
 8008662:	4601      	mov	r1, r0
 8008664:	6818      	ldr	r0, [r3, #0]
 8008666:	f000 b825 	b.w	80086b4 <_malloc_r>
 800866a:	bf00      	nop
 800866c:	200000f4 	.word	0x200000f4

08008670 <sbrk_aligned>:
 8008670:	b570      	push	{r4, r5, r6, lr}
 8008672:	4e0f      	ldr	r6, [pc, #60]	@ (80086b0 <sbrk_aligned+0x40>)
 8008674:	460c      	mov	r4, r1
 8008676:	6831      	ldr	r1, [r6, #0]
 8008678:	4605      	mov	r5, r0
 800867a:	b911      	cbnz	r1, 8008682 <sbrk_aligned+0x12>
 800867c:	f000 fc64 	bl	8008f48 <_sbrk_r>
 8008680:	6030      	str	r0, [r6, #0]
 8008682:	4621      	mov	r1, r4
 8008684:	4628      	mov	r0, r5
 8008686:	f000 fc5f 	bl	8008f48 <_sbrk_r>
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	d103      	bne.n	8008696 <sbrk_aligned+0x26>
 800868e:	f04f 34ff 	mov.w	r4, #4294967295
 8008692:	4620      	mov	r0, r4
 8008694:	bd70      	pop	{r4, r5, r6, pc}
 8008696:	1cc4      	adds	r4, r0, #3
 8008698:	f024 0403 	bic.w	r4, r4, #3
 800869c:	42a0      	cmp	r0, r4
 800869e:	d0f8      	beq.n	8008692 <sbrk_aligned+0x22>
 80086a0:	1a21      	subs	r1, r4, r0
 80086a2:	4628      	mov	r0, r5
 80086a4:	f000 fc50 	bl	8008f48 <_sbrk_r>
 80086a8:	3001      	adds	r0, #1
 80086aa:	d1f2      	bne.n	8008692 <sbrk_aligned+0x22>
 80086ac:	e7ef      	b.n	800868e <sbrk_aligned+0x1e>
 80086ae:	bf00      	nop
 80086b0:	20000648 	.word	0x20000648

080086b4 <_malloc_r>:
 80086b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b8:	1ccd      	adds	r5, r1, #3
 80086ba:	f025 0503 	bic.w	r5, r5, #3
 80086be:	3508      	adds	r5, #8
 80086c0:	2d0c      	cmp	r5, #12
 80086c2:	bf38      	it	cc
 80086c4:	250c      	movcc	r5, #12
 80086c6:	2d00      	cmp	r5, #0
 80086c8:	4606      	mov	r6, r0
 80086ca:	db01      	blt.n	80086d0 <_malloc_r+0x1c>
 80086cc:	42a9      	cmp	r1, r5
 80086ce:	d904      	bls.n	80086da <_malloc_r+0x26>
 80086d0:	230c      	movs	r3, #12
 80086d2:	6033      	str	r3, [r6, #0]
 80086d4:	2000      	movs	r0, #0
 80086d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087b0 <_malloc_r+0xfc>
 80086de:	f000 f869 	bl	80087b4 <__malloc_lock>
 80086e2:	f8d8 3000 	ldr.w	r3, [r8]
 80086e6:	461c      	mov	r4, r3
 80086e8:	bb44      	cbnz	r4, 800873c <_malloc_r+0x88>
 80086ea:	4629      	mov	r1, r5
 80086ec:	4630      	mov	r0, r6
 80086ee:	f7ff ffbf 	bl	8008670 <sbrk_aligned>
 80086f2:	1c43      	adds	r3, r0, #1
 80086f4:	4604      	mov	r4, r0
 80086f6:	d158      	bne.n	80087aa <_malloc_r+0xf6>
 80086f8:	f8d8 4000 	ldr.w	r4, [r8]
 80086fc:	4627      	mov	r7, r4
 80086fe:	2f00      	cmp	r7, #0
 8008700:	d143      	bne.n	800878a <_malloc_r+0xd6>
 8008702:	2c00      	cmp	r4, #0
 8008704:	d04b      	beq.n	800879e <_malloc_r+0xea>
 8008706:	6823      	ldr	r3, [r4, #0]
 8008708:	4639      	mov	r1, r7
 800870a:	4630      	mov	r0, r6
 800870c:	eb04 0903 	add.w	r9, r4, r3
 8008710:	f000 fc1a 	bl	8008f48 <_sbrk_r>
 8008714:	4581      	cmp	r9, r0
 8008716:	d142      	bne.n	800879e <_malloc_r+0xea>
 8008718:	6821      	ldr	r1, [r4, #0]
 800871a:	1a6d      	subs	r5, r5, r1
 800871c:	4629      	mov	r1, r5
 800871e:	4630      	mov	r0, r6
 8008720:	f7ff ffa6 	bl	8008670 <sbrk_aligned>
 8008724:	3001      	adds	r0, #1
 8008726:	d03a      	beq.n	800879e <_malloc_r+0xea>
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	442b      	add	r3, r5
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	f8d8 3000 	ldr.w	r3, [r8]
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	bb62      	cbnz	r2, 8008790 <_malloc_r+0xdc>
 8008736:	f8c8 7000 	str.w	r7, [r8]
 800873a:	e00f      	b.n	800875c <_malloc_r+0xa8>
 800873c:	6822      	ldr	r2, [r4, #0]
 800873e:	1b52      	subs	r2, r2, r5
 8008740:	d420      	bmi.n	8008784 <_malloc_r+0xd0>
 8008742:	2a0b      	cmp	r2, #11
 8008744:	d917      	bls.n	8008776 <_malloc_r+0xc2>
 8008746:	1961      	adds	r1, r4, r5
 8008748:	42a3      	cmp	r3, r4
 800874a:	6025      	str	r5, [r4, #0]
 800874c:	bf18      	it	ne
 800874e:	6059      	strne	r1, [r3, #4]
 8008750:	6863      	ldr	r3, [r4, #4]
 8008752:	bf08      	it	eq
 8008754:	f8c8 1000 	streq.w	r1, [r8]
 8008758:	5162      	str	r2, [r4, r5]
 800875a:	604b      	str	r3, [r1, #4]
 800875c:	4630      	mov	r0, r6
 800875e:	f000 f82f 	bl	80087c0 <__malloc_unlock>
 8008762:	f104 000b 	add.w	r0, r4, #11
 8008766:	1d23      	adds	r3, r4, #4
 8008768:	f020 0007 	bic.w	r0, r0, #7
 800876c:	1ac2      	subs	r2, r0, r3
 800876e:	bf1c      	itt	ne
 8008770:	1a1b      	subne	r3, r3, r0
 8008772:	50a3      	strne	r3, [r4, r2]
 8008774:	e7af      	b.n	80086d6 <_malloc_r+0x22>
 8008776:	6862      	ldr	r2, [r4, #4]
 8008778:	42a3      	cmp	r3, r4
 800877a:	bf0c      	ite	eq
 800877c:	f8c8 2000 	streq.w	r2, [r8]
 8008780:	605a      	strne	r2, [r3, #4]
 8008782:	e7eb      	b.n	800875c <_malloc_r+0xa8>
 8008784:	4623      	mov	r3, r4
 8008786:	6864      	ldr	r4, [r4, #4]
 8008788:	e7ae      	b.n	80086e8 <_malloc_r+0x34>
 800878a:	463c      	mov	r4, r7
 800878c:	687f      	ldr	r7, [r7, #4]
 800878e:	e7b6      	b.n	80086fe <_malloc_r+0x4a>
 8008790:	461a      	mov	r2, r3
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	42a3      	cmp	r3, r4
 8008796:	d1fb      	bne.n	8008790 <_malloc_r+0xdc>
 8008798:	2300      	movs	r3, #0
 800879a:	6053      	str	r3, [r2, #4]
 800879c:	e7de      	b.n	800875c <_malloc_r+0xa8>
 800879e:	230c      	movs	r3, #12
 80087a0:	6033      	str	r3, [r6, #0]
 80087a2:	4630      	mov	r0, r6
 80087a4:	f000 f80c 	bl	80087c0 <__malloc_unlock>
 80087a8:	e794      	b.n	80086d4 <_malloc_r+0x20>
 80087aa:	6005      	str	r5, [r0, #0]
 80087ac:	e7d6      	b.n	800875c <_malloc_r+0xa8>
 80087ae:	bf00      	nop
 80087b0:	2000064c 	.word	0x2000064c

080087b4 <__malloc_lock>:
 80087b4:	4801      	ldr	r0, [pc, #4]	@ (80087bc <__malloc_lock+0x8>)
 80087b6:	f7ff bee8 	b.w	800858a <__retarget_lock_acquire_recursive>
 80087ba:	bf00      	nop
 80087bc:	20000644 	.word	0x20000644

080087c0 <__malloc_unlock>:
 80087c0:	4801      	ldr	r0, [pc, #4]	@ (80087c8 <__malloc_unlock+0x8>)
 80087c2:	f7ff bee3 	b.w	800858c <__retarget_lock_release_recursive>
 80087c6:	bf00      	nop
 80087c8:	20000644 	.word	0x20000644

080087cc <__ssputs_r>:
 80087cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087d0:	688e      	ldr	r6, [r1, #8]
 80087d2:	461f      	mov	r7, r3
 80087d4:	42be      	cmp	r6, r7
 80087d6:	680b      	ldr	r3, [r1, #0]
 80087d8:	4682      	mov	sl, r0
 80087da:	460c      	mov	r4, r1
 80087dc:	4690      	mov	r8, r2
 80087de:	d82d      	bhi.n	800883c <__ssputs_r+0x70>
 80087e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80087e8:	d026      	beq.n	8008838 <__ssputs_r+0x6c>
 80087ea:	6965      	ldr	r5, [r4, #20]
 80087ec:	6909      	ldr	r1, [r1, #16]
 80087ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087f2:	eba3 0901 	sub.w	r9, r3, r1
 80087f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087fa:	1c7b      	adds	r3, r7, #1
 80087fc:	444b      	add	r3, r9
 80087fe:	106d      	asrs	r5, r5, #1
 8008800:	429d      	cmp	r5, r3
 8008802:	bf38      	it	cc
 8008804:	461d      	movcc	r5, r3
 8008806:	0553      	lsls	r3, r2, #21
 8008808:	d527      	bpl.n	800885a <__ssputs_r+0x8e>
 800880a:	4629      	mov	r1, r5
 800880c:	f7ff ff52 	bl	80086b4 <_malloc_r>
 8008810:	4606      	mov	r6, r0
 8008812:	b360      	cbz	r0, 800886e <__ssputs_r+0xa2>
 8008814:	6921      	ldr	r1, [r4, #16]
 8008816:	464a      	mov	r2, r9
 8008818:	f000 fba6 	bl	8008f68 <memcpy>
 800881c:	89a3      	ldrh	r3, [r4, #12]
 800881e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008826:	81a3      	strh	r3, [r4, #12]
 8008828:	6126      	str	r6, [r4, #16]
 800882a:	6165      	str	r5, [r4, #20]
 800882c:	444e      	add	r6, r9
 800882e:	eba5 0509 	sub.w	r5, r5, r9
 8008832:	6026      	str	r6, [r4, #0]
 8008834:	60a5      	str	r5, [r4, #8]
 8008836:	463e      	mov	r6, r7
 8008838:	42be      	cmp	r6, r7
 800883a:	d900      	bls.n	800883e <__ssputs_r+0x72>
 800883c:	463e      	mov	r6, r7
 800883e:	6820      	ldr	r0, [r4, #0]
 8008840:	4632      	mov	r2, r6
 8008842:	4641      	mov	r1, r8
 8008844:	f000 fb66 	bl	8008f14 <memmove>
 8008848:	68a3      	ldr	r3, [r4, #8]
 800884a:	1b9b      	subs	r3, r3, r6
 800884c:	60a3      	str	r3, [r4, #8]
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	4433      	add	r3, r6
 8008852:	6023      	str	r3, [r4, #0]
 8008854:	2000      	movs	r0, #0
 8008856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885a:	462a      	mov	r2, r5
 800885c:	f000 fb99 	bl	8008f92 <_realloc_r>
 8008860:	4606      	mov	r6, r0
 8008862:	2800      	cmp	r0, #0
 8008864:	d1e0      	bne.n	8008828 <__ssputs_r+0x5c>
 8008866:	6921      	ldr	r1, [r4, #16]
 8008868:	4650      	mov	r0, sl
 800886a:	f7ff feaf 	bl	80085cc <_free_r>
 800886e:	230c      	movs	r3, #12
 8008870:	f8ca 3000 	str.w	r3, [sl]
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800887a:	81a3      	strh	r3, [r4, #12]
 800887c:	f04f 30ff 	mov.w	r0, #4294967295
 8008880:	e7e9      	b.n	8008856 <__ssputs_r+0x8a>
	...

08008884 <_svfiprintf_r>:
 8008884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008888:	4698      	mov	r8, r3
 800888a:	898b      	ldrh	r3, [r1, #12]
 800888c:	061b      	lsls	r3, r3, #24
 800888e:	b09d      	sub	sp, #116	@ 0x74
 8008890:	4607      	mov	r7, r0
 8008892:	460d      	mov	r5, r1
 8008894:	4614      	mov	r4, r2
 8008896:	d510      	bpl.n	80088ba <_svfiprintf_r+0x36>
 8008898:	690b      	ldr	r3, [r1, #16]
 800889a:	b973      	cbnz	r3, 80088ba <_svfiprintf_r+0x36>
 800889c:	2140      	movs	r1, #64	@ 0x40
 800889e:	f7ff ff09 	bl	80086b4 <_malloc_r>
 80088a2:	6028      	str	r0, [r5, #0]
 80088a4:	6128      	str	r0, [r5, #16]
 80088a6:	b930      	cbnz	r0, 80088b6 <_svfiprintf_r+0x32>
 80088a8:	230c      	movs	r3, #12
 80088aa:	603b      	str	r3, [r7, #0]
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295
 80088b0:	b01d      	add	sp, #116	@ 0x74
 80088b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b6:	2340      	movs	r3, #64	@ 0x40
 80088b8:	616b      	str	r3, [r5, #20]
 80088ba:	2300      	movs	r3, #0
 80088bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80088be:	2320      	movs	r3, #32
 80088c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80088c8:	2330      	movs	r3, #48	@ 0x30
 80088ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008a68 <_svfiprintf_r+0x1e4>
 80088ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088d2:	f04f 0901 	mov.w	r9, #1
 80088d6:	4623      	mov	r3, r4
 80088d8:	469a      	mov	sl, r3
 80088da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088de:	b10a      	cbz	r2, 80088e4 <_svfiprintf_r+0x60>
 80088e0:	2a25      	cmp	r2, #37	@ 0x25
 80088e2:	d1f9      	bne.n	80088d8 <_svfiprintf_r+0x54>
 80088e4:	ebba 0b04 	subs.w	fp, sl, r4
 80088e8:	d00b      	beq.n	8008902 <_svfiprintf_r+0x7e>
 80088ea:	465b      	mov	r3, fp
 80088ec:	4622      	mov	r2, r4
 80088ee:	4629      	mov	r1, r5
 80088f0:	4638      	mov	r0, r7
 80088f2:	f7ff ff6b 	bl	80087cc <__ssputs_r>
 80088f6:	3001      	adds	r0, #1
 80088f8:	f000 80a7 	beq.w	8008a4a <_svfiprintf_r+0x1c6>
 80088fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088fe:	445a      	add	r2, fp
 8008900:	9209      	str	r2, [sp, #36]	@ 0x24
 8008902:	f89a 3000 	ldrb.w	r3, [sl]
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 809f 	beq.w	8008a4a <_svfiprintf_r+0x1c6>
 800890c:	2300      	movs	r3, #0
 800890e:	f04f 32ff 	mov.w	r2, #4294967295
 8008912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008916:	f10a 0a01 	add.w	sl, sl, #1
 800891a:	9304      	str	r3, [sp, #16]
 800891c:	9307      	str	r3, [sp, #28]
 800891e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008922:	931a      	str	r3, [sp, #104]	@ 0x68
 8008924:	4654      	mov	r4, sl
 8008926:	2205      	movs	r2, #5
 8008928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800892c:	484e      	ldr	r0, [pc, #312]	@ (8008a68 <_svfiprintf_r+0x1e4>)
 800892e:	f7f7 fc8f 	bl	8000250 <memchr>
 8008932:	9a04      	ldr	r2, [sp, #16]
 8008934:	b9d8      	cbnz	r0, 800896e <_svfiprintf_r+0xea>
 8008936:	06d0      	lsls	r0, r2, #27
 8008938:	bf44      	itt	mi
 800893a:	2320      	movmi	r3, #32
 800893c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008940:	0711      	lsls	r1, r2, #28
 8008942:	bf44      	itt	mi
 8008944:	232b      	movmi	r3, #43	@ 0x2b
 8008946:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800894a:	f89a 3000 	ldrb.w	r3, [sl]
 800894e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008950:	d015      	beq.n	800897e <_svfiprintf_r+0xfa>
 8008952:	9a07      	ldr	r2, [sp, #28]
 8008954:	4654      	mov	r4, sl
 8008956:	2000      	movs	r0, #0
 8008958:	f04f 0c0a 	mov.w	ip, #10
 800895c:	4621      	mov	r1, r4
 800895e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008962:	3b30      	subs	r3, #48	@ 0x30
 8008964:	2b09      	cmp	r3, #9
 8008966:	d94b      	bls.n	8008a00 <_svfiprintf_r+0x17c>
 8008968:	b1b0      	cbz	r0, 8008998 <_svfiprintf_r+0x114>
 800896a:	9207      	str	r2, [sp, #28]
 800896c:	e014      	b.n	8008998 <_svfiprintf_r+0x114>
 800896e:	eba0 0308 	sub.w	r3, r0, r8
 8008972:	fa09 f303 	lsl.w	r3, r9, r3
 8008976:	4313      	orrs	r3, r2
 8008978:	9304      	str	r3, [sp, #16]
 800897a:	46a2      	mov	sl, r4
 800897c:	e7d2      	b.n	8008924 <_svfiprintf_r+0xa0>
 800897e:	9b03      	ldr	r3, [sp, #12]
 8008980:	1d19      	adds	r1, r3, #4
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	9103      	str	r1, [sp, #12]
 8008986:	2b00      	cmp	r3, #0
 8008988:	bfbb      	ittet	lt
 800898a:	425b      	neglt	r3, r3
 800898c:	f042 0202 	orrlt.w	r2, r2, #2
 8008990:	9307      	strge	r3, [sp, #28]
 8008992:	9307      	strlt	r3, [sp, #28]
 8008994:	bfb8      	it	lt
 8008996:	9204      	strlt	r2, [sp, #16]
 8008998:	7823      	ldrb	r3, [r4, #0]
 800899a:	2b2e      	cmp	r3, #46	@ 0x2e
 800899c:	d10a      	bne.n	80089b4 <_svfiprintf_r+0x130>
 800899e:	7863      	ldrb	r3, [r4, #1]
 80089a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80089a2:	d132      	bne.n	8008a0a <_svfiprintf_r+0x186>
 80089a4:	9b03      	ldr	r3, [sp, #12]
 80089a6:	1d1a      	adds	r2, r3, #4
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	9203      	str	r2, [sp, #12]
 80089ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089b0:	3402      	adds	r4, #2
 80089b2:	9305      	str	r3, [sp, #20]
 80089b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a78 <_svfiprintf_r+0x1f4>
 80089b8:	7821      	ldrb	r1, [r4, #0]
 80089ba:	2203      	movs	r2, #3
 80089bc:	4650      	mov	r0, sl
 80089be:	f7f7 fc47 	bl	8000250 <memchr>
 80089c2:	b138      	cbz	r0, 80089d4 <_svfiprintf_r+0x150>
 80089c4:	9b04      	ldr	r3, [sp, #16]
 80089c6:	eba0 000a 	sub.w	r0, r0, sl
 80089ca:	2240      	movs	r2, #64	@ 0x40
 80089cc:	4082      	lsls	r2, r0
 80089ce:	4313      	orrs	r3, r2
 80089d0:	3401      	adds	r4, #1
 80089d2:	9304      	str	r3, [sp, #16]
 80089d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d8:	4824      	ldr	r0, [pc, #144]	@ (8008a6c <_svfiprintf_r+0x1e8>)
 80089da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089de:	2206      	movs	r2, #6
 80089e0:	f7f7 fc36 	bl	8000250 <memchr>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d036      	beq.n	8008a56 <_svfiprintf_r+0x1d2>
 80089e8:	4b21      	ldr	r3, [pc, #132]	@ (8008a70 <_svfiprintf_r+0x1ec>)
 80089ea:	bb1b      	cbnz	r3, 8008a34 <_svfiprintf_r+0x1b0>
 80089ec:	9b03      	ldr	r3, [sp, #12]
 80089ee:	3307      	adds	r3, #7
 80089f0:	f023 0307 	bic.w	r3, r3, #7
 80089f4:	3308      	adds	r3, #8
 80089f6:	9303      	str	r3, [sp, #12]
 80089f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089fa:	4433      	add	r3, r6
 80089fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80089fe:	e76a      	b.n	80088d6 <_svfiprintf_r+0x52>
 8008a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a04:	460c      	mov	r4, r1
 8008a06:	2001      	movs	r0, #1
 8008a08:	e7a8      	b.n	800895c <_svfiprintf_r+0xd8>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	3401      	adds	r4, #1
 8008a0e:	9305      	str	r3, [sp, #20]
 8008a10:	4619      	mov	r1, r3
 8008a12:	f04f 0c0a 	mov.w	ip, #10
 8008a16:	4620      	mov	r0, r4
 8008a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a1c:	3a30      	subs	r2, #48	@ 0x30
 8008a1e:	2a09      	cmp	r2, #9
 8008a20:	d903      	bls.n	8008a2a <_svfiprintf_r+0x1a6>
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d0c6      	beq.n	80089b4 <_svfiprintf_r+0x130>
 8008a26:	9105      	str	r1, [sp, #20]
 8008a28:	e7c4      	b.n	80089b4 <_svfiprintf_r+0x130>
 8008a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a2e:	4604      	mov	r4, r0
 8008a30:	2301      	movs	r3, #1
 8008a32:	e7f0      	b.n	8008a16 <_svfiprintf_r+0x192>
 8008a34:	ab03      	add	r3, sp, #12
 8008a36:	9300      	str	r3, [sp, #0]
 8008a38:	462a      	mov	r2, r5
 8008a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8008a74 <_svfiprintf_r+0x1f0>)
 8008a3c:	a904      	add	r1, sp, #16
 8008a3e:	4638      	mov	r0, r7
 8008a40:	f3af 8000 	nop.w
 8008a44:	1c42      	adds	r2, r0, #1
 8008a46:	4606      	mov	r6, r0
 8008a48:	d1d6      	bne.n	80089f8 <_svfiprintf_r+0x174>
 8008a4a:	89ab      	ldrh	r3, [r5, #12]
 8008a4c:	065b      	lsls	r3, r3, #25
 8008a4e:	f53f af2d 	bmi.w	80088ac <_svfiprintf_r+0x28>
 8008a52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a54:	e72c      	b.n	80088b0 <_svfiprintf_r+0x2c>
 8008a56:	ab03      	add	r3, sp, #12
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	462a      	mov	r2, r5
 8008a5c:	4b05      	ldr	r3, [pc, #20]	@ (8008a74 <_svfiprintf_r+0x1f0>)
 8008a5e:	a904      	add	r1, sp, #16
 8008a60:	4638      	mov	r0, r7
 8008a62:	f000 f879 	bl	8008b58 <_printf_i>
 8008a66:	e7ed      	b.n	8008a44 <_svfiprintf_r+0x1c0>
 8008a68:	080097de 	.word	0x080097de
 8008a6c:	080097e8 	.word	0x080097e8
 8008a70:	00000000 	.word	0x00000000
 8008a74:	080087cd 	.word	0x080087cd
 8008a78:	080097e4 	.word	0x080097e4

08008a7c <_printf_common>:
 8008a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a80:	4616      	mov	r6, r2
 8008a82:	4698      	mov	r8, r3
 8008a84:	688a      	ldr	r2, [r1, #8]
 8008a86:	690b      	ldr	r3, [r1, #16]
 8008a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	bfb8      	it	lt
 8008a90:	4613      	movlt	r3, r2
 8008a92:	6033      	str	r3, [r6, #0]
 8008a94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a98:	4607      	mov	r7, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	b10a      	cbz	r2, 8008aa2 <_printf_common+0x26>
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	6033      	str	r3, [r6, #0]
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	0699      	lsls	r1, r3, #26
 8008aa6:	bf42      	ittt	mi
 8008aa8:	6833      	ldrmi	r3, [r6, #0]
 8008aaa:	3302      	addmi	r3, #2
 8008aac:	6033      	strmi	r3, [r6, #0]
 8008aae:	6825      	ldr	r5, [r4, #0]
 8008ab0:	f015 0506 	ands.w	r5, r5, #6
 8008ab4:	d106      	bne.n	8008ac4 <_printf_common+0x48>
 8008ab6:	f104 0a19 	add.w	sl, r4, #25
 8008aba:	68e3      	ldr	r3, [r4, #12]
 8008abc:	6832      	ldr	r2, [r6, #0]
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	42ab      	cmp	r3, r5
 8008ac2:	dc26      	bgt.n	8008b12 <_printf_common+0x96>
 8008ac4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ac8:	6822      	ldr	r2, [r4, #0]
 8008aca:	3b00      	subs	r3, #0
 8008acc:	bf18      	it	ne
 8008ace:	2301      	movne	r3, #1
 8008ad0:	0692      	lsls	r2, r2, #26
 8008ad2:	d42b      	bmi.n	8008b2c <_printf_common+0xb0>
 8008ad4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ad8:	4641      	mov	r1, r8
 8008ada:	4638      	mov	r0, r7
 8008adc:	47c8      	blx	r9
 8008ade:	3001      	adds	r0, #1
 8008ae0:	d01e      	beq.n	8008b20 <_printf_common+0xa4>
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	6922      	ldr	r2, [r4, #16]
 8008ae6:	f003 0306 	and.w	r3, r3, #6
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	bf02      	ittt	eq
 8008aee:	68e5      	ldreq	r5, [r4, #12]
 8008af0:	6833      	ldreq	r3, [r6, #0]
 8008af2:	1aed      	subeq	r5, r5, r3
 8008af4:	68a3      	ldr	r3, [r4, #8]
 8008af6:	bf0c      	ite	eq
 8008af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008afc:	2500      	movne	r5, #0
 8008afe:	4293      	cmp	r3, r2
 8008b00:	bfc4      	itt	gt
 8008b02:	1a9b      	subgt	r3, r3, r2
 8008b04:	18ed      	addgt	r5, r5, r3
 8008b06:	2600      	movs	r6, #0
 8008b08:	341a      	adds	r4, #26
 8008b0a:	42b5      	cmp	r5, r6
 8008b0c:	d11a      	bne.n	8008b44 <_printf_common+0xc8>
 8008b0e:	2000      	movs	r0, #0
 8008b10:	e008      	b.n	8008b24 <_printf_common+0xa8>
 8008b12:	2301      	movs	r3, #1
 8008b14:	4652      	mov	r2, sl
 8008b16:	4641      	mov	r1, r8
 8008b18:	4638      	mov	r0, r7
 8008b1a:	47c8      	blx	r9
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	d103      	bne.n	8008b28 <_printf_common+0xac>
 8008b20:	f04f 30ff 	mov.w	r0, #4294967295
 8008b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b28:	3501      	adds	r5, #1
 8008b2a:	e7c6      	b.n	8008aba <_printf_common+0x3e>
 8008b2c:	18e1      	adds	r1, r4, r3
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	2030      	movs	r0, #48	@ 0x30
 8008b32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b36:	4422      	add	r2, r4
 8008b38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b40:	3302      	adds	r3, #2
 8008b42:	e7c7      	b.n	8008ad4 <_printf_common+0x58>
 8008b44:	2301      	movs	r3, #1
 8008b46:	4622      	mov	r2, r4
 8008b48:	4641      	mov	r1, r8
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	47c8      	blx	r9
 8008b4e:	3001      	adds	r0, #1
 8008b50:	d0e6      	beq.n	8008b20 <_printf_common+0xa4>
 8008b52:	3601      	adds	r6, #1
 8008b54:	e7d9      	b.n	8008b0a <_printf_common+0x8e>
	...

08008b58 <_printf_i>:
 8008b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b5c:	7e0f      	ldrb	r7, [r1, #24]
 8008b5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b60:	2f78      	cmp	r7, #120	@ 0x78
 8008b62:	4691      	mov	r9, r2
 8008b64:	4680      	mov	r8, r0
 8008b66:	460c      	mov	r4, r1
 8008b68:	469a      	mov	sl, r3
 8008b6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b6e:	d807      	bhi.n	8008b80 <_printf_i+0x28>
 8008b70:	2f62      	cmp	r7, #98	@ 0x62
 8008b72:	d80a      	bhi.n	8008b8a <_printf_i+0x32>
 8008b74:	2f00      	cmp	r7, #0
 8008b76:	f000 80d2 	beq.w	8008d1e <_printf_i+0x1c6>
 8008b7a:	2f58      	cmp	r7, #88	@ 0x58
 8008b7c:	f000 80b9 	beq.w	8008cf2 <_printf_i+0x19a>
 8008b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b88:	e03a      	b.n	8008c00 <_printf_i+0xa8>
 8008b8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b8e:	2b15      	cmp	r3, #21
 8008b90:	d8f6      	bhi.n	8008b80 <_printf_i+0x28>
 8008b92:	a101      	add	r1, pc, #4	@ (adr r1, 8008b98 <_printf_i+0x40>)
 8008b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b98:	08008bf1 	.word	0x08008bf1
 8008b9c:	08008c05 	.word	0x08008c05
 8008ba0:	08008b81 	.word	0x08008b81
 8008ba4:	08008b81 	.word	0x08008b81
 8008ba8:	08008b81 	.word	0x08008b81
 8008bac:	08008b81 	.word	0x08008b81
 8008bb0:	08008c05 	.word	0x08008c05
 8008bb4:	08008b81 	.word	0x08008b81
 8008bb8:	08008b81 	.word	0x08008b81
 8008bbc:	08008b81 	.word	0x08008b81
 8008bc0:	08008b81 	.word	0x08008b81
 8008bc4:	08008d05 	.word	0x08008d05
 8008bc8:	08008c2f 	.word	0x08008c2f
 8008bcc:	08008cbf 	.word	0x08008cbf
 8008bd0:	08008b81 	.word	0x08008b81
 8008bd4:	08008b81 	.word	0x08008b81
 8008bd8:	08008d27 	.word	0x08008d27
 8008bdc:	08008b81 	.word	0x08008b81
 8008be0:	08008c2f 	.word	0x08008c2f
 8008be4:	08008b81 	.word	0x08008b81
 8008be8:	08008b81 	.word	0x08008b81
 8008bec:	08008cc7 	.word	0x08008cc7
 8008bf0:	6833      	ldr	r3, [r6, #0]
 8008bf2:	1d1a      	adds	r2, r3, #4
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6032      	str	r2, [r6, #0]
 8008bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c00:	2301      	movs	r3, #1
 8008c02:	e09d      	b.n	8008d40 <_printf_i+0x1e8>
 8008c04:	6833      	ldr	r3, [r6, #0]
 8008c06:	6820      	ldr	r0, [r4, #0]
 8008c08:	1d19      	adds	r1, r3, #4
 8008c0a:	6031      	str	r1, [r6, #0]
 8008c0c:	0606      	lsls	r6, r0, #24
 8008c0e:	d501      	bpl.n	8008c14 <_printf_i+0xbc>
 8008c10:	681d      	ldr	r5, [r3, #0]
 8008c12:	e003      	b.n	8008c1c <_printf_i+0xc4>
 8008c14:	0645      	lsls	r5, r0, #25
 8008c16:	d5fb      	bpl.n	8008c10 <_printf_i+0xb8>
 8008c18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c1c:	2d00      	cmp	r5, #0
 8008c1e:	da03      	bge.n	8008c28 <_printf_i+0xd0>
 8008c20:	232d      	movs	r3, #45	@ 0x2d
 8008c22:	426d      	negs	r5, r5
 8008c24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c28:	4859      	ldr	r0, [pc, #356]	@ (8008d90 <_printf_i+0x238>)
 8008c2a:	230a      	movs	r3, #10
 8008c2c:	e011      	b.n	8008c52 <_printf_i+0xfa>
 8008c2e:	6821      	ldr	r1, [r4, #0]
 8008c30:	6833      	ldr	r3, [r6, #0]
 8008c32:	0608      	lsls	r0, r1, #24
 8008c34:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c38:	d402      	bmi.n	8008c40 <_printf_i+0xe8>
 8008c3a:	0649      	lsls	r1, r1, #25
 8008c3c:	bf48      	it	mi
 8008c3e:	b2ad      	uxthmi	r5, r5
 8008c40:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c42:	4853      	ldr	r0, [pc, #332]	@ (8008d90 <_printf_i+0x238>)
 8008c44:	6033      	str	r3, [r6, #0]
 8008c46:	bf14      	ite	ne
 8008c48:	230a      	movne	r3, #10
 8008c4a:	2308      	moveq	r3, #8
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c52:	6866      	ldr	r6, [r4, #4]
 8008c54:	60a6      	str	r6, [r4, #8]
 8008c56:	2e00      	cmp	r6, #0
 8008c58:	bfa2      	ittt	ge
 8008c5a:	6821      	ldrge	r1, [r4, #0]
 8008c5c:	f021 0104 	bicge.w	r1, r1, #4
 8008c60:	6021      	strge	r1, [r4, #0]
 8008c62:	b90d      	cbnz	r5, 8008c68 <_printf_i+0x110>
 8008c64:	2e00      	cmp	r6, #0
 8008c66:	d04b      	beq.n	8008d00 <_printf_i+0x1a8>
 8008c68:	4616      	mov	r6, r2
 8008c6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c6e:	fb03 5711 	mls	r7, r3, r1, r5
 8008c72:	5dc7      	ldrb	r7, [r0, r7]
 8008c74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c78:	462f      	mov	r7, r5
 8008c7a:	42bb      	cmp	r3, r7
 8008c7c:	460d      	mov	r5, r1
 8008c7e:	d9f4      	bls.n	8008c6a <_printf_i+0x112>
 8008c80:	2b08      	cmp	r3, #8
 8008c82:	d10b      	bne.n	8008c9c <_printf_i+0x144>
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	07df      	lsls	r7, r3, #31
 8008c88:	d508      	bpl.n	8008c9c <_printf_i+0x144>
 8008c8a:	6923      	ldr	r3, [r4, #16]
 8008c8c:	6861      	ldr	r1, [r4, #4]
 8008c8e:	4299      	cmp	r1, r3
 8008c90:	bfde      	ittt	le
 8008c92:	2330      	movle	r3, #48	@ 0x30
 8008c94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c9c:	1b92      	subs	r2, r2, r6
 8008c9e:	6122      	str	r2, [r4, #16]
 8008ca0:	f8cd a000 	str.w	sl, [sp]
 8008ca4:	464b      	mov	r3, r9
 8008ca6:	aa03      	add	r2, sp, #12
 8008ca8:	4621      	mov	r1, r4
 8008caa:	4640      	mov	r0, r8
 8008cac:	f7ff fee6 	bl	8008a7c <_printf_common>
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	d14a      	bne.n	8008d4a <_printf_i+0x1f2>
 8008cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb8:	b004      	add	sp, #16
 8008cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cbe:	6823      	ldr	r3, [r4, #0]
 8008cc0:	f043 0320 	orr.w	r3, r3, #32
 8008cc4:	6023      	str	r3, [r4, #0]
 8008cc6:	4833      	ldr	r0, [pc, #204]	@ (8008d94 <_printf_i+0x23c>)
 8008cc8:	2778      	movs	r7, #120	@ 0x78
 8008cca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	6831      	ldr	r1, [r6, #0]
 8008cd2:	061f      	lsls	r7, r3, #24
 8008cd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008cd8:	d402      	bmi.n	8008ce0 <_printf_i+0x188>
 8008cda:	065f      	lsls	r7, r3, #25
 8008cdc:	bf48      	it	mi
 8008cde:	b2ad      	uxthmi	r5, r5
 8008ce0:	6031      	str	r1, [r6, #0]
 8008ce2:	07d9      	lsls	r1, r3, #31
 8008ce4:	bf44      	itt	mi
 8008ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8008cea:	6023      	strmi	r3, [r4, #0]
 8008cec:	b11d      	cbz	r5, 8008cf6 <_printf_i+0x19e>
 8008cee:	2310      	movs	r3, #16
 8008cf0:	e7ac      	b.n	8008c4c <_printf_i+0xf4>
 8008cf2:	4827      	ldr	r0, [pc, #156]	@ (8008d90 <_printf_i+0x238>)
 8008cf4:	e7e9      	b.n	8008cca <_printf_i+0x172>
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	f023 0320 	bic.w	r3, r3, #32
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	e7f6      	b.n	8008cee <_printf_i+0x196>
 8008d00:	4616      	mov	r6, r2
 8008d02:	e7bd      	b.n	8008c80 <_printf_i+0x128>
 8008d04:	6833      	ldr	r3, [r6, #0]
 8008d06:	6825      	ldr	r5, [r4, #0]
 8008d08:	6961      	ldr	r1, [r4, #20]
 8008d0a:	1d18      	adds	r0, r3, #4
 8008d0c:	6030      	str	r0, [r6, #0]
 8008d0e:	062e      	lsls	r6, r5, #24
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	d501      	bpl.n	8008d18 <_printf_i+0x1c0>
 8008d14:	6019      	str	r1, [r3, #0]
 8008d16:	e002      	b.n	8008d1e <_printf_i+0x1c6>
 8008d18:	0668      	lsls	r0, r5, #25
 8008d1a:	d5fb      	bpl.n	8008d14 <_printf_i+0x1bc>
 8008d1c:	8019      	strh	r1, [r3, #0]
 8008d1e:	2300      	movs	r3, #0
 8008d20:	6123      	str	r3, [r4, #16]
 8008d22:	4616      	mov	r6, r2
 8008d24:	e7bc      	b.n	8008ca0 <_printf_i+0x148>
 8008d26:	6833      	ldr	r3, [r6, #0]
 8008d28:	1d1a      	adds	r2, r3, #4
 8008d2a:	6032      	str	r2, [r6, #0]
 8008d2c:	681e      	ldr	r6, [r3, #0]
 8008d2e:	6862      	ldr	r2, [r4, #4]
 8008d30:	2100      	movs	r1, #0
 8008d32:	4630      	mov	r0, r6
 8008d34:	f7f7 fa8c 	bl	8000250 <memchr>
 8008d38:	b108      	cbz	r0, 8008d3e <_printf_i+0x1e6>
 8008d3a:	1b80      	subs	r0, r0, r6
 8008d3c:	6060      	str	r0, [r4, #4]
 8008d3e:	6863      	ldr	r3, [r4, #4]
 8008d40:	6123      	str	r3, [r4, #16]
 8008d42:	2300      	movs	r3, #0
 8008d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d48:	e7aa      	b.n	8008ca0 <_printf_i+0x148>
 8008d4a:	6923      	ldr	r3, [r4, #16]
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	4649      	mov	r1, r9
 8008d50:	4640      	mov	r0, r8
 8008d52:	47d0      	blx	sl
 8008d54:	3001      	adds	r0, #1
 8008d56:	d0ad      	beq.n	8008cb4 <_printf_i+0x15c>
 8008d58:	6823      	ldr	r3, [r4, #0]
 8008d5a:	079b      	lsls	r3, r3, #30
 8008d5c:	d413      	bmi.n	8008d86 <_printf_i+0x22e>
 8008d5e:	68e0      	ldr	r0, [r4, #12]
 8008d60:	9b03      	ldr	r3, [sp, #12]
 8008d62:	4298      	cmp	r0, r3
 8008d64:	bfb8      	it	lt
 8008d66:	4618      	movlt	r0, r3
 8008d68:	e7a6      	b.n	8008cb8 <_printf_i+0x160>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	4632      	mov	r2, r6
 8008d6e:	4649      	mov	r1, r9
 8008d70:	4640      	mov	r0, r8
 8008d72:	47d0      	blx	sl
 8008d74:	3001      	adds	r0, #1
 8008d76:	d09d      	beq.n	8008cb4 <_printf_i+0x15c>
 8008d78:	3501      	adds	r5, #1
 8008d7a:	68e3      	ldr	r3, [r4, #12]
 8008d7c:	9903      	ldr	r1, [sp, #12]
 8008d7e:	1a5b      	subs	r3, r3, r1
 8008d80:	42ab      	cmp	r3, r5
 8008d82:	dcf2      	bgt.n	8008d6a <_printf_i+0x212>
 8008d84:	e7eb      	b.n	8008d5e <_printf_i+0x206>
 8008d86:	2500      	movs	r5, #0
 8008d88:	f104 0619 	add.w	r6, r4, #25
 8008d8c:	e7f5      	b.n	8008d7a <_printf_i+0x222>
 8008d8e:	bf00      	nop
 8008d90:	080097ef 	.word	0x080097ef
 8008d94:	08009800 	.word	0x08009800

08008d98 <__sflush_r>:
 8008d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da0:	0716      	lsls	r6, r2, #28
 8008da2:	4605      	mov	r5, r0
 8008da4:	460c      	mov	r4, r1
 8008da6:	d454      	bmi.n	8008e52 <__sflush_r+0xba>
 8008da8:	684b      	ldr	r3, [r1, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	dc02      	bgt.n	8008db4 <__sflush_r+0x1c>
 8008dae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	dd48      	ble.n	8008e46 <__sflush_r+0xae>
 8008db4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008db6:	2e00      	cmp	r6, #0
 8008db8:	d045      	beq.n	8008e46 <__sflush_r+0xae>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008dc0:	682f      	ldr	r7, [r5, #0]
 8008dc2:	6a21      	ldr	r1, [r4, #32]
 8008dc4:	602b      	str	r3, [r5, #0]
 8008dc6:	d030      	beq.n	8008e2a <__sflush_r+0x92>
 8008dc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008dca:	89a3      	ldrh	r3, [r4, #12]
 8008dcc:	0759      	lsls	r1, r3, #29
 8008dce:	d505      	bpl.n	8008ddc <__sflush_r+0x44>
 8008dd0:	6863      	ldr	r3, [r4, #4]
 8008dd2:	1ad2      	subs	r2, r2, r3
 8008dd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008dd6:	b10b      	cbz	r3, 8008ddc <__sflush_r+0x44>
 8008dd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008dda:	1ad2      	subs	r2, r2, r3
 8008ddc:	2300      	movs	r3, #0
 8008dde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008de0:	6a21      	ldr	r1, [r4, #32]
 8008de2:	4628      	mov	r0, r5
 8008de4:	47b0      	blx	r6
 8008de6:	1c43      	adds	r3, r0, #1
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	d106      	bne.n	8008dfa <__sflush_r+0x62>
 8008dec:	6829      	ldr	r1, [r5, #0]
 8008dee:	291d      	cmp	r1, #29
 8008df0:	d82b      	bhi.n	8008e4a <__sflush_r+0xb2>
 8008df2:	4a2a      	ldr	r2, [pc, #168]	@ (8008e9c <__sflush_r+0x104>)
 8008df4:	410a      	asrs	r2, r1
 8008df6:	07d6      	lsls	r6, r2, #31
 8008df8:	d427      	bmi.n	8008e4a <__sflush_r+0xb2>
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	6062      	str	r2, [r4, #4]
 8008dfe:	04d9      	lsls	r1, r3, #19
 8008e00:	6922      	ldr	r2, [r4, #16]
 8008e02:	6022      	str	r2, [r4, #0]
 8008e04:	d504      	bpl.n	8008e10 <__sflush_r+0x78>
 8008e06:	1c42      	adds	r2, r0, #1
 8008e08:	d101      	bne.n	8008e0e <__sflush_r+0x76>
 8008e0a:	682b      	ldr	r3, [r5, #0]
 8008e0c:	b903      	cbnz	r3, 8008e10 <__sflush_r+0x78>
 8008e0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e12:	602f      	str	r7, [r5, #0]
 8008e14:	b1b9      	cbz	r1, 8008e46 <__sflush_r+0xae>
 8008e16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e1a:	4299      	cmp	r1, r3
 8008e1c:	d002      	beq.n	8008e24 <__sflush_r+0x8c>
 8008e1e:	4628      	mov	r0, r5
 8008e20:	f7ff fbd4 	bl	80085cc <_free_r>
 8008e24:	2300      	movs	r3, #0
 8008e26:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e28:	e00d      	b.n	8008e46 <__sflush_r+0xae>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	47b0      	blx	r6
 8008e30:	4602      	mov	r2, r0
 8008e32:	1c50      	adds	r0, r2, #1
 8008e34:	d1c9      	bne.n	8008dca <__sflush_r+0x32>
 8008e36:	682b      	ldr	r3, [r5, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d0c6      	beq.n	8008dca <__sflush_r+0x32>
 8008e3c:	2b1d      	cmp	r3, #29
 8008e3e:	d001      	beq.n	8008e44 <__sflush_r+0xac>
 8008e40:	2b16      	cmp	r3, #22
 8008e42:	d11e      	bne.n	8008e82 <__sflush_r+0xea>
 8008e44:	602f      	str	r7, [r5, #0]
 8008e46:	2000      	movs	r0, #0
 8008e48:	e022      	b.n	8008e90 <__sflush_r+0xf8>
 8008e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e4e:	b21b      	sxth	r3, r3
 8008e50:	e01b      	b.n	8008e8a <__sflush_r+0xf2>
 8008e52:	690f      	ldr	r7, [r1, #16]
 8008e54:	2f00      	cmp	r7, #0
 8008e56:	d0f6      	beq.n	8008e46 <__sflush_r+0xae>
 8008e58:	0793      	lsls	r3, r2, #30
 8008e5a:	680e      	ldr	r6, [r1, #0]
 8008e5c:	bf08      	it	eq
 8008e5e:	694b      	ldreq	r3, [r1, #20]
 8008e60:	600f      	str	r7, [r1, #0]
 8008e62:	bf18      	it	ne
 8008e64:	2300      	movne	r3, #0
 8008e66:	eba6 0807 	sub.w	r8, r6, r7
 8008e6a:	608b      	str	r3, [r1, #8]
 8008e6c:	f1b8 0f00 	cmp.w	r8, #0
 8008e70:	dde9      	ble.n	8008e46 <__sflush_r+0xae>
 8008e72:	6a21      	ldr	r1, [r4, #32]
 8008e74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008e76:	4643      	mov	r3, r8
 8008e78:	463a      	mov	r2, r7
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	47b0      	blx	r6
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	dc08      	bgt.n	8008e94 <__sflush_r+0xfc>
 8008e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e8a:	81a3      	strh	r3, [r4, #12]
 8008e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e94:	4407      	add	r7, r0
 8008e96:	eba8 0800 	sub.w	r8, r8, r0
 8008e9a:	e7e7      	b.n	8008e6c <__sflush_r+0xd4>
 8008e9c:	dfbffffe 	.word	0xdfbffffe

08008ea0 <_fflush_r>:
 8008ea0:	b538      	push	{r3, r4, r5, lr}
 8008ea2:	690b      	ldr	r3, [r1, #16]
 8008ea4:	4605      	mov	r5, r0
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	b913      	cbnz	r3, 8008eb0 <_fflush_r+0x10>
 8008eaa:	2500      	movs	r5, #0
 8008eac:	4628      	mov	r0, r5
 8008eae:	bd38      	pop	{r3, r4, r5, pc}
 8008eb0:	b118      	cbz	r0, 8008eba <_fflush_r+0x1a>
 8008eb2:	6a03      	ldr	r3, [r0, #32]
 8008eb4:	b90b      	cbnz	r3, 8008eba <_fflush_r+0x1a>
 8008eb6:	f7ff f9e5 	bl	8008284 <__sinit>
 8008eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d0f3      	beq.n	8008eaa <_fflush_r+0xa>
 8008ec2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ec4:	07d0      	lsls	r0, r2, #31
 8008ec6:	d404      	bmi.n	8008ed2 <_fflush_r+0x32>
 8008ec8:	0599      	lsls	r1, r3, #22
 8008eca:	d402      	bmi.n	8008ed2 <_fflush_r+0x32>
 8008ecc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ece:	f7ff fb5c 	bl	800858a <__retarget_lock_acquire_recursive>
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	f7ff ff5f 	bl	8008d98 <__sflush_r>
 8008eda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008edc:	07da      	lsls	r2, r3, #31
 8008ede:	4605      	mov	r5, r0
 8008ee0:	d4e4      	bmi.n	8008eac <_fflush_r+0xc>
 8008ee2:	89a3      	ldrh	r3, [r4, #12]
 8008ee4:	059b      	lsls	r3, r3, #22
 8008ee6:	d4e1      	bmi.n	8008eac <_fflush_r+0xc>
 8008ee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008eea:	f7ff fb4f 	bl	800858c <__retarget_lock_release_recursive>
 8008eee:	e7dd      	b.n	8008eac <_fflush_r+0xc>

08008ef0 <fiprintf>:
 8008ef0:	b40e      	push	{r1, r2, r3}
 8008ef2:	b503      	push	{r0, r1, lr}
 8008ef4:	4601      	mov	r1, r0
 8008ef6:	ab03      	add	r3, sp, #12
 8008ef8:	4805      	ldr	r0, [pc, #20]	@ (8008f10 <fiprintf+0x20>)
 8008efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008efe:	6800      	ldr	r0, [r0, #0]
 8008f00:	9301      	str	r3, [sp, #4]
 8008f02:	f000 f89d 	bl	8009040 <_vfiprintf_r>
 8008f06:	b002      	add	sp, #8
 8008f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f0c:	b003      	add	sp, #12
 8008f0e:	4770      	bx	lr
 8008f10:	200000f4 	.word	0x200000f4

08008f14 <memmove>:
 8008f14:	4288      	cmp	r0, r1
 8008f16:	b510      	push	{r4, lr}
 8008f18:	eb01 0402 	add.w	r4, r1, r2
 8008f1c:	d902      	bls.n	8008f24 <memmove+0x10>
 8008f1e:	4284      	cmp	r4, r0
 8008f20:	4623      	mov	r3, r4
 8008f22:	d807      	bhi.n	8008f34 <memmove+0x20>
 8008f24:	1e43      	subs	r3, r0, #1
 8008f26:	42a1      	cmp	r1, r4
 8008f28:	d008      	beq.n	8008f3c <memmove+0x28>
 8008f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f32:	e7f8      	b.n	8008f26 <memmove+0x12>
 8008f34:	4402      	add	r2, r0
 8008f36:	4601      	mov	r1, r0
 8008f38:	428a      	cmp	r2, r1
 8008f3a:	d100      	bne.n	8008f3e <memmove+0x2a>
 8008f3c:	bd10      	pop	{r4, pc}
 8008f3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f46:	e7f7      	b.n	8008f38 <memmove+0x24>

08008f48 <_sbrk_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	4d06      	ldr	r5, [pc, #24]	@ (8008f64 <_sbrk_r+0x1c>)
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	4604      	mov	r4, r0
 8008f50:	4608      	mov	r0, r1
 8008f52:	602b      	str	r3, [r5, #0]
 8008f54:	f7f7 ff9c 	bl	8000e90 <_sbrk>
 8008f58:	1c43      	adds	r3, r0, #1
 8008f5a:	d102      	bne.n	8008f62 <_sbrk_r+0x1a>
 8008f5c:	682b      	ldr	r3, [r5, #0]
 8008f5e:	b103      	cbz	r3, 8008f62 <_sbrk_r+0x1a>
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	bd38      	pop	{r3, r4, r5, pc}
 8008f64:	20000640 	.word	0x20000640

08008f68 <memcpy>:
 8008f68:	440a      	add	r2, r1
 8008f6a:	4291      	cmp	r1, r2
 8008f6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f70:	d100      	bne.n	8008f74 <memcpy+0xc>
 8008f72:	4770      	bx	lr
 8008f74:	b510      	push	{r4, lr}
 8008f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f7e:	4291      	cmp	r1, r2
 8008f80:	d1f9      	bne.n	8008f76 <memcpy+0xe>
 8008f82:	bd10      	pop	{r4, pc}

08008f84 <abort>:
 8008f84:	b508      	push	{r3, lr}
 8008f86:	2006      	movs	r0, #6
 8008f88:	f000 fa2e 	bl	80093e8 <raise>
 8008f8c:	2001      	movs	r0, #1
 8008f8e:	f7f7 ff07 	bl	8000da0 <_exit>

08008f92 <_realloc_r>:
 8008f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f96:	4680      	mov	r8, r0
 8008f98:	4615      	mov	r5, r2
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	b921      	cbnz	r1, 8008fa8 <_realloc_r+0x16>
 8008f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	f7ff bb86 	b.w	80086b4 <_malloc_r>
 8008fa8:	b92a      	cbnz	r2, 8008fb6 <_realloc_r+0x24>
 8008faa:	f7ff fb0f 	bl	80085cc <_free_r>
 8008fae:	2400      	movs	r4, #0
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fb6:	f000 fa33 	bl	8009420 <_malloc_usable_size_r>
 8008fba:	4285      	cmp	r5, r0
 8008fbc:	4606      	mov	r6, r0
 8008fbe:	d802      	bhi.n	8008fc6 <_realloc_r+0x34>
 8008fc0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008fc4:	d8f4      	bhi.n	8008fb0 <_realloc_r+0x1e>
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	4640      	mov	r0, r8
 8008fca:	f7ff fb73 	bl	80086b4 <_malloc_r>
 8008fce:	4607      	mov	r7, r0
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d0ec      	beq.n	8008fae <_realloc_r+0x1c>
 8008fd4:	42b5      	cmp	r5, r6
 8008fd6:	462a      	mov	r2, r5
 8008fd8:	4621      	mov	r1, r4
 8008fda:	bf28      	it	cs
 8008fdc:	4632      	movcs	r2, r6
 8008fde:	f7ff ffc3 	bl	8008f68 <memcpy>
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	4640      	mov	r0, r8
 8008fe6:	f7ff faf1 	bl	80085cc <_free_r>
 8008fea:	463c      	mov	r4, r7
 8008fec:	e7e0      	b.n	8008fb0 <_realloc_r+0x1e>

08008fee <__sfputc_r>:
 8008fee:	6893      	ldr	r3, [r2, #8]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	b410      	push	{r4}
 8008ff6:	6093      	str	r3, [r2, #8]
 8008ff8:	da08      	bge.n	800900c <__sfputc_r+0x1e>
 8008ffa:	6994      	ldr	r4, [r2, #24]
 8008ffc:	42a3      	cmp	r3, r4
 8008ffe:	db01      	blt.n	8009004 <__sfputc_r+0x16>
 8009000:	290a      	cmp	r1, #10
 8009002:	d103      	bne.n	800900c <__sfputc_r+0x1e>
 8009004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009008:	f000 b932 	b.w	8009270 <__swbuf_r>
 800900c:	6813      	ldr	r3, [r2, #0]
 800900e:	1c58      	adds	r0, r3, #1
 8009010:	6010      	str	r0, [r2, #0]
 8009012:	7019      	strb	r1, [r3, #0]
 8009014:	4608      	mov	r0, r1
 8009016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800901a:	4770      	bx	lr

0800901c <__sfputs_r>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	4606      	mov	r6, r0
 8009020:	460f      	mov	r7, r1
 8009022:	4614      	mov	r4, r2
 8009024:	18d5      	adds	r5, r2, r3
 8009026:	42ac      	cmp	r4, r5
 8009028:	d101      	bne.n	800902e <__sfputs_r+0x12>
 800902a:	2000      	movs	r0, #0
 800902c:	e007      	b.n	800903e <__sfputs_r+0x22>
 800902e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009032:	463a      	mov	r2, r7
 8009034:	4630      	mov	r0, r6
 8009036:	f7ff ffda 	bl	8008fee <__sfputc_r>
 800903a:	1c43      	adds	r3, r0, #1
 800903c:	d1f3      	bne.n	8009026 <__sfputs_r+0xa>
 800903e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009040 <_vfiprintf_r>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	460d      	mov	r5, r1
 8009046:	b09d      	sub	sp, #116	@ 0x74
 8009048:	4614      	mov	r4, r2
 800904a:	4698      	mov	r8, r3
 800904c:	4606      	mov	r6, r0
 800904e:	b118      	cbz	r0, 8009058 <_vfiprintf_r+0x18>
 8009050:	6a03      	ldr	r3, [r0, #32]
 8009052:	b90b      	cbnz	r3, 8009058 <_vfiprintf_r+0x18>
 8009054:	f7ff f916 	bl	8008284 <__sinit>
 8009058:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800905a:	07d9      	lsls	r1, r3, #31
 800905c:	d405      	bmi.n	800906a <_vfiprintf_r+0x2a>
 800905e:	89ab      	ldrh	r3, [r5, #12]
 8009060:	059a      	lsls	r2, r3, #22
 8009062:	d402      	bmi.n	800906a <_vfiprintf_r+0x2a>
 8009064:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009066:	f7ff fa90 	bl	800858a <__retarget_lock_acquire_recursive>
 800906a:	89ab      	ldrh	r3, [r5, #12]
 800906c:	071b      	lsls	r3, r3, #28
 800906e:	d501      	bpl.n	8009074 <_vfiprintf_r+0x34>
 8009070:	692b      	ldr	r3, [r5, #16]
 8009072:	b99b      	cbnz	r3, 800909c <_vfiprintf_r+0x5c>
 8009074:	4629      	mov	r1, r5
 8009076:	4630      	mov	r0, r6
 8009078:	f000 f938 	bl	80092ec <__swsetup_r>
 800907c:	b170      	cbz	r0, 800909c <_vfiprintf_r+0x5c>
 800907e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009080:	07dc      	lsls	r4, r3, #31
 8009082:	d504      	bpl.n	800908e <_vfiprintf_r+0x4e>
 8009084:	f04f 30ff 	mov.w	r0, #4294967295
 8009088:	b01d      	add	sp, #116	@ 0x74
 800908a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908e:	89ab      	ldrh	r3, [r5, #12]
 8009090:	0598      	lsls	r0, r3, #22
 8009092:	d4f7      	bmi.n	8009084 <_vfiprintf_r+0x44>
 8009094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009096:	f7ff fa79 	bl	800858c <__retarget_lock_release_recursive>
 800909a:	e7f3      	b.n	8009084 <_vfiprintf_r+0x44>
 800909c:	2300      	movs	r3, #0
 800909e:	9309      	str	r3, [sp, #36]	@ 0x24
 80090a0:	2320      	movs	r3, #32
 80090a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80090aa:	2330      	movs	r3, #48	@ 0x30
 80090ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800925c <_vfiprintf_r+0x21c>
 80090b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090b4:	f04f 0901 	mov.w	r9, #1
 80090b8:	4623      	mov	r3, r4
 80090ba:	469a      	mov	sl, r3
 80090bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090c0:	b10a      	cbz	r2, 80090c6 <_vfiprintf_r+0x86>
 80090c2:	2a25      	cmp	r2, #37	@ 0x25
 80090c4:	d1f9      	bne.n	80090ba <_vfiprintf_r+0x7a>
 80090c6:	ebba 0b04 	subs.w	fp, sl, r4
 80090ca:	d00b      	beq.n	80090e4 <_vfiprintf_r+0xa4>
 80090cc:	465b      	mov	r3, fp
 80090ce:	4622      	mov	r2, r4
 80090d0:	4629      	mov	r1, r5
 80090d2:	4630      	mov	r0, r6
 80090d4:	f7ff ffa2 	bl	800901c <__sfputs_r>
 80090d8:	3001      	adds	r0, #1
 80090da:	f000 80a7 	beq.w	800922c <_vfiprintf_r+0x1ec>
 80090de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090e0:	445a      	add	r2, fp
 80090e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80090e4:	f89a 3000 	ldrb.w	r3, [sl]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f000 809f 	beq.w	800922c <_vfiprintf_r+0x1ec>
 80090ee:	2300      	movs	r3, #0
 80090f0:	f04f 32ff 	mov.w	r2, #4294967295
 80090f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090f8:	f10a 0a01 	add.w	sl, sl, #1
 80090fc:	9304      	str	r3, [sp, #16]
 80090fe:	9307      	str	r3, [sp, #28]
 8009100:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009104:	931a      	str	r3, [sp, #104]	@ 0x68
 8009106:	4654      	mov	r4, sl
 8009108:	2205      	movs	r2, #5
 800910a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910e:	4853      	ldr	r0, [pc, #332]	@ (800925c <_vfiprintf_r+0x21c>)
 8009110:	f7f7 f89e 	bl	8000250 <memchr>
 8009114:	9a04      	ldr	r2, [sp, #16]
 8009116:	b9d8      	cbnz	r0, 8009150 <_vfiprintf_r+0x110>
 8009118:	06d1      	lsls	r1, r2, #27
 800911a:	bf44      	itt	mi
 800911c:	2320      	movmi	r3, #32
 800911e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009122:	0713      	lsls	r3, r2, #28
 8009124:	bf44      	itt	mi
 8009126:	232b      	movmi	r3, #43	@ 0x2b
 8009128:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800912c:	f89a 3000 	ldrb.w	r3, [sl]
 8009130:	2b2a      	cmp	r3, #42	@ 0x2a
 8009132:	d015      	beq.n	8009160 <_vfiprintf_r+0x120>
 8009134:	9a07      	ldr	r2, [sp, #28]
 8009136:	4654      	mov	r4, sl
 8009138:	2000      	movs	r0, #0
 800913a:	f04f 0c0a 	mov.w	ip, #10
 800913e:	4621      	mov	r1, r4
 8009140:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009144:	3b30      	subs	r3, #48	@ 0x30
 8009146:	2b09      	cmp	r3, #9
 8009148:	d94b      	bls.n	80091e2 <_vfiprintf_r+0x1a2>
 800914a:	b1b0      	cbz	r0, 800917a <_vfiprintf_r+0x13a>
 800914c:	9207      	str	r2, [sp, #28]
 800914e:	e014      	b.n	800917a <_vfiprintf_r+0x13a>
 8009150:	eba0 0308 	sub.w	r3, r0, r8
 8009154:	fa09 f303 	lsl.w	r3, r9, r3
 8009158:	4313      	orrs	r3, r2
 800915a:	9304      	str	r3, [sp, #16]
 800915c:	46a2      	mov	sl, r4
 800915e:	e7d2      	b.n	8009106 <_vfiprintf_r+0xc6>
 8009160:	9b03      	ldr	r3, [sp, #12]
 8009162:	1d19      	adds	r1, r3, #4
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	9103      	str	r1, [sp, #12]
 8009168:	2b00      	cmp	r3, #0
 800916a:	bfbb      	ittet	lt
 800916c:	425b      	neglt	r3, r3
 800916e:	f042 0202 	orrlt.w	r2, r2, #2
 8009172:	9307      	strge	r3, [sp, #28]
 8009174:	9307      	strlt	r3, [sp, #28]
 8009176:	bfb8      	it	lt
 8009178:	9204      	strlt	r2, [sp, #16]
 800917a:	7823      	ldrb	r3, [r4, #0]
 800917c:	2b2e      	cmp	r3, #46	@ 0x2e
 800917e:	d10a      	bne.n	8009196 <_vfiprintf_r+0x156>
 8009180:	7863      	ldrb	r3, [r4, #1]
 8009182:	2b2a      	cmp	r3, #42	@ 0x2a
 8009184:	d132      	bne.n	80091ec <_vfiprintf_r+0x1ac>
 8009186:	9b03      	ldr	r3, [sp, #12]
 8009188:	1d1a      	adds	r2, r3, #4
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	9203      	str	r2, [sp, #12]
 800918e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009192:	3402      	adds	r4, #2
 8009194:	9305      	str	r3, [sp, #20]
 8009196:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800926c <_vfiprintf_r+0x22c>
 800919a:	7821      	ldrb	r1, [r4, #0]
 800919c:	2203      	movs	r2, #3
 800919e:	4650      	mov	r0, sl
 80091a0:	f7f7 f856 	bl	8000250 <memchr>
 80091a4:	b138      	cbz	r0, 80091b6 <_vfiprintf_r+0x176>
 80091a6:	9b04      	ldr	r3, [sp, #16]
 80091a8:	eba0 000a 	sub.w	r0, r0, sl
 80091ac:	2240      	movs	r2, #64	@ 0x40
 80091ae:	4082      	lsls	r2, r0
 80091b0:	4313      	orrs	r3, r2
 80091b2:	3401      	adds	r4, #1
 80091b4:	9304      	str	r3, [sp, #16]
 80091b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ba:	4829      	ldr	r0, [pc, #164]	@ (8009260 <_vfiprintf_r+0x220>)
 80091bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091c0:	2206      	movs	r2, #6
 80091c2:	f7f7 f845 	bl	8000250 <memchr>
 80091c6:	2800      	cmp	r0, #0
 80091c8:	d03f      	beq.n	800924a <_vfiprintf_r+0x20a>
 80091ca:	4b26      	ldr	r3, [pc, #152]	@ (8009264 <_vfiprintf_r+0x224>)
 80091cc:	bb1b      	cbnz	r3, 8009216 <_vfiprintf_r+0x1d6>
 80091ce:	9b03      	ldr	r3, [sp, #12]
 80091d0:	3307      	adds	r3, #7
 80091d2:	f023 0307 	bic.w	r3, r3, #7
 80091d6:	3308      	adds	r3, #8
 80091d8:	9303      	str	r3, [sp, #12]
 80091da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091dc:	443b      	add	r3, r7
 80091de:	9309      	str	r3, [sp, #36]	@ 0x24
 80091e0:	e76a      	b.n	80090b8 <_vfiprintf_r+0x78>
 80091e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80091e6:	460c      	mov	r4, r1
 80091e8:	2001      	movs	r0, #1
 80091ea:	e7a8      	b.n	800913e <_vfiprintf_r+0xfe>
 80091ec:	2300      	movs	r3, #0
 80091ee:	3401      	adds	r4, #1
 80091f0:	9305      	str	r3, [sp, #20]
 80091f2:	4619      	mov	r1, r3
 80091f4:	f04f 0c0a 	mov.w	ip, #10
 80091f8:	4620      	mov	r0, r4
 80091fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091fe:	3a30      	subs	r2, #48	@ 0x30
 8009200:	2a09      	cmp	r2, #9
 8009202:	d903      	bls.n	800920c <_vfiprintf_r+0x1cc>
 8009204:	2b00      	cmp	r3, #0
 8009206:	d0c6      	beq.n	8009196 <_vfiprintf_r+0x156>
 8009208:	9105      	str	r1, [sp, #20]
 800920a:	e7c4      	b.n	8009196 <_vfiprintf_r+0x156>
 800920c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009210:	4604      	mov	r4, r0
 8009212:	2301      	movs	r3, #1
 8009214:	e7f0      	b.n	80091f8 <_vfiprintf_r+0x1b8>
 8009216:	ab03      	add	r3, sp, #12
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	462a      	mov	r2, r5
 800921c:	4b12      	ldr	r3, [pc, #72]	@ (8009268 <_vfiprintf_r+0x228>)
 800921e:	a904      	add	r1, sp, #16
 8009220:	4630      	mov	r0, r6
 8009222:	f3af 8000 	nop.w
 8009226:	4607      	mov	r7, r0
 8009228:	1c78      	adds	r0, r7, #1
 800922a:	d1d6      	bne.n	80091da <_vfiprintf_r+0x19a>
 800922c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800922e:	07d9      	lsls	r1, r3, #31
 8009230:	d405      	bmi.n	800923e <_vfiprintf_r+0x1fe>
 8009232:	89ab      	ldrh	r3, [r5, #12]
 8009234:	059a      	lsls	r2, r3, #22
 8009236:	d402      	bmi.n	800923e <_vfiprintf_r+0x1fe>
 8009238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800923a:	f7ff f9a7 	bl	800858c <__retarget_lock_release_recursive>
 800923e:	89ab      	ldrh	r3, [r5, #12]
 8009240:	065b      	lsls	r3, r3, #25
 8009242:	f53f af1f 	bmi.w	8009084 <_vfiprintf_r+0x44>
 8009246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009248:	e71e      	b.n	8009088 <_vfiprintf_r+0x48>
 800924a:	ab03      	add	r3, sp, #12
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	462a      	mov	r2, r5
 8009250:	4b05      	ldr	r3, [pc, #20]	@ (8009268 <_vfiprintf_r+0x228>)
 8009252:	a904      	add	r1, sp, #16
 8009254:	4630      	mov	r0, r6
 8009256:	f7ff fc7f 	bl	8008b58 <_printf_i>
 800925a:	e7e4      	b.n	8009226 <_vfiprintf_r+0x1e6>
 800925c:	080097de 	.word	0x080097de
 8009260:	080097e8 	.word	0x080097e8
 8009264:	00000000 	.word	0x00000000
 8009268:	0800901d 	.word	0x0800901d
 800926c:	080097e4 	.word	0x080097e4

08009270 <__swbuf_r>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	460e      	mov	r6, r1
 8009274:	4614      	mov	r4, r2
 8009276:	4605      	mov	r5, r0
 8009278:	b118      	cbz	r0, 8009282 <__swbuf_r+0x12>
 800927a:	6a03      	ldr	r3, [r0, #32]
 800927c:	b90b      	cbnz	r3, 8009282 <__swbuf_r+0x12>
 800927e:	f7ff f801 	bl	8008284 <__sinit>
 8009282:	69a3      	ldr	r3, [r4, #24]
 8009284:	60a3      	str	r3, [r4, #8]
 8009286:	89a3      	ldrh	r3, [r4, #12]
 8009288:	071a      	lsls	r2, r3, #28
 800928a:	d501      	bpl.n	8009290 <__swbuf_r+0x20>
 800928c:	6923      	ldr	r3, [r4, #16]
 800928e:	b943      	cbnz	r3, 80092a2 <__swbuf_r+0x32>
 8009290:	4621      	mov	r1, r4
 8009292:	4628      	mov	r0, r5
 8009294:	f000 f82a 	bl	80092ec <__swsetup_r>
 8009298:	b118      	cbz	r0, 80092a2 <__swbuf_r+0x32>
 800929a:	f04f 37ff 	mov.w	r7, #4294967295
 800929e:	4638      	mov	r0, r7
 80092a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	6922      	ldr	r2, [r4, #16]
 80092a6:	1a98      	subs	r0, r3, r2
 80092a8:	6963      	ldr	r3, [r4, #20]
 80092aa:	b2f6      	uxtb	r6, r6
 80092ac:	4283      	cmp	r3, r0
 80092ae:	4637      	mov	r7, r6
 80092b0:	dc05      	bgt.n	80092be <__swbuf_r+0x4e>
 80092b2:	4621      	mov	r1, r4
 80092b4:	4628      	mov	r0, r5
 80092b6:	f7ff fdf3 	bl	8008ea0 <_fflush_r>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d1ed      	bne.n	800929a <__swbuf_r+0x2a>
 80092be:	68a3      	ldr	r3, [r4, #8]
 80092c0:	3b01      	subs	r3, #1
 80092c2:	60a3      	str	r3, [r4, #8]
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	1c5a      	adds	r2, r3, #1
 80092c8:	6022      	str	r2, [r4, #0]
 80092ca:	701e      	strb	r6, [r3, #0]
 80092cc:	6962      	ldr	r2, [r4, #20]
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d004      	beq.n	80092de <__swbuf_r+0x6e>
 80092d4:	89a3      	ldrh	r3, [r4, #12]
 80092d6:	07db      	lsls	r3, r3, #31
 80092d8:	d5e1      	bpl.n	800929e <__swbuf_r+0x2e>
 80092da:	2e0a      	cmp	r6, #10
 80092dc:	d1df      	bne.n	800929e <__swbuf_r+0x2e>
 80092de:	4621      	mov	r1, r4
 80092e0:	4628      	mov	r0, r5
 80092e2:	f7ff fddd 	bl	8008ea0 <_fflush_r>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d0d9      	beq.n	800929e <__swbuf_r+0x2e>
 80092ea:	e7d6      	b.n	800929a <__swbuf_r+0x2a>

080092ec <__swsetup_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4b29      	ldr	r3, [pc, #164]	@ (8009394 <__swsetup_r+0xa8>)
 80092f0:	4605      	mov	r5, r0
 80092f2:	6818      	ldr	r0, [r3, #0]
 80092f4:	460c      	mov	r4, r1
 80092f6:	b118      	cbz	r0, 8009300 <__swsetup_r+0x14>
 80092f8:	6a03      	ldr	r3, [r0, #32]
 80092fa:	b90b      	cbnz	r3, 8009300 <__swsetup_r+0x14>
 80092fc:	f7fe ffc2 	bl	8008284 <__sinit>
 8009300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009304:	0719      	lsls	r1, r3, #28
 8009306:	d422      	bmi.n	800934e <__swsetup_r+0x62>
 8009308:	06da      	lsls	r2, r3, #27
 800930a:	d407      	bmi.n	800931c <__swsetup_r+0x30>
 800930c:	2209      	movs	r2, #9
 800930e:	602a      	str	r2, [r5, #0]
 8009310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009314:	81a3      	strh	r3, [r4, #12]
 8009316:	f04f 30ff 	mov.w	r0, #4294967295
 800931a:	e033      	b.n	8009384 <__swsetup_r+0x98>
 800931c:	0758      	lsls	r0, r3, #29
 800931e:	d512      	bpl.n	8009346 <__swsetup_r+0x5a>
 8009320:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009322:	b141      	cbz	r1, 8009336 <__swsetup_r+0x4a>
 8009324:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009328:	4299      	cmp	r1, r3
 800932a:	d002      	beq.n	8009332 <__swsetup_r+0x46>
 800932c:	4628      	mov	r0, r5
 800932e:	f7ff f94d 	bl	80085cc <_free_r>
 8009332:	2300      	movs	r3, #0
 8009334:	6363      	str	r3, [r4, #52]	@ 0x34
 8009336:	89a3      	ldrh	r3, [r4, #12]
 8009338:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800933c:	81a3      	strh	r3, [r4, #12]
 800933e:	2300      	movs	r3, #0
 8009340:	6063      	str	r3, [r4, #4]
 8009342:	6923      	ldr	r3, [r4, #16]
 8009344:	6023      	str	r3, [r4, #0]
 8009346:	89a3      	ldrh	r3, [r4, #12]
 8009348:	f043 0308 	orr.w	r3, r3, #8
 800934c:	81a3      	strh	r3, [r4, #12]
 800934e:	6923      	ldr	r3, [r4, #16]
 8009350:	b94b      	cbnz	r3, 8009366 <__swsetup_r+0x7a>
 8009352:	89a3      	ldrh	r3, [r4, #12]
 8009354:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800935c:	d003      	beq.n	8009366 <__swsetup_r+0x7a>
 800935e:	4621      	mov	r1, r4
 8009360:	4628      	mov	r0, r5
 8009362:	f000 f88b 	bl	800947c <__smakebuf_r>
 8009366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800936a:	f013 0201 	ands.w	r2, r3, #1
 800936e:	d00a      	beq.n	8009386 <__swsetup_r+0x9a>
 8009370:	2200      	movs	r2, #0
 8009372:	60a2      	str	r2, [r4, #8]
 8009374:	6962      	ldr	r2, [r4, #20]
 8009376:	4252      	negs	r2, r2
 8009378:	61a2      	str	r2, [r4, #24]
 800937a:	6922      	ldr	r2, [r4, #16]
 800937c:	b942      	cbnz	r2, 8009390 <__swsetup_r+0xa4>
 800937e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009382:	d1c5      	bne.n	8009310 <__swsetup_r+0x24>
 8009384:	bd38      	pop	{r3, r4, r5, pc}
 8009386:	0799      	lsls	r1, r3, #30
 8009388:	bf58      	it	pl
 800938a:	6962      	ldrpl	r2, [r4, #20]
 800938c:	60a2      	str	r2, [r4, #8]
 800938e:	e7f4      	b.n	800937a <__swsetup_r+0x8e>
 8009390:	2000      	movs	r0, #0
 8009392:	e7f7      	b.n	8009384 <__swsetup_r+0x98>
 8009394:	200000f4 	.word	0x200000f4

08009398 <_raise_r>:
 8009398:	291f      	cmp	r1, #31
 800939a:	b538      	push	{r3, r4, r5, lr}
 800939c:	4605      	mov	r5, r0
 800939e:	460c      	mov	r4, r1
 80093a0:	d904      	bls.n	80093ac <_raise_r+0x14>
 80093a2:	2316      	movs	r3, #22
 80093a4:	6003      	str	r3, [r0, #0]
 80093a6:	f04f 30ff 	mov.w	r0, #4294967295
 80093aa:	bd38      	pop	{r3, r4, r5, pc}
 80093ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80093ae:	b112      	cbz	r2, 80093b6 <_raise_r+0x1e>
 80093b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093b4:	b94b      	cbnz	r3, 80093ca <_raise_r+0x32>
 80093b6:	4628      	mov	r0, r5
 80093b8:	f000 f830 	bl	800941c <_getpid_r>
 80093bc:	4622      	mov	r2, r4
 80093be:	4601      	mov	r1, r0
 80093c0:	4628      	mov	r0, r5
 80093c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093c6:	f000 b817 	b.w	80093f8 <_kill_r>
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d00a      	beq.n	80093e4 <_raise_r+0x4c>
 80093ce:	1c59      	adds	r1, r3, #1
 80093d0:	d103      	bne.n	80093da <_raise_r+0x42>
 80093d2:	2316      	movs	r3, #22
 80093d4:	6003      	str	r3, [r0, #0]
 80093d6:	2001      	movs	r0, #1
 80093d8:	e7e7      	b.n	80093aa <_raise_r+0x12>
 80093da:	2100      	movs	r1, #0
 80093dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80093e0:	4620      	mov	r0, r4
 80093e2:	4798      	blx	r3
 80093e4:	2000      	movs	r0, #0
 80093e6:	e7e0      	b.n	80093aa <_raise_r+0x12>

080093e8 <raise>:
 80093e8:	4b02      	ldr	r3, [pc, #8]	@ (80093f4 <raise+0xc>)
 80093ea:	4601      	mov	r1, r0
 80093ec:	6818      	ldr	r0, [r3, #0]
 80093ee:	f7ff bfd3 	b.w	8009398 <_raise_r>
 80093f2:	bf00      	nop
 80093f4:	200000f4 	.word	0x200000f4

080093f8 <_kill_r>:
 80093f8:	b538      	push	{r3, r4, r5, lr}
 80093fa:	4d07      	ldr	r5, [pc, #28]	@ (8009418 <_kill_r+0x20>)
 80093fc:	2300      	movs	r3, #0
 80093fe:	4604      	mov	r4, r0
 8009400:	4608      	mov	r0, r1
 8009402:	4611      	mov	r1, r2
 8009404:	602b      	str	r3, [r5, #0]
 8009406:	f7f7 fcbb 	bl	8000d80 <_kill>
 800940a:	1c43      	adds	r3, r0, #1
 800940c:	d102      	bne.n	8009414 <_kill_r+0x1c>
 800940e:	682b      	ldr	r3, [r5, #0]
 8009410:	b103      	cbz	r3, 8009414 <_kill_r+0x1c>
 8009412:	6023      	str	r3, [r4, #0]
 8009414:	bd38      	pop	{r3, r4, r5, pc}
 8009416:	bf00      	nop
 8009418:	20000640 	.word	0x20000640

0800941c <_getpid_r>:
 800941c:	f7f7 bca8 	b.w	8000d70 <_getpid>

08009420 <_malloc_usable_size_r>:
 8009420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009424:	1f18      	subs	r0, r3, #4
 8009426:	2b00      	cmp	r3, #0
 8009428:	bfbc      	itt	lt
 800942a:	580b      	ldrlt	r3, [r1, r0]
 800942c:	18c0      	addlt	r0, r0, r3
 800942e:	4770      	bx	lr

08009430 <__swhatbuf_r>:
 8009430:	b570      	push	{r4, r5, r6, lr}
 8009432:	460c      	mov	r4, r1
 8009434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009438:	2900      	cmp	r1, #0
 800943a:	b096      	sub	sp, #88	@ 0x58
 800943c:	4615      	mov	r5, r2
 800943e:	461e      	mov	r6, r3
 8009440:	da0d      	bge.n	800945e <__swhatbuf_r+0x2e>
 8009442:	89a3      	ldrh	r3, [r4, #12]
 8009444:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009448:	f04f 0100 	mov.w	r1, #0
 800944c:	bf14      	ite	ne
 800944e:	2340      	movne	r3, #64	@ 0x40
 8009450:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009454:	2000      	movs	r0, #0
 8009456:	6031      	str	r1, [r6, #0]
 8009458:	602b      	str	r3, [r5, #0]
 800945a:	b016      	add	sp, #88	@ 0x58
 800945c:	bd70      	pop	{r4, r5, r6, pc}
 800945e:	466a      	mov	r2, sp
 8009460:	f000 f848 	bl	80094f4 <_fstat_r>
 8009464:	2800      	cmp	r0, #0
 8009466:	dbec      	blt.n	8009442 <__swhatbuf_r+0x12>
 8009468:	9901      	ldr	r1, [sp, #4]
 800946a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800946e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009472:	4259      	negs	r1, r3
 8009474:	4159      	adcs	r1, r3
 8009476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800947a:	e7eb      	b.n	8009454 <__swhatbuf_r+0x24>

0800947c <__smakebuf_r>:
 800947c:	898b      	ldrh	r3, [r1, #12]
 800947e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009480:	079d      	lsls	r5, r3, #30
 8009482:	4606      	mov	r6, r0
 8009484:	460c      	mov	r4, r1
 8009486:	d507      	bpl.n	8009498 <__smakebuf_r+0x1c>
 8009488:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800948c:	6023      	str	r3, [r4, #0]
 800948e:	6123      	str	r3, [r4, #16]
 8009490:	2301      	movs	r3, #1
 8009492:	6163      	str	r3, [r4, #20]
 8009494:	b003      	add	sp, #12
 8009496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009498:	ab01      	add	r3, sp, #4
 800949a:	466a      	mov	r2, sp
 800949c:	f7ff ffc8 	bl	8009430 <__swhatbuf_r>
 80094a0:	9f00      	ldr	r7, [sp, #0]
 80094a2:	4605      	mov	r5, r0
 80094a4:	4639      	mov	r1, r7
 80094a6:	4630      	mov	r0, r6
 80094a8:	f7ff f904 	bl	80086b4 <_malloc_r>
 80094ac:	b948      	cbnz	r0, 80094c2 <__smakebuf_r+0x46>
 80094ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094b2:	059a      	lsls	r2, r3, #22
 80094b4:	d4ee      	bmi.n	8009494 <__smakebuf_r+0x18>
 80094b6:	f023 0303 	bic.w	r3, r3, #3
 80094ba:	f043 0302 	orr.w	r3, r3, #2
 80094be:	81a3      	strh	r3, [r4, #12]
 80094c0:	e7e2      	b.n	8009488 <__smakebuf_r+0xc>
 80094c2:	89a3      	ldrh	r3, [r4, #12]
 80094c4:	6020      	str	r0, [r4, #0]
 80094c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094ca:	81a3      	strh	r3, [r4, #12]
 80094cc:	9b01      	ldr	r3, [sp, #4]
 80094ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80094d2:	b15b      	cbz	r3, 80094ec <__smakebuf_r+0x70>
 80094d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094d8:	4630      	mov	r0, r6
 80094da:	f000 f81d 	bl	8009518 <_isatty_r>
 80094de:	b128      	cbz	r0, 80094ec <__smakebuf_r+0x70>
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	f023 0303 	bic.w	r3, r3, #3
 80094e6:	f043 0301 	orr.w	r3, r3, #1
 80094ea:	81a3      	strh	r3, [r4, #12]
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	431d      	orrs	r5, r3
 80094f0:	81a5      	strh	r5, [r4, #12]
 80094f2:	e7cf      	b.n	8009494 <__smakebuf_r+0x18>

080094f4 <_fstat_r>:
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	4d07      	ldr	r5, [pc, #28]	@ (8009514 <_fstat_r+0x20>)
 80094f8:	2300      	movs	r3, #0
 80094fa:	4604      	mov	r4, r0
 80094fc:	4608      	mov	r0, r1
 80094fe:	4611      	mov	r1, r2
 8009500:	602b      	str	r3, [r5, #0]
 8009502:	f7f7 fc9d 	bl	8000e40 <_fstat>
 8009506:	1c43      	adds	r3, r0, #1
 8009508:	d102      	bne.n	8009510 <_fstat_r+0x1c>
 800950a:	682b      	ldr	r3, [r5, #0]
 800950c:	b103      	cbz	r3, 8009510 <_fstat_r+0x1c>
 800950e:	6023      	str	r3, [r4, #0]
 8009510:	bd38      	pop	{r3, r4, r5, pc}
 8009512:	bf00      	nop
 8009514:	20000640 	.word	0x20000640

08009518 <_isatty_r>:
 8009518:	b538      	push	{r3, r4, r5, lr}
 800951a:	4d06      	ldr	r5, [pc, #24]	@ (8009534 <_isatty_r+0x1c>)
 800951c:	2300      	movs	r3, #0
 800951e:	4604      	mov	r4, r0
 8009520:	4608      	mov	r0, r1
 8009522:	602b      	str	r3, [r5, #0]
 8009524:	f7f7 fc9c 	bl	8000e60 <_isatty>
 8009528:	1c43      	adds	r3, r0, #1
 800952a:	d102      	bne.n	8009532 <_isatty_r+0x1a>
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	b103      	cbz	r3, 8009532 <_isatty_r+0x1a>
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	bd38      	pop	{r3, r4, r5, pc}
 8009534:	20000640 	.word	0x20000640

08009538 <_init>:
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953a:	bf00      	nop
 800953c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800953e:	bc08      	pop	{r3}
 8009540:	469e      	mov	lr, r3
 8009542:	4770      	bx	lr

08009544 <_fini>:
 8009544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009546:	bf00      	nop
 8009548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800954a:	bc08      	pop	{r3}
 800954c:	469e      	mov	lr, r3
 800954e:	4770      	bx	lr
