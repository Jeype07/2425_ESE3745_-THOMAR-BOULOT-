
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000dc6c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800de50  0800de50  0000ee50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3d4  0800e3d4  000102b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e3d4  0800e3d4  0000f3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3dc  0800e3dc  000102b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3dc  0800e3dc  0000f3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3e0  0800e3e0  0000f3e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  0800e3e4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  200002b4  0800e698  000102b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  0800e698  00010828  2**0
=======
  1 .text         0000e47c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800e660  0800e660  0000f660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec04  0800ec04  000102b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec04  0800ec04  0000fc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec0c  0800ec0c  000102b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec0c  0800ec0c  0000fc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec10  0800ec10  0000fc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  0800ec14  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  200002b8  0800eecc  000102b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  0800eecc  00010828  2**0
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102b4  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 12 .debug_info   0001b990  00000000  00000000  000102e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000385c  00000000  00000000  0002bc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0002f4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001127  00000000  00000000  00030b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab30  00000000  00000000  00031c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c728  00000000  00000000  0005c75f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114749  00000000  00000000  00078e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018d5d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007410  00000000  00000000  0018d614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  00194a24  2**0
=======
 12 .debug_info   0001ba43  00000000  00000000  000102e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000385c  00000000  00000000  0002bd2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0002f588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001127  00000000  00000000  00030bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab42  00000000  00000000  00031ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c759  00000000  00000000  0005c829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011473c  00000000  00000000  00078f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018d6be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007410  00000000  00000000  0018d704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000be  00000000  00000000  00194b14  2**0
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002b4 	.word	0x200002b4
 80001fc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000200:	0800de34 	.word	0x0800de34
=======
 8000200:	0800e644 	.word	0x0800e644
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000218:	200002b8 	.word	0x200002b8
 800021c:	0800de34 	.word	0x0800de34
=======
 8000218:	200002bc 	.word	0x200002bc
 800021c:	0800e644 	.word	0x0800e644
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	@ 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800105a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2220      	movs	r2, #32
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
<<<<<<< HEAD
 800106e:	f009 fb2a 	bl	800a6c6 <memset>
=======
 800106e:	f009 ff30 	bl	800aed2 <memset>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001072:	4b33      	ldr	r3, [pc, #204]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001074:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001078:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800107a:	4b31      	ldr	r3, [pc, #196]	@ (8001140 <MX_ADC1_Init+0xec>)
 800107c:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8001080:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001082:	4b2f      	ldr	r3, [pc, #188]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001088:	4b2d      	ldr	r3, [pc, #180]	@ (8001140 <MX_ADC1_Init+0xec>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800108e:	4b2c      	ldr	r3, [pc, #176]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001094:	4b2a      	ldr	r3, [pc, #168]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <MX_ADC1_Init+0xec>)
 800109c:	2204      	movs	r2, #4
 800109e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a0:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010a6:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010ac:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 80010ba:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e0:	4817      	ldr	r0, [pc, #92]	@ (8001140 <MX_ADC1_Init+0xec>)
<<<<<<< HEAD
 80010e2:	f001 fd5b 	bl	8002b9c <HAL_ADC_Init>
=======
 80010e2:	f001 fe19 	bl	8002d18 <HAL_ADC_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80010ec:	f000 fb08 	bl	8001700 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4811      	ldr	r0, [pc, #68]	@ (8001140 <MX_ADC1_Init+0xec>)
<<<<<<< HEAD
 80010fc:	f002 fd54 	bl	8003ba8 <HAL_ADCEx_MultiModeConfigChannel>
=======
 80010fc:	f003 f95a 	bl	80043b4 <HAL_ADCEx_MultiModeConfigChannel>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001106:	f000 fafb 	bl	8001700 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <MX_ADC1_Init+0xf0>)
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2306      	movs	r3, #6
 8001110:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001116:	237f      	movs	r3, #127	@ 0x7f
 8001118:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111a:	2304      	movs	r3, #4
 800111c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	@ (8001140 <MX_ADC1_Init+0xec>)
<<<<<<< HEAD
 8001128:	f001 ffe2 	bl	80030f0 <HAL_ADC_ConfigChannel>
=======
 8001128:	f002 facc 	bl	80036c4 <HAL_ADC_ConfigChannel>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001132:	f000 fae5 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3730      	adds	r7, #48	@ 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200002d0 	.word	0x200002d0
 8001144:	21800100 	.word	0x21800100

08001148 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114e:	463b      	mov	r3, r7
 8001150:	2220      	movs	r2, #32
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
<<<<<<< HEAD
 8001156:	f009 fab6 	bl	800a6c6 <memset>
=======
 8001156:	f009 febc 	bl	800aed2 <memset>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800115a:	4b2b      	ldr	r3, [pc, #172]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800115c:	4a2b      	ldr	r2, [pc, #172]	@ (800120c <MX_ADC2_Init+0xc4>)
 800115e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001160:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001162:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8001166:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001168:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001174:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117a:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001180:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001182:	2204      	movs	r2, #4
 8001184:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001188:	2200      	movs	r2, #0
 800118a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800118c:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800118e:	2200      	movs	r2, #0
 8001190:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001192:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001194:	2201      	movs	r2, #1
 8001196:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001198:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a6:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011ac:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011c2:	4811      	ldr	r0, [pc, #68]	@ (8001208 <MX_ADC2_Init+0xc0>)
<<<<<<< HEAD
 80011c4:	f001 fcea 	bl	8002b9c <HAL_ADC_Init>
=======
 80011c4:	f001 fda8 	bl	8002d18 <HAL_ADC_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011ce:	f000 fa97 	bl	8001700 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <MX_ADC2_Init+0xc8>)
 80011d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d6:	2306      	movs	r3, #6
 80011d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011de:	237f      	movs	r3, #127	@ 0x7f
 80011e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e2:	2304      	movs	r3, #4
 80011e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	@ (8001208 <MX_ADC2_Init+0xc0>)
<<<<<<< HEAD
 80011f0:	f001 ff7e 	bl	80030f0 <HAL_ADC_ConfigChannel>
=======
 80011f0:	f002 fa68 	bl	80036c4 <HAL_ADC_ConfigChannel>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011fa:	f000 fa81 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000033c 	.word	0x2000033c
 800120c:	50000100 	.word	0x50000100
 8001210:	19200040 	.word	0x19200040

08001214 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0a4      	sub	sp, #144	@ 0x90
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800122c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001230:	2254      	movs	r2, #84	@ 0x54
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
<<<<<<< HEAD
 8001236:	f009 fa46 	bl	800a6c6 <memset>
=======
 8001236:	f009 fe4c 	bl	800aed2 <memset>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  if(adcHandle->Instance==ADC1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001242:	f040 80a0 	bne.w	8001386 <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800124c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001250:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001252:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001256:	4618      	mov	r0, r3
<<<<<<< HEAD
 8001258:	f004 f998 	bl	800558c <HAL_RCCEx_PeriphCLKConfig>
=======
 8001258:	f004 fd9e 	bl	8005d98 <HAL_RCCEx_PeriphCLKConfig>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001262:	f000 fa4d 	bl	8001700 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001266:	4b79      	ldr	r3, [pc, #484]	@ (800144c <HAL_ADC_MspInit+0x238>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a77      	ldr	r2, [pc, #476]	@ (800144c <HAL_ADC_MspInit+0x238>)
 800126e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001270:	4b76      	ldr	r3, [pc, #472]	@ (800144c <HAL_ADC_MspInit+0x238>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10b      	bne.n	8001290 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001278:	4b75      	ldr	r3, [pc, #468]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127c:	4a74      	ldr	r2, [pc, #464]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 800127e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001282:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001284:	4b72      	ldr	r3, [pc, #456]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	4b6f      	ldr	r3, [pc, #444]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001294:	4a6e      	ldr	r2, [pc, #440]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129c:	4b6c      	ldr	r3, [pc, #432]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	623b      	str	r3, [r7, #32]
 80012a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b69      	ldr	r3, [pc, #420]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ac:	4a68      	ldr	r2, [pc, #416]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b4:	4b66      	ldr	r3, [pc, #408]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b63      	ldr	r3, [pc, #396]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c4:	4a62      	ldr	r2, [pc, #392]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012cc:	4b60      	ldr	r3, [pc, #384]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80012d8:	2304      	movs	r3, #4
 80012da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012dc:	2303      	movs	r3, #3
 80012de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012ec:	4619      	mov	r1, r3
 80012ee:	4859      	ldr	r0, [pc, #356]	@ (8001454 <HAL_ADC_MspInit+0x240>)
<<<<<<< HEAD
 80012f0:	f003 f974 	bl	80045dc <HAL_GPIO_Init>
=======
 80012f0:	f003 fd7a 	bl	8004de8 <HAL_GPIO_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80012f4:	2302      	movs	r3, #2
 80012f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f8:	2303      	movs	r3, #3
 80012fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001308:	4619      	mov	r1, r3
 800130a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
<<<<<<< HEAD
 800130e:	f003 f965 	bl	80045dc <HAL_GPIO_Init>
=======
 800130e:	f003 fd6b 	bl	8004de8 <HAL_GPIO_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001312:	2303      	movs	r3, #3
 8001314:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001326:	4619      	mov	r1, r3
 8001328:	484b      	ldr	r0, [pc, #300]	@ (8001458 <HAL_ADC_MspInit+0x244>)
<<<<<<< HEAD
 800132a:	f003 f957 	bl	80045dc <HAL_GPIO_Init>
=======
 800132a:	f003 fd5d 	bl	8004de8 <HAL_GPIO_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800132e:	4b4b      	ldr	r3, [pc, #300]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001330:	4a4b      	ldr	r2, [pc, #300]	@ (8001460 <HAL_ADC_MspInit+0x24c>)
 8001332:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001334:	4b49      	ldr	r3, [pc, #292]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001336:	2205      	movs	r2, #5
 8001338:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800133a:	4b48      	ldr	r3, [pc, #288]	@ (800145c <HAL_ADC_MspInit+0x248>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001340:	4b46      	ldr	r3, [pc, #280]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001346:	4b45      	ldr	r3, [pc, #276]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001348:	2280      	movs	r2, #128	@ 0x80
 800134a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800134c:	4b43      	ldr	r3, [pc, #268]	@ (800145c <HAL_ADC_MspInit+0x248>)
 800134e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001352:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001354:	4b41      	ldr	r3, [pc, #260]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001356:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800135a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800135c:	4b3f      	ldr	r3, [pc, #252]	@ (800145c <HAL_ADC_MspInit+0x248>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001362:	4b3e      	ldr	r3, [pc, #248]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001368:	483c      	ldr	r0, [pc, #240]	@ (800145c <HAL_ADC_MspInit+0x248>)
<<<<<<< HEAD
 800136a:	f002 fe05 	bl	8003f78 <HAL_DMA_Init>
=======
 800136a:	f003 fa0b 	bl	8004784 <HAL_DMA_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8001374:	f000 f9c4 	bl	8001700 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a38      	ldr	r2, [pc, #224]	@ (800145c <HAL_ADC_MspInit+0x248>)
 800137c:	655a      	str	r2, [r3, #84]	@ 0x54
 800137e:	4a37      	ldr	r2, [pc, #220]	@ (800145c <HAL_ADC_MspInit+0x248>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001384:	e05e      	b.n	8001444 <HAL_ADC_MspInit+0x230>
  else if(adcHandle->Instance==ADC2)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a36      	ldr	r2, [pc, #216]	@ (8001464 <HAL_ADC_MspInit+0x250>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d159      	bne.n	8001444 <HAL_ADC_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001390:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001396:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800139a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013a0:	4618      	mov	r0, r3
<<<<<<< HEAD
 80013a2:	f004 f8f3 	bl	800558c <HAL_RCCEx_PeriphCLKConfig>
=======
 80013a2:	f004 fcf9 	bl	8005d98 <HAL_RCCEx_PeriphCLKConfig>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_ADC_MspInit+0x19c>
      Error_Handler();
 80013ac:	f000 f9a8 	bl	8001700 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013b0:	4b26      	ldr	r3, [pc, #152]	@ (800144c <HAL_ADC_MspInit+0x238>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	4a25      	ldr	r2, [pc, #148]	@ (800144c <HAL_ADC_MspInit+0x238>)
 80013b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013ba:	4b24      	ldr	r3, [pc, #144]	@ (800144c <HAL_ADC_MspInit+0x238>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d10b      	bne.n	80013da <HAL_ADC_MspInit+0x1c6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013c2:	4b23      	ldr	r3, [pc, #140]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	4a22      	ldr	r2, [pc, #136]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ce:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	4a1c      	ldr	r2, [pc, #112]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	4a16      	ldr	r2, [pc, #88]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <HAL_ADC_MspInit+0x23c>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800140a:	230b      	movs	r3, #11
 800140c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140e:	2303      	movs	r3, #3
 8001410:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800141e:	4619      	mov	r1, r3
 8001420:	480c      	ldr	r0, [pc, #48]	@ (8001454 <HAL_ADC_MspInit+0x240>)
<<<<<<< HEAD
 8001422:	f003 f8db 	bl	80045dc <HAL_GPIO_Init>
=======
 8001422:	f003 fce1 	bl	8004de8 <HAL_GPIO_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8001426:	2301      	movs	r3, #1
 8001428:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142a:	2303      	movs	r3, #3
 800142c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800143a:	4619      	mov	r1, r3
 800143c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
<<<<<<< HEAD
 8001440:	f003 f8cc 	bl	80045dc <HAL_GPIO_Init>
=======
 8001440:	f003 fcd2 	bl	8004de8 <HAL_GPIO_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
}
 8001444:	bf00      	nop
 8001446:	3790      	adds	r7, #144	@ 0x90
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000408 	.word	0x20000408
 8001450:	40021000 	.word	0x40021000
 8001454:	48000800 	.word	0x48000800
 8001458:	48000400 	.word	0x48000400
 800145c:	200003a8 	.word	0x200003a8
 8001460:	40020008 	.word	0x40020008
 8001464:	50000100 	.word	0x50000100

08001468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <MX_DMA_Init+0x50>)
 8001470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001472:	4a11      	ldr	r2, [pc, #68]	@ (80014b8 <MX_DMA_Init+0x50>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6493      	str	r3, [r2, #72]	@ 0x48
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <MX_DMA_Init+0x50>)
 800147c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <MX_DMA_Init+0x50>)
 8001488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148a:	4a0b      	ldr	r2, [pc, #44]	@ (80014b8 <MX_DMA_Init+0x50>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6493      	str	r3, [r2, #72]	@ 0x48
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <MX_DMA_Init+0x50>)
 8001494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	200b      	movs	r0, #11
<<<<<<< HEAD
 80014a4:	f002 fd40 	bl	8003f28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014a8:	200b      	movs	r0, #11
 80014aa:	f002 fd57 	bl	8003f5c <HAL_NVIC_EnableIRQ>
=======
 80014a4:	f003 f946 	bl	8004734 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014a8:	200b      	movs	r0, #11
 80014aa:	f003 f95d 	bl	8004768 <HAL_NVIC_EnableIRQ>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	4b3f      	ldr	r3, [pc, #252]	@ (80015d0 <MX_GPIO_Init+0x114>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	4a3e      	ldr	r2, [pc, #248]	@ (80015d0 <MX_GPIO_Init+0x114>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014de:	4b3c      	ldr	r3, [pc, #240]	@ (80015d0 <MX_GPIO_Init+0x114>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ea:	4b39      	ldr	r3, [pc, #228]	@ (80015d0 <MX_GPIO_Init+0x114>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ee:	4a38      	ldr	r2, [pc, #224]	@ (80015d0 <MX_GPIO_Init+0x114>)
 80014f0:	f043 0320 	orr.w	r3, r3, #32
 80014f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f6:	4b36      	ldr	r3, [pc, #216]	@ (80015d0 <MX_GPIO_Init+0x114>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fa:	f003 0320 	and.w	r3, r3, #32
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	4b33      	ldr	r3, [pc, #204]	@ (80015d0 <MX_GPIO_Init+0x114>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	4a32      	ldr	r2, [pc, #200]	@ (80015d0 <MX_GPIO_Init+0x114>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150e:	4b30      	ldr	r3, [pc, #192]	@ (80015d0 <MX_GPIO_Init+0x114>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	4b2d      	ldr	r3, [pc, #180]	@ (80015d0 <MX_GPIO_Init+0x114>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	4a2c      	ldr	r2, [pc, #176]	@ (80015d0 <MX_GPIO_Init+0x114>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001526:	4b2a      	ldr	r3, [pc, #168]	@ (80015d0 <MX_GPIO_Init+0x114>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001532:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <MX_GPIO_Init+0x114>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4a26      	ldr	r2, [pc, #152]	@ (80015d0 <MX_GPIO_Init+0x114>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153e:	4b24      	ldr	r3, [pc, #144]	@ (80015d0 <MX_GPIO_Init+0x114>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2120      	movs	r1, #32
 800154e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
<<<<<<< HEAD
 8001552:	f003 f9c5 	bl	80048e0 <HAL_GPIO_WritePin>
=======
 8001552:	f003 fdcb 	bl	80050ec <HAL_GPIO_WritePin>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2104      	movs	r1, #4
 800155a:	481e      	ldr	r0, [pc, #120]	@ (80015d4 <MX_GPIO_Init+0x118>)
<<<<<<< HEAD
 800155c:	f003 f9c0 	bl	80048e0 <HAL_GPIO_WritePin>
=======
 800155c:	f003 fdc6 	bl	80050ec <HAL_GPIO_WritePin>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001560:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001566:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	4818      	ldr	r0, [pc, #96]	@ (80015d8 <MX_GPIO_Init+0x11c>)
<<<<<<< HEAD
 8001578:	f003 f830 	bl	80045dc <HAL_GPIO_Init>
=======
 8001578:	f003 fc36 	bl	8004de8 <HAL_GPIO_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 800157c:	2320      	movs	r3, #32
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
<<<<<<< HEAD
 8001596:	f003 f821 	bl	80045dc <HAL_GPIO_Init>
=======
 8001596:	f003 fc27 	bl	8004de8 <HAL_GPIO_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 800159a:	2304      	movs	r3, #4
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4808      	ldr	r0, [pc, #32]	@ (80015d4 <MX_GPIO_Init+0x118>)
<<<<<<< HEAD
 80015b2:	f003 f813 	bl	80045dc <HAL_GPIO_Init>
=======
 80015b2:	f003 fc19 	bl	8004de8 <HAL_GPIO_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	2028      	movs	r0, #40	@ 0x28
<<<<<<< HEAD
 80015bc:	f002 fcb4 	bl	8003f28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015c0:	2028      	movs	r0, #40	@ 0x28
 80015c2:	f002 fccb 	bl	8003f5c <HAL_NVIC_EnableIRQ>
=======
 80015bc:	f003 f8ba 	bl	8004734 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015c0:	2028      	movs	r0, #40	@ 0x28
 80015c2:	f003 f8d1 	bl	8004768 <HAL_NVIC_EnableIRQ>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	@ 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000
 80015d4:	48000c00 	.word	0x48000c00
 80015d8:	48000800 	.word	0x48000800

080015dc <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80015e4:	1d39      	adds	r1, r7, #4
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	2201      	movs	r2, #1
 80015ec:	4803      	ldr	r0, [pc, #12]	@ (80015fc <__io_putchar+0x20>)
<<<<<<< HEAD
 80015ee:	f005 fff4 	bl	80075da <HAL_UART_Transmit>
=======
 80015ee:	f006 fbfa 	bl	8007de6 <HAL_UART_Transmit>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
	return ch;
 80015f2:	687b      	ldr	r3, [r7, #4]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200004f8 	.word	0x200004f8

08001600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8001604:	f001 f84f 	bl	80026a6 <HAL_Init>
=======
 8001604:	f001 f8b1 	bl	800276a <HAL_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* USER CODE BEGIN Init */
	//Start_PWM_Signals();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001608:	f000 f81e 	bl	8001648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160c:	f7ff ff56 	bl	80014bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001610:	f7ff ff2a 	bl	8001468 <MX_DMA_Init>
  MX_ADC2_Init();
 8001614:	f7ff fd98 	bl	8001148 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001618:	f7ff fd1c 	bl	8001054 <MX_ADC1_Init>
  MX_TIM1_Init();
 800161c:	f000 fa3e 	bl	8001a9c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001620:	f000 fae8 	bl	8001bf4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001624:	f000 fc1c 	bl	8001e60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001628:	f000 fc66 	bl	8001ef8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 800162c:	f000 fd58 	bl	80020e0 <Shell_Init>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&buffer,1);
 8001630:	2201      	movs	r2, #1
 8001632:	4903      	ldr	r1, [pc, #12]	@ (8001640 <main+0x40>)
 8001634:	4803      	ldr	r0, [pc, #12]	@ (8001644 <main+0x44>)
<<<<<<< HEAD
 8001636:	f001 fc73 	bl	8002f20 <HAL_ADC_Start_DMA>
=======
 8001636:	f001 ff4f 	bl	80034d8 <HAL_ADC_Start_DMA>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 800163a:	f000 fd91 	bl	8002160 <Shell_Loop>
 800163e:	e7fc      	b.n	800163a <main+0x3a>
 8001640:	2000040c 	.word	0x2000040c
 8001644:	200002d0 	.word	0x200002d0

08001648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b094      	sub	sp, #80	@ 0x50
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 0318 	add.w	r3, r7, #24
 8001652:	2238      	movs	r2, #56	@ 0x38
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
<<<<<<< HEAD
 8001658:	f009 f835 	bl	800a6c6 <memset>
=======
 8001658:	f009 fc3b 	bl	800aed2 <memset>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800166a:	2000      	movs	r0, #0
<<<<<<< HEAD
 800166c:	f003 f974 	bl	8004958 <HAL_PWREx_ControlVoltageScaling>
=======
 800166c:	f003 fd7a 	bl	8005164 <HAL_PWREx_ControlVoltageScaling>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001670:	2301      	movs	r3, #1
 8001672:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001674:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001678:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167a:	2302      	movs	r3, #2
 800167c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800167e:	2303      	movs	r3, #3
 8001680:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001682:	2306      	movs	r3, #6
 8001684:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001686:	2355      	movs	r3, #85	@ 0x55
 8001688:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800168a:	2302      	movs	r3, #2
 800168c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800168e:	2302      	movs	r3, #2
 8001690:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001692:	2302      	movs	r3, #2
 8001694:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001696:	f107 0318 	add.w	r3, r7, #24
 800169a:	4618      	mov	r0, r3
<<<<<<< HEAD
 800169c:	f003 fa10 	bl	8004ac0 <HAL_RCC_OscConfig>
=======
 800169c:	f003 fe16 	bl	80052cc <HAL_RCC_OscConfig>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80016a6:	f000 f82b 	bl	8001700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016aa:	230f      	movs	r3, #15
 80016ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ae:	2303      	movs	r3, #3
 80016b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2104      	movs	r1, #4
 80016c2:	4618      	mov	r0, r3
<<<<<<< HEAD
 80016c4:	f003 fd14 	bl	80050f0 <HAL_RCC_ClockConfig>
=======
 80016c4:	f004 f91a 	bl	80058fc <HAL_RCC_ClockConfig>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80016ce:	f000 f817 	bl	8001700 <Error_Handler>
  }
}
 80016d2:	bf00      	nop
 80016d4:	3750      	adds	r7, #80	@ 0x50
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
<<<<<<< HEAD
 80016ee:	f000 fff3 	bl	80026d8 <HAL_IncTick>
=======
 80016ee:	f001 f855 	bl	800279c <HAL_IncTick>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40001000 	.word	0x40001000

08001700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001704:	b672      	cpsid	i
}
 8001706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <Error_Handler+0x8>

0800170c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <HAL_MspInit+0x44>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001716:	4a0e      	ldr	r2, [pc, #56]	@ (8001750 <HAL_MspInit+0x44>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6613      	str	r3, [r2, #96]	@ 0x60
 800171e:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <HAL_MspInit+0x44>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <HAL_MspInit+0x44>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172e:	4a08      	ldr	r2, [pc, #32]	@ (8001750 <HAL_MspInit+0x44>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001734:	6593      	str	r3, [r2, #88]	@ 0x58
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_MspInit+0x44>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
<<<<<<< HEAD
 8001742:	f003 f9ad 	bl	8004aa0 <HAL_PWREx_DisableUCPDDeadBattery>
=======
 8001742:	f003 fdb3 	bl	80052ac <HAL_PWREx_DisableUCPDDeadBattery>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000

08001754 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08c      	sub	sp, #48	@ 0x30
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001764:	4b2c      	ldr	r3, [pc, #176]	@ (8001818 <HAL_InitTick+0xc4>)
 8001766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001768:	4a2b      	ldr	r2, [pc, #172]	@ (8001818 <HAL_InitTick+0xc4>)
 800176a:	f043 0310 	orr.w	r3, r3, #16
 800176e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001770:	4b29      	ldr	r3, [pc, #164]	@ (8001818 <HAL_InitTick+0xc4>)
 8001772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800177c:	f107 020c 	add.w	r2, r7, #12
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
<<<<<<< HEAD
 8001788:	f003 fe88 	bl	800549c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800178c:	f003 fe5a 	bl	8005444 <HAL_RCC_GetPCLK1Freq>
=======
 8001788:	f004 fa8e 	bl	8005ca8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800178c:	f004 fa60 	bl	8005c50 <HAL_RCC_GetPCLK1Freq>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001790:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001794:	4a21      	ldr	r2, [pc, #132]	@ (800181c <HAL_InitTick+0xc8>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0c9b      	lsrs	r3, r3, #18
 800179c:	3b01      	subs	r3, #1
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <HAL_InitTick+0xcc>)
 80017a2:	4a20      	ldr	r2, [pc, #128]	@ (8001824 <HAL_InitTick+0xd0>)
 80017a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <HAL_InitTick+0xcc>)
 80017a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017ac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001820 <HAL_InitTick+0xcc>)
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <HAL_InitTick+0xcc>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <HAL_InitTick+0xcc>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80017c0:	4817      	ldr	r0, [pc, #92]	@ (8001820 <HAL_InitTick+0xcc>)
<<<<<<< HEAD
 80017c2:	f004 f931 	bl	8005a28 <HAL_TIM_Base_Init>
=======
 80017c2:	f004 fd37 	bl	8006234 <HAL_TIM_Base_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 80017c6:	4603      	mov	r3, r0
 80017c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80017cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d11b      	bne.n	800180c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017d4:	4812      	ldr	r0, [pc, #72]	@ (8001820 <HAL_InitTick+0xcc>)
<<<<<<< HEAD
 80017d6:	f004 f989 	bl	8005aec <HAL_TIM_Base_Start_IT>
=======
 80017d6:	f004 fd8f 	bl	80062f8 <HAL_TIM_Base_Start_IT>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 80017da:	4603      	mov	r3, r0
 80017dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80017e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d111      	bne.n	800180c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017e8:	2036      	movs	r0, #54	@ 0x36
<<<<<<< HEAD
 80017ea:	f002 fbb7 	bl	8003f5c <HAL_NVIC_EnableIRQ>
=======
 80017ea:	f002 ffbd 	bl	8004768 <HAL_NVIC_EnableIRQ>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d808      	bhi.n	8001806 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	2036      	movs	r0, #54	@ 0x36
<<<<<<< HEAD
 80017fa:	f002 fb95 	bl	8003f28 <HAL_NVIC_SetPriority>
=======
 80017fa:	f002 ff9b 	bl	8004734 <HAL_NVIC_SetPriority>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        uwTickPrio = TickPriority;
 80017fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <HAL_InitTick+0xd4>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e002      	b.n	800180c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800180c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001810:	4618      	mov	r0, r3
 8001812:	3730      	adds	r7, #48	@ 0x30
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	431bde83 	.word	0x431bde83
 8001820:	20000410 	.word	0x20000410
 8001824:	40001000 	.word	0x40001000
 8001828:	200000e4 	.word	0x200000e4

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <NMI_Handler+0x4>

08001834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <MemManage_Handler+0x4>

08001844 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <UsageFault_Handler+0x4>

08001854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <DMA1_Channel1_IRQHandler+0x10>)
<<<<<<< HEAD
 8001892:	f002 fd54 	bl	800433e <HAL_DMA_IRQHandler>
=======
 8001892:	f003 f95a 	bl	8004b4a <HAL_DMA_IRQHandler>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200003a8 	.word	0x200003a8

080018a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <USART2_IRQHandler+0x10>)
<<<<<<< HEAD
 80018a6:	f005 ff85 	bl	80077b4 <HAL_UART_IRQHandler>
=======
 80018a6:	f006 fb8b 	bl	8007fc0 <HAL_UART_IRQHandler>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200004f8 	.word	0x200004f8

080018b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018b8:	4802      	ldr	r0, [pc, #8]	@ (80018c4 <USART3_IRQHandler+0x10>)
<<<<<<< HEAD
 80018ba:	f005 ff7b 	bl	80077b4 <HAL_UART_IRQHandler>
=======
 80018ba:	f006 fb81 	bl	8007fc0 <HAL_UART_IRQHandler>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000588 	.word	0x20000588

080018c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80018cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
<<<<<<< HEAD
 80018d0:	f003 f81e 	bl	8004910 <HAL_GPIO_EXTI_IRQHandler>
=======
 80018d0:	f003 fc24 	bl	800511c <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <TIM6_DAC_IRQHandler+0x10>)
<<<<<<< HEAD
 80018de:	f004 fb83 	bl	8005fe8 <HAL_TIM_IRQHandler>
=======
 80018de:	f004 ff89 	bl	80067f4 <HAL_TIM_IRQHandler>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000410 	.word	0x20000410

080018ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return 1;
 80018f0:	2301      	movs	r3, #1
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <_kill>:

int _kill(int pid, int sig)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
<<<<<<< HEAD
 8001906:	f008 ff8d 	bl	800a824 <__errno>
=======
 8001906:	f009 fb93 	bl	800b030 <__errno>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 800190a:	4603      	mov	r3, r0
 800190c:	2216      	movs	r2, #22
 800190e:	601a      	str	r2, [r3, #0]
  return -1;
 8001910:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_exit>:

void _exit (int status)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ffe7 	bl	80018fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800192e:	bf00      	nop
 8001930:	e7fd      	b.n	800192e <_exit+0x12>

08001932 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e00a      	b.n	800195a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001944:	f3af 8000 	nop.w
 8001948:	4601      	mov	r1, r0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	60ba      	str	r2, [r7, #8]
 8001950:	b2ca      	uxtb	r2, r1
 8001952:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3301      	adds	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	429a      	cmp	r2, r3
 8001960:	dbf0      	blt.n	8001944 <_read+0x12>
  }

  return len;
 8001962:	687b      	ldr	r3, [r7, #4]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	e009      	b.n	8001992 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	60ba      	str	r2, [r7, #8]
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fe28 	bl	80015dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	3301      	adds	r3, #1
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	429a      	cmp	r2, r3
 8001998:	dbf1      	blt.n	800197e <_write+0x12>
  }
  return len;
 800199a:	687b      	ldr	r3, [r7, #4]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <_close>:

int _close(int file)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019cc:	605a      	str	r2, [r3, #4]
  return 0;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_isatty>:

int _isatty(int file)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b085      	sub	sp, #20
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a14:	4a14      	ldr	r2, [pc, #80]	@ (8001a68 <_sbrk+0x5c>)
 8001a16:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <_sbrk+0x60>)
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a20:	4b13      	ldr	r3, [pc, #76]	@ (8001a70 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d102      	bne.n	8001a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a28:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <_sbrk+0x64>)
 8001a2a:	4a12      	ldr	r2, [pc, #72]	@ (8001a74 <_sbrk+0x68>)
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2e:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d207      	bcs.n	8001a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
<<<<<<< HEAD
 8001a3c:	f008 fef2 	bl	800a824 <__errno>
=======
 8001a3c:	f009 faf8 	bl	800b030 <__errno>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001a40:	4603      	mov	r3, r0
 8001a42:	220c      	movs	r2, #12
 8001a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	e009      	b.n	8001a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a52:	4b07      	ldr	r3, [pc, #28]	@ (8001a70 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a05      	ldr	r2, [pc, #20]	@ (8001a70 <_sbrk+0x64>)
 8001a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20020000 	.word	0x20020000
 8001a6c:	00000400 	.word	0x00000400
 8001a70:	2000045c 	.word	0x2000045c
 8001a74:	20000828 	.word	0x20000828

08001a78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <SystemInit+0x20>)
 8001a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a82:	4a05      	ldr	r2, [pc, #20]	@ (8001a98 <SystemInit+0x20>)
 8001a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b098      	sub	sp, #96	@ 0x60
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]
 8001abe:	615a      	str	r2, [r3, #20]
 8001ac0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2234      	movs	r2, #52	@ 0x34
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
<<<<<<< HEAD
 8001aca:	f008 fdfc 	bl	800a6c6 <memset>
=======
 8001aca:	f009 fa02 	bl	800aed2 <memset>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ace:	4b47      	ldr	r3, [pc, #284]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001ad0:	4a47      	ldr	r2, [pc, #284]	@ (8001bf0 <MX_TIM1_Init+0x154>)
 8001ad2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ad4:	4b45      	ldr	r3, [pc, #276]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001ada:	4b44      	ldr	r3, [pc, #272]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001adc:	2220      	movs	r2, #32
 8001ade:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8001ae0:	4b42      	ldr	r3, [pc, #264]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001ae2:	f241 0299 	movw	r2, #4249	@ 0x1099
 8001ae6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae8:	4b40      	ldr	r3, [pc, #256]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aee:	4b3f      	ldr	r3, [pc, #252]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af4:	4b3d      	ldr	r3, [pc, #244]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001afa:	483c      	ldr	r0, [pc, #240]	@ (8001bec <MX_TIM1_Init+0x150>)
<<<<<<< HEAD
 8001afc:	f004 f86e 	bl	8005bdc <HAL_TIM_PWM_Init>
=======
 8001afc:	f004 fc74 	bl	80063e8 <HAL_TIM_PWM_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b06:	f7ff fdfb 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001b0a:	2340      	movs	r3, #64	@ 0x40
 8001b0c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b16:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4833      	ldr	r0, [pc, #204]	@ (8001bec <MX_TIM1_Init+0x150>)
<<<<<<< HEAD
 8001b1e:	f005 fb59 	bl	80071d4 <HAL_TIMEx_MasterConfigSynchronization>
=======
 8001b1e:	f005 ff5f 	bl	80079e0 <HAL_TIMEx_MasterConfigSynchronization>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b28:	f7ff fdea 	bl	8001700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2c:	2360      	movs	r3, #96	@ 0x60
 8001b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b34:	2300      	movs	r3, #0
 8001b36:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4826      	ldr	r0, [pc, #152]	@ (8001bec <MX_TIM1_Init+0x150>)
<<<<<<< HEAD
 8001b52:	f004 fbc9 	bl	80062e8 <HAL_TIM_PWM_ConfigChannel>
=======
 8001b52:	f004 ffcf 	bl	8006af4 <HAL_TIM_PWM_ConfigChannel>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b5c:	f7ff fdd0 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b64:	2204      	movs	r2, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	4820      	ldr	r0, [pc, #128]	@ (8001bec <MX_TIM1_Init+0x150>)
<<<<<<< HEAD
 8001b6a:	f004 fbbd 	bl	80062e8 <HAL_TIM_PWM_ConfigChannel>
=======
 8001b6a:	f004 ffc3 	bl	8006af4 <HAL_TIM_PWM_ConfigChannel>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001b74:	f7ff fdc4 	bl	8001700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b7c:	2208      	movs	r2, #8
 8001b7e:	4619      	mov	r1, r3
 8001b80:	481a      	ldr	r0, [pc, #104]	@ (8001bec <MX_TIM1_Init+0x150>)
<<<<<<< HEAD
 8001b82:	f004 fbb1 	bl	80062e8 <HAL_TIM_PWM_ConfigChannel>
=======
 8001b82:	f004 ffb7 	bl	8006af4 <HAL_TIM_PWM_ConfigChannel>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001b8c:	f7ff fdb8 	bl	8001700 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 15;
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ba4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ba8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4807      	ldr	r0, [pc, #28]	@ (8001bec <MX_TIM1_Init+0x150>)
<<<<<<< HEAD
 8001bce:	f005 fb97 	bl	8007300 <HAL_TIMEx_ConfigBreakDeadTime>
=======
 8001bce:	f005 ff9d 	bl	8007b0c <HAL_TIMEx_ConfigBreakDeadTime>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001bd8:	f7ff fd92 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bdc:	4803      	ldr	r0, [pc, #12]	@ (8001bec <MX_TIM1_Init+0x150>)
 8001bde:	f000 f8d7 	bl	8001d90 <HAL_TIM_MspPostInit>

}
 8001be2:	bf00      	nop
 8001be4:	3760      	adds	r7, #96	@ 0x60
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000460 	.word	0x20000460
 8001bf0:	40012c00 	.word	0x40012c00

08001bf4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001bfa:	f107 0310 	add.w	r3, r7, #16
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c12:	4b1c      	ldr	r3, [pc, #112]	@ (8001c84 <MX_TIM3_Init+0x90>)
 8001c14:	4a1c      	ldr	r2, [pc, #112]	@ (8001c88 <MX_TIM3_Init+0x94>)
 8001c16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c18:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <MX_TIM3_Init+0x90>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <MX_TIM3_Init+0x90>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c24:	4b17      	ldr	r3, [pc, #92]	@ (8001c84 <MX_TIM3_Init+0x90>)
 8001c26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <MX_TIM3_Init+0x90>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c32:	4b14      	ldr	r3, [pc, #80]	@ (8001c84 <MX_TIM3_Init+0x90>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480d      	ldr	r0, [pc, #52]	@ (8001c84 <MX_TIM3_Init+0x90>)
<<<<<<< HEAD
 8001c50:	f005 f8f1 	bl	8006e36 <HAL_TIMEx_HallSensor_Init>
=======
 8001c50:	f005 fcf7 	bl	8007642 <HAL_TIMEx_HallSensor_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001c5a:	f7ff fd51 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001c5e:	2350      	movs	r3, #80	@ 0x50
 8001c60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4806      	ldr	r0, [pc, #24]	@ (8001c84 <MX_TIM3_Init+0x90>)
<<<<<<< HEAD
 8001c6c:	f005 fab2 	bl	80071d4 <HAL_TIMEx_MasterConfigSynchronization>
=======
 8001c6c:	f005 feb8 	bl	80079e0 <HAL_TIMEx_MasterConfigSynchronization>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001c76:	f7ff fd43 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	3720      	adds	r7, #32
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200004ac 	.word	0x200004ac
 8001c88:	40000400 	.word	0x40000400

08001c8c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_TIM_PWM_MspInit+0x38>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10b      	bne.n	8001cb6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca2:	4a09      	ldr	r2, [pc, #36]	@ (8001cc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ca4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ca8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001caa:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40012c00 	.word	0x40012c00
 8001cc8:	40021000 	.word	0x40021000

08001ccc <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	@ 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a26      	ldr	r2, [pc, #152]	@ (8001d84 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d145      	bne.n	8001d7a <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cee:	4b26      	ldr	r3, [pc, #152]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf2:	4a25      	ldr	r2, [pc, #148]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cfa:	4b23      	ldr	r3, [pc, #140]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b20      	ldr	r3, [pc, #128]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d12:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d22:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d2a:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001d36:	2350      	movs	r3, #80	@ 0x50
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d46:	2302      	movs	r3, #2
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
<<<<<<< HEAD
 8001d54:	f002 fc42 	bl	80045dc <HAL_GPIO_Init>
=======
 8001d54:	f003 f848 	bl	8004de8 <HAL_GPIO_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	4619      	mov	r1, r3
 8001d74:	4805      	ldr	r0, [pc, #20]	@ (8001d8c <HAL_TIMEx_HallSensor_MspInit+0xc0>)
<<<<<<< HEAD
 8001d76:	f002 fc31 	bl	80045dc <HAL_GPIO_Init>
=======
 8001d76:	f003 f837 	bl	8004de8 <HAL_GPIO_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3728      	adds	r7, #40	@ 0x28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40000400 	.word	0x40000400
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	48000800 	.word	0x48000800

08001d90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	@ 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a29      	ldr	r2, [pc, #164]	@ (8001e54 <HAL_TIM_MspPostInit+0xc4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d14b      	bne.n	8001e4a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db2:	4b29      	ldr	r3, [pc, #164]	@ (8001e58 <HAL_TIM_MspPostInit+0xc8>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db6:	4a28      	ldr	r2, [pc, #160]	@ (8001e58 <HAL_TIM_MspPostInit+0xc8>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dbe:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <HAL_TIM_MspPostInit+0xc8>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b23      	ldr	r3, [pc, #140]	@ (8001e58 <HAL_TIM_MspPostInit+0xc8>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dce:	4a22      	ldr	r2, [pc, #136]	@ (8001e58 <HAL_TIM_MspPostInit+0xc8>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd6:	4b20      	ldr	r3, [pc, #128]	@ (8001e58 <HAL_TIM_MspPostInit+0xc8>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001de2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001df4:	2306      	movs	r3, #6
 8001df6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4817      	ldr	r0, [pc, #92]	@ (8001e5c <HAL_TIM_MspPostInit+0xcc>)
<<<<<<< HEAD
 8001e00:	f002 fbec 	bl	80045dc <HAL_GPIO_Init>
=======
 8001e00:	f002 fff2 	bl	8004de8 <HAL_GPIO_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001e04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001e16:	2304      	movs	r3, #4
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4619      	mov	r1, r3
 8001e20:	480e      	ldr	r0, [pc, #56]	@ (8001e5c <HAL_TIM_MspPostInit+0xcc>)
<<<<<<< HEAD
 8001e22:	f002 fbdb 	bl	80045dc <HAL_GPIO_Init>
=======
 8001e22:	f002 ffe1 	bl	8004de8 <HAL_GPIO_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001e26:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e38:	2306      	movs	r3, #6
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
<<<<<<< HEAD
 8001e46:	f002 fbc9 	bl	80045dc <HAL_GPIO_Init>
=======
 8001e46:	f002 ffcf 	bl	8004de8 <HAL_GPIO_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3728      	adds	r7, #40	@ 0x28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40012c00 	.word	0x40012c00
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	48000400 	.word	0x48000400

08001e60 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e64:	4b22      	ldr	r3, [pc, #136]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e66:	4a23      	ldr	r2, [pc, #140]	@ (8001ef4 <MX_USART2_UART_Init+0x94>)
 8001e68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e72:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e84:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e86:	220c      	movs	r2, #12
 8001e88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e90:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e96:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ea8:	4811      	ldr	r0, [pc, #68]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
<<<<<<< HEAD
 8001eaa:	f005 fb46 	bl	800753a <HAL_UART_Init>
=======
 8001eaa:	f005 ff4c 	bl	8007d46 <HAL_UART_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001eb4:	f7ff fc24 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eb8:	2100      	movs	r1, #0
 8001eba:	480d      	ldr	r0, [pc, #52]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
<<<<<<< HEAD
 8001ebc:	f007 fae9 	bl	8009492 <HAL_UARTEx_SetTxFifoThreshold>
=======
 8001ebc:	f007 feef 	bl	8009c9e <HAL_UARTEx_SetTxFifoThreshold>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ec6:	f7ff fc1b 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4808      	ldr	r0, [pc, #32]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
<<<<<<< HEAD
 8001ece:	f007 fb1e 	bl	800950e <HAL_UARTEx_SetRxFifoThreshold>
=======
 8001ece:	f007 ff24 	bl	8009d1a <HAL_UARTEx_SetRxFifoThreshold>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ed8:	f7ff fc12 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001edc:	4804      	ldr	r0, [pc, #16]	@ (8001ef0 <MX_USART2_UART_Init+0x90>)
<<<<<<< HEAD
 8001ede:	f007 fa9f 	bl	8009420 <HAL_UARTEx_DisableFifoMode>
=======
 8001ede:	f007 fea5 	bl	8009c2c <HAL_UARTEx_DisableFifoMode>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ee8:	f7ff fc0a 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	200004f8 	.word	0x200004f8
 8001ef4:	40004400 	.word	0x40004400

08001ef8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001efc:	4b22      	ldr	r3, [pc, #136]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001efe:	4a23      	ldr	r2, [pc, #140]	@ (8001f8c <MX_USART3_UART_Init+0x94>)
 8001f00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f02:	4b21      	ldr	r3, [pc, #132]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f10:	4b1d      	ldr	r3, [pc, #116]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f16:	4b1c      	ldr	r3, [pc, #112]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f1e:	220c      	movs	r2, #12
 8001f20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f22:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f28:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f2e:	4b16      	ldr	r3, [pc, #88]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f34:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f3a:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f40:	4811      	ldr	r0, [pc, #68]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
<<<<<<< HEAD
 8001f42:	f005 fafa 	bl	800753a <HAL_UART_Init>
=======
 8001f42:	f005 ff00 	bl	8007d46 <HAL_UART_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f4c:	f7ff fbd8 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f50:	2100      	movs	r1, #0
 8001f52:	480d      	ldr	r0, [pc, #52]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
<<<<<<< HEAD
 8001f54:	f007 fa9d 	bl	8009492 <HAL_UARTEx_SetTxFifoThreshold>
=======
 8001f54:	f007 fea3 	bl	8009c9e <HAL_UARTEx_SetTxFifoThreshold>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f5e:	f7ff fbcf 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f62:	2100      	movs	r1, #0
 8001f64:	4808      	ldr	r0, [pc, #32]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
<<<<<<< HEAD
 8001f66:	f007 fad2 	bl	800950e <HAL_UARTEx_SetRxFifoThreshold>
=======
 8001f66:	f007 fed8 	bl	8009d1a <HAL_UARTEx_SetRxFifoThreshold>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f70:	f7ff fbc6 	bl	8001700 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f74:	4804      	ldr	r0, [pc, #16]	@ (8001f88 <MX_USART3_UART_Init+0x90>)
<<<<<<< HEAD
 8001f76:	f007 fa53 	bl	8009420 <HAL_UARTEx_DisableFifoMode>
=======
 8001f76:	f007 fe59 	bl	8009c2c <HAL_UARTEx_DisableFifoMode>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f80:	f7ff fbbe 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000588 	.word	0x20000588
 8001f8c:	40004800 	.word	0x40004800

08001f90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b0a0      	sub	sp, #128	@ 0x80
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fa8:	f107 0318 	add.w	r3, r7, #24
 8001fac:	2254      	movs	r2, #84	@ 0x54
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
<<<<<<< HEAD
 8001fb2:	f008 fb88 	bl	800a6c6 <memset>
=======
 8001fb2:	f008 ff8e 	bl	800aed2 <memset>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  if(uartHandle->Instance==USART2)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a45      	ldr	r2, [pc, #276]	@ (80020d0 <HAL_UART_MspInit+0x140>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d13f      	bne.n	8002040 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fc8:	f107 0318 	add.w	r3, r7, #24
 8001fcc:	4618      	mov	r0, r3
<<<<<<< HEAD
 8001fce:	f003 fadd 	bl	800558c <HAL_RCCEx_PeriphCLKConfig>
=======
 8001fce:	f003 fee3 	bl	8005d98 <HAL_RCCEx_PeriphCLKConfig>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fd8:	f7ff fb92 	bl	8001700 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8001fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe0:	4a3c      	ldr	r2, [pc, #240]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8001fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fe8:	4b3a      	ldr	r3, [pc, #232]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff4:	4b37      	ldr	r3, [pc, #220]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff8:	4a36      	ldr	r2, [pc, #216]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002000:	4b34      	ldr	r3, [pc, #208]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800200c:	230c      	movs	r3, #12
 800200e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002018:	2300      	movs	r3, #0
 800201a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800201c:	2307      	movs	r3, #7
 800201e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002020:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002024:	4619      	mov	r1, r3
 8002026:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
<<<<<<< HEAD
 800202a:	f002 fad7 	bl	80045dc <HAL_GPIO_Init>
=======
 800202a:	f002 fedd 	bl	8004de8 <HAL_GPIO_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	2026      	movs	r0, #38	@ 0x26
<<<<<<< HEAD
 8002034:	f001 ff78 	bl	8003f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002038:	2026      	movs	r0, #38	@ 0x26
 800203a:	f001 ff8f 	bl	8003f5c <HAL_NVIC_EnableIRQ>
=======
 8002034:	f002 fb7e 	bl	8004734 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002038:	2026      	movs	r0, #38	@ 0x26
 800203a:	f002 fb95 	bl	8004768 <HAL_NVIC_EnableIRQ>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800203e:	e043      	b.n	80020c8 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a24      	ldr	r2, [pc, #144]	@ (80020d8 <HAL_UART_MspInit+0x148>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d13e      	bne.n	80020c8 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800204a:	2304      	movs	r3, #4
 800204c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002052:	f107 0318 	add.w	r3, r7, #24
 8002056:	4618      	mov	r0, r3
<<<<<<< HEAD
 8002058:	f003 fa98 	bl	800558c <HAL_RCCEx_PeriphCLKConfig>
=======
 8002058:	f003 fe9e 	bl	8005d98 <HAL_RCCEx_PeriphCLKConfig>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002062:	f7ff fb4d 	bl	8001700 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002066:	4b1b      	ldr	r3, [pc, #108]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206a:	4a1a      	ldr	r2, [pc, #104]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002070:	6593      	str	r3, [r2, #88]	@ 0x58
 8002072:	4b18      	ldr	r3, [pc, #96]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800207e:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002082:	4a14      	ldr	r2, [pc, #80]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800208a:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <HAL_UART_MspInit+0x144>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002096:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800209a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020a8:	2307      	movs	r3, #7
 80020aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80020b0:	4619      	mov	r1, r3
 80020b2:	480a      	ldr	r0, [pc, #40]	@ (80020dc <HAL_UART_MspInit+0x14c>)
<<<<<<< HEAD
 80020b4:	f002 fa92 	bl	80045dc <HAL_GPIO_Init>
=======
 80020b4:	f002 fe98 	bl	8004de8 <HAL_GPIO_Init>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	2027      	movs	r0, #39	@ 0x27
<<<<<<< HEAD
 80020be:	f001 ff33 	bl	8003f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020c2:	2027      	movs	r0, #39	@ 0x27
 80020c4:	f001 ff4a 	bl	8003f5c <HAL_NVIC_EnableIRQ>
=======
 80020be:	f002 fb39 	bl	8004734 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020c2:	2027      	movs	r0, #39	@ 0x27
 80020c4:	f002 fb50 	bl	8004768 <HAL_NVIC_EnableIRQ>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
}
 80020c8:	bf00      	nop
 80020ca:	3780      	adds	r7, #128	@ 0x80
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40004400 	.word	0x40004400
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40004800 	.word	0x40004800
 80020dc:	48000800 	.word	0x48000800

080020e0 <Shell_Init>:
int 		pas = 1;		//pas de modification de la vitesse du moteur
int 		delai = 100;	//delai entre chaque modification de vitesse du moteur en ms
int 		trigger = 50; 	//valeur du rapport après start
int 		percentage = 50;//valeur du rapport après start

void Shell_Init(void){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS*sizeof(char*));
 80020e4:	2224      	movs	r2, #36	@ 0x24
 80020e6:	2100      	movs	r1, #0
 80020e8:	4816      	ldr	r0, [pc, #88]	@ (8002144 <Shell_Init+0x64>)
<<<<<<< HEAD
 80020ea:	f008 faec 	bl	800a6c6 <memset>
=======
 80020ea:	f008 fef2 	bl	800aed2 <memset>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE*sizeof(char));
 80020ee:	2240      	movs	r2, #64	@ 0x40
 80020f0:	2100      	movs	r1, #0
 80020f2:	4815      	ldr	r0, [pc, #84]	@ (8002148 <Shell_Init+0x68>)
<<<<<<< HEAD
 80020f4:	f008 fae7 	bl	800a6c6 <memset>
=======
 80020f4:	f008 feed 	bl	800aed2 <memset>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE*sizeof(char));
 80020f8:	4b14      	ldr	r3, [pc, #80]	@ (800214c <Shell_Init+0x6c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE*sizeof(char));
 80020fe:	2240      	movs	r2, #64	@ 0x40
 8002100:	2100      	movs	r1, #0
 8002102:	4813      	ldr	r0, [pc, #76]	@ (8002150 <Shell_Init+0x70>)
<<<<<<< HEAD
 8002104:	f008 fadf 	bl	800a6c6 <memset>
=======
 8002104:	f008 fee5 	bl	800aed2 <memset>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002108:	2201      	movs	r2, #1
 800210a:	4910      	ldr	r1, [pc, #64]	@ (800214c <Shell_Init+0x6c>)
 800210c:	4811      	ldr	r0, [pc, #68]	@ (8002154 <Shell_Init+0x74>)
<<<<<<< HEAD
 800210e:	f005 fafb 	bl	8007708 <HAL_UART_Receive_IT>
=======
 800210e:	f005 ff01 	bl	8007f14 <HAL_UART_Receive_IT>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8002112:	4811      	ldr	r0, [pc, #68]	@ (8002158 <Shell_Init+0x78>)
 8002114:	f7fe f8e4 	bl	80002e0 <strlen>
 8002118:	4603      	mov	r3, r0
 800211a:	b29a      	uxth	r2, r3
 800211c:	f04f 33ff 	mov.w	r3, #4294967295
 8002120:	490d      	ldr	r1, [pc, #52]	@ (8002158 <Shell_Init+0x78>)
 8002122:	480c      	ldr	r0, [pc, #48]	@ (8002154 <Shell_Init+0x74>)
<<<<<<< HEAD
 8002124:	f005 fa59 	bl	80075da <HAL_UART_Transmit>
=======
 8002124:	f005 fe5f 	bl	8007de6 <HAL_UART_Transmit>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8002128:	480c      	ldr	r0, [pc, #48]	@ (800215c <Shell_Init+0x7c>)
 800212a:	f7fe f8d9 	bl	80002e0 <strlen>
 800212e:	4603      	mov	r3, r0
 8002130:	b29a      	uxth	r2, r3
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	4909      	ldr	r1, [pc, #36]	@ (800215c <Shell_Init+0x7c>)
 8002138:	4806      	ldr	r0, [pc, #24]	@ (8002154 <Shell_Init+0x74>)
<<<<<<< HEAD
 800213a:	f005 fa4e 	bl	80075da <HAL_UART_Transmit>
=======
 800213a:	f005 fe54 	bl	8007de6 <HAL_UART_Transmit>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	200006a8 	.word	0x200006a8
 8002148:	20000664 	.word	0x20000664
 800214c:	2000061c 	.word	0x2000061c
 8002150:	20000620 	.word	0x20000620
 8002154:	200004f8 	.word	0x200004f8
 8002158:	20000020 	.word	0x20000020
 800215c:	20000004 	.word	0x20000004

08002160 <Shell_Loop>:

void Shell_Loop(void){
 8002160:	b580      	push	{r7, lr}
<<<<<<< HEAD
 8002162:	b08c      	sub	sp, #48	@ 0x30
 8002164:	af02      	add	r7, sp, #8
=======
 8002162:	b092      	sub	sp, #72	@ 0x48
 8002164:	af04      	add	r7, sp, #16
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
	if(uartRxReceived){
 8002166:	4b95      	ldr	r3, [pc, #596]	@ (80023bc <Shell_Loop+0x25c>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d05b      	beq.n	8002226 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 800216e:	4b94      	ldr	r3, [pc, #592]	@ (80023c0 <Shell_Loop+0x260>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b08      	cmp	r3, #8
 8002174:	d034      	beq.n	80021e0 <Shell_Loop+0x80>
 8002176:	2b0d      	cmp	r3, #13
 8002178:	d142      	bne.n	8002200 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
 800217e:	2203      	movs	r2, #3
 8002180:	4990      	ldr	r1, [pc, #576]	@ (80023c4 <Shell_Loop+0x264>)
 8002182:	4891      	ldr	r0, [pc, #580]	@ (80023c8 <Shell_Loop+0x268>)
<<<<<<< HEAD
 8002184:	f005 fa29 	bl	80075da <HAL_UART_Transmit>
=======
 8002184:	f005 fe2f 	bl	8007de6 <HAL_UART_Transmit>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
			cmdBuffer[idx_cmd] = '\0';
 8002188:	4b90      	ldr	r3, [pc, #576]	@ (80023cc <Shell_Loop+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a90      	ldr	r2, [pc, #576]	@ (80023d0 <Shell_Loop+0x270>)
 800218e:	2100      	movs	r1, #0
 8002190:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8002192:	4b90      	ldr	r3, [pc, #576]	@ (80023d4 <Shell_Loop+0x274>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8002198:	498f      	ldr	r1, [pc, #572]	@ (80023d8 <Shell_Loop+0x278>)
 800219a:	488d      	ldr	r0, [pc, #564]	@ (80023d0 <Shell_Loop+0x270>)
<<<<<<< HEAD
 800219c:	f008 fa9c 	bl	800a6d8 <strtok>
=======
 800219c:	f008 fea2 	bl	800aee4 <strtok>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 80021a0:	4603      	mov	r3, r0
 80021a2:	4a8e      	ldr	r2, [pc, #568]	@ (80023dc <Shell_Loop+0x27c>)
 80021a4:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80021a6:	e010      	b.n	80021ca <Shell_Loop+0x6a>
				argv[argc++] = token;
 80021a8:	4b8a      	ldr	r3, [pc, #552]	@ (80023d4 <Shell_Loop+0x274>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	4989      	ldr	r1, [pc, #548]	@ (80023d4 <Shell_Loop+0x274>)
 80021b0:	600a      	str	r2, [r1, #0]
 80021b2:	4a8a      	ldr	r2, [pc, #552]	@ (80023dc <Shell_Loop+0x27c>)
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	498a      	ldr	r1, [pc, #552]	@ (80023e0 <Shell_Loop+0x280>)
 80021b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 80021bc:	4986      	ldr	r1, [pc, #536]	@ (80023d8 <Shell_Loop+0x278>)
 80021be:	2000      	movs	r0, #0
<<<<<<< HEAD
 80021c0:	f008 fa8a 	bl	800a6d8 <strtok>
=======
 80021c0:	f008 fe90 	bl	800aee4 <strtok>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 80021c4:	4603      	mov	r3, r0
 80021c6:	4a85      	ldr	r2, [pc, #532]	@ (80023dc <Shell_Loop+0x27c>)
 80021c8:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80021ca:	4b84      	ldr	r3, [pc, #528]	@ (80023dc <Shell_Loop+0x27c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1ea      	bne.n	80021a8 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 80021d2:	4b7e      	ldr	r3, [pc, #504]	@ (80023cc <Shell_Loop+0x26c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 80021d8:	4b82      	ldr	r3, [pc, #520]	@ (80023e4 <Shell_Loop+0x284>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
			break;
 80021de:	e01f      	b.n	8002220 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 80021e0:	4b7a      	ldr	r3, [pc, #488]	@ (80023cc <Shell_Loop+0x26c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	1e5a      	subs	r2, r3, #1
 80021e6:	4979      	ldr	r1, [pc, #484]	@ (80023cc <Shell_Loop+0x26c>)
 80021e8:	600a      	str	r2, [r1, #0]
 80021ea:	4a79      	ldr	r2, [pc, #484]	@ (80023d0 <Shell_Loop+0x270>)
 80021ec:	2100      	movs	r1, #0
 80021ee:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 80021f0:	f04f 33ff 	mov.w	r3, #4294967295
 80021f4:	2204      	movs	r2, #4
 80021f6:	497c      	ldr	r1, [pc, #496]	@ (80023e8 <Shell_Loop+0x288>)
 80021f8:	4873      	ldr	r0, [pc, #460]	@ (80023c8 <Shell_Loop+0x268>)
<<<<<<< HEAD
 80021fa:	f005 f9ee 	bl	80075da <HAL_UART_Transmit>
=======
 80021fa:	f005 fdf4 	bl	8007de6 <HAL_UART_Transmit>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
			break;
 80021fe:	e00f      	b.n	8002220 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8002200:	4b72      	ldr	r3, [pc, #456]	@ (80023cc <Shell_Loop+0x26c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	4971      	ldr	r1, [pc, #452]	@ (80023cc <Shell_Loop+0x26c>)
 8002208:	600a      	str	r2, [r1, #0]
 800220a:	4a6d      	ldr	r2, [pc, #436]	@ (80023c0 <Shell_Loop+0x260>)
 800220c:	7811      	ldrb	r1, [r2, #0]
 800220e:	4a70      	ldr	r2, [pc, #448]	@ (80023d0 <Shell_Loop+0x270>)
 8002210:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	2201      	movs	r2, #1
 8002218:	4969      	ldr	r1, [pc, #420]	@ (80023c0 <Shell_Loop+0x260>)
 800221a:	486b      	ldr	r0, [pc, #428]	@ (80023c8 <Shell_Loop+0x268>)
<<<<<<< HEAD
 800221c:	f005 f9dd 	bl	80075da <HAL_UART_Transmit>
=======
 800221c:	f005 fde3 	bl	8007de6 <HAL_UART_Transmit>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
		}
		uartRxReceived = 0;
 8002220:	4b66      	ldr	r3, [pc, #408]	@ (80023bc <Shell_Loop+0x25c>)
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8002226:	4b6f      	ldr	r3, [pc, #444]	@ (80023e4 <Shell_Loop+0x284>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
<<<<<<< HEAD
 800222c:	f000 819e 	beq.w	800256c <Shell_Loop+0x40c>
=======
 800222c:	f000 81f5 	beq.w	800261a <Shell_Loop+0x4ba>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8002230:	4b6b      	ldr	r3, [pc, #428]	@ (80023e0 <Shell_Loop+0x280>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	496d      	ldr	r1, [pc, #436]	@ (80023ec <Shell_Loop+0x28c>)
 8002236:	4618      	mov	r0, r3
 8002238:	f7fd fff2 	bl	8000220 <strcmp>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d107      	bne.n	8002252 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	221a      	movs	r2, #26
 8002248:	4969      	ldr	r1, [pc, #420]	@ (80023f0 <Shell_Loop+0x290>)
 800224a:	485f      	ldr	r0, [pc, #380]	@ (80023c8 <Shell_Loop+0x268>)
<<<<<<< HEAD
 800224c:	f005 f9c5 	bl	80075da <HAL_UART_Transmit>
 8002250:	e182      	b.n	8002558 <Shell_Loop+0x3f8>
=======
 800224c:	f005 fdcb 	bl	8007de6 <HAL_UART_Transmit>
 8002250:	e1d9      	b.n	8002606 <Shell_Loop+0x4a6>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
		}
		else if(strcmp(argv[0],"help")==0){
 8002252:	4b63      	ldr	r3, [pc, #396]	@ (80023e0 <Shell_Loop+0x280>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4967      	ldr	r1, [pc, #412]	@ (80023f4 <Shell_Loop+0x294>)
 8002258:	4618      	mov	r0, r3
 800225a:	f7fd ffe1 	bl	8000220 <strcmp>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d12c      	bne.n	80022be <Shell_Loop+0x15e>

			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 8002264:	4a64      	ldr	r2, [pc, #400]	@ (80023f8 <Shell_Loop+0x298>)
 8002266:	2140      	movs	r1, #64	@ 0x40
 8002268:	4864      	ldr	r0, [pc, #400]	@ (80023fc <Shell_Loop+0x29c>)
<<<<<<< HEAD
 800226a:	f008 f995 	bl	800a598 <sniprintf>
=======
 800226a:	f008 fd9b 	bl	800ada4 <sniprintf>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 800226e:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	b29a      	uxth	r2, r3
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
 8002278:	4960      	ldr	r1, [pc, #384]	@ (80023fc <Shell_Loop+0x29c>)
 800227a:	4853      	ldr	r0, [pc, #332]	@ (80023c8 <Shell_Loop+0x268>)
<<<<<<< HEAD
 800227c:	f005 f9ad 	bl	80075da <HAL_UART_Transmit>
=======
 800227c:	f005 fdb3 	bl	8007de6 <HAL_UART_Transmit>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

			for (size_t i = 0; i < nbcommand; i++) {
 8002280:	2300      	movs	r3, #0
 8002282:	637b      	str	r3, [r7, #52]	@ 0x34
 8002284:	e014      	b.n	80022b0 <Shell_Loop+0x150>
				// Convertir l'élément du tableau en chaîne de caractères
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "%s\r\n", command[i]);
 8002286:	4a5e      	ldr	r2, [pc, #376]	@ (8002400 <Shell_Loop+0x2a0>)
 8002288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800228a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228e:	4a5d      	ldr	r2, [pc, #372]	@ (8002404 <Shell_Loop+0x2a4>)
 8002290:	2140      	movs	r1, #64	@ 0x40
 8002292:	485a      	ldr	r0, [pc, #360]	@ (80023fc <Shell_Loop+0x29c>)
<<<<<<< HEAD
 8002294:	f008 f980 	bl	800a598 <sniprintf>
=======
 8002294:	f008 fd86 	bl	800ada4 <sniprintf>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8002298:	6078      	str	r0, [r7, #4]
				// Transmettre le texte via UART
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	b29a      	uxth	r2, r3
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	4956      	ldr	r1, [pc, #344]	@ (80023fc <Shell_Loop+0x29c>)
 80022a4:	4848      	ldr	r0, [pc, #288]	@ (80023c8 <Shell_Loop+0x268>)
<<<<<<< HEAD
 80022a6:	f005 f998 	bl	80075da <HAL_UART_Transmit>
=======
 80022a6:	f005 fd9e 	bl	8007de6 <HAL_UART_Transmit>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
			for (size_t i = 0; i < nbcommand; i++) {
 80022aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ac:	3301      	adds	r3, #1
 80022ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80022b0:	4b55      	ldr	r3, [pc, #340]	@ (8002408 <Shell_Loop+0x2a8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d3e4      	bcc.n	8002286 <Shell_Loop+0x126>
<<<<<<< HEAD
 80022bc:	e14c      	b.n	8002558 <Shell_Loop+0x3f8>
=======
 80022bc:	e1a3      	b.n	8002606 <Shell_Loop+0x4a6>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
			}

		}

		else if(strcmp(argv[0],"start")==0){	//lancement des PWM
 80022be:	4b48      	ldr	r3, [pc, #288]	@ (80023e0 <Shell_Loop+0x280>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4952      	ldr	r1, [pc, #328]	@ (800240c <Shell_Loop+0x2ac>)
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fd ffab 	bl	8000220 <strcmp>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d121      	bne.n	8002314 <Shell_Loop+0x1b4>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Power on\r\n");
 80022d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002410 <Shell_Loop+0x2b0>)
 80022d2:	2140      	movs	r1, #64	@ 0x40
 80022d4:	4849      	ldr	r0, [pc, #292]	@ (80023fc <Shell_Loop+0x29c>)
<<<<<<< HEAD
 80022d6:	f008 f95f 	bl	800a598 <sniprintf>
=======
 80022d6:	f008 fd65 	bl	800ada4 <sniprintf>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 80022da:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	b29a      	uxth	r2, r3
 80022e0:	f04f 33ff 	mov.w	r3, #4294967295
 80022e4:	4945      	ldr	r1, [pc, #276]	@ (80023fc <Shell_Loop+0x29c>)
 80022e6:	4838      	ldr	r0, [pc, #224]	@ (80023c8 <Shell_Loop+0x268>)
<<<<<<< HEAD
 80022e8:	f005 f977 	bl	80075da <HAL_UART_Transmit>
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80022ec:	2100      	movs	r1, #0
 80022ee:	4849      	ldr	r0, [pc, #292]	@ (8002414 <Shell_Loop+0x2b4>)
 80022f0:	f003 fccc 	bl	8005c8c <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80022f4:	2100      	movs	r1, #0
 80022f6:	4847      	ldr	r0, [pc, #284]	@ (8002414 <Shell_Loop+0x2b4>)
 80022f8:	f004 fe4c 	bl	8006f94 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80022fc:	2104      	movs	r1, #4
 80022fe:	4845      	ldr	r0, [pc, #276]	@ (8002414 <Shell_Loop+0x2b4>)
 8002300:	f003 fcc4 	bl	8005c8c <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002304:	2104      	movs	r1, #4
 8002306:	4843      	ldr	r0, [pc, #268]	@ (8002414 <Shell_Loop+0x2b4>)
 8002308:	f004 fe44 	bl	8006f94 <HAL_TIMEx_PWMN_Start>
			setPWM(NULL_SPEED);
 800230c:	2032      	movs	r0, #50	@ 0x32
 800230e:	f000 f97f 	bl	8002610 <setPWM>
 8002312:	e121      	b.n	8002558 <Shell_Loop+0x3f8>
=======
 80022e8:	f005 fd7d 	bl	8007de6 <HAL_UART_Transmit>
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80022ec:	2100      	movs	r1, #0
 80022ee:	4849      	ldr	r0, [pc, #292]	@ (8002414 <Shell_Loop+0x2b4>)
 80022f0:	f004 f8d2 	bl	8006498 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80022f4:	2100      	movs	r1, #0
 80022f6:	4847      	ldr	r0, [pc, #284]	@ (8002414 <Shell_Loop+0x2b4>)
 80022f8:	f005 fa52 	bl	80077a0 <HAL_TIMEx_PWMN_Start>
			HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80022fc:	2104      	movs	r1, #4
 80022fe:	4845      	ldr	r0, [pc, #276]	@ (8002414 <Shell_Loop+0x2b4>)
 8002300:	f004 f8ca 	bl	8006498 <HAL_TIM_PWM_Start>
			HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002304:	2104      	movs	r1, #4
 8002306:	4843      	ldr	r0, [pc, #268]	@ (8002414 <Shell_Loop+0x2b4>)
 8002308:	f005 fa4a 	bl	80077a0 <HAL_TIMEx_PWMN_Start>
			setPWM(NULL_SPEED);
 800230c:	2032      	movs	r0, #50	@ 0x32
 800230e:	f000 f9e1 	bl	80026d4 <setPWM>
 8002312:	e178      	b.n	8002606 <Shell_Loop+0x4a6>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
		}
		else if(strcmp(argv[0],"stop")==0){		//arrêt des PWM après arrêt progressif du moteur
 8002314:	4b32      	ldr	r3, [pc, #200]	@ (80023e0 <Shell_Loop+0x280>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	493f      	ldr	r1, [pc, #252]	@ (8002418 <Shell_Loop+0x2b8>)
 800231a:	4618      	mov	r0, r3
 800231c:	f7fd ff80 	bl	8000220 <strcmp>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 8082 	bne.w	800242c <Shell_Loop+0x2cc>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Power off\r\n");
 8002328:	4a3c      	ldr	r2, [pc, #240]	@ (800241c <Shell_Loop+0x2bc>)
 800232a:	2140      	movs	r1, #64	@ 0x40
 800232c:	4833      	ldr	r0, [pc, #204]	@ (80023fc <Shell_Loop+0x29c>)
<<<<<<< HEAD
 800232e:	f008 f933 	bl	800a598 <sniprintf>
=======
 800232e:	f008 fd39 	bl	800ada4 <sniprintf>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8002332:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	b29a      	uxth	r2, r3
 8002338:	f04f 33ff 	mov.w	r3, #4294967295
 800233c:	492f      	ldr	r1, [pc, #188]	@ (80023fc <Shell_Loop+0x29c>)
 800233e:	4822      	ldr	r0, [pc, #136]	@ (80023c8 <Shell_Loop+0x268>)
<<<<<<< HEAD
 8002340:	f005 f94b 	bl	80075da <HAL_UART_Transmit>
=======
 8002340:	f005 fd51 	bl	8007de6 <HAL_UART_Transmit>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
			if(percentage != NULL_SPEED){
 8002344:	4b36      	ldr	r3, [pc, #216]	@ (8002420 <Shell_Loop+0x2c0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b32      	cmp	r3, #50	@ 0x32
 800234a:	d026      	beq.n	800239a <Shell_Loop+0x23a>
				while(percentage != NULL_SPEED){
 800234c:	e021      	b.n	8002392 <Shell_Loop+0x232>
					if(percentage > NULL_SPEED){
 800234e:	4b34      	ldr	r3, [pc, #208]	@ (8002420 <Shell_Loop+0x2c0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b32      	cmp	r3, #50	@ 0x32
 8002354:	dd0c      	ble.n	8002370 <Shell_Loop+0x210>
						percentage -= pas;
 8002356:	4b32      	ldr	r3, [pc, #200]	@ (8002420 <Shell_Loop+0x2c0>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4b32      	ldr	r3, [pc, #200]	@ (8002424 <Shell_Loop+0x2c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	4a2f      	ldr	r2, [pc, #188]	@ (8002420 <Shell_Loop+0x2c0>)
 8002362:	6013      	str	r3, [r2, #0]
						setPWM(percentage);
 8002364:	4b2e      	ldr	r3, [pc, #184]	@ (8002420 <Shell_Loop+0x2c0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
<<<<<<< HEAD
 800236a:	f000 f951 	bl	8002610 <setPWM>
=======
 800236a:	f000 f9b3 	bl	80026d4 <setPWM>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 800236e:	e00b      	b.n	8002388 <Shell_Loop+0x228>
					}
					else{
						percentage += pas;
 8002370:	4b2b      	ldr	r3, [pc, #172]	@ (8002420 <Shell_Loop+0x2c0>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b2b      	ldr	r3, [pc, #172]	@ (8002424 <Shell_Loop+0x2c4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4413      	add	r3, r2
 800237a:	4a29      	ldr	r2, [pc, #164]	@ (8002420 <Shell_Loop+0x2c0>)
 800237c:	6013      	str	r3, [r2, #0]
						setPWM(percentage);
 800237e:	4b28      	ldr	r3, [pc, #160]	@ (8002420 <Shell_Loop+0x2c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
<<<<<<< HEAD
 8002384:	f000 f944 	bl	8002610 <setPWM>
=======
 8002384:	f000 f9a6 	bl	80026d4 <setPWM>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
					}
					HAL_Delay(delai);
 8002388:	4b27      	ldr	r3, [pc, #156]	@ (8002428 <Shell_Loop+0x2c8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
<<<<<<< HEAD
 800238e:	f000 f9c1 	bl	8002714 <HAL_Delay>
=======
 800238e:	f000 fa23 	bl	80027d8 <HAL_Delay>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
				while(percentage != NULL_SPEED){
 8002392:	4b23      	ldr	r3, [pc, #140]	@ (8002420 <Shell_Loop+0x2c0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b32      	cmp	r3, #50	@ 0x32
 8002398:	d1d9      	bne.n	800234e <Shell_Loop+0x1ee>
				}
			}
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 800239a:	2100      	movs	r1, #0
 800239c:	481d      	ldr	r0, [pc, #116]	@ (8002414 <Shell_Loop+0x2b4>)
<<<<<<< HEAD
 800239e:	f003 fd87 	bl	8005eb0 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80023a2:	2100      	movs	r1, #0
 80023a4:	481b      	ldr	r0, [pc, #108]	@ (8002414 <Shell_Loop+0x2b4>)
 80023a6:	f004 feb7 	bl	8007118 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 80023aa:	2104      	movs	r1, #4
 80023ac:	4819      	ldr	r0, [pc, #100]	@ (8002414 <Shell_Loop+0x2b4>)
 80023ae:	f003 fd7f 	bl	8005eb0 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80023b2:	2104      	movs	r1, #4
 80023b4:	4817      	ldr	r0, [pc, #92]	@ (8002414 <Shell_Loop+0x2b4>)
 80023b6:	f004 feaf 	bl	8007118 <HAL_TIMEx_PWMN_Stop>
 80023ba:	e0cd      	b.n	8002558 <Shell_Loop+0x3f8>
=======
 800239e:	f004 f98d 	bl	80066bc <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80023a2:	2100      	movs	r1, #0
 80023a4:	481b      	ldr	r0, [pc, #108]	@ (8002414 <Shell_Loop+0x2b4>)
 80023a6:	f005 fabd 	bl	8007924 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 80023aa:	2104      	movs	r1, #4
 80023ac:	4819      	ldr	r0, [pc, #100]	@ (8002414 <Shell_Loop+0x2b4>)
 80023ae:	f004 f985 	bl	80066bc <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80023b2:	2104      	movs	r1, #4
 80023b4:	4817      	ldr	r0, [pc, #92]	@ (8002414 <Shell_Loop+0x2b4>)
 80023b6:	f005 fab5 	bl	8007924 <HAL_TIMEx_PWMN_Stop>
 80023ba:	e124      	b.n	8002606 <Shell_Loop+0x4a6>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 80023bc:	20000618 	.word	0x20000618
 80023c0:	2000061c 	.word	0x2000061c
 80023c4:	20000088 	.word	0x20000088
 80023c8:	200004f8 	.word	0x200004f8
 80023cc:	200006a4 	.word	0x200006a4
 80023d0:	20000664 	.word	0x20000664
 80023d4:	200006cc 	.word	0x200006cc
<<<<<<< HEAD
 80023d8:	0800de78 	.word	0x0800de78
 80023dc:	200006d0 	.word	0x200006d0
 80023e0:	200006a8 	.word	0x200006a8
 80023e4:	200006d4 	.word	0x200006d4
 80023e8:	2000008c 	.word	0x2000008c
 80023ec:	0800de50 	.word	0x0800de50
 80023f0:	200000a4 	.word	0x200000a4
 80023f4:	0800de7c 	.word	0x0800de7c
 80023f8:	0800de84 	.word	0x0800de84
 80023fc:	20000620 	.word	0x20000620
 8002400:	200000c0 	.word	0x200000c0
 8002404:	0800deac 	.word	0x0800deac
 8002408:	200000d0 	.word	0x200000d0
 800240c:	0800de60 	.word	0x0800de60
 8002410:	0800deb4 	.word	0x0800deb4
 8002414:	20000460 	.word	0x20000460
 8002418:	0800de68 	.word	0x0800de68
 800241c:	0800dec0 	.word	0x0800dec0
 8002420:	200000e0 	.word	0x200000e0
 8002424:	200000d4 	.word	0x200000d4
 8002428:	200000d8 	.word	0x200000d8
		}

		else if(argc == 2 && strcmp(argv[0], "speed") == 0){	//commande de vitesse du moteur avec changement progressif
 800242c:	4b51      	ldr	r3, [pc, #324]	@ (8002574 <Shell_Loop+0x414>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d153      	bne.n	80024dc <Shell_Loop+0x37c>
 8002434:	4b50      	ldr	r3, [pc, #320]	@ (8002578 <Shell_Loop+0x418>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4950      	ldr	r1, [pc, #320]	@ (800257c <Shell_Loop+0x41c>)
=======
 80023d8:	0800e688 	.word	0x0800e688
 80023dc:	200006d0 	.word	0x200006d0
 80023e0:	200006a8 	.word	0x200006a8
 80023e4:	200006d4 	.word	0x200006d4
 80023e8:	20000090 	.word	0x20000090
 80023ec:	0800e660 	.word	0x0800e660
 80023f0:	200000a8 	.word	0x200000a8
 80023f4:	0800e68c 	.word	0x0800e68c
 80023f8:	0800e694 	.word	0x0800e694
 80023fc:	20000620 	.word	0x20000620
 8002400:	200000c4 	.word	0x200000c4
 8002404:	0800e6bc 	.word	0x0800e6bc
 8002408:	200000d4 	.word	0x200000d4
 800240c:	0800e670 	.word	0x0800e670
 8002410:	0800e6c4 	.word	0x0800e6c4
 8002414:	20000460 	.word	0x20000460
 8002418:	0800e678 	.word	0x0800e678
 800241c:	0800e6d0 	.word	0x0800e6d0
 8002420:	200000e4 	.word	0x200000e4
 8002424:	200000d8 	.word	0x200000d8
 8002428:	200000dc 	.word	0x200000dc
		}

		else if(argc == 2 && strcmp(argv[0], "speed") == 0){	//commande de vitesse du moteur avec changement progressif
 800242c:	4b7d      	ldr	r3, [pc, #500]	@ (8002624 <Shell_Loop+0x4c4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d153      	bne.n	80024dc <Shell_Loop+0x37c>
 8002434:	4b7c      	ldr	r3, [pc, #496]	@ (8002628 <Shell_Loop+0x4c8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	497c      	ldr	r1, [pc, #496]	@ (800262c <Shell_Loop+0x4cc>)
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 800243a:	4618      	mov	r0, r3
 800243c:	f7fd fef0 	bl	8000220 <strcmp>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d14a      	bne.n	80024dc <Shell_Loop+0x37c>
			//on vérifie que le nombre d'arguments est valide et que le premier porte le bon nom de commande
			percentage = atoi(argv[1]);  // Convertit l'argument en pourcentage
<<<<<<< HEAD
 8002446:	4b4c      	ldr	r3, [pc, #304]	@ (8002578 <Shell_Loop+0x418>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4618      	mov	r0, r3
 800244c:	f007 f8ec 	bl	8009628 <atoi>
 8002450:	4603      	mov	r3, r0
 8002452:	4a4b      	ldr	r2, [pc, #300]	@ (8002580 <Shell_Loop+0x420>)
 8002454:	6013      	str	r3, [r2, #0]

			if(percentage>=0 && percentage<=100){	//test sur la valeur de vitesse entrée avant de modifier la vitesse du moteur
 8002456:	4b4a      	ldr	r3, [pc, #296]	@ (8002580 <Shell_Loop+0x420>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db2f      	blt.n	80024be <Shell_Loop+0x35e>
 800245e:	4b48      	ldr	r3, [pc, #288]	@ (8002580 <Shell_Loop+0x420>)
=======
 8002446:	4b78      	ldr	r3, [pc, #480]	@ (8002628 <Shell_Loop+0x4c8>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4618      	mov	r0, r3
 800244c:	f007 fcf2 	bl	8009e34 <atoi>
 8002450:	4603      	mov	r3, r0
 8002452:	4a77      	ldr	r2, [pc, #476]	@ (8002630 <Shell_Loop+0x4d0>)
 8002454:	6013      	str	r3, [r2, #0]

			if(percentage>=0 && percentage<=100){	//test sur la valeur de vitesse entrée
 8002456:	4b76      	ldr	r3, [pc, #472]	@ (8002630 <Shell_Loop+0x4d0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db2f      	blt.n	80024be <Shell_Loop+0x35e>
 800245e:	4b74      	ldr	r3, [pc, #464]	@ (8002630 <Shell_Loop+0x4d0>)
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b64      	cmp	r3, #100	@ 0x64
 8002464:	dc2b      	bgt.n	80024be <Shell_Loop+0x35e>

				while(trigger!=percentage){
 8002466:	e023      	b.n	80024b0 <Shell_Loop+0x350>
					if(trigger>percentage){
<<<<<<< HEAD
 8002468:	4b46      	ldr	r3, [pc, #280]	@ (8002584 <Shell_Loop+0x424>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b44      	ldr	r3, [pc, #272]	@ (8002580 <Shell_Loop+0x420>)
=======
 8002468:	4b72      	ldr	r3, [pc, #456]	@ (8002634 <Shell_Loop+0x4d4>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b70      	ldr	r3, [pc, #448]	@ (8002630 <Shell_Loop+0x4d0>)
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	dd0c      	ble.n	800248e <Shell_Loop+0x32e>
						trigger -= pas;
<<<<<<< HEAD
 8002474:	4b43      	ldr	r3, [pc, #268]	@ (8002584 <Shell_Loop+0x424>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b43      	ldr	r3, [pc, #268]	@ (8002588 <Shell_Loop+0x428>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	4a41      	ldr	r2, [pc, #260]	@ (8002584 <Shell_Loop+0x424>)
 8002480:	6013      	str	r3, [r2, #0]
						setPWM(trigger);
 8002482:	4b40      	ldr	r3, [pc, #256]	@ (8002584 <Shell_Loop+0x424>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f8c2 	bl	8002610 <setPWM>
=======
 8002474:	4b6f      	ldr	r3, [pc, #444]	@ (8002634 <Shell_Loop+0x4d4>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b6f      	ldr	r3, [pc, #444]	@ (8002638 <Shell_Loop+0x4d8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	4a6d      	ldr	r2, [pc, #436]	@ (8002634 <Shell_Loop+0x4d4>)
 8002480:	6013      	str	r3, [r2, #0]
						setPWM(trigger);
 8002482:	4b6c      	ldr	r3, [pc, #432]	@ (8002634 <Shell_Loop+0x4d4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f924 	bl	80026d4 <setPWM>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 800248c:	e00b      	b.n	80024a6 <Shell_Loop+0x346>
					}
					else{
						trigger += pas;
<<<<<<< HEAD
 800248e:	4b3d      	ldr	r3, [pc, #244]	@ (8002584 <Shell_Loop+0x424>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b3d      	ldr	r3, [pc, #244]	@ (8002588 <Shell_Loop+0x428>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4413      	add	r3, r2
 8002498:	4a3a      	ldr	r2, [pc, #232]	@ (8002584 <Shell_Loop+0x424>)
 800249a:	6013      	str	r3, [r2, #0]
						setPWM(trigger);
 800249c:	4b39      	ldr	r3, [pc, #228]	@ (8002584 <Shell_Loop+0x424>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 f8b5 	bl	8002610 <setPWM>
					}
					HAL_Delay(delai);
 80024a6:	4b39      	ldr	r3, [pc, #228]	@ (800258c <Shell_Loop+0x42c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f932 	bl	8002714 <HAL_Delay>
				while(trigger!=percentage){
 80024b0:	4b34      	ldr	r3, [pc, #208]	@ (8002584 <Shell_Loop+0x424>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b32      	ldr	r3, [pc, #200]	@ (8002580 <Shell_Loop+0x420>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d1d5      	bne.n	8002468 <Shell_Loop+0x308>
			if(percentage>=0 && percentage<=100){	//test sur la valeur de vitesse entrée avant de modifier la vitesse du moteur
 80024bc:	e04c      	b.n	8002558 <Shell_Loop+0x3f8>
=======
 800248e:	4b69      	ldr	r3, [pc, #420]	@ (8002634 <Shell_Loop+0x4d4>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b69      	ldr	r3, [pc, #420]	@ (8002638 <Shell_Loop+0x4d8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4413      	add	r3, r2
 8002498:	4a66      	ldr	r2, [pc, #408]	@ (8002634 <Shell_Loop+0x4d4>)
 800249a:	6013      	str	r3, [r2, #0]
						setPWM(trigger);
 800249c:	4b65      	ldr	r3, [pc, #404]	@ (8002634 <Shell_Loop+0x4d4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 f917 	bl	80026d4 <setPWM>
					}
					HAL_Delay(delai);
 80024a6:	4b65      	ldr	r3, [pc, #404]	@ (800263c <Shell_Loop+0x4dc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f994 	bl	80027d8 <HAL_Delay>
				while(trigger!=percentage){
 80024b0:	4b60      	ldr	r3, [pc, #384]	@ (8002634 <Shell_Loop+0x4d4>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002630 <Shell_Loop+0x4d0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d1d5      	bne.n	8002468 <Shell_Loop+0x308>
			if(percentage>=0 && percentage<=100){	//test sur la valeur de vitesse entrée
 80024bc:	e0a3      	b.n	8002606 <Shell_Loop+0x4a6>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
				}
			}
			else{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Value must be between 0 and 100\r\n");
<<<<<<< HEAD
 80024be:	4a34      	ldr	r2, [pc, #208]	@ (8002590 <Shell_Loop+0x430>)
 80024c0:	2140      	movs	r1, #64	@ 0x40
 80024c2:	4834      	ldr	r0, [pc, #208]	@ (8002594 <Shell_Loop+0x434>)
 80024c4:	f008 f868 	bl	800a598 <sniprintf>
 80024c8:	6238      	str	r0, [r7, #32]
=======
 80024be:	4a60      	ldr	r2, [pc, #384]	@ (8002640 <Shell_Loop+0x4e0>)
 80024c0:	2140      	movs	r1, #64	@ 0x40
 80024c2:	4860      	ldr	r0, [pc, #384]	@ (8002644 <Shell_Loop+0x4e4>)
 80024c4:	f008 fc6e 	bl	800ada4 <sniprintf>
 80024c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
				HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80024ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
<<<<<<< HEAD
 80024d2:	4930      	ldr	r1, [pc, #192]	@ (8002594 <Shell_Loop+0x434>)
 80024d4:	4830      	ldr	r0, [pc, #192]	@ (8002598 <Shell_Loop+0x438>)
 80024d6:	f005 f880 	bl	80075da <HAL_UART_Transmit>
			if(percentage>=0 && percentage<=100){	//test sur la valeur de vitesse entrée avant de modifier la vitesse du moteur
 80024da:	e03d      	b.n	8002558 <Shell_Loop+0x3f8>
			}
		}
		else if(strcmp(argv[0],"current")==0){		//commande pour demander l'affichage du courant
 80024dc:	4b26      	ldr	r3, [pc, #152]	@ (8002578 <Shell_Loop+0x418>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	492e      	ldr	r1, [pc, #184]	@ (800259c <Shell_Loop+0x43c>)
=======
 80024d2:	495c      	ldr	r1, [pc, #368]	@ (8002644 <Shell_Loop+0x4e4>)
 80024d4:	485c      	ldr	r0, [pc, #368]	@ (8002648 <Shell_Loop+0x4e8>)
 80024d6:	f005 fc86 	bl	8007de6 <HAL_UART_Transmit>
			if(percentage>=0 && percentage<=100){	//test sur la valeur de vitesse entrée
 80024da:	e094      	b.n	8002606 <Shell_Loop+0x4a6>
			}
		}
		else if(strcmp(argv[0],"current")==0){		//commande pour demander l'affichage du courant
 80024dc:	4b52      	ldr	r3, [pc, #328]	@ (8002628 <Shell_Loop+0x4c8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	495a      	ldr	r1, [pc, #360]	@ (800264c <Shell_Loop+0x4ec>)
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fd fe9c 	bl	8000220 <strcmp>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d12d      	bne.n	800254a <Shell_Loop+0x3ea>
			float voltage = V_REF * adc_val  / ADC_RESOLUTION;
<<<<<<< HEAD
 80024ee:	4b2c      	ldr	r3, [pc, #176]	@ (80025a0 <Shell_Loop+0x440>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fa:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80025a4 <Shell_Loop+0x444>
 80024fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002502:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80025a8 <Shell_Loop+0x448>
=======
 80024ee:	4b58      	ldr	r3, [pc, #352]	@ (8002650 <Shell_Loop+0x4f0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fa:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002654 <Shell_Loop+0x4f4>
 80024fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002502:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8002658 <Shell_Loop+0x4f8>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8002506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800250a:	edc7 7a07 	vstr	s15, [r7, #28]
			float current = voltage - OFFSET / PRECISION;
 800250e:	edd7 7a07 	vldr	s15, [r7, #28]
<<<<<<< HEAD
 8002512:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80025ac <Shell_Loop+0x44c>
=======
 8002512:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800265c <Shell_Loop+0x4fc>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 8002516:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800251a:	edc7 7a06 	vstr	s15, [r7, #24]
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "current : %f \r\n", current);
 800251e:	69b8      	ldr	r0, [r7, #24]
 8002520:	f7fe f84a 	bl	80005b8 <__aeabi_f2d>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
<<<<<<< HEAD
 8002528:	e9cd 2300 	strd	r2, r3, [sp]
 800252c:	4a20      	ldr	r2, [pc, #128]	@ (80025b0 <Shell_Loop+0x450>)
 800252e:	2140      	movs	r1, #64	@ 0x40
 8002530:	4818      	ldr	r0, [pc, #96]	@ (8002594 <Shell_Loop+0x434>)
 8002532:	f008 f831 	bl	800a598 <sniprintf>
 8002536:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	b29a      	uxth	r2, r3
 800253c:	f04f 33ff 	mov.w	r3, #4294967295
 8002540:	4914      	ldr	r1, [pc, #80]	@ (8002594 <Shell_Loop+0x434>)
 8002542:	4815      	ldr	r0, [pc, #84]	@ (8002598 <Shell_Loop+0x438>)
 8002544:	f005 f849 	bl	80075da <HAL_UART_Transmit>
 8002548:	e006      	b.n	8002558 <Shell_Loop+0x3f8>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
 800254e:	2214      	movs	r2, #20
 8002550:	4918      	ldr	r1, [pc, #96]	@ (80025b4 <Shell_Loop+0x454>)
 8002552:	4811      	ldr	r0, [pc, #68]	@ (8002598 <Shell_Loop+0x438>)
 8002554:	f005 f841 	bl	80075da <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002558:	f04f 33ff 	mov.w	r3, #4294967295
 800255c:	221c      	movs	r2, #28
 800255e:	4916      	ldr	r1, [pc, #88]	@ (80025b8 <Shell_Loop+0x458>)
 8002560:	480d      	ldr	r0, [pc, #52]	@ (8002598 <Shell_Loop+0x438>)
 8002562:	f005 f83a 	bl	80075da <HAL_UART_Transmit>
		newCmdReady = 0;
 8002566:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <Shell_Loop+0x45c>)
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
	}
}
 800256c:	bf00      	nop
 800256e:	3728      	adds	r7, #40	@ 0x28
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200006cc 	.word	0x200006cc
 8002578:	200006a8 	.word	0x200006a8
 800257c:	0800de70 	.word	0x0800de70
 8002580:	200000e0 	.word	0x200000e0
 8002584:	200000dc 	.word	0x200000dc
 8002588:	200000d4 	.word	0x200000d4
 800258c:	200000d8 	.word	0x200000d8
 8002590:	0800decc 	.word	0x0800decc
 8002594:	20000620 	.word	0x20000620
 8002598:	200004f8 	.word	0x200004f8
 800259c:	0800def0 	.word	0x0800def0
 80025a0:	20000660 	.word	0x20000660
 80025a4:	40533333 	.word	0x40533333
 80025a8:	45800000 	.word	0x45800000
 80025ac:	42040000 	.word	0x42040000
 80025b0:	0800def8 	.word	0x0800def8
 80025b4:	20000090 	.word	0x20000090
 80025b8:	20000004 	.word	0x20000004
 80025bc:	200006d4 	.word	0x200006d4

080025c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80025c8:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <HAL_UART_RxCpltCallback+0x20>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80025ce:	2201      	movs	r2, #1
 80025d0:	4904      	ldr	r1, [pc, #16]	@ (80025e4 <HAL_UART_RxCpltCallback+0x24>)
 80025d2:	4805      	ldr	r0, [pc, #20]	@ (80025e8 <HAL_UART_RxCpltCallback+0x28>)
 80025d4:	f005 f898 	bl	8007708 <HAL_UART_Receive_IT>
}
 80025d8:	bf00      	nop
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000618 	.word	0x20000618
 80025e4:	2000061c 	.word	0x2000061c
 80025e8:	200004f8 	.word	0x200004f8

080025ec <HAL_ADC_ConvCpltCallback>:
=======
 8002528:	4949      	ldr	r1, [pc, #292]	@ (8002650 <Shell_Loop+0x4f0>)
 800252a:	6809      	ldr	r1, [r1, #0]
 800252c:	9102      	str	r1, [sp, #8]
 800252e:	e9cd 2300 	strd	r2, r3, [sp]
 8002532:	4a4b      	ldr	r2, [pc, #300]	@ (8002660 <Shell_Loop+0x500>)
 8002534:	2140      	movs	r1, #64	@ 0x40
 8002536:	4843      	ldr	r0, [pc, #268]	@ (8002644 <Shell_Loop+0x4e4>)
 8002538:	f008 fc34 	bl	800ada4 <sniprintf>
 800253c:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	b29a      	uxth	r2, r3
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
 8002546:	493f      	ldr	r1, [pc, #252]	@ (8002644 <Shell_Loop+0x4e4>)
 8002548:	483f      	ldr	r0, [pc, #252]	@ (8002648 <Shell_Loop+0x4e8>)
 800254a:	f005 fc4c 	bl	8007de6 <HAL_UART_Transmit>
 800254e:	e05a      	b.n	8002606 <Shell_Loop+0x4a6>
		}

		else if(strcmp(argv[0],"currentpool")==0){
 8002550:	4b35      	ldr	r3, [pc, #212]	@ (8002628 <Shell_Loop+0x4c8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4943      	ldr	r1, [pc, #268]	@ (8002664 <Shell_Loop+0x504>)
 8002556:	4618      	mov	r0, r3
 8002558:	f7fd fe62 	bl	8000220 <strcmp>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d14a      	bne.n	80025f8 <Shell_Loop+0x498>
			HAL_ADC_Start(&hadc1);
 8002562:	4841      	ldr	r0, [pc, #260]	@ (8002668 <Shell_Loop+0x508>)
 8002564:	f000 fd9a 	bl	800309c <HAL_ADC_Start>
			uint32_t adc_value = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	62bb      	str	r3, [r7, #40]	@ 0x28
			float voltage = 0.0f;
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
			float current = 0.0f;
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	633b      	str	r3, [r7, #48]	@ 0x30
			if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8002578:	f04f 31ff 	mov.w	r1, #4294967295
 800257c:	483a      	ldr	r0, [pc, #232]	@ (8002668 <Shell_Loop+0x508>)
 800257e:	f000 fea5 	bl	80032cc <HAL_ADC_PollForConversion>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d11e      	bne.n	80025c6 <Shell_Loop+0x466>
				adc_value = HAL_ADC_GetValue(&hadc1);
 8002588:	4837      	ldr	r0, [pc, #220]	@ (8002668 <Shell_Loop+0x508>)
 800258a:	f001 f879 	bl	8003680 <HAL_ADC_GetValue>
 800258e:	62b8      	str	r0, [r7, #40]	@ 0x28
				voltage = (adc_value * ADC_VREF) / ADC_RESOLUTION;
 8002590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800259a:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002654 <Shell_Loop+0x4f4>
 800259e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025a2:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8002658 <Shell_Loop+0x4f8>
 80025a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025aa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
				current = (voltage - ADC_V_OFFSET) / ADC_NOMINAL_SENSITIVITY;
 80025ae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80025b2:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800266c <Shell_Loop+0x50c>
 80025b6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80025ba:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8002670 <Shell_Loop+0x510>
 80025be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025c2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
			}
			HAL_ADC_Stop(&hadc1);
 80025c6:	4828      	ldr	r0, [pc, #160]	@ (8002668 <Shell_Loop+0x508>)
 80025c8:	f000 fe4c 	bl	8003264 <HAL_ADC_Stop>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "current : %f A\r\n", current);
 80025cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025ce:	f7fd fff3 	bl	80005b8 <__aeabi_f2d>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	e9cd 2300 	strd	r2, r3, [sp]
 80025da:	4a26      	ldr	r2, [pc, #152]	@ (8002674 <Shell_Loop+0x514>)
 80025dc:	2140      	movs	r1, #64	@ 0x40
 80025de:	4819      	ldr	r0, [pc, #100]	@ (8002644 <Shell_Loop+0x4e4>)
 80025e0:	f008 fbe0 	bl	800ada4 <sniprintf>
 80025e4:	6238      	str	r0, [r7, #32]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	4915      	ldr	r1, [pc, #84]	@ (8002644 <Shell_Loop+0x4e4>)
 80025f0:	4815      	ldr	r0, [pc, #84]	@ (8002648 <Shell_Loop+0x4e8>)
 80025f2:	f005 fbf8 	bl	8007de6 <HAL_UART_Transmit>
 80025f6:	e006      	b.n	8002606 <Shell_Loop+0x4a6>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295
 80025fc:	2214      	movs	r2, #20
 80025fe:	491e      	ldr	r1, [pc, #120]	@ (8002678 <Shell_Loop+0x518>)
 8002600:	4811      	ldr	r0, [pc, #68]	@ (8002648 <Shell_Loop+0x4e8>)
 8002602:	f005 fbf0 	bl	8007de6 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	221c      	movs	r2, #28
 800260c:	491b      	ldr	r1, [pc, #108]	@ (800267c <Shell_Loop+0x51c>)
 800260e:	480e      	ldr	r0, [pc, #56]	@ (8002648 <Shell_Loop+0x4e8>)
 8002610:	f005 fbe9 	bl	8007de6 <HAL_UART_Transmit>
		newCmdReady = 0;
 8002614:	4b1a      	ldr	r3, [pc, #104]	@ (8002680 <Shell_Loop+0x520>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
	}
}
 800261a:	bf00      	nop
 800261c:	3738      	adds	r7, #56	@ 0x38
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200006cc 	.word	0x200006cc
 8002628:	200006a8 	.word	0x200006a8
 800262c:	0800e680 	.word	0x0800e680
 8002630:	200000e4 	.word	0x200000e4
 8002634:	200000e0 	.word	0x200000e0
 8002638:	200000d8 	.word	0x200000d8
 800263c:	200000dc 	.word	0x200000dc
 8002640:	0800e6dc 	.word	0x0800e6dc
 8002644:	20000620 	.word	0x20000620
 8002648:	200004f8 	.word	0x200004f8
 800264c:	0800e700 	.word	0x0800e700
 8002650:	20000660 	.word	0x20000660
 8002654:	40533333 	.word	0x40533333
 8002658:	45800000 	.word	0x45800000
 800265c:	42040000 	.word	0x42040000
 8002660:	0800e708 	.word	0x0800e708
 8002664:	0800e71c 	.word	0x0800e71c
 8002668:	200002d4 	.word	0x200002d4
 800266c:	3fd33333 	.word	0x3fd33333
 8002670:	3da3d70a 	.word	0x3da3d70a
 8002674:	0800e728 	.word	0x0800e728
 8002678:	20000094 	.word	0x20000094
 800267c:	20000008 	.word	0x20000008
 8002680:	200006d4 	.word	0x200006d4

08002684 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <HAL_UART_RxCpltCallback+0x20>)
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002692:	2201      	movs	r2, #1
 8002694:	4904      	ldr	r1, [pc, #16]	@ (80026a8 <HAL_UART_RxCpltCallback+0x24>)
 8002696:	4805      	ldr	r0, [pc, #20]	@ (80026ac <HAL_UART_RxCpltCallback+0x28>)
 8002698:	f005 fc3c 	bl	8007f14 <HAL_UART_Receive_IT>
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000618 	.word	0x20000618
 80026a8:	2000061c 	.word	0x2000061c
 80026ac:	200004f8 	.word	0x200004f8

080026b0 <HAL_ADC_ConvCpltCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	adc_val = buffer;
 80025f4:	4b04      	ldr	r3, [pc, #16]	@ (8002608 <HAL_ADC_ConvCpltCallback+0x1c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a04      	ldr	r2, [pc, #16]	@ (800260c <HAL_ADC_ConvCpltCallback+0x20>)
 80025fa:	6013      	str	r3, [r2, #0]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	2000040c 	.word	0x2000040c
 800260c:	20000660 	.word	0x20000660

08002610 <setPWM>:

void setPWM(int dutycycle){		//règle le rapport cyclique des PWM
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	int val_CCR = (TIM1->ARR*dutycycle)/100;
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <setPWM+0x3c>)
 800261a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	4a0b      	ldr	r2, [pc, #44]	@ (8002650 <setPWM+0x40>)
 8002624:	fba2 2303 	umull	r2, r3, r2, r3
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	60fb      	str	r3, [r7, #12]
	TIM1->CCR1=val_CCR;
 800262c:	4a07      	ldr	r2, [pc, #28]	@ (800264c <setPWM+0x3c>)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->CCR2=TIM1->ARR-val_CCR;
 8002632:	4b06      	ldr	r3, [pc, #24]	@ (800264c <setPWM+0x3c>)
 8002634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4904      	ldr	r1, [pc, #16]	@ (800264c <setPWM+0x3c>)
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40012c00 	.word	0x40012c00
 8002650:	51eb851f 	.word	0x51eb851f

08002654 <Reset_Handler>:
 8002654:	480d      	ldr	r0, [pc, #52]	@ (800268c <LoopForever+0x2>)
 8002656:	4685      	mov	sp, r0
 8002658:	480d      	ldr	r0, [pc, #52]	@ (8002690 <LoopForever+0x6>)
 800265a:	490e      	ldr	r1, [pc, #56]	@ (8002694 <LoopForever+0xa>)
 800265c:	4a0e      	ldr	r2, [pc, #56]	@ (8002698 <LoopForever+0xe>)
 800265e:	2300      	movs	r3, #0
 8002660:	e002      	b.n	8002668 <LoopCopyDataInit>

08002662 <CopyDataInit>:
 8002662:	58d4      	ldr	r4, [r2, r3]
 8002664:	50c4      	str	r4, [r0, r3]
 8002666:	3304      	adds	r3, #4

08002668 <LoopCopyDataInit>:
 8002668:	18c4      	adds	r4, r0, r3
 800266a:	428c      	cmp	r4, r1
 800266c:	d3f9      	bcc.n	8002662 <CopyDataInit>
 800266e:	4a0b      	ldr	r2, [pc, #44]	@ (800269c <LoopForever+0x12>)
 8002670:	4c0b      	ldr	r4, [pc, #44]	@ (80026a0 <LoopForever+0x16>)
 8002672:	2300      	movs	r3, #0
 8002674:	e001      	b.n	800267a <LoopFillZerobss>

08002676 <FillZerobss>:
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	3204      	adds	r2, #4

0800267a <LoopFillZerobss>:
 800267a:	42a2      	cmp	r2, r4
 800267c:	d3fb      	bcc.n	8002676 <FillZerobss>
 800267e:	f7ff f9fb 	bl	8001a78 <SystemInit>
 8002682:	f008 f8d5 	bl	800a830 <__libc_init_array>
 8002686:	f7fe ffbb 	bl	8001600 <main>

0800268a <LoopForever>:
 800268a:	e7fe      	b.n	800268a <LoopForever>
 800268c:	20020000 	.word	0x20020000
 8002690:	20000000 	.word	0x20000000
 8002694:	200002b4 	.word	0x200002b4
 8002698:	0800e3e4 	.word	0x0800e3e4
 800269c:	200002b4 	.word	0x200002b4
 80026a0:	20000828 	.word	0x20000828

080026a4 <ADC1_2_IRQHandler>:
 80026a4:	e7fe      	b.n	80026a4 <ADC1_2_IRQHandler>

080026a6 <HAL_Init>:
=======
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	adc_val = buffer;
 80026b8:	4b04      	ldr	r3, [pc, #16]	@ (80026cc <HAL_ADC_ConvCpltCallback+0x1c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a04      	ldr	r2, [pc, #16]	@ (80026d0 <HAL_ADC_ConvCpltCallback+0x20>)
 80026be:	6013      	str	r3, [r2, #0]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000660 	.word	0x20000660

080026d4 <setPWM>:

void setPWM(int dutycycle){		//règle le rapport cyclique des PWM
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	int val_CCR = (TIM1->ARR*dutycycle)/100;
 80026dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002710 <setPWM+0x3c>)
 80026de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002714 <setPWM+0x40>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	60fb      	str	r3, [r7, #12]
	TIM1->CCR1=val_CCR;
 80026f0:	4a07      	ldr	r2, [pc, #28]	@ (8002710 <setPWM+0x3c>)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->CCR2=TIM1->ARR-val_CCR;
 80026f6:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <setPWM+0x3c>)
 80026f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4904      	ldr	r1, [pc, #16]	@ (8002710 <setPWM+0x3c>)
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40012c00 	.word	0x40012c00
 8002714:	51eb851f 	.word	0x51eb851f

08002718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002718:	480d      	ldr	r0, [pc, #52]	@ (8002750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800271a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800271c:	480d      	ldr	r0, [pc, #52]	@ (8002754 <LoopForever+0x6>)
  ldr r1, =_edata
 800271e:	490e      	ldr	r1, [pc, #56]	@ (8002758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002720:	4a0e      	ldr	r2, [pc, #56]	@ (800275c <LoopForever+0xe>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002724:	e002      	b.n	800272c <LoopCopyDataInit>

08002726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272a:	3304      	adds	r3, #4

0800272c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800272c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002730:	d3f9      	bcc.n	8002726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002732:	4a0b      	ldr	r2, [pc, #44]	@ (8002760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002734:	4c0b      	ldr	r4, [pc, #44]	@ (8002764 <LoopForever+0x16>)
  movs r3, #0
 8002736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002738:	e001      	b.n	800273e <LoopFillZerobss>

0800273a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800273c:	3204      	adds	r2, #4

0800273e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002740:	d3fb      	bcc.n	800273a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002742:	f7ff f999 	bl	8001a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002746:	f008 fc79 	bl	800b03c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800274a:	f7fe ff59 	bl	8001600 <main>

0800274e <LoopForever>:

LoopForever:
    b LoopForever
 800274e:	e7fe      	b.n	800274e <LoopForever>
  ldr   r0, =_estack
 8002750:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002758:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 800275c:	0800ec14 	.word	0x0800ec14
  ldr r2, =_sbss
 8002760:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8002764:	20000828 	.word	0x20000828

08002768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC1_2_IRQHandler>

0800276a <HAL_Init>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	71fb      	strb	r3, [r7, #7]
=======
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	71fb      	strb	r3, [r7, #7]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 80026b0:	2003      	movs	r0, #3
 80026b2:	f001 fc2e 	bl	8003f12 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026b6:	200f      	movs	r0, #15
 80026b8:	f7ff f84c 	bl	8001754 <HAL_InitTick>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	71fb      	strb	r3, [r7, #7]
 80026c6:	e001      	b.n	80026cc <HAL_Init+0x26>
=======
 8002774:	2003      	movs	r0, #3
 8002776:	f001 ffd2 	bl	800471e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800277a:	200f      	movs	r0, #15
 800277c:	f7fe ffea 	bl	8001754 <HAL_InitTick>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	71fb      	strb	r3, [r7, #7]
 800278a:	e001      	b.n	8002790 <HAL_Init+0x26>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< HEAD
 80026c8:	f7ff f820 	bl	800170c <HAL_MspInit>
=======
 800278c:	f7fe ffbe 	bl	800170c <HAL_MspInit>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 80026cc:	79fb      	ldrb	r3, [r7, #7]

}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_IncTick>:
=======
 8002790:	79fb      	ldrb	r3, [r7, #7]

}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_IncTick>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026dc:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <HAL_IncTick+0x1c>)
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <HAL_IncTick+0x20>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4413      	add	r3, r2
 80026e6:	4a03      	ldr	r2, [pc, #12]	@ (80026f4 <HAL_IncTick+0x1c>)
 80026e8:	6013      	str	r3, [r2, #0]
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	200006d8 	.word	0x200006d8
 80026f8:	200000e8 	.word	0x200000e8

080026fc <HAL_GetTick>:
=======
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a0:	4b05      	ldr	r3, [pc, #20]	@ (80027b8 <HAL_IncTick+0x1c>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <HAL_IncTick+0x20>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4413      	add	r3, r2
 80027aa:	4a03      	ldr	r2, [pc, #12]	@ (80027b8 <HAL_IncTick+0x1c>)
 80027ac:	6013      	str	r3, [r2, #0]
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	200006d8 	.word	0x200006d8
 80027bc:	200000ec 	.word	0x200000ec

080027c0 <HAL_GetTick>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002700:	4b03      	ldr	r3, [pc, #12]	@ (8002710 <HAL_GetTick+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	200006d8 	.word	0x200006d8

08002714 <HAL_Delay>:
=======
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return uwTick;
 80027c4:	4b03      	ldr	r3, [pc, #12]	@ (80027d4 <HAL_GetTick+0x14>)
 80027c6:	681b      	ldr	r3, [r3, #0]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	200006d8 	.word	0x200006d8

080027d8 <HAL_Delay>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800271c:	f7ff ffee 	bl	80026fc <HAL_GetTick>
 8002720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d004      	beq.n	8002738 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800272e:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <HAL_Delay+0x40>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4413      	add	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002738:	bf00      	nop
 800273a:	f7ff ffdf 	bl	80026fc <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	429a      	cmp	r2, r3
 8002748:	d8f7      	bhi.n	800273a <HAL_Delay+0x26>
  {
  }
}
 800274a:	bf00      	nop
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	200000e8 	.word	0x200000e8

08002758 <LL_ADC_SetCommonClock>:
=======
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e0:	f7ff ffee 	bl	80027c0 <HAL_GetTick>
 80027e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f0:	d004      	beq.n	80027fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80027f2:	4b09      	ldr	r3, [pc, #36]	@ (8002818 <HAL_Delay+0x40>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4413      	add	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027fc:	bf00      	nop
 80027fe:	f7ff ffdf 	bl	80027c0 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	429a      	cmp	r2, r3
 800280c:	d8f7      	bhi.n	80027fe <HAL_Delay+0x26>
  {
  }
}
 800280e:	bf00      	nop
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	200000ec 	.word	0x200000ec

0800281c <LL_ADC_SetCommonClock>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
<<<<<<< HEAD
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	609a      	str	r2, [r3, #8]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <LL_ADC_SetCommonPathInternalCh>:
=======
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	609a      	str	r2, [r3, #8]
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_ADC_SetCommonPathInternalCh>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
<<<<<<< HEAD
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	609a      	str	r2, [r3, #8]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_GetCommonPathInternalCh>:
=======
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	609a      	str	r2, [r3, #8]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_GetCommonPathInternalCh>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
<<<<<<< HEAD
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_ADC_SetOffset>:
=======
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_SetOffset>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
<<<<<<< HEAD
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	3360      	adds	r3, #96	@ 0x60
 80027d2:	461a      	mov	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <LL_ADC_SetOffset+0x44>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80027f8:	bf00      	nop
 80027fa:	371c      	adds	r7, #28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	03fff000 	.word	0x03fff000

08002808 <LL_ADC_GetOffsetChannel>:
=======
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3360      	adds	r3, #96	@ 0x60
 8002896:	461a      	mov	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b08      	ldr	r3, [pc, #32]	@ (80028c8 <LL_ADC_SetOffset+0x44>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028bc:	bf00      	nop
 80028be:	371c      	adds	r7, #28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	03fff000 	.word	0x03fff000

080028cc <LL_ADC_GetOffsetChannel>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
<<<<<<< HEAD
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3360      	adds	r3, #96	@ 0x60
 8002816:	461a      	mov	r2, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_ADC_SetOffsetState>:
=======
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3360      	adds	r3, #96	@ 0x60
 80028da:	461a      	mov	r2, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_ADC_SetOffsetState>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
<<<<<<< HEAD
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	3360      	adds	r3, #96	@ 0x60
 8002844:	461a      	mov	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	431a      	orrs	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <LL_ADC_SetOffsetSign>:
=======
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	3360      	adds	r3, #96	@ 0x60
 8002908:	461a      	mov	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	431a      	orrs	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_ADC_SetOffsetSign>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
<<<<<<< HEAD
 800286a:	b480      	push	{r7}
 800286c:	b087      	sub	sp, #28
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3360      	adds	r3, #96	@ 0x60
 800287a:	461a      	mov	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	431a      	orrs	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002894:	bf00      	nop
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <LL_ADC_SetOffsetSaturation>:
=======
 800292e:	b480      	push	{r7}
 8002930:	b087      	sub	sp, #28
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3360      	adds	r3, #96	@ 0x60
 800293e:	461a      	mov	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	431a      	orrs	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_ADC_SetOffsetSaturation>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
<<<<<<< HEAD
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3360      	adds	r3, #96	@ 0x60
 80028b0:	461a      	mov	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	431a      	orrs	r2, r3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <LL_ADC_SetSamplingTimeCommonConfig>:
=======
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	3360      	adds	r3, #96	@ 0x60
 8002974:	461a      	mov	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	431a      	orrs	r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <LL_ADC_SetSamplingTimeCommonConfig>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
<<<<<<< HEAD
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	615a      	str	r2, [r3, #20]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_REG_IsTriggerSourceSWStart>:
=======
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	615a      	str	r2, [r3, #20]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <LL_ADC_REG_SetSequencerRanks>:
=======
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <LL_ADC_REG_SetSequencerRanks>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
<<<<<<< HEAD
 8002922:	b480      	push	{r7}
 8002924:	b087      	sub	sp, #28
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
=======
 80029e6:	b480      	push	{r7}
 80029e8:	b087      	sub	sp, #28
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
<<<<<<< HEAD
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3330      	adds	r3, #48	@ 0x30
 8002932:	461a      	mov	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	4413      	add	r3, r2
 8002940:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	211f      	movs	r1, #31
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	401a      	ands	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0e9b      	lsrs	r3, r3, #26
 800295a:	f003 011f 	and.w	r1, r3, #31
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	431a      	orrs	r2, r3
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_ADC_SetChannelSamplingTime>:
=======
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3330      	adds	r3, #48	@ 0x30
 80029f6:	461a      	mov	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	4413      	add	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	211f      	movs	r1, #31
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	401a      	ands	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0e9b      	lsrs	r3, r3, #26
 8002a1e:	f003 011f 	and.w	r1, r3, #31
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_ADC_SetChannelSamplingTime>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
<<<<<<< HEAD
 800297a:	b480      	push	{r7}
 800297c:	b087      	sub	sp, #28
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
=======
 8002a3e:	b480      	push	{r7}
 8002a40:	b087      	sub	sp, #28
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	607a      	str	r2, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
<<<<<<< HEAD
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3314      	adds	r3, #20
 800298a:	461a      	mov	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	0e5b      	lsrs	r3, r3, #25
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	4413      	add	r3, r2
 8002998:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	0d1b      	lsrs	r3, r3, #20
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	2107      	movs	r1, #7
 80029a8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	401a      	ands	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	0d1b      	lsrs	r3, r3, #20
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	431a      	orrs	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029c4:	bf00      	nop
 80029c6:	371c      	adds	r7, #28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_ADC_SetChannelSingleDiff>:
=======
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3314      	adds	r3, #20
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	0e5b      	lsrs	r3, r3, #25
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	4413      	add	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	0d1b      	lsrs	r3, r3, #20
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	2107      	movs	r1, #7
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	401a      	ands	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	0d1b      	lsrs	r3, r3, #20
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	431a      	orrs	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_SetChannelSingleDiff>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
<<<<<<< HEAD
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
=======
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
<<<<<<< HEAD
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a0f      	ldr	r2, [pc, #60]	@ (8002a1c <LL_ADC_SetChannelSingleDiff+0x4c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d10a      	bne.n	80029fa <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f0:	431a      	orrs	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
=======
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8002ae0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d10a      	bne.n	8002abe <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
<<<<<<< HEAD
 80029f8:	e00a      	b.n	8002a10 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a06:	43db      	mvns	r3, r3
 8002a08:	401a      	ands	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	407f0000 	.word	0x407f0000

08002a20 <LL_ADC_GetMultimode>:
=======
 8002abc:	e00a      	b.n	8002ad4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aca:	43db      	mvns	r3, r3
 8002acc:	401a      	ands	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002ad4:	bf00      	nop
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	407f0000 	.word	0x407f0000

08002ae4 <LL_ADC_GetMultimode>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
<<<<<<< HEAD
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 031f 	and.w	r3, r3, #31
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_DisableDeepPowerDown>:
=======
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 031f 	and.w	r3, r3, #31
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_ADC_DisableDeepPowerDown>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
=======
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
<<<<<<< HEAD
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002a4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6093      	str	r3, [r2, #8]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_IsDeepPowerDownEnabled>:
=======
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002b2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6093      	str	r3, [r2, #8]
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_IsDeepPowerDownEnabled>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a74:	d101      	bne.n	8002a7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_ADC_EnableInternalRegulator>:
=======
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b54:	d101      	bne.n	8002b5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_EnableInternalRegulator>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
=======
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002a98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_IsInternalRegulatorEnabled>:
=======
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b7c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_ADC_IsInternalRegulatorEnabled>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ac4:	d101      	bne.n	8002aca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_Enable>:
=======
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ba4:	d101      	bne.n	8002baa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_ADC_Enable>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
=======
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ae8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002aec:	f043 0201 	orr.w	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_ADC_IsEnabled>:
=======
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bcc:	f043 0201 	orr.w	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bf4:	f043 0202 	orr.w	r2, r3, #2
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_ADC_IsEnabled>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <LL_ADC_IsEnabled+0x18>
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <LL_ADC_IsEnabled+0x1a>
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <LL_ADC_REG_StartConversion>:
=======
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <LL_ADC_IsEnabled+0x18>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <LL_ADC_IsEnabled+0x1a>
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d101      	bne.n	8002c46 <LL_ADC_IsDisableOngoing+0x18>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <LL_ADC_IsDisableOngoing+0x1a>
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_ADC_REG_StartConversion>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
=======
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
<<<<<<< HEAD
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b36:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b3a:	f043 0204 	orr.w	r2, r3, #4
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <LL_ADC_REG_IsConversionOngoing>:
=======
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c68:	f043 0204 	orr.w	r2, r3, #4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c90:	f043 0210 	orr.w	r2, r3, #16
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <LL_ADC_REG_IsConversionOngoing>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d101      	bne.n	8002b66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_ADC_INJ_IsConversionOngoing>:
=======
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d101      	bne.n	8002cbc <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cda:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cde:	f043 0220 	orr.w	r2, r3, #32
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <LL_ADC_INJ_IsConversionOngoing>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
<<<<<<< HEAD
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d101      	bne.n	8002b8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <HAL_ADC_Init>:
=======
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d101      	bne.n	8002d0a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_ADC_Init>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8002b9c:	b590      	push	{r4, r7, lr}
 8002b9e:	b089      	sub	sp, #36	@ 0x24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60bb      	str	r3, [r7, #8]
=======
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b089      	sub	sp, #36	@ 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60bb      	str	r3, [r7, #8]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
<<<<<<< HEAD
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e1af      	b.n	8002f16 <HAL_ADC_Init+0x37a>
=======
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e1af      	b.n	8003092 <HAL_ADC_Init+0x37a>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
<<<<<<< HEAD
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	2b00      	cmp	r3, #0
=======
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	2b00      	cmp	r3, #0
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d109      	bne.n	8002bd8 <HAL_ADC_Init+0x3c>
=======
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d109      	bne.n	8002d54 <HAL_ADC_Init+0x3c>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7fe fb25 	bl	8001214 <HAL_ADC_MspInit>
=======
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7fe fa67 	bl	8001214 <HAL_ADC_MspInit>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
=======
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
<<<<<<< HEAD
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff3f 	bl	8002a60 <LL_ADC_IsDeepPowerDownEnabled>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d004      	beq.n	8002bf2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff25 	bl	8002a3c <LL_ADC_DisableDeepPowerDown>
=======
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fef1 	bl	8002b40 <LL_ADC_IsDeepPowerDownEnabled>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d004      	beq.n	8002d6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fed7 	bl	8002b1c <LL_ADC_DisableDeepPowerDown>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff5a 	bl	8002ab0 <LL_ADC_IsInternalRegulatorEnabled>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d115      	bne.n	8002c2e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff ff3e 	bl	8002a88 <LL_ADC_EnableInternalRegulator>
=======
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ff0c 	bl	8002b90 <LL_ADC_IsInternalRegulatorEnabled>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d115      	bne.n	8002daa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fef0 	bl	8002b68 <LL_ADC_EnableInternalRegulator>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 8002c0c:	4b9f      	ldr	r3, [pc, #636]	@ (8002e8c <HAL_ADC_Init+0x2f0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	4a9f      	ldr	r2, [pc, #636]	@ (8002e90 <HAL_ADC_Init+0x2f4>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	099b      	lsrs	r3, r3, #6
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c20:	e002      	b.n	8002c28 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f9      	bne.n	8002c22 <HAL_ADC_Init+0x86>
=======
 8002d88:	4b9f      	ldr	r3, [pc, #636]	@ (8003008 <HAL_ADC_Init+0x2f0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	099b      	lsrs	r3, r3, #6
 8002d8e:	4a9f      	ldr	r2, [pc, #636]	@ (800300c <HAL_ADC_Init+0x2f4>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	3301      	adds	r3, #1
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d9c:	e002      	b.n	8002da4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f9      	bne.n	8002d9e <HAL_ADC_Init+0x86>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff ff3c 	bl	8002ab0 <LL_ADC_IsInternalRegulatorEnabled>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10d      	bne.n	8002c5a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c42:	f043 0210 	orr.w	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c4e:	f043 0201 	orr.w	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	77fb      	strb	r3, [r7, #31]
=======
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff feee 	bl	8002b90 <LL_ADC_IsInternalRegulatorEnabled>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10d      	bne.n	8002dd6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbe:	f043 0210 	orr.w	r2, r3, #16
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dca:	f043 0201 	orr.w	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	77fb      	strb	r3, [r7, #31]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff ff75 	bl	8002b4e <LL_ADC_REG_IsConversionOngoing>
 8002c64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f040 8148 	bne.w	8002f04 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 8144 	bne.w	8002f04 <HAL_ADC_Init+0x368>
=======
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff62 	bl	8002ca4 <LL_ADC_REG_IsConversionOngoing>
 8002de0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f040 8148 	bne.w	8003080 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 8144 	bne.w	8003080 <HAL_ADC_Init+0x368>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c80:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c84:	f043 0202 	orr.w	r2, r3, #2
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e00:	f043 0202 	orr.w	r2, r3, #2
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff35 	bl	8002b00 <LL_ADC_IsEnabled>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d141      	bne.n	8002d20 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ca4:	d004      	beq.n	8002cb0 <HAL_ADC_Init+0x114>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a7a      	ldr	r2, [pc, #488]	@ (8002e94 <HAL_ADC_Init+0x2f8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d10f      	bne.n	8002cd0 <HAL_ADC_Init+0x134>
 8002cb0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002cb4:	f7ff ff24 	bl	8002b00 <LL_ADC_IsEnabled>
 8002cb8:	4604      	mov	r4, r0
 8002cba:	4876      	ldr	r0, [pc, #472]	@ (8002e94 <HAL_ADC_Init+0x2f8>)
 8002cbc:	f7ff ff20 	bl	8002b00 <LL_ADC_IsEnabled>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	4323      	orrs	r3, r4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf0c      	ite	eq
 8002cc8:	2301      	moveq	r3, #1
 8002cca:	2300      	movne	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	e012      	b.n	8002cf6 <HAL_ADC_Init+0x15a>
 8002cd0:	4871      	ldr	r0, [pc, #452]	@ (8002e98 <HAL_ADC_Init+0x2fc>)
 8002cd2:	f7ff ff15 	bl	8002b00 <LL_ADC_IsEnabled>
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	4870      	ldr	r0, [pc, #448]	@ (8002e9c <HAL_ADC_Init+0x300>)
 8002cda:	f7ff ff11 	bl	8002b00 <LL_ADC_IsEnabled>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	431c      	orrs	r4, r3
 8002ce2:	486f      	ldr	r0, [pc, #444]	@ (8002ea0 <HAL_ADC_Init+0x304>)
 8002ce4:	f7ff ff0c 	bl	8002b00 <LL_ADC_IsEnabled>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4323      	orrs	r3, r4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf0c      	ite	eq
 8002cf0:	2301      	moveq	r3, #1
 8002cf2:	2300      	movne	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d012      	beq.n	8002d20 <HAL_ADC_Init+0x184>
=======
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fefb 	bl	8002c08 <LL_ADC_IsEnabled>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d141      	bne.n	8002e9c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e20:	d004      	beq.n	8002e2c <HAL_ADC_Init+0x114>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a7a      	ldr	r2, [pc, #488]	@ (8003010 <HAL_ADC_Init+0x2f8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d10f      	bne.n	8002e4c <HAL_ADC_Init+0x134>
 8002e2c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e30:	f7ff feea 	bl	8002c08 <LL_ADC_IsEnabled>
 8002e34:	4604      	mov	r4, r0
 8002e36:	4876      	ldr	r0, [pc, #472]	@ (8003010 <HAL_ADC_Init+0x2f8>)
 8002e38:	f7ff fee6 	bl	8002c08 <LL_ADC_IsEnabled>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	4323      	orrs	r3, r4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	e012      	b.n	8002e72 <HAL_ADC_Init+0x15a>
 8002e4c:	4871      	ldr	r0, [pc, #452]	@ (8003014 <HAL_ADC_Init+0x2fc>)
 8002e4e:	f7ff fedb 	bl	8002c08 <LL_ADC_IsEnabled>
 8002e52:	4604      	mov	r4, r0
 8002e54:	4870      	ldr	r0, [pc, #448]	@ (8003018 <HAL_ADC_Init+0x300>)
 8002e56:	f7ff fed7 	bl	8002c08 <LL_ADC_IsEnabled>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	431c      	orrs	r4, r3
 8002e5e:	486f      	ldr	r0, [pc, #444]	@ (800301c <HAL_ADC_Init+0x304>)
 8002e60:	f7ff fed2 	bl	8002c08 <LL_ADC_IsEnabled>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4323      	orrs	r3, r4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d012      	beq.n	8002e9c <HAL_ADC_Init+0x184>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
<<<<<<< HEAD
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d02:	d004      	beq.n	8002d0e <HAL_ADC_Init+0x172>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a62      	ldr	r2, [pc, #392]	@ (8002e94 <HAL_ADC_Init+0x2f8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_Init+0x176>
 8002d0e:	4a65      	ldr	r2, [pc, #404]	@ (8002ea4 <HAL_ADC_Init+0x308>)
 8002d10:	e000      	b.n	8002d14 <HAL_ADC_Init+0x178>
 8002d12:	4a65      	ldr	r2, [pc, #404]	@ (8002ea8 <HAL_ADC_Init+0x30c>)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	f7ff fd1c 	bl	8002758 <LL_ADC_SetCommonClock>
=======
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e7e:	d004      	beq.n	8002e8a <HAL_ADC_Init+0x172>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a62      	ldr	r2, [pc, #392]	@ (8003010 <HAL_ADC_Init+0x2f8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d101      	bne.n	8002e8e <HAL_ADC_Init+0x176>
 8002e8a:	4a65      	ldr	r2, [pc, #404]	@ (8003020 <HAL_ADC_Init+0x308>)
 8002e8c:	e000      	b.n	8002e90 <HAL_ADC_Init+0x178>
 8002e8e:	4a65      	ldr	r2, [pc, #404]	@ (8003024 <HAL_ADC_Init+0x30c>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4619      	mov	r1, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f7ff fcc0 	bl	800281c <LL_ADC_SetCommonClock>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
<<<<<<< HEAD
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	7f5b      	ldrb	r3, [r3, #29]
 8002d24:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d2a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d30:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d36:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d3e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d106      	bne.n	8002d5c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d52:	3b01      	subs	r3, #1
 8002d54:	045b      	lsls	r3, r3, #17
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
=======
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	7f5b      	ldrb	r3, [r3, #29]
 8002ea0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ea6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002eac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002eb2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002eba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d106      	bne.n	8002ed8 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	045b      	lsls	r3, r3, #17
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d009      	beq.n	8002d78 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d70:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
=======
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
<<<<<<< HEAD
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	4b4b      	ldr	r3, [pc, #300]	@ (8002eac <HAL_ADC_Init+0x310>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	69b9      	ldr	r1, [r7, #24]
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	611a      	str	r2, [r3, #16]
=======
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	4b4b      	ldr	r3, [pc, #300]	@ (8003028 <HAL_ADC_Init+0x310>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	69b9      	ldr	r1, [r7, #24]
 8002f04:	430b      	orrs	r3, r1
 8002f06:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	611a      	str	r2, [r3, #16]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fed1 	bl	8002b4e <LL_ADC_REG_IsConversionOngoing>
 8002dac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fede 	bl	8002b74 <LL_ADC_INJ_IsConversionOngoing>
 8002db8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d17f      	bne.n	8002ec0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d17c      	bne.n	8002ec0 <HAL_ADC_Init+0x324>
=======
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff febe 	bl	8002ca4 <LL_ADC_REG_IsConversionOngoing>
 8002f28:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fedf 	bl	8002cf2 <LL_ADC_INJ_IsConversionOngoing>
 8002f34:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d17f      	bne.n	800303c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d17c      	bne.n	800303c <HAL_ADC_Init+0x324>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
<<<<<<< HEAD
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dca:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002dd2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002de2:	f023 0302 	bic.w	r3, r3, #2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	69b9      	ldr	r1, [r7, #24]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d017      	beq.n	8002e28 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002e06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e10:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6911      	ldr	r1, [r2, #16]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	430b      	orrs	r3, r1
 8002e22:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002e26:	e013      	b.n	8002e50 <HAL_ADC_Init+0x2b4>
=======
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f46:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f4e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f5e:	f023 0302 	bic.w	r3, r3, #2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	69b9      	ldr	r1, [r7, #24]
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d017      	beq.n	8002fa4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002f82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f8c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6911      	ldr	r1, [r2, #16]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002fa2:	e013      	b.n	8002fcc <HAL_ADC_Init+0x2b4>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
<<<<<<< HEAD
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002e36:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e4c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d12a      	bne.n	8002eb0 <HAL_ADC_Init+0x314>
=======
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002fb2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002fc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fc8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d12a      	bne.n	800302c <HAL_ADC_Init+0x314>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
<<<<<<< HEAD
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002e64:	f023 0304 	bic.w	r3, r3, #4
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e70:	4311      	orrs	r1, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002e76:	4311      	orrs	r1, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0201 	orr.w	r2, r2, #1
 8002e88:	611a      	str	r2, [r3, #16]
 8002e8a:	e019      	b.n	8002ec0 <HAL_ADC_Init+0x324>
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	053e2d63 	.word	0x053e2d63
 8002e94:	50000100 	.word	0x50000100
 8002e98:	50000400 	.word	0x50000400
 8002e9c:	50000500 	.word	0x50000500
 8002ea0:	50000600 	.word	0x50000600
 8002ea4:	50000300 	.word	0x50000300
 8002ea8:	50000700 	.word	0x50000700
 8002eac:	fff04007 	.word	0xfff04007
=======
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002fe0:	f023 0304 	bic.w	r3, r3, #4
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002fec:	4311      	orrs	r1, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	611a      	str	r2, [r3, #16]
 8003006:	e019      	b.n	800303c <HAL_ADC_Init+0x324>
 8003008:	20000004 	.word	0x20000004
 800300c:	053e2d63 	.word	0x053e2d63
 8003010:	50000100 	.word	0x50000100
 8003014:	50000400 	.word	0x50000400
 8003018:	50000500 	.word	0x50000500
 800301c:	50000600 	.word	0x50000600
 8003020:	50000300 	.word	0x50000300
 8003024:	50000700 	.word	0x50000700
 8003028:	fff04007 	.word	0xfff04007
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
<<<<<<< HEAD
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	611a      	str	r2, [r3, #16]
=======
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691a      	ldr	r2, [r3, #16]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	611a      	str	r2, [r3, #16]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
<<<<<<< HEAD
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d10c      	bne.n	8002ee2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	f023 010f 	bic.w	r1, r3, #15
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	1e5a      	subs	r2, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ee0:	e007      	b.n	8002ef2 <HAL_ADC_Init+0x356>
=======
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d10c      	bne.n	800305e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	f023 010f 	bic.w	r1, r3, #15
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	1e5a      	subs	r2, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
 800305c:	e007      	b.n	800306e <HAL_ADC_Init+0x356>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
<<<<<<< HEAD
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 020f 	bic.w	r2, r2, #15
 8002ef0:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 020f 	bic.w	r2, r2, #15
 800306c:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
<<<<<<< HEAD
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef6:	f023 0303 	bic.w	r3, r3, #3
 8002efa:	f043 0201 	orr.w	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f02:	e007      	b.n	8002f14 <HAL_ADC_Init+0x378>
=======
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003072:	f023 0303 	bic.w	r3, r3, #3
 8003076:	f043 0201 	orr.w	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800307e:	e007      	b.n	8003090 <HAL_ADC_Init+0x378>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f08:	f043 0210 	orr.w	r2, r3, #16
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	77fb      	strb	r3, [r7, #31]
=======
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003084:	f043 0210 	orr.w	r2, r3, #16
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	77fb      	strb	r3, [r7, #31]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 8002f14:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3724      	adds	r7, #36	@ 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd90      	pop	{r4, r7, pc}
 8002f1e:	bf00      	nop

08002f20 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
=======
 8003090:	7ffb      	ldrb	r3, [r7, #31]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3724      	adds	r7, #36	@ 0x24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd90      	pop	{r4, r7, pc}
 800309a:	bf00      	nop

0800309c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
=======
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
<<<<<<< HEAD
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f34:	d004      	beq.n	8002f40 <HAL_ADC_Start_DMA+0x20>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a5a      	ldr	r2, [pc, #360]	@ (80030a4 <HAL_ADC_Start_DMA+0x184>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d101      	bne.n	8002f44 <HAL_ADC_Start_DMA+0x24>
 8002f40:	4b59      	ldr	r3, [pc, #356]	@ (80030a8 <HAL_ADC_Start_DMA+0x188>)
 8002f42:	e000      	b.n	8002f46 <HAL_ADC_Start_DMA+0x26>
 8002f44:	4b59      	ldr	r3, [pc, #356]	@ (80030ac <HAL_ADC_Start_DMA+0x18c>)
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fd6a 	bl	8002a20 <LL_ADC_GetMultimode>
 8002f4c:	6138      	str	r0, [r7, #16]
=======
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030ac:	d004      	beq.n	80030b8 <HAL_ADC_Start+0x1c>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a67      	ldr	r2, [pc, #412]	@ (8003250 <HAL_ADC_Start+0x1b4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_Start+0x20>
 80030b8:	4b66      	ldr	r3, [pc, #408]	@ (8003254 <HAL_ADC_Start+0x1b8>)
 80030ba:	e000      	b.n	80030be <HAL_ADC_Start+0x22>
 80030bc:	4b66      	ldr	r3, [pc, #408]	@ (8003258 <HAL_ADC_Start+0x1bc>)
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fd10 	bl	8002ae4 <LL_ADC_GetMultimode>
 80030c4:	6138      	str	r0, [r7, #16]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fdfb 	bl	8002b4e <LL_ADC_REG_IsConversionOngoing>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f040 809b 	bne.w	8003096 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_ADC_Start_DMA+0x4e>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e096      	b.n	800309c <HAL_ADC_Start_DMA+0x17c>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
=======
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fdea 	bl	8002ca4 <LL_ADC_REG_IsConversionOngoing>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f040 80b4 	bne.w	8003240 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_ADC_Start+0x4a>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e0af      	b.n	8003246 <HAL_ADC_Start+0x1aa>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 ffe4 	bl	80040bc <ADC_Enable>
 80030f4:	4603      	mov	r3, r0
 80030f6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 809b 	bne.w	8003236 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003104:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a4d      	ldr	r2, [pc, #308]	@ (8003250 <HAL_ADC_Start+0x1b4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d009      	beq.n	8003132 <HAL_ADC_Start+0x96>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a4e      	ldr	r2, [pc, #312]	@ (800325c <HAL_ADC_Start+0x1c0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d002      	beq.n	800312e <HAL_ADC_Start+0x92>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	e003      	b.n	8003136 <HAL_ADC_Start+0x9a>
 800312e:	4b4c      	ldr	r3, [pc, #304]	@ (8003260 <HAL_ADC_Start+0x1c4>)
 8003130:	e001      	b.n	8003136 <HAL_ADC_Start+0x9a>
 8003132:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	4293      	cmp	r3, r2
 800313c:	d002      	beq.n	8003144 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d105      	bne.n	8003150 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003148:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003154:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800315c:	d106      	bne.n	800316c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003162:	f023 0206 	bic.w	r2, r3, #6
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	661a      	str	r2, [r3, #96]	@ 0x60
 800316a:	e002      	b.n	8003172 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	221c      	movs	r2, #28
 8003178:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a32      	ldr	r2, [pc, #200]	@ (8003250 <HAL_ADC_Start+0x1b4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d009      	beq.n	80031a0 <HAL_ADC_Start+0x104>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a32      	ldr	r2, [pc, #200]	@ (800325c <HAL_ADC_Start+0x1c0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d002      	beq.n	800319c <HAL_ADC_Start+0x100>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	e003      	b.n	80031a4 <HAL_ADC_Start+0x108>
 800319c:	4b30      	ldr	r3, [pc, #192]	@ (8003260 <HAL_ADC_Start+0x1c4>)
 800319e:	e001      	b.n	80031a4 <HAL_ADC_Start+0x108>
 80031a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d008      	beq.n	80031be <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d002      	beq.n	80031be <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b09      	cmp	r3, #9
 80031bc:	d114      	bne.n	80031e8 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fd37 	bl	8002c54 <LL_ADC_REG_StartConversion>
 80031e6:	e02d      	b.n	8003244 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a15      	ldr	r2, [pc, #84]	@ (8003250 <HAL_ADC_Start+0x1b4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d009      	beq.n	8003212 <HAL_ADC_Start+0x176>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a16      	ldr	r2, [pc, #88]	@ (800325c <HAL_ADC_Start+0x1c0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d002      	beq.n	800320e <HAL_ADC_Start+0x172>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	e003      	b.n	8003216 <HAL_ADC_Start+0x17a>
 800320e:	4b14      	ldr	r3, [pc, #80]	@ (8003260 <HAL_ADC_Start+0x1c4>)
 8003210:	e001      	b.n	8003216 <HAL_ADC_Start+0x17a>
 8003212:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003216:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00f      	beq.n	8003244 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003228:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800322c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003234:	e006      	b.n	8003244 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800323e:	e001      	b.n	8003244 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003240:	2302      	movs	r3, #2
 8003242:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003244:	7dfb      	ldrb	r3, [r7, #23]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	50000100 	.word	0x50000100
 8003254:	50000300 	.word	0x50000300
 8003258:	50000700 	.word	0x50000700
 800325c:	50000500 	.word	0x50000500
 8003260:	50000400 	.word	0x50000400

08003264 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_ADC_Stop+0x16>
 8003276:	2302      	movs	r3, #2
 8003278:	e023      	b.n	80032c2 <HAL_ADC_Stop+0x5e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003282:	2103      	movs	r1, #3
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 fe5d 	bl	8003f44 <ADC_ConversionStop>
 800328a:	4603      	mov	r3, r0
 800328c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d111      	bne.n	80032b8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 ff73 	bl	8004180 <ADC_Disable>
 800329a:	4603      	mov	r3, r0
 800329c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d109      	bne.n	80032b8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	f043 0201 	orr.w	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032de:	d004      	beq.n	80032ea <HAL_ADC_PollForConversion+0x1e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a77      	ldr	r2, [pc, #476]	@ (80034c4 <HAL_ADC_PollForConversion+0x1f8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_PollForConversion+0x22>
 80032ea:	4b77      	ldr	r3, [pc, #476]	@ (80034c8 <HAL_ADC_PollForConversion+0x1fc>)
 80032ec:	e000      	b.n	80032f0 <HAL_ADC_PollForConversion+0x24>
 80032ee:	4b77      	ldr	r3, [pc, #476]	@ (80034cc <HAL_ADC_PollForConversion+0x200>)
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fbf7 	bl	8002ae4 <LL_ADC_GetMultimode>
 80032f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d102      	bne.n	8003306 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003300:	2308      	movs	r3, #8
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	e037      	b.n	8003376 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b05      	cmp	r3, #5
 8003310:	d002      	beq.n	8003318 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b09      	cmp	r3, #9
 8003316:	d111      	bne.n	800333c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332a:	f043 0220 	orr.w	r2, r3, #32
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e0c1      	b.n	80034ba <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003336:	2304      	movs	r3, #4
 8003338:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800333a:	e01c      	b.n	8003376 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003344:	d004      	beq.n	8003350 <HAL_ADC_PollForConversion+0x84>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a5e      	ldr	r2, [pc, #376]	@ (80034c4 <HAL_ADC_PollForConversion+0x1f8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d101      	bne.n	8003354 <HAL_ADC_PollForConversion+0x88>
 8003350:	4b5d      	ldr	r3, [pc, #372]	@ (80034c8 <HAL_ADC_PollForConversion+0x1fc>)
 8003352:	e000      	b.n	8003356 <HAL_ADC_PollForConversion+0x8a>
 8003354:	4b5d      	ldr	r3, [pc, #372]	@ (80034cc <HAL_ADC_PollForConversion+0x200>)
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fbd2 	bl	8002b00 <LL_ADC_GetMultiDMATransfer>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003366:	f043 0220 	orr.w	r2, r3, #32
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e0a3      	b.n	80034ba <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003372:	2304      	movs	r3, #4
 8003374:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003376:	f7ff fa23 	bl	80027c0 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800337c:	e021      	b.n	80033c2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003384:	d01d      	beq.n	80033c2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003386:	f7ff fa1b 	bl	80027c0 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d302      	bcc.n	800339c <HAL_ADC_PollForConversion+0xd0>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d112      	bne.n	80033c2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10b      	bne.n	80033c2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ae:	f043 0204 	orr.w	r2, r3, #4
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e07b      	b.n	80034ba <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0d6      	beq.n	800337e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff faed 	bl	80029c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01c      	beq.n	8003426 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	7f5b      	ldrb	r3, [r3, #29]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d118      	bne.n	8003426 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d111      	bne.n	8003426 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003406:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003412:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d105      	bne.n	8003426 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341e:	f043 0201 	orr.w	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a26      	ldr	r2, [pc, #152]	@ (80034c4 <HAL_ADC_PollForConversion+0x1f8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d009      	beq.n	8003444 <HAL_ADC_PollForConversion+0x178>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a26      	ldr	r2, [pc, #152]	@ (80034d0 <HAL_ADC_PollForConversion+0x204>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d002      	beq.n	8003440 <HAL_ADC_PollForConversion+0x174>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	e003      	b.n	8003448 <HAL_ADC_PollForConversion+0x17c>
 8003440:	4b24      	ldr	r3, [pc, #144]	@ (80034d4 <HAL_ADC_PollForConversion+0x208>)
 8003442:	e001      	b.n	8003448 <HAL_ADC_PollForConversion+0x17c>
 8003444:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	4293      	cmp	r3, r2
 800344e:	d008      	beq.n	8003462 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d002      	beq.n	8003462 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2b09      	cmp	r3, #9
 8003460:	d104      	bne.n	800346c <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	e014      	b.n	8003496 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a14      	ldr	r2, [pc, #80]	@ (80034c4 <HAL_ADC_PollForConversion+0x1f8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d009      	beq.n	800348a <HAL_ADC_PollForConversion+0x1be>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a15      	ldr	r2, [pc, #84]	@ (80034d0 <HAL_ADC_PollForConversion+0x204>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d002      	beq.n	8003486 <HAL_ADC_PollForConversion+0x1ba>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	e003      	b.n	800348e <HAL_ADC_PollForConversion+0x1c2>
 8003486:	4b13      	ldr	r3, [pc, #76]	@ (80034d4 <HAL_ADC_PollForConversion+0x208>)
 8003488:	e001      	b.n	800348e <HAL_ADC_PollForConversion+0x1c2>
 800348a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800348e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d104      	bne.n	80034a6 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2208      	movs	r2, #8
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	e008      	b.n	80034b8 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d103      	bne.n	80034b8 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	220c      	movs	r2, #12
 80034b6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	50000100 	.word	0x50000100
 80034c8:	50000300 	.word	0x50000300
 80034cc:	50000700 	.word	0x50000700
 80034d0:	50000500 	.word	0x50000500
 80034d4:	50000400 	.word	0x50000400

080034d8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034ec:	d004      	beq.n	80034f8 <HAL_ADC_Start_DMA+0x20>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a5a      	ldr	r2, [pc, #360]	@ (800365c <HAL_ADC_Start_DMA+0x184>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d101      	bne.n	80034fc <HAL_ADC_Start_DMA+0x24>
 80034f8:	4b59      	ldr	r3, [pc, #356]	@ (8003660 <HAL_ADC_Start_DMA+0x188>)
 80034fa:	e000      	b.n	80034fe <HAL_ADC_Start_DMA+0x26>
 80034fc:	4b59      	ldr	r3, [pc, #356]	@ (8003664 <HAL_ADC_Start_DMA+0x18c>)
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff faf0 	bl	8002ae4 <LL_ADC_GetMultimode>
 8003504:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fbca 	bl	8002ca4 <LL_ADC_REG_IsConversionOngoing>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	f040 809b 	bne.w	800364e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_ADC_Start_DMA+0x4e>
 8003522:	2302      	movs	r3, #2
 8003524:	e096      	b.n	8003654 <HAL_ADC_Start_DMA+0x17c>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
<<<<<<< HEAD
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a4d      	ldr	r2, [pc, #308]	@ (80030b0 <HAL_ADC_Start_DMA+0x190>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d008      	beq.n	8002f92 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	2b05      	cmp	r3, #5
 8002f8a:	d002      	beq.n	8002f92 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b09      	cmp	r3, #9
 8002f90:	d17a      	bne.n	8003088 <HAL_ADC_Start_DMA+0x168>
=======
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a4d      	ldr	r2, [pc, #308]	@ (8003668 <HAL_ADC_Start_DMA+0x190>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d008      	beq.n	800354a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	2b05      	cmp	r3, #5
 8003542:	d002      	beq.n	800354a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	2b09      	cmp	r3, #9
 8003548:	d17a      	bne.n	8003640 <HAL_ADC_Start_DMA+0x168>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
<<<<<<< HEAD
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fcec 	bl	8003970 <ADC_Enable>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d16d      	bne.n	800307e <HAL_ADC_Start_DMA+0x15e>
=======
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fdb6 	bl	80040bc <ADC_Enable>
 8003550:	4603      	mov	r3, r0
 8003552:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003554:	7dfb      	ldrb	r3, [r7, #23]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d16d      	bne.n	8003636 <HAL_ADC_Start_DMA+0x15e>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
<<<<<<< HEAD
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a3a      	ldr	r2, [pc, #232]	@ (80030a4 <HAL_ADC_Start_DMA+0x184>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d009      	beq.n	8002fd4 <HAL_ADC_Start_DMA+0xb4>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a3b      	ldr	r2, [pc, #236]	@ (80030b4 <HAL_ADC_Start_DMA+0x194>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d002      	beq.n	8002fd0 <HAL_ADC_Start_DMA+0xb0>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	e003      	b.n	8002fd8 <HAL_ADC_Start_DMA+0xb8>
 8002fd0:	4b39      	ldr	r3, [pc, #228]	@ (80030b8 <HAL_ADC_Start_DMA+0x198>)
 8002fd2:	e001      	b.n	8002fd8 <HAL_ADC_Start_DMA+0xb8>
 8002fd4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d002      	beq.n	8002fe6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d105      	bne.n	8002ff2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a3a      	ldr	r2, [pc, #232]	@ (800365c <HAL_ADC_Start_DMA+0x184>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_ADC_Start_DMA+0xb4>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a3b      	ldr	r2, [pc, #236]	@ (800366c <HAL_ADC_Start_DMA+0x194>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d002      	beq.n	8003588 <HAL_ADC_Start_DMA+0xb0>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	e003      	b.n	8003590 <HAL_ADC_Start_DMA+0xb8>
 8003588:	4b39      	ldr	r3, [pc, #228]	@ (8003670 <HAL_ADC_Start_DMA+0x198>)
 800358a:	e001      	b.n	8003590 <HAL_ADC_Start_DMA+0xb8>
 800358c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	4293      	cmp	r3, r2
 8003596:	d002      	beq.n	800359e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d105      	bne.n	80035aa <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
<<<<<<< HEAD
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d006      	beq.n	800300c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003002:	f023 0206 	bic.w	r2, r3, #6
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	661a      	str	r2, [r3, #96]	@ 0x60
 800300a:	e002      	b.n	8003012 <HAL_ADC_Start_DMA+0xf2>
=======
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d006      	beq.n	80035c4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ba:	f023 0206 	bic.w	r2, r3, #6
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	661a      	str	r2, [r3, #96]	@ 0x60
 80035c2:	e002      	b.n	80035ca <HAL_ADC_Start_DMA+0xf2>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
<<<<<<< HEAD
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003016:	4a29      	ldr	r2, [pc, #164]	@ (80030bc <HAL_ADC_Start_DMA+0x19c>)
 8003018:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301e:	4a28      	ldr	r2, [pc, #160]	@ (80030c0 <HAL_ADC_Start_DMA+0x1a0>)
 8003020:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003026:	4a27      	ldr	r2, [pc, #156]	@ (80030c4 <HAL_ADC_Start_DMA+0x1a4>)
 8003028:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ce:	4a29      	ldr	r2, [pc, #164]	@ (8003674 <HAL_ADC_Start_DMA+0x19c>)
 80035d0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d6:	4a28      	ldr	r2, [pc, #160]	@ (8003678 <HAL_ADC_Start_DMA+0x1a0>)
 80035d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035de:	4a27      	ldr	r2, [pc, #156]	@ (800367c <HAL_ADC_Start_DMA+0x1a4>)
 80035e0:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
<<<<<<< HEAD
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	221c      	movs	r2, #28
 8003030:	601a      	str	r2, [r3, #0]
=======
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	221c      	movs	r2, #28
 80035e8:	601a      	str	r2, [r3, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
=======
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
<<<<<<< HEAD
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0210 	orr.w	r2, r2, #16
 8003048:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0201 	orr.w	r2, r2, #1
 8003058:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3340      	adds	r3, #64	@ 0x40
 8003064:	4619      	mov	r1, r3
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f001 f82d 	bl	80040c8 <HAL_DMA_Start_IT>
 800306e:	4603      	mov	r3, r0
 8003070:	75fb      	strb	r3, [r7, #23]
=======
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0210 	orr.w	r2, r2, #16
 8003600:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0201 	orr.w	r2, r2, #1
 8003610:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3340      	adds	r3, #64	@ 0x40
 800361c:	4619      	mov	r1, r3
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f001 f957 	bl	80048d4 <HAL_DMA_Start_IT>
 8003626:	4603      	mov	r3, r0
 8003628:	75fb      	strb	r3, [r7, #23]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
<<<<<<< HEAD
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fd55 	bl	8002b26 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800307c:	e00d      	b.n	800309a <HAL_ADC_Start_DMA+0x17a>
=======
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fb10 	bl	8002c54 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003634:	e00d      	b.n	8003652 <HAL_ADC_Start_DMA+0x17a>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003086:	e008      	b.n	800309a <HAL_ADC_Start_DMA+0x17a>
=======
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800363e:	e008      	b.n	8003652 <HAL_ADC_Start_DMA+0x17a>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 8003088:	2301      	movs	r3, #1
 800308a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003094:	e001      	b.n	800309a <HAL_ADC_Start_DMA+0x17a>
=======
 8003640:	2301      	movs	r3, #1
 8003642:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800364c:	e001      	b.n	8003652 <HAL_ADC_Start_DMA+0x17a>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
<<<<<<< HEAD
 8003096:	2302      	movs	r3, #2
 8003098:	75fb      	strb	r3, [r7, #23]
=======
 800364e:	2302      	movs	r3, #2
 8003650:	75fb      	strb	r3, [r7, #23]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 800309a:	7dfb      	ldrb	r3, [r7, #23]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	50000100 	.word	0x50000100
 80030a8:	50000300 	.word	0x50000300
 80030ac:	50000700 	.word	0x50000700
 80030b0:	50000600 	.word	0x50000600
 80030b4:	50000500 	.word	0x50000500
 80030b8:	50000400 	.word	0x50000400
 80030bc:	08003a35 	.word	0x08003a35
 80030c0:	08003b0d 	.word	0x08003b0d
 80030c4:	08003b29 	.word	0x08003b29

080030c8 <HAL_ADC_ConvHalfCpltCallback>:
=======
 8003652:	7dfb      	ldrb	r3, [r7, #23]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	50000100 	.word	0x50000100
 8003660:	50000300 	.word	0x50000300
 8003664:	50000700 	.word	0x50000700
 8003668:	50000600 	.word	0x50000600
 800366c:	50000500 	.word	0x50000500
 8003670:	50000400 	.word	0x50000400
 8003674:	0800423f 	.word	0x0800423f
 8003678:	08004317 	.word	0x08004317
 800367c:	08004333 	.word	0x08004333

08003680 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <HAL_ADC_ConvHalfCpltCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
=======
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_ADC_ErrorCallback>:
=======
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <HAL_ADC_ErrorCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
=======
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_ADC_ConfigChannel>:
=======
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <HAL_ADC_ConfigChannel>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
<<<<<<< HEAD
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b0b6      	sub	sp, #216	@ 0xd8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
=======
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b0b6      	sub	sp, #216	@ 0xd8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800310a:	2b01      	cmp	r3, #1
 800310c:	d102      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x24>
 800310e:	2302      	movs	r3, #2
 8003110:	f000 bc13 	b.w	800393a <HAL_ADC_ConfigChannel+0x84a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
=======
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d102      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x24>
 80036e2:	2302      	movs	r3, #2
 80036e4:	f000 bc13 	b.w	8003f0e <HAL_ADC_ConfigChannel+0x84a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
<<<<<<< HEAD
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fd14 	bl	8002b4e <LL_ADC_REG_IsConversionOngoing>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	f040 83f3 	bne.w	8003914 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	f7ff fbf1 	bl	8002922 <LL_ADC_REG_SetSequencerRanks>
=======
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff fad5 	bl	8002ca4 <LL_ADC_REG_IsConversionOngoing>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f040 83f3 	bne.w	8003ee8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	f7ff f969 	bl	80029e6 <LL_ADC_REG_SetSequencerRanks>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
<<<<<<< HEAD
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fd02 	bl	8002b4e <LL_ADC_REG_IsConversionOngoing>
 800314a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fd0e 	bl	8002b74 <LL_ADC_INJ_IsConversionOngoing>
 8003158:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800315c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003160:	2b00      	cmp	r3, #0
 8003162:	f040 81d9 	bne.w	8003518 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003166:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800316a:	2b00      	cmp	r3, #0
 800316c:	f040 81d4 	bne.w	8003518 <HAL_ADC_ConfigChannel+0x428>
=======
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff fac3 	bl	8002ca4 <LL_ADC_REG_IsConversionOngoing>
 800371e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff fae3 	bl	8002cf2 <LL_ADC_INJ_IsConversionOngoing>
 800372c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003730:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003734:	2b00      	cmp	r3, #0
 8003736:	f040 81d9 	bne.w	8003aec <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800373a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800373e:	2b00      	cmp	r3, #0
 8003740:	f040 81d4 	bne.w	8003aec <HAL_ADC_ConfigChannel+0x428>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
<<<<<<< HEAD
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003178:	d10f      	bne.n	800319a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2200      	movs	r2, #0
 8003184:	4619      	mov	r1, r3
 8003186:	f7ff fbf8 	bl	800297a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fb9f 	bl	80028d6 <LL_ADC_SetSamplingTimeCommonConfig>
 8003198:	e00e      	b.n	80031b8 <HAL_ADC_ConfigChannel+0xc8>
=======
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800374c:	d10f      	bne.n	800376e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2200      	movs	r2, #0
 8003758:	4619      	mov	r1, r3
 800375a:	f7ff f970 	bl	8002a3e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff f917 	bl	800299a <LL_ADC_SetSamplingTimeCommonConfig>
 800376c:	e00e      	b.n	800378c <HAL_ADC_ConfigChannel+0xc8>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
<<<<<<< HEAD
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	461a      	mov	r2, r3
 80031a8:	f7ff fbe7 	bl	800297a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2100      	movs	r1, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fb8f 	bl	80028d6 <LL_ADC_SetSamplingTimeCommonConfig>
=======
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6819      	ldr	r1, [r3, #0]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	461a      	mov	r2, r3
 800377c:	f7ff f95f 	bl	8002a3e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff f907 	bl	800299a <LL_ADC_SetSamplingTimeCommonConfig>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
<<<<<<< HEAD
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	695a      	ldr	r2, [r3, #20]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	08db      	lsrs	r3, r3, #3
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d022      	beq.n	8003220 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6919      	ldr	r1, [r3, #16]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031ea:	f7ff fae9 	bl	80027c0 <LL_ADC_SetOffset>
=======
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	08db      	lsrs	r3, r3, #3
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d022      	beq.n	80037f4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6919      	ldr	r1, [r3, #16]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80037be:	f7ff f861 	bl	8002884 <LL_ADC_SetOffset>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
<<<<<<< HEAD
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6919      	ldr	r1, [r3, #16]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	461a      	mov	r2, r3
 80031fc:	f7ff fb35 	bl	800286a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	6919      	ldr	r1, [r3, #16]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	7f1b      	ldrb	r3, [r3, #28]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d102      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x126>
 8003210:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003214:	e000      	b.n	8003218 <HAL_ADC_ConfigChannel+0x128>
 8003216:	2300      	movs	r3, #0
 8003218:	461a      	mov	r2, r3
 800321a:	f7ff fb41 	bl	80028a0 <LL_ADC_SetOffsetSaturation>
 800321e:	e17b      	b.n	8003518 <HAL_ADC_ConfigChannel+0x428>
=======
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6919      	ldr	r1, [r3, #16]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	461a      	mov	r2, r3
 80037d0:	f7ff f8ad 	bl	800292e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6818      	ldr	r0, [r3, #0]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	6919      	ldr	r1, [r3, #16]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	7f1b      	ldrb	r3, [r3, #28]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d102      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x126>
 80037e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037e8:	e000      	b.n	80037ec <HAL_ADC_ConfigChannel+0x128>
 80037ea:	2300      	movs	r3, #0
 80037ec:	461a      	mov	r2, r3
 80037ee:	f7ff f8b9 	bl	8002964 <LL_ADC_SetOffsetSaturation>
 80037f2:	e17b      	b.n	8003aec <HAL_ADC_ConfigChannel+0x428>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
<<<<<<< HEAD
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff faee 	bl	8002808 <LL_ADC_GetOffsetChannel>
 800322c:	4603      	mov	r3, r0
 800322e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10a      	bne.n	800324c <HAL_ADC_ConfigChannel+0x15c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2100      	movs	r1, #0
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fae3 	bl	8002808 <LL_ADC_GetOffsetChannel>
 8003242:	4603      	mov	r3, r0
 8003244:	0e9b      	lsrs	r3, r3, #26
 8003246:	f003 021f 	and.w	r2, r3, #31
 800324a:	e01e      	b.n	800328a <HAL_ADC_ConfigChannel+0x19a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fad8 	bl	8002808 <LL_ADC_GetOffsetChannel>
 8003258:	4603      	mov	r3, r0
 800325a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
=======
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f866 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003800:	4603      	mov	r3, r0
 8003802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x15c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2100      	movs	r1, #0
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff f85b 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003816:	4603      	mov	r3, r0
 8003818:	0e9b      	lsrs	r3, r3, #26
 800381a:	f003 021f 	and.w	r2, r3, #31
 800381e:	e01e      	b.n	800385e <HAL_ADC_ConfigChannel+0x19a>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff f850 	bl	80028cc <LL_ADC_GetOffsetChannel>
 800382c:	4603      	mov	r3, r0
 800382e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
<<<<<<< HEAD
 800325e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003262:	fa93 f3a3 	rbit	r3, r3
 8003266:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
=======
 8003832:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
<<<<<<< HEAD
 800326a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800326e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
=======
 800383e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003842:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
<<<<<<< HEAD
 8003272:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800327a:	2320      	movs	r3, #32
 800327c:	e004      	b.n	8003288 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800327e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003282:	fab3 f383 	clz	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003292:	2b00      	cmp	r3, #0
 8003294:	d105      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x1b2>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	0e9b      	lsrs	r3, r3, #26
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	e018      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x1e4>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80032b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80032be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80032c6:	2320      	movs	r3, #32
 80032c8:	e004      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80032ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80032ce:	fab3 f383 	clz	r3, r3
 80032d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d106      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2200      	movs	r2, #0
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff faa7 	bl	8002834 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2101      	movs	r1, #1
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fa8b 	bl	8002808 <LL_ADC_GetOffsetChannel>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x222>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2101      	movs	r1, #1
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fa80 	bl	8002808 <LL_ADC_GetOffsetChannel>
 8003308:	4603      	mov	r3, r0
 800330a:	0e9b      	lsrs	r3, r3, #26
 800330c:	f003 021f 	and.w	r2, r3, #31
 8003310:	e01e      	b.n	8003350 <HAL_ADC_ConfigChannel+0x260>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2101      	movs	r1, #1
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fa75 	bl	8002808 <LL_ADC_GetOffsetChannel>
 800331e:	4603      	mov	r3, r0
 8003320:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003330:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003334:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003338:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003340:	2320      	movs	r3, #32
 8003342:	e004      	b.n	800334e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003344:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003348:	fab3 f383 	clz	r3, r3
 800334c:	b2db      	uxtb	r3, r3
 800334e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003358:	2b00      	cmp	r3, #0
 800335a:	d105      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x278>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	0e9b      	lsrs	r3, r3, #26
 8003362:	f003 031f 	and.w	r3, r3, #31
 8003366:	e018      	b.n	800339a <HAL_ADC_ConfigChannel+0x2aa>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003374:	fa93 f3a3 	rbit	r3, r3
 8003378:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800337c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003384:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800338c:	2320      	movs	r3, #32
 800338e:	e004      	b.n	800339a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003390:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003394:	fab3 f383 	clz	r3, r3
 8003398:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800339a:	429a      	cmp	r2, r3
 800339c:	d106      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2200      	movs	r2, #0
 80033a4:	2101      	movs	r1, #1
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff fa44 	bl	8002834 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2102      	movs	r1, #2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff fa28 	bl	8002808 <LL_ADC_GetOffsetChannel>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10a      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x2e8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2102      	movs	r1, #2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fa1d 	bl	8002808 <LL_ADC_GetOffsetChannel>
 80033ce:	4603      	mov	r3, r0
 80033d0:	0e9b      	lsrs	r3, r3, #26
 80033d2:	f003 021f 	and.w	r2, r3, #31
 80033d6:	e01e      	b.n	8003416 <HAL_ADC_ConfigChannel+0x326>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2102      	movs	r1, #2
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fa12 	bl	8002808 <LL_ADC_GetOffsetChannel>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80033f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80033fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003406:	2320      	movs	r3, #32
 8003408:	e004      	b.n	8003414 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800340a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341e:	2b00      	cmp	r3, #0
 8003420:	d105      	bne.n	800342e <HAL_ADC_ConfigChannel+0x33e>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	0e9b      	lsrs	r3, r3, #26
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	e016      	b.n	800345c <HAL_ADC_ConfigChannel+0x36c>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003440:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003442:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003446:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800344e:	2320      	movs	r3, #32
 8003450:	e004      	b.n	800345c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003452:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800345c:	429a      	cmp	r2, r3
 800345e:	d106      	bne.n	800346e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2200      	movs	r2, #0
 8003466:	2102      	movs	r1, #2
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff f9e3 	bl	8002834 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2103      	movs	r1, #3
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff f9c7 	bl	8002808 <LL_ADC_GetOffsetChannel>
 800347a:	4603      	mov	r3, r0
 800347c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10a      	bne.n	800349a <HAL_ADC_ConfigChannel+0x3aa>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2103      	movs	r1, #3
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff f9bc 	bl	8002808 <LL_ADC_GetOffsetChannel>
 8003490:	4603      	mov	r3, r0
 8003492:	0e9b      	lsrs	r3, r3, #26
 8003494:	f003 021f 	and.w	r2, r3, #31
 8003498:	e017      	b.n	80034ca <HAL_ADC_ConfigChannel+0x3da>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2103      	movs	r1, #3
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff f9b1 	bl	8002808 <LL_ADC_GetOffsetChannel>
 80034a6:	4603      	mov	r3, r0
 80034a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80034b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034b4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80034b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80034bc:	2320      	movs	r3, #32
 80034be:	e003      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80034c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d105      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x3f2>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	0e9b      	lsrs	r3, r3, #26
 80034dc:	f003 031f 	and.w	r3, r3, #31
 80034e0:	e011      	b.n	8003506 <HAL_ADC_ConfigChannel+0x416>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80034f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80034f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80034fa:	2320      	movs	r3, #32
 80034fc:	e003      	b.n	8003506 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80034fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003500:	fab3 f383 	clz	r3, r3
 8003504:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003506:	429a      	cmp	r2, r3
 8003508:	d106      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2200      	movs	r2, #0
 8003510:	2103      	movs	r1, #3
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff f98e 	bl	8002834 <LL_ADC_SetOffsetState>
=======
 8003846:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800384e:	2320      	movs	r3, #32
 8003850:	e004      	b.n	800385c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003852:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003856:	fab3 f383 	clz	r3, r3
 800385a:	b2db      	uxtb	r3, r3
 800385c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003866:	2b00      	cmp	r3, #0
 8003868:	d105      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x1b2>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	0e9b      	lsrs	r3, r3, #26
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	e018      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x1e4>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003882:	fa93 f3a3 	rbit	r3, r3
 8003886:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800388a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800388e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003892:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800389a:	2320      	movs	r3, #32
 800389c:	e004      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800389e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80038a2:	fab3 f383 	clz	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d106      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2200      	movs	r2, #0
 80038b2:	2100      	movs	r1, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff f81f 	bl	80028f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2101      	movs	r1, #1
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff f803 	bl	80028cc <LL_ADC_GetOffsetChannel>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10a      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x222>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2101      	movs	r1, #1
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe fff8 	bl	80028cc <LL_ADC_GetOffsetChannel>
 80038dc:	4603      	mov	r3, r0
 80038de:	0e9b      	lsrs	r3, r3, #26
 80038e0:	f003 021f 	and.w	r2, r3, #31
 80038e4:	e01e      	b.n	8003924 <HAL_ADC_ConfigChannel+0x260>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2101      	movs	r1, #1
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fe ffed 	bl	80028cc <LL_ADC_GetOffsetChannel>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003904:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800390c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003914:	2320      	movs	r3, #32
 8003916:	e004      	b.n	8003922 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003918:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800391c:	fab3 f383 	clz	r3, r3
 8003920:	b2db      	uxtb	r3, r3
 8003922:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <HAL_ADC_ConfigChannel+0x278>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	0e9b      	lsrs	r3, r3, #26
 8003936:	f003 031f 	and.w	r3, r3, #31
 800393a:	e018      	b.n	800396e <HAL_ADC_ConfigChannel+0x2aa>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003948:	fa93 f3a3 	rbit	r3, r3
 800394c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003950:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003954:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003958:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003960:	2320      	movs	r3, #32
 8003962:	e004      	b.n	800396e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003964:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003968:	fab3 f383 	clz	r3, r3
 800396c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800396e:	429a      	cmp	r2, r3
 8003970:	d106      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2200      	movs	r2, #0
 8003978:	2101      	movs	r1, #1
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe ffbc 	bl	80028f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2102      	movs	r1, #2
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe ffa0 	bl	80028cc <LL_ADC_GetOffsetChannel>
 800398c:	4603      	mov	r3, r0
 800398e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10a      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x2e8>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2102      	movs	r1, #2
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe ff95 	bl	80028cc <LL_ADC_GetOffsetChannel>
 80039a2:	4603      	mov	r3, r0
 80039a4:	0e9b      	lsrs	r3, r3, #26
 80039a6:	f003 021f 	and.w	r2, r3, #31
 80039aa:	e01e      	b.n	80039ea <HAL_ADC_ConfigChannel+0x326>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2102      	movs	r1, #2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe ff8a 	bl	80028cc <LL_ADC_GetOffsetChannel>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039c2:	fa93 f3a3 	rbit	r3, r3
 80039c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80039ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80039d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80039da:	2320      	movs	r3, #32
 80039dc:	e004      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80039de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d105      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x33e>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	0e9b      	lsrs	r3, r3, #26
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	e016      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x36c>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003a14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003a1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003a22:	2320      	movs	r3, #32
 8003a24:	e004      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003a26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d106      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe ff5b 	bl	80028f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2103      	movs	r1, #3
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe ff3f 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10a      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x3aa>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2103      	movs	r1, #3
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe ff34 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003a64:	4603      	mov	r3, r0
 8003a66:	0e9b      	lsrs	r3, r3, #26
 8003a68:	f003 021f 	and.w	r2, r3, #31
 8003a6c:	e017      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x3da>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2103      	movs	r1, #3
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe ff29 	bl	80028cc <LL_ADC_GetOffsetChannel>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a80:	fa93 f3a3 	rbit	r3, r3
 8003a84:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003a86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a88:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003a8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003a90:	2320      	movs	r3, #32
 8003a92:	e003      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003a94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d105      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x3f2>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	0e9b      	lsrs	r3, r3, #26
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	e011      	b.n	8003ada <HAL_ADC_ConfigChannel+0x416>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003abe:	fa93 f3a3 	rbit	r3, r3
 8003ac2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003ac4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ac6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003ac8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003ace:	2320      	movs	r3, #32
 8003ad0:	e003      	b.n	8003ada <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ad4:	fab3 f383 	clz	r3, r3
 8003ad8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d106      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2103      	movs	r1, #3
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fe ff06 	bl	80028f8 <LL_ADC_SetOffsetState>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff faef 	bl	8002b00 <LL_ADC_IsEnabled>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	f040 813d 	bne.w	80037a4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6819      	ldr	r1, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	461a      	mov	r2, r3
 8003538:	f7ff fa4a 	bl	80029d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4aa2      	ldr	r2, [pc, #648]	@ (80037cc <HAL_ADC_ConfigChannel+0x6dc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	f040 812e 	bne.w	80037a4 <HAL_ADC_ConfigChannel+0x6b4>
=======
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff f889 	bl	8002c08 <LL_ADC_IsEnabled>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f040 813d 	bne.w	8003d78 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6819      	ldr	r1, [r3, #0]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f7fe ffc2 	bl	8002a94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4aa2      	ldr	r2, [pc, #648]	@ (8003da0 <HAL_ADC_ConfigChannel+0x6dc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	f040 812e 	bne.w	8003d78 <HAL_ADC_ConfigChannel+0x6b4>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
<<<<<<< HEAD
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10b      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x480>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0e9b      	lsrs	r3, r3, #26
 800355e:	3301      	adds	r3, #1
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	2b09      	cmp	r3, #9
 8003566:	bf94      	ite	ls
 8003568:	2301      	movls	r3, #1
 800356a:	2300      	movhi	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	e019      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x4b4>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003578:	fa93 f3a3 	rbit	r3, r3
 800357c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800357e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003580:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003582:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003588:	2320      	movs	r3, #32
 800358a:	e003      	b.n	8003594 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800358c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800358e:	fab3 f383 	clz	r3, r3
 8003592:	b2db      	uxtb	r3, r3
 8003594:	3301      	adds	r3, #1
 8003596:	f003 031f 	and.w	r3, r3, #31
 800359a:	2b09      	cmp	r3, #9
 800359c:	bf94      	ite	ls
 800359e:	2301      	movls	r3, #1
 80035a0:	2300      	movhi	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d079      	beq.n	800369c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d107      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x4d4>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	0e9b      	lsrs	r3, r3, #26
 80035ba:	3301      	adds	r3, #1
 80035bc:	069b      	lsls	r3, r3, #26
 80035be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035c2:	e015      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x500>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80035d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80035d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80035dc:	2320      	movs	r3, #32
 80035de:	e003      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80035e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e2:	fab3 f383 	clz	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	3301      	adds	r3, #1
 80035ea:	069b      	lsls	r3, r3, #26
 80035ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x520>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	0e9b      	lsrs	r3, r3, #26
 8003602:	3301      	adds	r3, #1
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	2101      	movs	r1, #1
 800360a:	fa01 f303 	lsl.w	r3, r1, r3
 800360e:	e017      	b.n	8003640 <HAL_ADC_ConfigChannel+0x550>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800361e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003620:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003628:	2320      	movs	r3, #32
 800362a:	e003      	b.n	8003634 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800362c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	3301      	adds	r3, #1
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	2101      	movs	r1, #1
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	ea42 0103 	orr.w	r1, r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x576>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	0e9b      	lsrs	r3, r3, #26
 8003656:	3301      	adds	r3, #1
 8003658:	f003 021f 	and.w	r2, r3, #31
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	051b      	lsls	r3, r3, #20
 8003664:	e018      	b.n	8003698 <HAL_ADC_ConfigChannel+0x5a8>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800367e:	2320      	movs	r3, #32
 8003680:	e003      	b.n	800368a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	b2db      	uxtb	r3, r3
 800368a:	3301      	adds	r3, #1
 800368c:	f003 021f 	and.w	r2, r3, #31
 8003690:	4613      	mov	r3, r2
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	4413      	add	r3, r2
 8003696:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003698:	430b      	orrs	r3, r1
 800369a:	e07e      	b.n	800379a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d107      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x5c8>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	0e9b      	lsrs	r3, r3, #26
 80036ae:	3301      	adds	r3, #1
 80036b0:	069b      	lsls	r3, r3, #26
 80036b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036b6:	e015      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x5f4>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c0:	fa93 f3a3 	rbit	r3, r3
 80036c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80036c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80036ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80036d0:	2320      	movs	r3, #32
 80036d2:	e003      	b.n	80036dc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80036d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	3301      	adds	r3, #1
 80036de:	069b      	lsls	r3, r3, #26
 80036e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x614>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	0e9b      	lsrs	r3, r3, #26
 80036f6:	3301      	adds	r3, #1
 80036f8:	f003 031f 	and.w	r3, r3, #31
 80036fc:	2101      	movs	r1, #1
 80036fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003702:	e017      	b.n	8003734 <HAL_ADC_ConfigChannel+0x644>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	fa93 f3a3 	rbit	r3, r3
 8003710:	61fb      	str	r3, [r7, #28]
  return result;
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800371c:	2320      	movs	r3, #32
 800371e:	e003      	b.n	8003728 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	3301      	adds	r3, #1
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f303 	lsl.w	r3, r1, r3
 8003734:	ea42 0103 	orr.w	r1, r2, r3
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10d      	bne.n	8003760 <HAL_ADC_ConfigChannel+0x670>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	0e9b      	lsrs	r3, r3, #26
 800374a:	3301      	adds	r3, #1
 800374c:	f003 021f 	and.w	r2, r3, #31
 8003750:	4613      	mov	r3, r2
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	4413      	add	r3, r2
 8003756:	3b1e      	subs	r3, #30
 8003758:	051b      	lsls	r3, r3, #20
 800375a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800375e:	e01b      	b.n	8003798 <HAL_ADC_ConfigChannel+0x6a8>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	fa93 f3a3 	rbit	r3, r3
 800376c:	613b      	str	r3, [r7, #16]
  return result;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003778:	2320      	movs	r3, #32
 800377a:	e003      	b.n	8003784 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	b2db      	uxtb	r3, r3
 8003784:	3301      	adds	r3, #1
 8003786:	f003 021f 	and.w	r2, r3, #31
 800378a:	4613      	mov	r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	4413      	add	r3, r2
 8003790:	3b1e      	subs	r3, #30
 8003792:	051b      	lsls	r3, r3, #20
 8003794:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003798:	430b      	orrs	r3, r1
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	6892      	ldr	r2, [r2, #8]
 800379e:	4619      	mov	r1, r3
 80037a0:	f7ff f8eb 	bl	800297a <LL_ADC_SetChannelSamplingTime>
=======
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10b      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x480>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	0e9b      	lsrs	r3, r3, #26
 8003b32:	3301      	adds	r3, #1
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	2b09      	cmp	r3, #9
 8003b3a:	bf94      	ite	ls
 8003b3c:	2301      	movls	r3, #1
 8003b3e:	2300      	movhi	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	e019      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x4b4>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b4c:	fa93 f3a3 	rbit	r3, r3
 8003b50:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003b52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b54:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003b56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003b5c:	2320      	movs	r3, #32
 8003b5e:	e003      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003b60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b62:	fab3 f383 	clz	r3, r3
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	3301      	adds	r3, #1
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	2b09      	cmp	r3, #9
 8003b70:	bf94      	ite	ls
 8003b72:	2301      	movls	r3, #1
 8003b74:	2300      	movhi	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d079      	beq.n	8003c70 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d107      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x4d4>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	0e9b      	lsrs	r3, r3, #26
 8003b8e:	3301      	adds	r3, #1
 8003b90:	069b      	lsls	r3, r3, #26
 8003b92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b96:	e015      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x500>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ba8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	e003      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	069b      	lsls	r3, r3, #26
 8003bc0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d109      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x520>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	0e9b      	lsrs	r3, r3, #26
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2101      	movs	r1, #1
 8003bde:	fa01 f303 	lsl.w	r3, r1, r3
 8003be2:	e017      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x550>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003bf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	e003      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c02:	fab3 f383 	clz	r3, r3
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	2101      	movs	r1, #1
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
 8003c14:	ea42 0103 	orr.w	r1, r2, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <HAL_ADC_ConfigChannel+0x576>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	0e9b      	lsrs	r3, r3, #26
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f003 021f 	and.w	r2, r3, #31
 8003c30:	4613      	mov	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4413      	add	r3, r2
 8003c36:	051b      	lsls	r3, r3, #20
 8003c38:	e018      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x5a8>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c42:	fa93 f3a3 	rbit	r3, r3
 8003c46:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003c52:	2320      	movs	r3, #32
 8003c54:	e003      	b.n	8003c5e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c58:	fab3 f383 	clz	r3, r3
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f003 021f 	and.w	r2, r3, #31
 8003c64:	4613      	mov	r3, r2
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	4413      	add	r3, r2
 8003c6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	e07e      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d107      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x5c8>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	0e9b      	lsrs	r3, r3, #26
 8003c82:	3301      	adds	r3, #1
 8003c84:	069b      	lsls	r3, r3, #26
 8003c86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c8a:	e015      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x5f4>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	e003      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	069b      	lsls	r3, r3, #26
 8003cb4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d109      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x614>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	0e9b      	lsrs	r3, r3, #26
 8003cca:	3301      	adds	r3, #1
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd6:	e017      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x644>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	fa93 f3a3 	rbit	r3, r3
 8003ce4:	61fb      	str	r3, [r7, #28]
  return result;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003cf0:	2320      	movs	r3, #32
 8003cf2:	e003      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	fab3 f383 	clz	r3, r3
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2101      	movs	r1, #1
 8003d04:	fa01 f303 	lsl.w	r3, r1, r3
 8003d08:	ea42 0103 	orr.w	r1, r2, r3
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10d      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x670>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	0e9b      	lsrs	r3, r3, #26
 8003d1e:	3301      	adds	r3, #1
 8003d20:	f003 021f 	and.w	r2, r3, #31
 8003d24:	4613      	mov	r3, r2
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	4413      	add	r3, r2
 8003d2a:	3b1e      	subs	r3, #30
 8003d2c:	051b      	lsls	r3, r3, #20
 8003d2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d32:	e01b      	b.n	8003d6c <HAL_ADC_ConfigChannel+0x6a8>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	613b      	str	r3, [r7, #16]
  return result;
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003d4c:	2320      	movs	r3, #32
 8003d4e:	e003      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	fab3 f383 	clz	r3, r3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f003 021f 	and.w	r2, r3, #31
 8003d5e:	4613      	mov	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	3b1e      	subs	r3, #30
 8003d66:	051b      	lsls	r3, r3, #20
 8003d68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	6892      	ldr	r2, [r2, #8]
 8003d72:	4619      	mov	r1, r3
 8003d74:	f7fe fe63 	bl	8002a3e <LL_ADC_SetChannelSamplingTime>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
<<<<<<< HEAD
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b09      	ldr	r3, [pc, #36]	@ (80037d0 <HAL_ADC_ConfigChannel+0x6e0>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80be 	beq.w	800392e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037ba:	d004      	beq.n	80037c6 <HAL_ADC_ConfigChannel+0x6d6>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a04      	ldr	r2, [pc, #16]	@ (80037d4 <HAL_ADC_ConfigChannel+0x6e4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d10a      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x6ec>
 80037c6:	4b04      	ldr	r3, [pc, #16]	@ (80037d8 <HAL_ADC_ConfigChannel+0x6e8>)
 80037c8:	e009      	b.n	80037de <HAL_ADC_ConfigChannel+0x6ee>
 80037ca:	bf00      	nop
 80037cc:	407f0000 	.word	0x407f0000
 80037d0:	80080000 	.word	0x80080000
 80037d4:	50000100 	.word	0x50000100
 80037d8:	50000300 	.word	0x50000300
 80037dc:	4b59      	ldr	r3, [pc, #356]	@ (8003944 <HAL_ADC_ConfigChannel+0x854>)
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe ffe0 	bl	80027a4 <LL_ADC_GetCommonPathInternalCh>
 80037e4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
=======
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	4b09      	ldr	r3, [pc, #36]	@ (8003da4 <HAL_ADC_ConfigChannel+0x6e0>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80be 	beq.w	8003f02 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d8e:	d004      	beq.n	8003d9a <HAL_ADC_ConfigChannel+0x6d6>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a04      	ldr	r2, [pc, #16]	@ (8003da8 <HAL_ADC_ConfigChannel+0x6e4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d10a      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x6ec>
 8003d9a:	4b04      	ldr	r3, [pc, #16]	@ (8003dac <HAL_ADC_ConfigChannel+0x6e8>)
 8003d9c:	e009      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x6ee>
 8003d9e:	bf00      	nop
 8003da0:	407f0000 	.word	0x407f0000
 8003da4:	80080000 	.word	0x80080000
 8003da8:	50000100 	.word	0x50000100
 8003dac:	50000300 	.word	0x50000300
 8003db0:	4b59      	ldr	r3, [pc, #356]	@ (8003f18 <HAL_ADC_ConfigChannel+0x854>)
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe fd58 	bl	8002868 <LL_ADC_GetCommonPathInternalCh>
 8003db8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
<<<<<<< HEAD
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a56      	ldr	r2, [pc, #344]	@ (8003948 <HAL_ADC_ConfigChannel+0x858>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <HAL_ADC_ConfigChannel+0x70c>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a55      	ldr	r2, [pc, #340]	@ (800394c <HAL_ADC_ConfigChannel+0x85c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d13a      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003800:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d134      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003810:	d005      	beq.n	800381e <HAL_ADC_ConfigChannel+0x72e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a4e      	ldr	r2, [pc, #312]	@ (8003950 <HAL_ADC_ConfigChannel+0x860>)
 8003818:	4293      	cmp	r3, r2
 800381a:	f040 8085 	bne.w	8003928 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003826:	d004      	beq.n	8003832 <HAL_ADC_ConfigChannel+0x742>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a49      	ldr	r2, [pc, #292]	@ (8003954 <HAL_ADC_ConfigChannel+0x864>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d101      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x746>
 8003832:	4a49      	ldr	r2, [pc, #292]	@ (8003958 <HAL_ADC_ConfigChannel+0x868>)
 8003834:	e000      	b.n	8003838 <HAL_ADC_ConfigChannel+0x748>
 8003836:	4a43      	ldr	r2, [pc, #268]	@ (8003944 <HAL_ADC_ConfigChannel+0x854>)
 8003838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800383c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f7fe ff9b 	bl	800277e <LL_ADC_SetCommonPathInternalCh>
=======
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a56      	ldr	r2, [pc, #344]	@ (8003f1c <HAL_ADC_ConfigChannel+0x858>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <HAL_ADC_ConfigChannel+0x70c>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a55      	ldr	r2, [pc, #340]	@ (8003f20 <HAL_ADC_ConfigChannel+0x85c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d13a      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003dd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d134      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003de4:	d005      	beq.n	8003df2 <HAL_ADC_ConfigChannel+0x72e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a4e      	ldr	r2, [pc, #312]	@ (8003f24 <HAL_ADC_ConfigChannel+0x860>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	f040 8085 	bne.w	8003efc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dfa:	d004      	beq.n	8003e06 <HAL_ADC_ConfigChannel+0x742>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a49      	ldr	r2, [pc, #292]	@ (8003f28 <HAL_ADC_ConfigChannel+0x864>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d101      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x746>
 8003e06:	4a49      	ldr	r2, [pc, #292]	@ (8003f2c <HAL_ADC_ConfigChannel+0x868>)
 8003e08:	e000      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x748>
 8003e0a:	4a43      	ldr	r2, [pc, #268]	@ (8003f18 <HAL_ADC_ConfigChannel+0x854>)
 8003e0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e14:	4619      	mov	r1, r3
 8003e16:	4610      	mov	r0, r2
 8003e18:	f7fe fd13 	bl	8002842 <LL_ADC_SetCommonPathInternalCh>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
<<<<<<< HEAD
 8003848:	4b44      	ldr	r3, [pc, #272]	@ (800395c <HAL_ADC_ConfigChannel+0x86c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	099b      	lsrs	r3, r3, #6
 800384e:	4a44      	ldr	r2, [pc, #272]	@ (8003960 <HAL_ADC_ConfigChannel+0x870>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	099b      	lsrs	r3, r3, #6
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	4613      	mov	r3, r2
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003862:	e002      	b.n	800386a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3b01      	subs	r3, #1
 8003868:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1f9      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003870:	e05a      	b.n	8003928 <HAL_ADC_ConfigChannel+0x838>
=======
 8003e1c:	4b44      	ldr	r3, [pc, #272]	@ (8003f30 <HAL_ADC_ConfigChannel+0x86c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	099b      	lsrs	r3, r3, #6
 8003e22:	4a44      	ldr	r2, [pc, #272]	@ (8003f34 <HAL_ADC_ConfigChannel+0x870>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	099b      	lsrs	r3, r3, #6
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e36:	e002      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1f9      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e44:	e05a      	b.n	8003efc <HAL_ADC_ConfigChannel+0x838>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
<<<<<<< HEAD
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a3b      	ldr	r2, [pc, #236]	@ (8003964 <HAL_ADC_ConfigChannel+0x874>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d125      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x7d8>
 800387c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003880:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d11f      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a31      	ldr	r2, [pc, #196]	@ (8003954 <HAL_ADC_ConfigChannel+0x864>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d104      	bne.n	800389c <HAL_ADC_ConfigChannel+0x7ac>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a34      	ldr	r2, [pc, #208]	@ (8003968 <HAL_ADC_ConfigChannel+0x878>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d047      	beq.n	800392c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038a4:	d004      	beq.n	80038b0 <HAL_ADC_ConfigChannel+0x7c0>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003954 <HAL_ADC_ConfigChannel+0x864>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d101      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x7c4>
 80038b0:	4a29      	ldr	r2, [pc, #164]	@ (8003958 <HAL_ADC_ConfigChannel+0x868>)
 80038b2:	e000      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x7c6>
 80038b4:	4a23      	ldr	r2, [pc, #140]	@ (8003944 <HAL_ADC_ConfigChannel+0x854>)
 80038b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038be:	4619      	mov	r1, r3
 80038c0:	4610      	mov	r0, r2
 80038c2:	f7fe ff5c 	bl	800277e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038c6:	e031      	b.n	800392c <HAL_ADC_ConfigChannel+0x83c>
=======
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a3b      	ldr	r2, [pc, #236]	@ (8003f38 <HAL_ADC_ConfigChannel+0x874>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d125      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x7d8>
 8003e50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d11f      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a31      	ldr	r2, [pc, #196]	@ (8003f28 <HAL_ADC_ConfigChannel+0x864>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d104      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x7ac>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a34      	ldr	r2, [pc, #208]	@ (8003f3c <HAL_ADC_ConfigChannel+0x878>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d047      	beq.n	8003f00 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e78:	d004      	beq.n	8003e84 <HAL_ADC_ConfigChannel+0x7c0>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a2a      	ldr	r2, [pc, #168]	@ (8003f28 <HAL_ADC_ConfigChannel+0x864>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d101      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x7c4>
 8003e84:	4a29      	ldr	r2, [pc, #164]	@ (8003f2c <HAL_ADC_ConfigChannel+0x868>)
 8003e86:	e000      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x7c6>
 8003e88:	4a23      	ldr	r2, [pc, #140]	@ (8003f18 <HAL_ADC_ConfigChannel+0x854>)
 8003e8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e92:	4619      	mov	r1, r3
 8003e94:	4610      	mov	r0, r2
 8003e96:	f7fe fcd4 	bl	8002842 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e9a:	e031      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x83c>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
<<<<<<< HEAD
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a27      	ldr	r2, [pc, #156]	@ (800396c <HAL_ADC_ConfigChannel+0x87c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d12d      	bne.n	800392e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d127      	bne.n	800392e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003954 <HAL_ADC_ConfigChannel+0x864>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d022      	beq.n	800392e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f0:	d004      	beq.n	80038fc <HAL_ADC_ConfigChannel+0x80c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a17      	ldr	r2, [pc, #92]	@ (8003954 <HAL_ADC_ConfigChannel+0x864>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d101      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x810>
 80038fc:	4a16      	ldr	r2, [pc, #88]	@ (8003958 <HAL_ADC_ConfigChannel+0x868>)
 80038fe:	e000      	b.n	8003902 <HAL_ADC_ConfigChannel+0x812>
 8003900:	4a10      	ldr	r2, [pc, #64]	@ (8003944 <HAL_ADC_ConfigChannel+0x854>)
 8003902:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003906:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800390a:	4619      	mov	r1, r3
 800390c:	4610      	mov	r0, r2
 800390e:	f7fe ff36 	bl	800277e <LL_ADC_SetCommonPathInternalCh>
 8003912:	e00c      	b.n	800392e <HAL_ADC_ConfigChannel+0x83e>
=======
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a27      	ldr	r2, [pc, #156]	@ (8003f40 <HAL_ADC_ConfigChannel+0x87c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d12d      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ea6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d127      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f28 <HAL_ADC_ConfigChannel+0x864>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d022      	beq.n	8003f02 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ec4:	d004      	beq.n	8003ed0 <HAL_ADC_ConfigChannel+0x80c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a17      	ldr	r2, [pc, #92]	@ (8003f28 <HAL_ADC_ConfigChannel+0x864>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d101      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x810>
 8003ed0:	4a16      	ldr	r2, [pc, #88]	@ (8003f2c <HAL_ADC_ConfigChannel+0x868>)
 8003ed2:	e000      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x812>
 8003ed4:	4a10      	ldr	r2, [pc, #64]	@ (8003f18 <HAL_ADC_ConfigChannel+0x854>)
 8003ed6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003eda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	f7fe fcae 	bl	8002842 <LL_ADC_SetCommonPathInternalCh>
 8003ee6:	e00c      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x83e>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003918:	f043 0220 	orr.w	r2, r3, #32
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003926:	e002      	b.n	800392e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003928:	bf00      	nop
 800392a:	e000      	b.n	800392e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800392c:	bf00      	nop
=======
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003efa:	e002      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003efc:	bf00      	nop
 8003efe:	e000      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f00:	bf00      	nop
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003936:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800393a:	4618      	mov	r0, r3
 800393c:	37d8      	adds	r7, #216	@ 0xd8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	50000700 	.word	0x50000700
 8003948:	c3210000 	.word	0xc3210000
 800394c:	90c00010 	.word	0x90c00010
 8003950:	50000600 	.word	0x50000600
 8003954:	50000100 	.word	0x50000100
 8003958:	50000300 	.word	0x50000300
 800395c:	20000000 	.word	0x20000000
 8003960:	053e2d63 	.word	0x053e2d63
 8003964:	c7520000 	.word	0xc7520000
 8003968:	50000500 	.word	0x50000500
 800396c:	cb840000 	.word	0xcb840000

08003970 <ADC_Enable>:
=======
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	37d8      	adds	r7, #216	@ 0xd8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	50000700 	.word	0x50000700
 8003f1c:	c3210000 	.word	0xc3210000
 8003f20:	90c00010 	.word	0x90c00010
 8003f24:	50000600 	.word	0x50000600
 8003f28:	50000100 	.word	0x50000100
 8003f2c:	50000300 	.word	0x50000300
 8003f30:	20000004 	.word	0x20000004
 8003f34:	053e2d63 	.word	0x053e2d63
 8003f38:	c7520000 	.word	0xc7520000
 8003f3c:	50000500 	.word	0x50000500
 8003f40:	cb840000 	.word	0xcb840000

08003f44 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fe fea2 	bl	8002ca4 <LL_ADC_REG_IsConversionOngoing>
 8003f60:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe fec3 	bl	8002cf2 <LL_ADC_INJ_IsConversionOngoing>
 8003f6c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d103      	bne.n	8003f7c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 8098 	beq.w	80040ac <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d02a      	beq.n	8003fe0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	7f5b      	ldrb	r3, [r3, #29]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d126      	bne.n	8003fe0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	7f1b      	ldrb	r3, [r3, #28]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d122      	bne.n	8003fe0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f9e:	e014      	b.n	8003fca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	4a45      	ldr	r2, [pc, #276]	@ (80040b8 <ADC_ConversionStop+0x174>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d90d      	bls.n	8003fc4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fac:	f043 0210 	orr.w	r2, r3, #16
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb8:	f043 0201 	orr.w	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e074      	b.n	80040ae <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd4:	2b40      	cmp	r3, #64	@ 0x40
 8003fd6:	d1e3      	bne.n	8003fa0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2240      	movs	r2, #64	@ 0x40
 8003fde:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d014      	beq.n	8004010 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fe5a 	bl	8002ca4 <LL_ADC_REG_IsConversionOngoing>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00c      	beq.n	8004010 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe fe17 	bl	8002c2e <LL_ADC_IsDisableOngoing>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d104      	bne.n	8004010 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe fe36 	bl	8002c7c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d014      	beq.n	8004040 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7fe fe69 	bl	8002cf2 <LL_ADC_INJ_IsConversionOngoing>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00c      	beq.n	8004040 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe fdff 	bl	8002c2e <LL_ADC_IsDisableOngoing>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d104      	bne.n	8004040 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe fe45 	bl	8002cca <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d005      	beq.n	8004052 <ADC_ConversionStop+0x10e>
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b03      	cmp	r3, #3
 800404a:	d105      	bne.n	8004058 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800404c:	230c      	movs	r3, #12
 800404e:	617b      	str	r3, [r7, #20]
        break;
 8004050:	e005      	b.n	800405e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004052:	2308      	movs	r3, #8
 8004054:	617b      	str	r3, [r7, #20]
        break;
 8004056:	e002      	b.n	800405e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004058:	2304      	movs	r3, #4
 800405a:	617b      	str	r3, [r7, #20]
        break;
 800405c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800405e:	f7fe fbaf 	bl	80027c0 <HAL_GetTick>
 8004062:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004064:	e01b      	b.n	800409e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004066:	f7fe fbab 	bl	80027c0 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b05      	cmp	r3, #5
 8004072:	d914      	bls.n	800409e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	4013      	ands	r3, r2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00d      	beq.n	800409e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004086:	f043 0210 	orr.w	r2, r3, #16
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004092:	f043 0201 	orr.w	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e007      	b.n	80040ae <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1dc      	bne.n	8004066 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	a33fffff 	.word	0xa33fffff

080040bc <ADC_Enable>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
=======
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff f8bf 	bl	8002b00 <LL_ADC_IsEnabled>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d14d      	bne.n	8003a24 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	4b28      	ldr	r3, [pc, #160]	@ (8003a30 <ADC_Enable+0xc0>)
 8003990:	4013      	ands	r3, r2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00d      	beq.n	80039b2 <ADC_Enable+0x42>
=======
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe fd9d 	bl	8002c08 <LL_ADC_IsEnabled>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d14d      	bne.n	8004170 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	4b28      	ldr	r3, [pc, #160]	@ (800417c <ADC_Enable+0xc0>)
 80040dc:	4013      	ands	r3, r2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00d      	beq.n	80040fe <ADC_Enable+0x42>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399a:	f043 0210 	orr.w	r2, r3, #16
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a6:	f043 0201 	orr.w	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e039      	b.n	8003a26 <ADC_Enable+0xb6>
=======
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e6:	f043 0210 	orr.w	r2, r3, #16
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f2:	f043 0201 	orr.w	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e039      	b.n	8004172 <ADC_Enable+0xb6>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
<<<<<<< HEAD
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff f88e 	bl	8002ad8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039bc:	f7fe fe9e 	bl	80026fc <HAL_GetTick>
 80039c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039c2:	e028      	b.n	8003a16 <ADC_Enable+0xa6>
=======
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fd58 	bl	8002bb8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004108:	f7fe fb5a 	bl	80027c0 <HAL_GetTick>
 800410c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800410e:	e028      	b.n	8004162 <ADC_Enable+0xa6>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
<<<<<<< HEAD
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff f899 	bl	8002b00 <LL_ADC_IsEnabled>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d104      	bne.n	80039de <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff f87d 	bl	8002ad8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80039de:	f7fe fe8d 	bl	80026fc <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d914      	bls.n	8003a16 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d00d      	beq.n	8003a16 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fe:	f043 0210 	orr.w	r2, r3, #16
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a0a:	f043 0201 	orr.w	r2, r3, #1
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e007      	b.n	8003a26 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d1cf      	bne.n	80039c4 <ADC_Enable+0x54>
=======
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f7fe fd77 	bl	8002c08 <LL_ADC_IsEnabled>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d104      	bne.n	800412a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe fd47 	bl	8002bb8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800412a:	f7fe fb49 	bl	80027c0 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d914      	bls.n	8004162 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b01      	cmp	r3, #1
 8004144:	d00d      	beq.n	8004162 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414a:	f043 0210 	orr.w	r2, r3, #16
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004156:	f043 0201 	orr.w	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e007      	b.n	8004172 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b01      	cmp	r3, #1
 800416e:	d1cf      	bne.n	8004110 <ADC_Enable+0x54>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	8000003f 	.word	0x8000003f

08003a34 <ADC_DMAConvCplt>:
=======
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	8000003f 	.word	0x8000003f

08004180 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f7fe fd4e 	bl	8002c2e <LL_ADC_IsDisableOngoing>
 8004192:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f7fe fd35 	bl	8002c08 <LL_ADC_IsEnabled>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d047      	beq.n	8004234 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d144      	bne.n	8004234 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 030d 	and.w	r3, r3, #13
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d10c      	bne.n	80041d2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fe fd0f 	bl	8002be0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2203      	movs	r2, #3
 80041c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041ca:	f7fe faf9 	bl	80027c0 <HAL_GetTick>
 80041ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041d0:	e029      	b.n	8004226 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d6:	f043 0210 	orr.w	r2, r3, #16
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041e2:	f043 0201 	orr.w	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e023      	b.n	8004236 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041ee:	f7fe fae7 	bl	80027c0 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d914      	bls.n	8004226 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00d      	beq.n	8004226 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420e:	f043 0210 	orr.w	r2, r3, #16
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800421a:	f043 0201 	orr.w	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e007      	b.n	8004236 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1dc      	bne.n	80041ee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <ADC_DMAConvCplt>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a40:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a46:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d14b      	bne.n	8003ae6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a52:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004250:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004254:	2b00      	cmp	r3, #0
 8004256:	d14b      	bne.n	80042f0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
<<<<<<< HEAD
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d021      	beq.n	8003aac <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe ff45 	bl	80028fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d032      	beq.n	8003ade <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d12b      	bne.n	8003ade <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d11f      	bne.n	8003ade <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa2:	f043 0201 	orr.w	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003aaa:	e018      	b.n	8003ade <ADC_DMAConvCplt+0xaa>
=======
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d021      	beq.n	80042b6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe fba2 	bl	80029c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d032      	beq.n	80042e8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d12b      	bne.n	80042e8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004294:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d11f      	bne.n	80042e8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ac:	f043 0201 	orr.w	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042b4:	e018      	b.n	80042e8 <ADC_DMAConvCplt+0xaa>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
<<<<<<< HEAD
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d111      	bne.n	8003ade <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003abe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d105      	bne.n	8003ade <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad6:	f043 0201 	orr.w	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d111      	bne.n	80042e8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d105      	bne.n	80042e8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e0:	f043 0201 	orr.w	r2, r3, #1
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f7fe fd84 	bl	80025ec <HAL_ADC_ConvCpltCallback>
=======
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f7fe f9e1 	bl	80026b0 <HAL_ADC_ConvCpltCallback>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
<<<<<<< HEAD
 8003ae4:	e00e      	b.n	8003b04 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f7ff faf2 	bl	80030dc <HAL_ADC_ErrorCallback>
}
 8003af8:	e004      	b.n	8003b04 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4798      	blx	r3
}
 8003b04:	bf00      	nop
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <ADC_DMAHalfConvCplt>:
=======
 80042ee:	e00e      	b.n	800430e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f4:	f003 0310 	and.w	r3, r3, #16
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f7ff f9d6 	bl	80036ae <HAL_ADC_ErrorCallback>
}
 8004302:	e004      	b.n	800430e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	4798      	blx	r3
}
 800430e:	bf00      	nop
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <ADC_DMAHalfConvCplt>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b18:	60fb      	str	r3, [r7, #12]
=======
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004322:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
<<<<<<< HEAD
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f7ff fad4 	bl	80030c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b20:	bf00      	nop
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <ADC_DMAError>:
=======
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f7ff f9b8 	bl	800369a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800432a:	bf00      	nop
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <ADC_DMAError>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b46:	f043 0204 	orr.w	r2, r3, #4
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004344:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004350:	f043 0204 	orr.w	r2, r3, #4
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f7ff fac4 	bl	80030dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b54:	bf00      	nop
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <LL_ADC_IsEnabled>:
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <LL_ADC_IsEnabled+0x18>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <LL_ADC_IsEnabled+0x1a>
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d101      	bne.n	8003b9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_ADCEx_MultiModeConfigChannel>:
=======
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff f9a8 	bl	80036ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <LL_ADC_IsEnabled>:
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <LL_ADC_IsEnabled+0x18>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <LL_ADC_IsEnabled+0x1a>
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <LL_ADC_REG_IsConversionOngoing>:
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b04      	cmp	r3, #4
 800439e:	d101      	bne.n	80043a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <HAL_ADCEx_MultiModeConfigChannel>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
<<<<<<< HEAD
 8003ba8:	b590      	push	{r4, r7, lr}
 8003baa:	b0a1      	sub	sp, #132	@ 0x84
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
=======
 80043b4:	b590      	push	{r4, r7, lr}
 80043b6:	b0a1      	sub	sp, #132	@ 0x84
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e0e7      	b.n	8003d96 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bde:	d102      	bne.n	8003be6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003be0:	4b6f      	ldr	r3, [pc, #444]	@ (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	e009      	b.n	8003bfa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a6e      	ldr	r2, [pc, #440]	@ (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d102      	bne.n	8003bf6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003bf0:	4b6d      	ldr	r3, [pc, #436]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	e001      	b.n	8003bfa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10b      	bne.n	8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c04:	f043 0220 	orr.w	r2, r3, #32
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0be      	b.n	8003d96 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
=======
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e0e7      	b.n	80045a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80043da:	2300      	movs	r3, #0
 80043dc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80043de:	2300      	movs	r3, #0
 80043e0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043ea:	d102      	bne.n	80043f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80043ec:	4b6f      	ldr	r3, [pc, #444]	@ (80045ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043ee:	60bb      	str	r3, [r7, #8]
 80043f0:	e009      	b.n	8004406 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a6e      	ldr	r2, [pc, #440]	@ (80045b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d102      	bne.n	8004402 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80043fc:	4b6d      	ldr	r3, [pc, #436]	@ (80045b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80043fe:	60bb      	str	r3, [r7, #8]
 8004400:	e001      	b.n	8004406 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004402:	2300      	movs	r3, #0
 8004404:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10b      	bne.n	8004424 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004410:	f043 0220 	orr.w	r2, r3, #32
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0be      	b.n	80045a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
<<<<<<< HEAD
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff ffb1 	bl	8003b82 <LL_ADC_REG_IsConversionOngoing>
 8003c20:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff ffab 	bl	8003b82 <LL_ADC_REG_IsConversionOngoing>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 80a0 	bne.w	8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f040 809c 	bne.w	8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c44:	d004      	beq.n	8003c50 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a55      	ldr	r2, [pc, #340]	@ (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d101      	bne.n	8003c54 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003c50:	4b56      	ldr	r3, [pc, #344]	@ (8003dac <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003c52:	e000      	b.n	8003c56 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003c54:	4b56      	ldr	r3, [pc, #344]	@ (8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003c56:	677b      	str	r3, [r7, #116]	@ 0x74
=======
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff ffb0 	bl	800438c <LL_ADC_REG_IsConversionOngoing>
 800442c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff ffaa 	bl	800438c <LL_ADC_REG_IsConversionOngoing>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	f040 80a0 	bne.w	8004580 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004440:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004442:	2b00      	cmp	r3, #0
 8004444:	f040 809c 	bne.w	8004580 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004450:	d004      	beq.n	800445c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a55      	ldr	r2, [pc, #340]	@ (80045ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d101      	bne.n	8004460 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800445c:	4b56      	ldr	r3, [pc, #344]	@ (80045b8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800445e:	e000      	b.n	8004462 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004460:	4b56      	ldr	r3, [pc, #344]	@ (80045bc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004462:	677b      	str	r3, [r7, #116]	@ 0x74
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
<<<<<<< HEAD
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d04b      	beq.n	8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c72:	035b      	lsls	r3, r3, #13
 8003c74:	430b      	orrs	r3, r1
 8003c76:	431a      	orrs	r2, r3
 8003c78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c7a:	609a      	str	r2, [r3, #8]
=======
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d04b      	beq.n	8004504 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800446c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	6859      	ldr	r1, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800447e:	035b      	lsls	r3, r3, #13
 8004480:	430b      	orrs	r3, r1
 8004482:	431a      	orrs	r2, r3
 8004484:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004486:	609a      	str	r2, [r3, #8]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
<<<<<<< HEAD
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c84:	d004      	beq.n	8003c90 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a45      	ldr	r2, [pc, #276]	@ (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d10f      	bne.n	8003cb0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003c90:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c94:	f7ff ff62 	bl	8003b5c <LL_ADC_IsEnabled>
 8003c98:	4604      	mov	r4, r0
 8003c9a:	4841      	ldr	r0, [pc, #260]	@ (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c9c:	f7ff ff5e 	bl	8003b5c <LL_ADC_IsEnabled>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	4323      	orrs	r3, r4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	e012      	b.n	8003cd6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003cb0:	483c      	ldr	r0, [pc, #240]	@ (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003cb2:	f7ff ff53 	bl	8003b5c <LL_ADC_IsEnabled>
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	483b      	ldr	r0, [pc, #236]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003cba:	f7ff ff4f 	bl	8003b5c <LL_ADC_IsEnabled>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	431c      	orrs	r4, r3
 8003cc2:	483c      	ldr	r0, [pc, #240]	@ (8003db4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003cc4:	f7ff ff4a 	bl	8003b5c <LL_ADC_IsEnabled>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	4323      	orrs	r3, r4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bf0c      	ite	eq
 8003cd0:	2301      	moveq	r3, #1
 8003cd2:	2300      	movne	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d056      	beq.n	8003d88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003cda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003ce2:	f023 030f 	bic.w	r3, r3, #15
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	6811      	ldr	r1, [r2, #0]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	6892      	ldr	r2, [r2, #8]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cf4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cf6:	e047      	b.n	8003d88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
=======
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004490:	d004      	beq.n	800449c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a45      	ldr	r2, [pc, #276]	@ (80045ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d10f      	bne.n	80044bc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800449c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80044a0:	f7ff ff61 	bl	8004366 <LL_ADC_IsEnabled>
 80044a4:	4604      	mov	r4, r0
 80044a6:	4841      	ldr	r0, [pc, #260]	@ (80045ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044a8:	f7ff ff5d 	bl	8004366 <LL_ADC_IsEnabled>
 80044ac:	4603      	mov	r3, r0
 80044ae:	4323      	orrs	r3, r4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	e012      	b.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80044bc:	483c      	ldr	r0, [pc, #240]	@ (80045b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80044be:	f7ff ff52 	bl	8004366 <LL_ADC_IsEnabled>
 80044c2:	4604      	mov	r4, r0
 80044c4:	483b      	ldr	r0, [pc, #236]	@ (80045b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80044c6:	f7ff ff4e 	bl	8004366 <LL_ADC_IsEnabled>
 80044ca:	4603      	mov	r3, r0
 80044cc:	431c      	orrs	r4, r3
 80044ce:	483c      	ldr	r0, [pc, #240]	@ (80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80044d0:	f7ff ff49 	bl	8004366 <LL_ADC_IsEnabled>
 80044d4:	4603      	mov	r3, r0
 80044d6:	4323      	orrs	r3, r4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	bf0c      	ite	eq
 80044dc:	2301      	moveq	r3, #1
 80044de:	2300      	movne	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d056      	beq.n	8004594 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80044e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80044ee:	f023 030f 	bic.w	r3, r3, #15
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	6811      	ldr	r1, [r2, #0]
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	6892      	ldr	r2, [r2, #8]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	431a      	orrs	r2, r3
 80044fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004500:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004502:	e047      	b.n	8004594 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
<<<<<<< HEAD
 8003cf8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d02:	609a      	str	r2, [r3, #8]
=======
 8004504:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800450c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800450e:	609a      	str	r2, [r3, #8]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
<<<<<<< HEAD
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d0c:	d004      	beq.n	8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a23      	ldr	r2, [pc, #140]	@ (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d10f      	bne.n	8003d38 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003d18:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d1c:	f7ff ff1e 	bl	8003b5c <LL_ADC_IsEnabled>
 8003d20:	4604      	mov	r4, r0
 8003d22:	481f      	ldr	r0, [pc, #124]	@ (8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d24:	f7ff ff1a 	bl	8003b5c <LL_ADC_IsEnabled>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	4323      	orrs	r3, r4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	e012      	b.n	8003d5e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003d38:	481a      	ldr	r0, [pc, #104]	@ (8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d3a:	f7ff ff0f 	bl	8003b5c <LL_ADC_IsEnabled>
 8003d3e:	4604      	mov	r4, r0
 8003d40:	4819      	ldr	r0, [pc, #100]	@ (8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d42:	f7ff ff0b 	bl	8003b5c <LL_ADC_IsEnabled>
 8003d46:	4603      	mov	r3, r0
 8003d48:	431c      	orrs	r4, r3
 8003d4a:	481a      	ldr	r0, [pc, #104]	@ (8003db4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003d4c:	f7ff ff06 	bl	8003b5c <LL_ADC_IsEnabled>
 8003d50:	4603      	mov	r3, r0
 8003d52:	4323      	orrs	r3, r4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bf0c      	ite	eq
 8003d58:	2301      	moveq	r3, #1
 8003d5a:	2300      	movne	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d012      	beq.n	8003d88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d6a:	f023 030f 	bic.w	r3, r3, #15
 8003d6e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003d70:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d72:	e009      	b.n	8003d88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
=======
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004518:	d004      	beq.n	8004524 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a23      	ldr	r2, [pc, #140]	@ (80045ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d10f      	bne.n	8004544 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004524:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004528:	f7ff ff1d 	bl	8004366 <LL_ADC_IsEnabled>
 800452c:	4604      	mov	r4, r0
 800452e:	481f      	ldr	r0, [pc, #124]	@ (80045ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004530:	f7ff ff19 	bl	8004366 <LL_ADC_IsEnabled>
 8004534:	4603      	mov	r3, r0
 8004536:	4323      	orrs	r3, r4
 8004538:	2b00      	cmp	r3, #0
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	e012      	b.n	800456a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004544:	481a      	ldr	r0, [pc, #104]	@ (80045b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004546:	f7ff ff0e 	bl	8004366 <LL_ADC_IsEnabled>
 800454a:	4604      	mov	r4, r0
 800454c:	4819      	ldr	r0, [pc, #100]	@ (80045b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800454e:	f7ff ff0a 	bl	8004366 <LL_ADC_IsEnabled>
 8004552:	4603      	mov	r3, r0
 8004554:	431c      	orrs	r4, r3
 8004556:	481a      	ldr	r0, [pc, #104]	@ (80045c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004558:	f7ff ff05 	bl	8004366 <LL_ADC_IsEnabled>
 800455c:	4603      	mov	r3, r0
 800455e:	4323      	orrs	r3, r4
 8004560:	2b00      	cmp	r3, #0
 8004562:	bf0c      	ite	eq
 8004564:	2301      	moveq	r3, #1
 8004566:	2300      	movne	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d012      	beq.n	8004594 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800456e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004576:	f023 030f 	bic.w	r3, r3, #15
 800457a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800457c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800457e:	e009      	b.n	8004594 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d78:	f043 0220 	orr.w	r2, r3, #32
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003d86:	e000      	b.n	8003d8a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d88:	bf00      	nop
=======
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004584:	f043 0220 	orr.w	r2, r3, #32
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004592:	e000      	b.n	8004596 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004594:	bf00      	nop
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d92:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3784      	adds	r7, #132	@ 0x84
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd90      	pop	{r4, r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	50000100 	.word	0x50000100
 8003da4:	50000400 	.word	0x50000400
 8003da8:	50000500 	.word	0x50000500
 8003dac:	50000300 	.word	0x50000300
 8003db0:	50000700 	.word	0x50000700
 8003db4:	50000600 	.word	0x50000600

08003db8 <__NVIC_SetPriorityGrouping>:
=======
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800459e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3784      	adds	r7, #132	@ 0x84
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd90      	pop	{r4, r7, pc}
 80045aa:	bf00      	nop
 80045ac:	50000100 	.word	0x50000100
 80045b0:	50000400 	.word	0x50000400
 80045b4:	50000500 	.word	0x50000500
 80045b8:	50000300 	.word	0x50000300
 80045bc:	50000700 	.word	0x50000700
 80045c0:	50000600 	.word	0x50000600

080045c4 <__NVIC_SetPriorityGrouping>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <__NVIC_SetPriorityGrouping+0x44>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003de0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dea:	4a04      	ldr	r2, [pc, #16]	@ (8003dfc <__NVIC_SetPriorityGrouping+0x44>)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	60d3      	str	r3, [r2, #12]
}
 8003df0:	bf00      	nop
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <__NVIC_GetPriorityGrouping>:
=======
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004608 <__NVIC_SetPriorityGrouping+0x44>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045e0:	4013      	ands	r3, r2
 80045e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045f6:	4a04      	ldr	r2, [pc, #16]	@ (8004608 <__NVIC_SetPriorityGrouping+0x44>)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	60d3      	str	r3, [r2, #12]
}
 80045fc:	bf00      	nop
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	e000ed00 	.word	0xe000ed00

0800460c <__NVIC_GetPriorityGrouping>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e04:	4b04      	ldr	r3, [pc, #16]	@ (8003e18 <__NVIC_GetPriorityGrouping+0x18>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	0a1b      	lsrs	r3, r3, #8
 8003e0a:	f003 0307 	and.w	r3, r3, #7
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000ed00 	.word	0xe000ed00

08003e1c <__NVIC_EnableIRQ>:
=======
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004610:	4b04      	ldr	r3, [pc, #16]	@ (8004624 <__NVIC_GetPriorityGrouping+0x18>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	0a1b      	lsrs	r3, r3, #8
 8004616:	f003 0307 	and.w	r3, r3, #7
}
 800461a:	4618      	mov	r0, r3
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	e000ed00 	.word	0xe000ed00

08004628 <__NVIC_EnableIRQ>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	db0b      	blt.n	8003e46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	f003 021f 	and.w	r2, r3, #31
 8003e34:	4907      	ldr	r1, [pc, #28]	@ (8003e54 <__NVIC_EnableIRQ+0x38>)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	e000e100 	.word	0xe000e100

08003e58 <__NVIC_SetPriority>:
=======
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004636:	2b00      	cmp	r3, #0
 8004638:	db0b      	blt.n	8004652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	f003 021f 	and.w	r2, r3, #31
 8004640:	4907      	ldr	r1, [pc, #28]	@ (8004660 <__NVIC_EnableIRQ+0x38>)
 8004642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	2001      	movs	r0, #1
 800464a:	fa00 f202 	lsl.w	r2, r0, r2
 800464e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	e000e100 	.word	0xe000e100

08004664 <__NVIC_SetPriority>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	6039      	str	r1, [r7, #0]
 8003e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	db0a      	blt.n	8003e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	490c      	ldr	r1, [pc, #48]	@ (8003ea4 <__NVIC_SetPriority+0x4c>)
 8003e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e76:	0112      	lsls	r2, r2, #4
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	6039      	str	r1, [r7, #0]
 800466e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004674:	2b00      	cmp	r3, #0
 8004676:	db0a      	blt.n	800468e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	b2da      	uxtb	r2, r3
 800467c:	490c      	ldr	r1, [pc, #48]	@ (80046b0 <__NVIC_SetPriority+0x4c>)
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	0112      	lsls	r2, r2, #4
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	440b      	add	r3, r1
 8004688:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8003e80:	e00a      	b.n	8003e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	4908      	ldr	r1, [pc, #32]	@ (8003ea8 <__NVIC_SetPriority+0x50>)
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	3b04      	subs	r3, #4
 8003e90:	0112      	lsls	r2, r2, #4
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	440b      	add	r3, r1
 8003e96:	761a      	strb	r2, [r3, #24]
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	e000e100 	.word	0xe000e100
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <NVIC_EncodePriority>:
=======
 800468c:	e00a      	b.n	80046a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	4908      	ldr	r1, [pc, #32]	@ (80046b4 <__NVIC_SetPriority+0x50>)
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	3b04      	subs	r3, #4
 800469c:	0112      	lsls	r2, r2, #4
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	440b      	add	r3, r1
 80046a2:	761a      	strb	r2, [r3, #24]
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	e000e100 	.word	0xe000e100
 80046b4:	e000ed00 	.word	0xe000ed00

080046b8 <NVIC_EncodePriority>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8003eac:	b480      	push	{r7}
 8003eae:	b089      	sub	sp, #36	@ 0x24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	61fb      	str	r3, [r7, #28]
=======
 80046b8:	b480      	push	{r7}
 80046ba:	b089      	sub	sp, #36	@ 0x24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	61fb      	str	r3, [r7, #28]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f1c3 0307 	rsb	r3, r3, #7
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	bf28      	it	cs
 8003eca:	2304      	movcs	r3, #4
 8003ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	2b06      	cmp	r3, #6
 8003ed4:	d902      	bls.n	8003edc <NVIC_EncodePriority+0x30>
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3b03      	subs	r3, #3
 8003eda:	e000      	b.n	8003ede <NVIC_EncodePriority+0x32>
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43da      	mvns	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	401a      	ands	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	fa01 f303 	lsl.w	r3, r1, r3
 8003efe:	43d9      	mvns	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f04:	4313      	orrs	r3, r2
         );
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3724      	adds	r7, #36	@ 0x24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <HAL_NVIC_SetPriorityGrouping>:
=======
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f1c3 0307 	rsb	r3, r3, #7
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	bf28      	it	cs
 80046d6:	2304      	movcs	r3, #4
 80046d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	3304      	adds	r3, #4
 80046de:	2b06      	cmp	r3, #6
 80046e0:	d902      	bls.n	80046e8 <NVIC_EncodePriority+0x30>
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	3b03      	subs	r3, #3
 80046e6:	e000      	b.n	80046ea <NVIC_EncodePriority+0x32>
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046ec:	f04f 32ff 	mov.w	r2, #4294967295
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	43da      	mvns	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	401a      	ands	r2, r3
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004700:	f04f 31ff 	mov.w	r1, #4294967295
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	fa01 f303 	lsl.w	r3, r1, r3
 800470a:	43d9      	mvns	r1, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004710:	4313      	orrs	r3, r2
         );
}
 8004712:	4618      	mov	r0, r3
 8004714:	3724      	adds	r7, #36	@ 0x24
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
=======
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff ff4c 	bl	8003db8 <__NVIC_SetPriorityGrouping>
}
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_NVIC_SetPriority>:
=======
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff ff4c 	bl	80045c4 <__NVIC_SetPriorityGrouping>
}
 800472c:	bf00      	nop
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_NVIC_SetPriority>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	73fb      	strb	r3, [r7, #15]
=======
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	73fb      	strb	r3, [r7, #15]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8003f36:	f7ff ff63 	bl	8003e00 <__NVIC_GetPriorityGrouping>
 8003f3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	68b9      	ldr	r1, [r7, #8]
 8003f40:	6978      	ldr	r0, [r7, #20]
 8003f42:	f7ff ffb3 	bl	8003eac <NVIC_EncodePriority>
 8003f46:	4602      	mov	r2, r0
 8003f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff ff82 	bl	8003e58 <__NVIC_SetPriority>
}
 8003f54:	bf00      	nop
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_NVIC_EnableIRQ>:
=======
 8004742:	f7ff ff63 	bl	800460c <__NVIC_GetPriorityGrouping>
 8004746:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	68b9      	ldr	r1, [r7, #8]
 800474c:	6978      	ldr	r0, [r7, #20]
 800474e:	f7ff ffb3 	bl	80046b8 <NVIC_EncodePriority>
 8004752:	4602      	mov	r2, r0
 8004754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004758:	4611      	mov	r1, r2
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff ff82 	bl	8004664 <__NVIC_SetPriority>
}
 8004760:	bf00      	nop
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_NVIC_EnableIRQ>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	71fb      	strb	r3, [r7, #7]
=======
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	4603      	mov	r3, r0
 8004770:	71fb      	strb	r3, [r7, #7]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8003f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff ff56 	bl	8003e1c <__NVIC_EnableIRQ>
}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_DMA_Init>:
=======
 8004772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff ff56 	bl	8004628 <__NVIC_EnableIRQ>
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_DMA_Init>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
=======
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
<<<<<<< HEAD
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e08d      	b.n	80040a6 <HAL_DMA_Init+0x12e>
=======
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e08d      	b.n	80048b2 <HAL_DMA_Init+0x12e>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
<<<<<<< HEAD
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4b47      	ldr	r3, [pc, #284]	@ (80040b0 <HAL_DMA_Init+0x138>)
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d80f      	bhi.n	8003fb6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4b45      	ldr	r3, [pc, #276]	@ (80040b4 <HAL_DMA_Init+0x13c>)
 8003f9e:	4413      	add	r3, r2
 8003fa0:	4a45      	ldr	r2, [pc, #276]	@ (80040b8 <HAL_DMA_Init+0x140>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	091b      	lsrs	r3, r3, #4
 8003fa8:	009a      	lsls	r2, r3, #2
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a42      	ldr	r2, [pc, #264]	@ (80040bc <HAL_DMA_Init+0x144>)
 8003fb2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fb4:	e00e      	b.n	8003fd4 <HAL_DMA_Init+0x5c>
=======
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	4b47      	ldr	r3, [pc, #284]	@ (80048bc <HAL_DMA_Init+0x138>)
 800479e:	429a      	cmp	r2, r3
 80047a0:	d80f      	bhi.n	80047c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	4b45      	ldr	r3, [pc, #276]	@ (80048c0 <HAL_DMA_Init+0x13c>)
 80047aa:	4413      	add	r3, r2
 80047ac:	4a45      	ldr	r2, [pc, #276]	@ (80048c4 <HAL_DMA_Init+0x140>)
 80047ae:	fba2 2303 	umull	r2, r3, r2, r3
 80047b2:	091b      	lsrs	r3, r3, #4
 80047b4:	009a      	lsls	r2, r3, #2
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a42      	ldr	r2, [pc, #264]	@ (80048c8 <HAL_DMA_Init+0x144>)
 80047be:	641a      	str	r2, [r3, #64]	@ 0x40
 80047c0:	e00e      	b.n	80047e0 <HAL_DMA_Init+0x5c>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
<<<<<<< HEAD
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4b40      	ldr	r3, [pc, #256]	@ (80040c0 <HAL_DMA_Init+0x148>)
 8003fbe:	4413      	add	r3, r2
 8003fc0:	4a3d      	ldr	r2, [pc, #244]	@ (80040b8 <HAL_DMA_Init+0x140>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	009a      	lsls	r2, r3, #2
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a3c      	ldr	r2, [pc, #240]	@ (80040c4 <HAL_DMA_Init+0x14c>)
 8003fd2:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	4b40      	ldr	r3, [pc, #256]	@ (80048cc <HAL_DMA_Init+0x148>)
 80047ca:	4413      	add	r3, r2
 80047cc:	4a3d      	ldr	r2, [pc, #244]	@ (80048c4 <HAL_DMA_Init+0x140>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	009a      	lsls	r2, r3, #2
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a3c      	ldr	r2, [pc, #240]	@ (80048d0 <HAL_DMA_Init+0x14c>)
 80047de:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fee:	60fb      	str	r3, [r7, #12]
=======
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80047f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047fa:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
<<<<<<< HEAD
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004004:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004010:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]
=======
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004804:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004810:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800481c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	601a      	str	r2, [r3, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
<<<<<<< HEAD
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa76 	bl	8004518 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004034:	d102      	bne.n	800403c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	605a      	str	r2, [r3, #4]
=======
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fa76 	bl	8004d24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004840:	d102      	bne.n	8004848 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	605a      	str	r2, [r3, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
<<<<<<< HEAD
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004050:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d010      	beq.n	800407c <HAL_DMA_Init+0x104>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b04      	cmp	r3, #4
 8004060:	d80c      	bhi.n	800407c <HAL_DMA_Init+0x104>
=======
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800485c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d010      	beq.n	8004888 <HAL_DMA_Init+0x104>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b04      	cmp	r3, #4
 800486c:	d80c      	bhi.n	8004888 <HAL_DMA_Init+0x104>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
<<<<<<< HEAD
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fa96 	bl	8004594 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	e008      	b.n	800408e <HAL_DMA_Init+0x116>
=======
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fa96 	bl	8004da0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004884:	605a      	str	r2, [r3, #4]
 8004886:	e008      	b.n	800489a <HAL_DMA_Init+0x116>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
<<<<<<< HEAD
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	65da      	str	r2, [r3, #92]	@ 0x5c
=======
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	65da      	str	r2, [r3, #92]	@ 0x5c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
<<<<<<< HEAD
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40020407 	.word	0x40020407
 80040b4:	bffdfff8 	.word	0xbffdfff8
 80040b8:	cccccccd 	.word	0xcccccccd
 80040bc:	40020000 	.word	0x40020000
 80040c0:	bffdfbf8 	.word	0xbffdfbf8
 80040c4:	40020400 	.word	0x40020400

080040c8 <HAL_DMA_Start_IT>:
=======
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40020407 	.word	0x40020407
 80048c0:	bffdfff8 	.word	0xbffdfff8
 80048c4:	cccccccd 	.word	0xcccccccd
 80048c8:	40020000 	.word	0x40020000
 80048cc:	bffdfbf8 	.word	0xbffdfbf8
 80048d0:	40020400 	.word	0x40020400

080048d4 <HAL_DMA_Start_IT>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
<<<<<<< HEAD
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	75fb      	strb	r3, [r7, #23]
=======
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	75fb      	strb	r3, [r7, #23]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_DMA_Start_IT+0x20>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e066      	b.n	80041b6 <HAL_DMA_Start_IT+0xee>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d155      	bne.n	80041a8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0201 	bic.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 f9bb 	bl	800449c <DMA_SetConfig>
=======
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_DMA_Start_IT+0x20>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e066      	b.n	80049c2 <HAL_DMA_Start_IT+0xee>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	d155      	bne.n	80049b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f9bb 	bl	8004ca8 <DMA_SetConfig>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
<<<<<<< HEAD
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 020e 	orr.w	r2, r2, #14
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	e00f      	b.n	8004160 <HAL_DMA_Start_IT+0x98>
=======
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004936:	2b00      	cmp	r3, #0
 8004938:	d008      	beq.n	800494c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 020e 	orr.w	r2, r2, #14
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e00f      	b.n	800496c <HAL_DMA_Start_IT+0x98>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
<<<<<<< HEAD
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0204 	bic.w	r2, r2, #4
 800414e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 020a 	orr.w	r2, r2, #10
 800415e:	601a      	str	r2, [r3, #0]
=======
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0204 	bic.w	r2, r2, #4
 800495a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 020a 	orr.w	r2, r2, #10
 800496a:	601a      	str	r2, [r3, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
<<<<<<< HEAD
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004178:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800417c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004182:	2b00      	cmp	r3, #0
 8004184:	d007      	beq.n	8004196 <HAL_DMA_Start_IT+0xce>
=======
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004984:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004988:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <HAL_DMA_Start_IT+0xce>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
<<<<<<< HEAD
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004190:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004194:	601a      	str	r2, [r3, #0]
=======
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049a0:	601a      	str	r2, [r3, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0201 	orr.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e005      	b.n	80041b4 <HAL_DMA_Start_IT+0xec>
=======
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0201 	orr.w	r2, r2, #1
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	e005      	b.n	80049c0 <HAL_DMA_Start_IT+0xec>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80041b0:	2302      	movs	r3, #2
 80041b2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_DMA_Abort>:
=======
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80049bc:	2302      	movs	r3, #2
 80049be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_DMA_Abort>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80041be:	b480      	push	{r7}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d005      	beq.n	80041e2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2204      	movs	r2, #4
 80041da:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
 80041e0:	e037      	b.n	8004252 <HAL_DMA_Abort+0x94>
=======
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d005      	beq.n	80049ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2204      	movs	r2, #4
 80049e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
 80049ec:	e037      	b.n	8004a5e <HAL_DMA_Abort+0x94>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 020e 	bic.w	r2, r2, #14
 80041f0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004200:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004216:	f003 021f 	and.w	r2, r3, #31
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	2101      	movs	r1, #1
 8004220:	fa01 f202 	lsl.w	r2, r1, r2
 8004224:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800422e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00c      	beq.n	8004252 <HAL_DMA_Abort+0x94>
=======
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 020e 	bic.w	r2, r2, #14
 80049fc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a0c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a22:	f003 021f 	and.w	r2, r3, #31
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a30:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a3a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00c      	beq.n	8004a5e <HAL_DMA_Abort+0x94>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
<<<<<<< HEAD
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004242:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004246:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004250:	605a      	str	r2, [r3, #4]
=======
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a52:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a5c:	605a      	str	r2, [r3, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004262:	7bfb      	ldrb	r3, [r7, #15]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_DMA_Abort_IT>:
=======
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_DMA_Abort_IT>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d00d      	beq.n	80042a4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2204      	movs	r2, #4
 800428c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
 80042a2:	e047      	b.n	8004334 <HAL_DMA_Abort_IT+0xc4>
=======
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d00d      	beq.n	8004ab0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2204      	movs	r2, #4
 8004a98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	73fb      	strb	r3, [r7, #15]
 8004aae:	e047      	b.n	8004b40 <HAL_DMA_Abort_IT+0xc4>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 020e 	bic.w	r2, r2, #14
 80042b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0201 	bic.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d8:	f003 021f 	and.w	r2, r3, #31
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	2101      	movs	r1, #1
 80042e2:	fa01 f202 	lsl.w	r2, r1, r2
 80042e6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00c      	beq.n	8004314 <HAL_DMA_Abort_IT+0xa4>
=======
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 020e 	bic.w	r2, r2, #14
 8004abe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0201 	bic.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ada:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ade:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae4:	f003 021f 	and.w	r2, r3, #31
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	2101      	movs	r1, #1
 8004aee:	fa01 f202 	lsl.w	r2, r1, r2
 8004af2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004afc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00c      	beq.n	8004b20 <HAL_DMA_Abort_IT+0xa4>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
<<<<<<< HEAD
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004304:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004308:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004312:	605a      	str	r2, [r3, #4]
=======
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b1e:	605a      	str	r2, [r3, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
<<<<<<< HEAD
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	4798      	blx	r3
    }
  }
  return status;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_DMA_IRQHandler>:
=======
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	4798      	blx	r3
    }
  }
  return status;
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_DMA_IRQHandler>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435a:	f003 031f 	and.w	r3, r3, #31
 800435e:	2204      	movs	r2, #4
 8004360:	409a      	lsls	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4013      	ands	r3, r2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d026      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x7a>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d021      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d107      	bne.n	8004392 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0204 	bic.w	r2, r2, #4
 8004390:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004396:	f003 021f 	and.w	r2, r3, #31
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439e:	2104      	movs	r1, #4
 80043a0:	fa01 f202 	lsl.w	r2, r1, r2
 80043a4:	605a      	str	r2, [r3, #4]
=======
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b66:	f003 031f 	and.w	r3, r3, #31
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	409a      	lsls	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4013      	ands	r3, r2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d026      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x7a>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d021      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d107      	bne.n	8004b9e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0204 	bic.w	r2, r2, #4
 8004b9c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba2:	f003 021f 	and.w	r2, r3, #31
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004baa:	2104      	movs	r1, #4
 8004bac:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb0:	605a      	str	r2, [r3, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
<<<<<<< HEAD
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d071      	beq.n	8004492 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80043b6:	e06c      	b.n	8004492 <HAL_DMA_IRQHandler+0x154>
=======
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d071      	beq.n	8004c9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004bc2:	e06c      	b.n	8004c9e <HAL_DMA_IRQHandler+0x154>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
<<<<<<< HEAD
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043bc:	f003 031f 	and.w	r3, r3, #31
 80043c0:	2202      	movs	r2, #2
 80043c2:	409a      	lsls	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d02e      	beq.n	800442a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d029      	beq.n	800442a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10b      	bne.n	80043fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 020a 	bic.w	r2, r2, #10
 80043f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004400:	f003 021f 	and.w	r2, r3, #31
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	2102      	movs	r1, #2
 800440a:	fa01 f202 	lsl.w	r2, r1, r2
 800440e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d038      	beq.n	8004492 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004428:	e033      	b.n	8004492 <HAL_DMA_IRQHandler+0x154>
=======
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	2202      	movs	r2, #2
 8004bce:	409a      	lsls	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d02e      	beq.n	8004c36 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d029      	beq.n	8004c36 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10b      	bne.n	8004c08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 020a 	bic.w	r2, r2, #10
 8004bfe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0c:	f003 021f 	and.w	r2, r3, #31
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c14:	2102      	movs	r1, #2
 8004c16:	fa01 f202 	lsl.w	r2, r1, r2
 8004c1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d038      	beq.n	8004c9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004c34:	e033      	b.n	8004c9e <HAL_DMA_IRQHandler+0x154>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
<<<<<<< HEAD
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	2208      	movs	r2, #8
 8004434:	409a      	lsls	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d02a      	beq.n	8004494 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d025      	beq.n	8004494 <HAL_DMA_IRQHandler+0x156>
=======
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	2208      	movs	r2, #8
 8004c40:	409a      	lsls	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4013      	ands	r3, r2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d02a      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f003 0308 	and.w	r3, r3, #8
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d025      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x156>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 020e 	bic.w	r2, r2, #14
 8004456:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445c:	f003 021f 	and.w	r2, r3, #31
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004464:	2101      	movs	r1, #1
 8004466:	fa01 f202 	lsl.w	r2, r1, r2
 800446a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004486:	2b00      	cmp	r3, #0
 8004488:	d004      	beq.n	8004494 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	4798      	blx	r3
=======
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 020e 	bic.w	r2, r2, #14
 8004c62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c68:	f003 021f 	and.w	r2, r3, #31
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c70:	2101      	movs	r1, #1
 8004c72:	fa01 f202 	lsl.w	r2, r1, r2
 8004c76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d004      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	4798      	blx	r3
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  else
  {
    /* Nothing To Do */
  }
  return;
<<<<<<< HEAD
 8004492:	bf00      	nop
 8004494:	bf00      	nop
}
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <DMA_SetConfig>:
=======
 8004c9e:	bf00      	nop
 8004ca0:	bf00      	nop
}
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <DMA_SetConfig>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044b2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80044c4:	605a      	str	r2, [r3, #4]
=======
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004cbe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d004      	beq.n	8004cd2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004cd0:	605a      	str	r2, [r3, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
<<<<<<< HEAD
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ca:	f003 021f 	and.w	r2, r3, #31
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	2101      	movs	r1, #1
 80044d4:	fa01 f202 	lsl.w	r2, r1, r2
 80044d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b10      	cmp	r3, #16
 80044e8:	d108      	bne.n	80044fc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	60da      	str	r2, [r3, #12]
=======
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd6:	f003 021f 	and.w	r2, r3, #31
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cde:	2101      	movs	r1, #1
 8004ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b10      	cmp	r3, #16
 8004cf4:	d108      	bne.n	8004d08 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	60da      	str	r2, [r3, #12]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
<<<<<<< HEAD
 80044fa:	e007      	b.n	800450c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	60da      	str	r2, [r3, #12]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <DMA_CalcDMAMUXChannelBaseAndMask>:
=======
 8004d06:	e007      	b.n	8004d18 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	60da      	str	r2, [r3, #12]
}
 8004d18:	bf00      	nop
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <DMA_CalcDMAMUXChannelBaseAndMask>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
=======
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
<<<<<<< HEAD
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	4b16      	ldr	r3, [pc, #88]	@ (8004580 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004528:	429a      	cmp	r2, r3
 800452a:	d802      	bhi.n	8004532 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800452c:	4b15      	ldr	r3, [pc, #84]	@ (8004584 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	e001      	b.n	8004536 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
=======
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	4b16      	ldr	r3, [pc, #88]	@ (8004d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d802      	bhi.n	8004d3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004d38:	4b15      	ldr	r3, [pc, #84]	@ (8004d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	e001      	b.n	8004d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
<<<<<<< HEAD
 8004532:	4b15      	ldr	r3, [pc, #84]	@ (8004588 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004534:	617b      	str	r3, [r7, #20]
=======
 8004d3e:	4b15      	ldr	r3, [pc, #84]	@ (8004d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004d40:	617b      	str	r3, [r7, #20]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
<<<<<<< HEAD
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	3b08      	subs	r3, #8
 8004542:	4a12      	ldr	r2, [pc, #72]	@ (800458c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004550:	089b      	lsrs	r3, r3, #2
 8004552:	009a      	lsls	r2, r3, #2
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4413      	add	r3, r2
 8004558:	461a      	mov	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a0b      	ldr	r2, [pc, #44]	@ (8004590 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004562:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f003 031f 	and.w	r3, r3, #31
 800456a:	2201      	movs	r2, #1
 800456c:	409a      	lsls	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40020407 	.word	0x40020407
 8004584:	40020800 	.word	0x40020800
 8004588:	40020820 	.word	0x40020820
 800458c:	cccccccd 	.word	0xcccccccd
 8004590:	40020880 	.word	0x40020880

08004594 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
=======
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	3b08      	subs	r3, #8
 8004d4e:	4a12      	ldr	r2, [pc, #72]	@ (8004d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004d50:	fba2 2303 	umull	r2, r3, r2, r3
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5c:	089b      	lsrs	r3, r3, #2
 8004d5e:	009a      	lsls	r2, r3, #2
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	4413      	add	r3, r2
 8004d64:	461a      	mov	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a0b      	ldr	r2, [pc, #44]	@ (8004d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004d6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	2201      	movs	r2, #1
 8004d78:	409a      	lsls	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d7e:	bf00      	nop
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40020407 	.word	0x40020407
 8004d90:	40020800 	.word	0x40020800
 8004d94:	40020820 	.word	0x40020820
 8004d98:	cccccccd 	.word	0xcccccccd
 8004d9c:	40020880 	.word	0x40020880

08004da0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4b0b      	ldr	r3, [pc, #44]	@ (80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	461a      	mov	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a08      	ldr	r2, [pc, #32]	@ (80045d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80045b6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	2201      	movs	r2, #1
 80045c2:	409a      	lsls	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	1000823f 	.word	0x1000823f
 80045d8:	40020940 	.word	0x40020940

080045dc <HAL_GPIO_Init>:
=======
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4b0b      	ldr	r3, [pc, #44]	@ (8004de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	461a      	mov	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a08      	ldr	r2, [pc, #32]	@ (8004de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004dc2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	f003 031f 	and.w	r3, r3, #31
 8004dcc:	2201      	movs	r2, #1
 8004dce:	409a      	lsls	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	1000823f 	.word	0x1000823f
 8004de4:	40020940 	.word	0x40020940

08004de8 <HAL_GPIO_Init>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
=======
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
<<<<<<< HEAD
 80045ea:	e15a      	b.n	80048a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	2101      	movs	r1, #1
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	fa01 f303 	lsl.w	r3, r1, r3
 80045f8:	4013      	ands	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 814c 	beq.w	800489c <HAL_GPIO_Init+0x2c0>
=======
 8004df6:	e15a      	b.n	80050ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	fa01 f303 	lsl.w	r3, r1, r3
 8004e04:	4013      	ands	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 814c 	beq.w	80050a8 <HAL_GPIO_Init+0x2c0>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
<<<<<<< HEAD
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d005      	beq.n	800461c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004618:	2b02      	cmp	r3, #2
 800461a:	d130      	bne.n	800467e <HAL_GPIO_Init+0xa2>
=======
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d005      	beq.n	8004e28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d130      	bne.n	8004e8a <HAL_GPIO_Init+0xa2>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< HEAD
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	2203      	movs	r2, #3
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	43db      	mvns	r3, r3
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4013      	ands	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004652:	2201      	movs	r2, #1
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4013      	ands	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	091b      	lsrs	r3, r3, #4
 8004668:	f003 0201 	and.w	r2, r3, #1
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b03      	cmp	r3, #3
 8004688:	d017      	beq.n	80046ba <HAL_GPIO_Init+0xde>
=======
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	2203      	movs	r2, #3
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e5e:	2201      	movs	r2, #1
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	fa02 f303 	lsl.w	r3, r2, r3
 8004e66:	43db      	mvns	r3, r3
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	091b      	lsrs	r3, r3, #4
 8004e74:	f003 0201 	and.w	r2, r3, #1
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d017      	beq.n	8004ec6 <HAL_GPIO_Init+0xde>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	2203      	movs	r2, #3
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4013      	ands	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	60da      	str	r2, [r3, #12]
=======
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	2203      	movs	r2, #3
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	60da      	str	r2, [r3, #12]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d123      	bne.n	800470e <HAL_GPIO_Init+0x132>
=======
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d123      	bne.n	8004f1a <HAL_GPIO_Init+0x132>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	08da      	lsrs	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3208      	adds	r2, #8
 80046ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	220f      	movs	r2, #15
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43db      	mvns	r3, r3
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4013      	ands	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	08da      	lsrs	r2, r3, #3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3208      	adds	r2, #8
 8004708:	6939      	ldr	r1, [r7, #16]
 800470a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	08da      	lsrs	r2, r3, #3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3208      	adds	r2, #8
 8004eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ede:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	220f      	movs	r2, #15
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	08da      	lsrs	r2, r3, #3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3208      	adds	r2, #8
 8004f14:	6939      	ldr	r1, [r7, #16]
 8004f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	2203      	movs	r2, #3
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4013      	ands	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f003 0203 	and.w	r2, r3, #3
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	601a      	str	r2, [r3, #0]
=======
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	2203      	movs	r2, #3
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f003 0203 	and.w	r2, r3, #3
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	601a      	str	r2, [r3, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< HEAD
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 80a6 	beq.w	800489c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004750:	4b5b      	ldr	r3, [pc, #364]	@ (80048c0 <HAL_GPIO_Init+0x2e4>)
 8004752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004754:	4a5a      	ldr	r2, [pc, #360]	@ (80048c0 <HAL_GPIO_Init+0x2e4>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6613      	str	r3, [r2, #96]	@ 0x60
 800475c:	4b58      	ldr	r3, [pc, #352]	@ (80048c0 <HAL_GPIO_Init+0x2e4>)
 800475e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004768:	4a56      	ldr	r2, [pc, #344]	@ (80048c4 <HAL_GPIO_Init+0x2e8>)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	089b      	lsrs	r3, r3, #2
 800476e:	3302      	adds	r3, #2
 8004770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004774:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	220f      	movs	r2, #15
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	43db      	mvns	r3, r3
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4013      	ands	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004792:	d01f      	beq.n	80047d4 <HAL_GPIO_Init+0x1f8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a4c      	ldr	r2, [pc, #304]	@ (80048c8 <HAL_GPIO_Init+0x2ec>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d019      	beq.n	80047d0 <HAL_GPIO_Init+0x1f4>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a4b      	ldr	r2, [pc, #300]	@ (80048cc <HAL_GPIO_Init+0x2f0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <HAL_GPIO_Init+0x1f0>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a4a      	ldr	r2, [pc, #296]	@ (80048d0 <HAL_GPIO_Init+0x2f4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00d      	beq.n	80047c8 <HAL_GPIO_Init+0x1ec>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a49      	ldr	r2, [pc, #292]	@ (80048d4 <HAL_GPIO_Init+0x2f8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d007      	beq.n	80047c4 <HAL_GPIO_Init+0x1e8>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a48      	ldr	r2, [pc, #288]	@ (80048d8 <HAL_GPIO_Init+0x2fc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d101      	bne.n	80047c0 <HAL_GPIO_Init+0x1e4>
 80047bc:	2305      	movs	r3, #5
 80047be:	e00a      	b.n	80047d6 <HAL_GPIO_Init+0x1fa>
 80047c0:	2306      	movs	r3, #6
 80047c2:	e008      	b.n	80047d6 <HAL_GPIO_Init+0x1fa>
 80047c4:	2304      	movs	r3, #4
 80047c6:	e006      	b.n	80047d6 <HAL_GPIO_Init+0x1fa>
 80047c8:	2303      	movs	r3, #3
 80047ca:	e004      	b.n	80047d6 <HAL_GPIO_Init+0x1fa>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e002      	b.n	80047d6 <HAL_GPIO_Init+0x1fa>
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <HAL_GPIO_Init+0x1fa>
 80047d4:	2300      	movs	r3, #0
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	f002 0203 	and.w	r2, r2, #3
 80047dc:	0092      	lsls	r2, r2, #2
 80047de:	4093      	lsls	r3, r2
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047e6:	4937      	ldr	r1, [pc, #220]	@ (80048c4 <HAL_GPIO_Init+0x2e8>)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	089b      	lsrs	r3, r3, #2
 80047ec:	3302      	adds	r3, #2
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047f4:	4b39      	ldr	r3, [pc, #228]	@ (80048dc <HAL_GPIO_Init+0x300>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	43db      	mvns	r3, r3
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4013      	ands	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004818:	4a30      	ldr	r2, [pc, #192]	@ (80048dc <HAL_GPIO_Init+0x300>)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800481e:	4b2f      	ldr	r3, [pc, #188]	@ (80048dc <HAL_GPIO_Init+0x300>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	43db      	mvns	r3, r3
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4013      	ands	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004842:	4a26      	ldr	r2, [pc, #152]	@ (80048dc <HAL_GPIO_Init+0x300>)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004848:	4b24      	ldr	r3, [pc, #144]	@ (80048dc <HAL_GPIO_Init+0x300>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	43db      	mvns	r3, r3
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4013      	ands	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800486c:	4a1b      	ldr	r2, [pc, #108]	@ (80048dc <HAL_GPIO_Init+0x300>)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004872:	4b1a      	ldr	r3, [pc, #104]	@ (80048dc <HAL_GPIO_Init+0x300>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	43db      	mvns	r3, r3
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4013      	ands	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004896:	4a11      	ldr	r2, [pc, #68]	@ (80048dc <HAL_GPIO_Init+0x300>)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	6013      	str	r3, [r2, #0]
=======
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 80a6 	beq.w	80050a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f5c:	4b5b      	ldr	r3, [pc, #364]	@ (80050cc <HAL_GPIO_Init+0x2e4>)
 8004f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f60:	4a5a      	ldr	r2, [pc, #360]	@ (80050cc <HAL_GPIO_Init+0x2e4>)
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f68:	4b58      	ldr	r3, [pc, #352]	@ (80050cc <HAL_GPIO_Init+0x2e4>)
 8004f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f74:	4a56      	ldr	r2, [pc, #344]	@ (80050d0 <HAL_GPIO_Init+0x2e8>)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	089b      	lsrs	r3, r3, #2
 8004f7a:	3302      	adds	r3, #2
 8004f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	220f      	movs	r2, #15
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	43db      	mvns	r3, r3
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4013      	ands	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004f9e:	d01f      	beq.n	8004fe0 <HAL_GPIO_Init+0x1f8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a4c      	ldr	r2, [pc, #304]	@ (80050d4 <HAL_GPIO_Init+0x2ec>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d019      	beq.n	8004fdc <HAL_GPIO_Init+0x1f4>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a4b      	ldr	r2, [pc, #300]	@ (80050d8 <HAL_GPIO_Init+0x2f0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d013      	beq.n	8004fd8 <HAL_GPIO_Init+0x1f0>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a4a      	ldr	r2, [pc, #296]	@ (80050dc <HAL_GPIO_Init+0x2f4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d00d      	beq.n	8004fd4 <HAL_GPIO_Init+0x1ec>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a49      	ldr	r2, [pc, #292]	@ (80050e0 <HAL_GPIO_Init+0x2f8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d007      	beq.n	8004fd0 <HAL_GPIO_Init+0x1e8>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a48      	ldr	r2, [pc, #288]	@ (80050e4 <HAL_GPIO_Init+0x2fc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d101      	bne.n	8004fcc <HAL_GPIO_Init+0x1e4>
 8004fc8:	2305      	movs	r3, #5
 8004fca:	e00a      	b.n	8004fe2 <HAL_GPIO_Init+0x1fa>
 8004fcc:	2306      	movs	r3, #6
 8004fce:	e008      	b.n	8004fe2 <HAL_GPIO_Init+0x1fa>
 8004fd0:	2304      	movs	r3, #4
 8004fd2:	e006      	b.n	8004fe2 <HAL_GPIO_Init+0x1fa>
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e004      	b.n	8004fe2 <HAL_GPIO_Init+0x1fa>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e002      	b.n	8004fe2 <HAL_GPIO_Init+0x1fa>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_GPIO_Init+0x1fa>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	f002 0203 	and.w	r2, r2, #3
 8004fe8:	0092      	lsls	r2, r2, #2
 8004fea:	4093      	lsls	r3, r2
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ff2:	4937      	ldr	r1, [pc, #220]	@ (80050d0 <HAL_GPIO_Init+0x2e8>)
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	089b      	lsrs	r3, r3, #2
 8004ff8:	3302      	adds	r3, #2
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005000:	4b39      	ldr	r3, [pc, #228]	@ (80050e8 <HAL_GPIO_Init+0x300>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	43db      	mvns	r3, r3
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4013      	ands	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005024:	4a30      	ldr	r2, [pc, #192]	@ (80050e8 <HAL_GPIO_Init+0x300>)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800502a:	4b2f      	ldr	r3, [pc, #188]	@ (80050e8 <HAL_GPIO_Init+0x300>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	43db      	mvns	r3, r3
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4013      	ands	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800504e:	4a26      	ldr	r2, [pc, #152]	@ (80050e8 <HAL_GPIO_Init+0x300>)
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005054:	4b24      	ldr	r3, [pc, #144]	@ (80050e8 <HAL_GPIO_Init+0x300>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	43db      	mvns	r3, r3
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4013      	ands	r3, r2
 8005062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005078:	4a1b      	ldr	r2, [pc, #108]	@ (80050e8 <HAL_GPIO_Init+0x300>)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800507e:	4b1a      	ldr	r3, [pc, #104]	@ (80050e8 <HAL_GPIO_Init+0x300>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	43db      	mvns	r3, r3
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4013      	ands	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80050a2:	4a11      	ldr	r2, [pc, #68]	@ (80050e8 <HAL_GPIO_Init+0x300>)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	6013      	str	r3, [r2, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }

    position++;
<<<<<<< HEAD
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	3301      	adds	r3, #1
 80048a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f47f ae9d 	bne.w	80045ec <HAL_GPIO_Init+0x10>
  }
}
 80048b2:	bf00      	nop
 80048b4:	bf00      	nop
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	40021000 	.word	0x40021000
 80048c4:	40010000 	.word	0x40010000
 80048c8:	48000400 	.word	0x48000400
 80048cc:	48000800 	.word	0x48000800
 80048d0:	48000c00 	.word	0x48000c00
 80048d4:	48001000 	.word	0x48001000
 80048d8:	48001400 	.word	0x48001400
 80048dc:	40010400 	.word	0x40010400

080048e0 <HAL_GPIO_WritePin>:
=======
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	3301      	adds	r3, #1
 80050ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	fa22 f303 	lsr.w	r3, r2, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f47f ae9d 	bne.w	8004df8 <HAL_GPIO_Init+0x10>
  }
}
 80050be:	bf00      	nop
 80050c0:	bf00      	nop
 80050c2:	371c      	adds	r7, #28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	40021000 	.word	0x40021000
 80050d0:	40010000 	.word	0x40010000
 80050d4:	48000400 	.word	0x48000400
 80050d8:	48000800 	.word	0x48000800
 80050dc:	48000c00 	.word	0x48000c00
 80050e0:	48001000 	.word	0x48001000
 80050e4:	48001400 	.word	0x48001400
 80050e8:	40010400 	.word	0x40010400

080050ec <HAL_GPIO_WritePin>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	807b      	strh	r3, [r7, #2]
 80048ec:	4613      	mov	r3, r2
 80048ee:	707b      	strb	r3, [r7, #1]
=======
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	807b      	strh	r3, [r7, #2]
 80050f8:	4613      	mov	r3, r2
 80050fa:	707b      	strb	r3, [r7, #1]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 80048f0:	787b      	ldrb	r3, [r7, #1]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048f6:	887a      	ldrh	r2, [r7, #2]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	619a      	str	r2, [r3, #24]
=======
 80050fc:	787b      	ldrb	r3, [r7, #1]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005102:	887a      	ldrh	r2, [r7, #2]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	619a      	str	r2, [r3, #24]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< HEAD
 80048fc:	e002      	b.n	8004904 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048fe:	887a      	ldrh	r2, [r7, #2]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_GPIO_EXTI_IRQHandler>:
=======
 8005108:	e002      	b.n	8005110 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800510a:	887a      	ldrh	r2, [r7, #2]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800491a:	4b08      	ldr	r3, [pc, #32]	@ (800493c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	4013      	ands	r3, r2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d006      	beq.n	8004934 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004926:	4a05      	ldr	r2, [pc, #20]	@ (800493c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	4618      	mov	r0, r3
 8004930:	f000 f806 	bl	8004940 <HAL_GPIO_EXTI_Callback>
  }
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40010400 	.word	0x40010400

08004940 <HAL_GPIO_EXTI_Callback>:
=======
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005126:	4b08      	ldr	r3, [pc, #32]	@ (8005148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005128:	695a      	ldr	r2, [r3, #20]
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	4013      	ands	r3, r2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d006      	beq.n	8005140 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005132:	4a05      	ldr	r2, [pc, #20]	@ (8005148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005134:	88fb      	ldrh	r3, [r7, #6]
 8005136:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	4618      	mov	r0, r3
 800513c:	f000 f806 	bl	800514c <HAL_GPIO_EXTI_Callback>
  }
}
 8005140:	bf00      	nop
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40010400 	.word	0x40010400

0800514c <HAL_GPIO_EXTI_Callback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	4603      	mov	r3, r0
 8004948:	80fb      	strh	r3, [r7, #6]
=======
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	80fb      	strh	r3, [r7, #6]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
	...

08004958 <HAL_PWREx_ControlVoltageScaling>:
=======
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
	...

08005164 <HAL_PWREx_ControlVoltageScaling>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
<<<<<<< HEAD
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
=======
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
<<<<<<< HEAD
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d141      	bne.n	80049ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004966:	4b4b      	ldr	r3, [pc, #300]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800496e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004972:	d131      	bne.n	80049d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004974:	4b47      	ldr	r3, [pc, #284]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800497a:	4a46      	ldr	r2, [pc, #280]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004980:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004984:	4b43      	ldr	r3, [pc, #268]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800498c:	4a41      	ldr	r2, [pc, #260]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800498e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004992:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004994:	4b40      	ldr	r3, [pc, #256]	@ (8004a98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2232      	movs	r2, #50	@ 0x32
 800499a:	fb02 f303 	mul.w	r3, r2, r3
 800499e:	4a3f      	ldr	r2, [pc, #252]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049a0:	fba2 2303 	umull	r2, r3, r2, r3
 80049a4:	0c9b      	lsrs	r3, r3, #18
 80049a6:	3301      	adds	r3, #1
 80049a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049aa:	e002      	b.n	80049b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049b2:	4b38      	ldr	r3, [pc, #224]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049be:	d102      	bne.n	80049c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f2      	bne.n	80049ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049c6:	4b33      	ldr	r3, [pc, #204]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049d2:	d158      	bne.n	8004a86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e057      	b.n	8004a88 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d141      	bne.n	80051f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005172:	4b4b      	ldr	r3, [pc, #300]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800517a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800517e:	d131      	bne.n	80051e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005180:	4b47      	ldr	r3, [pc, #284]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005186:	4a46      	ldr	r2, [pc, #280]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800518c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005190:	4b43      	ldr	r3, [pc, #268]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005198:	4a41      	ldr	r2, [pc, #260]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800519a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800519e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051a0:	4b40      	ldr	r3, [pc, #256]	@ (80052a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2232      	movs	r2, #50	@ 0x32
 80051a6:	fb02 f303 	mul.w	r3, r2, r3
 80051aa:	4a3f      	ldr	r2, [pc, #252]	@ (80052a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051ac:	fba2 2303 	umull	r2, r3, r2, r3
 80051b0:	0c9b      	lsrs	r3, r3, #18
 80051b2:	3301      	adds	r3, #1
 80051b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051b6:	e002      	b.n	80051be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051be:	4b38      	ldr	r3, [pc, #224]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ca:	d102      	bne.n	80051d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f2      	bne.n	80051b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051d2:	4b33      	ldr	r3, [pc, #204]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051de:	d158      	bne.n	8005292 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e057      	b.n	8005294 <HAL_PWREx_ControlVoltageScaling+0x130>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< HEAD
 80049d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049de:	4a2d      	ldr	r2, [pc, #180]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80049e8:	e04d      	b.n	8004a86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049f0:	d141      	bne.n	8004a76 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049f2:	4b28      	ldr	r3, [pc, #160]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049fe:	d131      	bne.n	8004a64 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a00:	4b24      	ldr	r3, [pc, #144]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a06:	4a23      	ldr	r2, [pc, #140]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a10:	4b20      	ldr	r3, [pc, #128]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a18:	4a1e      	ldr	r2, [pc, #120]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a20:	4b1d      	ldr	r3, [pc, #116]	@ (8004a98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2232      	movs	r2, #50	@ 0x32
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
 8004a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8004a9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a30:	0c9b      	lsrs	r3, r3, #18
 8004a32:	3301      	adds	r3, #1
 8004a34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a36:	e002      	b.n	8004a3e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a3e:	4b15      	ldr	r3, [pc, #84]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a4a:	d102      	bne.n	8004a52 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f2      	bne.n	8004a38 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a52:	4b10      	ldr	r3, [pc, #64]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a5e:	d112      	bne.n	8004a86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e011      	b.n	8004a88 <HAL_PWREx_ControlVoltageScaling+0x130>
=======
 80051e4:	4b2e      	ldr	r3, [pc, #184]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ea:	4a2d      	ldr	r2, [pc, #180]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80051f4:	e04d      	b.n	8005292 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051fc:	d141      	bne.n	8005282 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051fe:	4b28      	ldr	r3, [pc, #160]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800520a:	d131      	bne.n	8005270 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800520c:	4b24      	ldr	r3, [pc, #144]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800520e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005212:	4a23      	ldr	r2, [pc, #140]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005218:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800521c:	4b20      	ldr	r3, [pc, #128]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005224:	4a1e      	ldr	r2, [pc, #120]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005226:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800522a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800522c:	4b1d      	ldr	r3, [pc, #116]	@ (80052a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2232      	movs	r2, #50	@ 0x32
 8005232:	fb02 f303 	mul.w	r3, r2, r3
 8005236:	4a1c      	ldr	r2, [pc, #112]	@ (80052a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005238:	fba2 2303 	umull	r2, r3, r2, r3
 800523c:	0c9b      	lsrs	r3, r3, #18
 800523e:	3301      	adds	r3, #1
 8005240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005242:	e002      	b.n	800524a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3b01      	subs	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800524a:	4b15      	ldr	r3, [pc, #84]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005256:	d102      	bne.n	800525e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f2      	bne.n	8005244 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800525e:	4b10      	ldr	r3, [pc, #64]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800526a:	d112      	bne.n	8005292 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e011      	b.n	8005294 <HAL_PWREx_ControlVoltageScaling+0x130>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
<<<<<<< HEAD
 8004a64:	4b0b      	ldr	r3, [pc, #44]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a74:	e007      	b.n	8004a86 <HAL_PWREx_ControlVoltageScaling+0x12e>
=======
 8005270:	4b0b      	ldr	r3, [pc, #44]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005276:	4a0a      	ldr	r2, [pc, #40]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800527c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005280:	e007      	b.n	8005292 <HAL_PWREx_ControlVoltageScaling+0x12e>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
<<<<<<< HEAD
 8004a76:	4b07      	ldr	r3, [pc, #28]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a7e:	4a05      	ldr	r2, [pc, #20]	@ (8004a94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a84:	6013      	str	r3, [r2, #0]
=======
 8005282:	4b07      	ldr	r3, [pc, #28]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800528a:	4a05      	ldr	r2, [pc, #20]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800528c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005290:	6013      	str	r3, [r2, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
<<<<<<< HEAD
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	40007000 	.word	0x40007000
 8004a98:	20000000 	.word	0x20000000
 8004a9c:	431bde83 	.word	0x431bde83

08004aa0 <HAL_PWREx_DisableUCPDDeadBattery>:
=======
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	40007000 	.word	0x40007000
 80052a4:	20000004 	.word	0x20000004
 80052a8:	431bde83 	.word	0x431bde83

080052ac <HAL_PWREx_DisableUCPDDeadBattery>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
<<<<<<< HEAD
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004aa4:	4b05      	ldr	r3, [pc, #20]	@ (8004abc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	4a04      	ldr	r2, [pc, #16]	@ (8004abc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004aaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004aae:	6093      	str	r3, [r2, #8]
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40007000 	.word	0x40007000

08004ac0 <HAL_RCC_OscConfig>:
=======
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80052b0:	4b05      	ldr	r3, [pc, #20]	@ (80052c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	4a04      	ldr	r2, [pc, #16]	@ (80052c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80052b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052ba:	6093      	str	r3, [r2, #8]
}
 80052bc:	bf00      	nop
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40007000 	.word	0x40007000

080052cc <HAL_RCC_OscConfig>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
=======
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e306      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
=======
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e306      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d075      	beq.n	8004bca <HAL_RCC_OscConfig+0x10a>
=======
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d075      	beq.n	80053d6 <HAL_RCC_OscConfig+0x10a>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8004ade:	4b97      	ldr	r3, [pc, #604]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
 8004ae6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ae8:	4b94      	ldr	r3, [pc, #592]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b0c      	cmp	r3, #12
 8004af6:	d102      	bne.n	8004afe <HAL_RCC_OscConfig+0x3e>
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d002      	beq.n	8004b04 <HAL_RCC_OscConfig+0x44>
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d10b      	bne.n	8004b1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b04:	4b8d      	ldr	r3, [pc, #564]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d05b      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x108>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d157      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e2e1      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
=======
 80052ea:	4b97      	ldr	r3, [pc, #604]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 030c 	and.w	r3, r3, #12
 80052f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052f4:	4b94      	ldr	r3, [pc, #592]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b0c      	cmp	r3, #12
 8005302:	d102      	bne.n	800530a <HAL_RCC_OscConfig+0x3e>
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2b03      	cmp	r3, #3
 8005308:	d002      	beq.n	8005310 <HAL_RCC_OscConfig+0x44>
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2b08      	cmp	r3, #8
 800530e:	d10b      	bne.n	8005328 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005310:	4b8d      	ldr	r3, [pc, #564]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d05b      	beq.n	80053d4 <HAL_RCC_OscConfig+0x108>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d157      	bne.n	80053d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e2e1      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b24:	d106      	bne.n	8004b34 <HAL_RCC_OscConfig+0x74>
 8004b26:	4b85      	ldr	r3, [pc, #532]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a84      	ldr	r2, [pc, #528]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	e01d      	b.n	8004b70 <HAL_RCC_OscConfig+0xb0>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b3c:	d10c      	bne.n	8004b58 <HAL_RCC_OscConfig+0x98>
 8004b3e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a7e      	ldr	r2, [pc, #504]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004b44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	4b7c      	ldr	r3, [pc, #496]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a7b      	ldr	r2, [pc, #492]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	e00b      	b.n	8004b70 <HAL_RCC_OscConfig+0xb0>
 8004b58:	4b78      	ldr	r3, [pc, #480]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a77      	ldr	r2, [pc, #476]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	4b75      	ldr	r3, [pc, #468]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a74      	ldr	r2, [pc, #464]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004b6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d013      	beq.n	8004ba0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fd fdc0 	bl	80026fc <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b80:	f7fd fdbc 	bl	80026fc <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b64      	cmp	r3, #100	@ 0x64
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e2a6      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b92:	4b6a      	ldr	r3, [pc, #424]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCC_OscConfig+0xc0>
 8004b9e:	e014      	b.n	8004bca <HAL_RCC_OscConfig+0x10a>
=======
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005330:	d106      	bne.n	8005340 <HAL_RCC_OscConfig+0x74>
 8005332:	4b85      	ldr	r3, [pc, #532]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a84      	ldr	r2, [pc, #528]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 8005338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	e01d      	b.n	800537c <HAL_RCC_OscConfig+0xb0>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005348:	d10c      	bne.n	8005364 <HAL_RCC_OscConfig+0x98>
 800534a:	4b7f      	ldr	r3, [pc, #508]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a7e      	ldr	r2, [pc, #504]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 8005350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	4b7c      	ldr	r3, [pc, #496]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a7b      	ldr	r2, [pc, #492]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e00b      	b.n	800537c <HAL_RCC_OscConfig+0xb0>
 8005364:	4b78      	ldr	r3, [pc, #480]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a77      	ldr	r2, [pc, #476]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 800536a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	4b75      	ldr	r3, [pc, #468]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a74      	ldr	r2, [pc, #464]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 8005376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800537a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d013      	beq.n	80053ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005384:	f7fd fa1c 	bl	80027c0 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800538c:	f7fd fa18 	bl	80027c0 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b64      	cmp	r3, #100	@ 0x64
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e2a6      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800539e:	4b6a      	ldr	r3, [pc, #424]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0f0      	beq.n	800538c <HAL_RCC_OscConfig+0xc0>
 80053aa:	e014      	b.n	80053d6 <HAL_RCC_OscConfig+0x10a>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8004ba0:	f7fd fdac 	bl	80026fc <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba8:	f7fd fda8 	bl	80026fc <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b64      	cmp	r3, #100	@ 0x64
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e292      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bba:	4b60      	ldr	r3, [pc, #384]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCC_OscConfig+0xe8>
 8004bc6:	e000      	b.n	8004bca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc8:	bf00      	nop
=======
 80053ac:	f7fd fa08 	bl	80027c0 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b4:	f7fd fa04 	bl	80027c0 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	@ 0x64
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e292      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053c6:	4b60      	ldr	r3, [pc, #384]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0xe8>
 80053d2:	e000      	b.n	80053d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d4:	bf00      	nop
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d075      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x202>
=======
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d075      	beq.n	80054ce <HAL_RCC_OscConfig+0x202>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8004bd6:	4b59      	ldr	r3, [pc, #356]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 030c 	and.w	r3, r3, #12
 8004bde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004be0:	4b56      	ldr	r3, [pc, #344]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0303 	and.w	r3, r3, #3
 8004be8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b0c      	cmp	r3, #12
 8004bee:	d102      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x136>
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d002      	beq.n	8004bfc <HAL_RCC_OscConfig+0x13c>
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d11f      	bne.n	8004c3c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bfc:	4b4f      	ldr	r3, [pc, #316]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_RCC_OscConfig+0x154>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e265      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
=======
 80053e2:	4b59      	ldr	r3, [pc, #356]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
 80053ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053ec:	4b56      	ldr	r3, [pc, #344]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	2b0c      	cmp	r3, #12
 80053fa:	d102      	bne.n	8005402 <HAL_RCC_OscConfig+0x136>
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d002      	beq.n	8005408 <HAL_RCC_OscConfig+0x13c>
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	2b04      	cmp	r3, #4
 8005406:	d11f      	bne.n	8005448 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005408:	4b4f      	ldr	r3, [pc, #316]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <HAL_RCC_OscConfig+0x154>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e265      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8004c14:	4b49      	ldr	r3, [pc, #292]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	061b      	lsls	r3, r3, #24
 8004c22:	4946      	ldr	r1, [pc, #280]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c28:	4b45      	ldr	r3, [pc, #276]	@ (8004d40 <HAL_RCC_OscConfig+0x280>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fc fd91 	bl	8001754 <HAL_InitTick>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d043      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e251      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
=======
 8005420:	4b49      	ldr	r3, [pc, #292]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	061b      	lsls	r3, r3, #24
 800542e:	4946      	ldr	r1, [pc, #280]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 8005430:	4313      	orrs	r3, r2
 8005432:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005434:	4b45      	ldr	r3, [pc, #276]	@ (800554c <HAL_RCC_OscConfig+0x280>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4618      	mov	r0, r3
 800543a:	f7fc f98b 	bl	8001754 <HAL_InitTick>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d043      	beq.n	80054cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e251      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d023      	beq.n	8004c8c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c44:	4b3d      	ldr	r3, [pc, #244]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a3c      	ldr	r2, [pc, #240]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c50:	f7fd fd54 	bl	80026fc <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c58:	f7fd fd50 	bl	80026fc <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e23a      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c6a:	4b34      	ldr	r3, [pc, #208]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0f0      	beq.n	8004c58 <HAL_RCC_OscConfig+0x198>
=======
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d023      	beq.n	8005498 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005450:	4b3d      	ldr	r3, [pc, #244]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a3c      	ldr	r2, [pc, #240]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 8005456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800545a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545c:	f7fd f9b0 	bl	80027c0 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005464:	f7fd f9ac 	bl	80027c0 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e23a      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005476:	4b34      	ldr	r3, [pc, #208]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f0      	beq.n	8005464 <HAL_RCC_OscConfig+0x198>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8004c76:	4b31      	ldr	r3, [pc, #196]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	061b      	lsls	r3, r3, #24
 8004c84:	492d      	ldr	r1, [pc, #180]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	604b      	str	r3, [r1, #4]
 8004c8a:	e01a      	b.n	8004cc2 <HAL_RCC_OscConfig+0x202>
=======
 8005482:	4b31      	ldr	r3, [pc, #196]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	061b      	lsls	r3, r3, #24
 8005490:	492d      	ldr	r1, [pc, #180]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 8005492:	4313      	orrs	r3, r2
 8005494:	604b      	str	r3, [r1, #4]
 8005496:	e01a      	b.n	80054ce <HAL_RCC_OscConfig+0x202>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8004c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a2a      	ldr	r2, [pc, #168]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004c92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c98:	f7fd fd30 	bl	80026fc <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca0:	f7fd fd2c 	bl	80026fc <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e216      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cb2:	4b22      	ldr	r3, [pc, #136]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f0      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x1e0>
 8004cbe:	e000      	b.n	8004cc2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cc0:	bf00      	nop
=======
 8005498:	4b2b      	ldr	r3, [pc, #172]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a2a      	ldr	r2, [pc, #168]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 800549e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a4:	f7fd f98c 	bl	80027c0 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ac:	f7fd f988 	bl	80027c0 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e216      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054be:	4b22      	ldr	r3, [pc, #136]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1f0      	bne.n	80054ac <HAL_RCC_OscConfig+0x1e0>
 80054ca:	e000      	b.n	80054ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054cc:	bf00      	nop
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d041      	beq.n	8004d52 <HAL_RCC_OscConfig+0x292>
=======
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d041      	beq.n	800555e <HAL_RCC_OscConfig+0x292>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d01c      	beq.n	8004d10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cd6:	4b19      	ldr	r3, [pc, #100]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cdc:	4a17      	ldr	r2, [pc, #92]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce6:	f7fd fd09 	bl	80026fc <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cee:	f7fd fd05 	bl	80026fc <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e1ef      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d00:	4b0e      	ldr	r3, [pc, #56]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0ef      	beq.n	8004cee <HAL_RCC_OscConfig+0x22e>
 8004d0e:	e020      	b.n	8004d52 <HAL_RCC_OscConfig+0x292>
=======
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01c      	beq.n	800551c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054e2:	4b19      	ldr	r3, [pc, #100]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 80054e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054e8:	4a17      	ldr	r2, [pc, #92]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 80054ea:	f043 0301 	orr.w	r3, r3, #1
 80054ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f2:	f7fd f965 	bl	80027c0 <HAL_GetTick>
 80054f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054f8:	e008      	b.n	800550c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054fa:	f7fd f961 	bl	80027c0 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e1ef      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800550c:	4b0e      	ldr	r3, [pc, #56]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 800550e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0ef      	beq.n	80054fa <HAL_RCC_OscConfig+0x22e>
 800551a:	e020      	b.n	800555e <HAL_RCC_OscConfig+0x292>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8004d10:	4b0a      	ldr	r3, [pc, #40]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d16:	4a09      	ldr	r2, [pc, #36]	@ (8004d3c <HAL_RCC_OscConfig+0x27c>)
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d20:	f7fd fcec 	bl	80026fc <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d26:	e00d      	b.n	8004d44 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d28:	f7fd fce8 	bl	80026fc <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d906      	bls.n	8004d44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e1d2      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
 8004d3a:	bf00      	nop
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	200000e4 	.word	0x200000e4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d44:	4b8c      	ldr	r3, [pc, #560]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1ea      	bne.n	8004d28 <HAL_RCC_OscConfig+0x268>
=======
 800551c:	4b0a      	ldr	r3, [pc, #40]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 800551e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005522:	4a09      	ldr	r2, [pc, #36]	@ (8005548 <HAL_RCC_OscConfig+0x27c>)
 8005524:	f023 0301 	bic.w	r3, r3, #1
 8005528:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552c:	f7fd f948 	bl	80027c0 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005532:	e00d      	b.n	8005550 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005534:	f7fd f944 	bl	80027c0 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d906      	bls.n	8005550 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e1d2      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
 8005546:	bf00      	nop
 8005548:	40021000 	.word	0x40021000
 800554c:	200000e8 	.word	0x200000e8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005550:	4b8c      	ldr	r3, [pc, #560]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 8005552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1ea      	bne.n	8005534 <HAL_RCC_OscConfig+0x268>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 80a6 	beq.w	8004eac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d60:	2300      	movs	r3, #0
 8004d62:	77fb      	strb	r3, [r7, #31]
=======
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 80a6 	beq.w	80056b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800556c:	2300      	movs	r3, #0
 800556e:	77fb      	strb	r3, [r7, #31]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
<<<<<<< HEAD
 8004d64:	4b84      	ldr	r3, [pc, #528]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_RCC_OscConfig+0x2b4>
 8004d70:	2301      	movs	r3, #1
 8004d72:	e000      	b.n	8004d76 <HAL_RCC_OscConfig+0x2b6>
 8004d74:	2300      	movs	r3, #0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00d      	beq.n	8004d96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d7a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7e:	4a7e      	ldr	r2, [pc, #504]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d84:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d86:	4b7c      	ldr	r3, [pc, #496]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d92:	2301      	movs	r3, #1
 8004d94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d96:	4b79      	ldr	r3, [pc, #484]	@ (8004f7c <HAL_RCC_OscConfig+0x4bc>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d118      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004da2:	4b76      	ldr	r3, [pc, #472]	@ (8004f7c <HAL_RCC_OscConfig+0x4bc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a75      	ldr	r2, [pc, #468]	@ (8004f7c <HAL_RCC_OscConfig+0x4bc>)
 8004da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dae:	f7fd fca5 	bl	80026fc <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db6:	f7fd fca1 	bl	80026fc <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e18b      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dc8:	4b6c      	ldr	r3, [pc, #432]	@ (8004f7c <HAL_RCC_OscConfig+0x4bc>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x2f6>
=======
 8005570:	4b84      	ldr	r3, [pc, #528]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 8005572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <HAL_RCC_OscConfig+0x2b4>
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <HAL_RCC_OscConfig+0x2b6>
 8005580:	2300      	movs	r3, #0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00d      	beq.n	80055a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005586:	4b7f      	ldr	r3, [pc, #508]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 8005588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558a:	4a7e      	ldr	r2, [pc, #504]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 800558c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005590:	6593      	str	r3, [r2, #88]	@ 0x58
 8005592:	4b7c      	ldr	r3, [pc, #496]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 8005594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800559e:	2301      	movs	r3, #1
 80055a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055a2:	4b79      	ldr	r3, [pc, #484]	@ (8005788 <HAL_RCC_OscConfig+0x4bc>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d118      	bne.n	80055e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055ae:	4b76      	ldr	r3, [pc, #472]	@ (8005788 <HAL_RCC_OscConfig+0x4bc>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a75      	ldr	r2, [pc, #468]	@ (8005788 <HAL_RCC_OscConfig+0x4bc>)
 80055b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ba:	f7fd f901 	bl	80027c0 <HAL_GetTick>
 80055be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c2:	f7fd f8fd 	bl	80027c0 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e18b      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055d4:	4b6c      	ldr	r3, [pc, #432]	@ (8005788 <HAL_RCC_OscConfig+0x4bc>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0f0      	beq.n	80055c2 <HAL_RCC_OscConfig+0x2f6>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d108      	bne.n	8004dee <HAL_RCC_OscConfig+0x32e>
 8004ddc:	4b66      	ldr	r3, [pc, #408]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de2:	4a65      	ldr	r2, [pc, #404]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004de4:	f043 0301 	orr.w	r3, r3, #1
 8004de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dec:	e024      	b.n	8004e38 <HAL_RCC_OscConfig+0x378>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b05      	cmp	r3, #5
 8004df4:	d110      	bne.n	8004e18 <HAL_RCC_OscConfig+0x358>
 8004df6:	4b60      	ldr	r3, [pc, #384]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfc:	4a5e      	ldr	r2, [pc, #376]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004dfe:	f043 0304 	orr.w	r3, r3, #4
 8004e02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e06:	4b5c      	ldr	r3, [pc, #368]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0c:	4a5a      	ldr	r2, [pc, #360]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e16:	e00f      	b.n	8004e38 <HAL_RCC_OscConfig+0x378>
 8004e18:	4b57      	ldr	r3, [pc, #348]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1e:	4a56      	ldr	r2, [pc, #344]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e28:	4b53      	ldr	r3, [pc, #332]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2e:	4a52      	ldr	r2, [pc, #328]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004e30:	f023 0304 	bic.w	r3, r3, #4
 8004e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d016      	beq.n	8004e6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e40:	f7fd fc5c 	bl	80026fc <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e46:	e00a      	b.n	8004e5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e48:	f7fd fc58 	bl	80026fc <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e140      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e5e:	4b46      	ldr	r3, [pc, #280]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0ed      	beq.n	8004e48 <HAL_RCC_OscConfig+0x388>
 8004e6c:	e015      	b.n	8004e9a <HAL_RCC_OscConfig+0x3da>
=======
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d108      	bne.n	80055fa <HAL_RCC_OscConfig+0x32e>
 80055e8:	4b66      	ldr	r3, [pc, #408]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 80055ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ee:	4a65      	ldr	r2, [pc, #404]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 80055f0:	f043 0301 	orr.w	r3, r3, #1
 80055f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055f8:	e024      	b.n	8005644 <HAL_RCC_OscConfig+0x378>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b05      	cmp	r3, #5
 8005600:	d110      	bne.n	8005624 <HAL_RCC_OscConfig+0x358>
 8005602:	4b60      	ldr	r3, [pc, #384]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 8005604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005608:	4a5e      	ldr	r2, [pc, #376]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 800560a:	f043 0304 	orr.w	r3, r3, #4
 800560e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005612:	4b5c      	ldr	r3, [pc, #368]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 8005614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005618:	4a5a      	ldr	r2, [pc, #360]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005622:	e00f      	b.n	8005644 <HAL_RCC_OscConfig+0x378>
 8005624:	4b57      	ldr	r3, [pc, #348]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800562a:	4a56      	ldr	r2, [pc, #344]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 800562c:	f023 0301 	bic.w	r3, r3, #1
 8005630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005634:	4b53      	ldr	r3, [pc, #332]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 8005636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563a:	4a52      	ldr	r2, [pc, #328]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 800563c:	f023 0304 	bic.w	r3, r3, #4
 8005640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d016      	beq.n	800567a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564c:	f7fd f8b8 	bl	80027c0 <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005652:	e00a      	b.n	800566a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005654:	f7fd f8b4 	bl	80027c0 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e140      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800566a:	4b46      	ldr	r3, [pc, #280]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 800566c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0ed      	beq.n	8005654 <HAL_RCC_OscConfig+0x388>
 8005678:	e015      	b.n	80056a6 <HAL_RCC_OscConfig+0x3da>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8004e6e:	f7fd fc45 	bl	80026fc <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e74:	e00a      	b.n	8004e8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e76:	f7fd fc41 	bl	80026fc <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e129      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1ed      	bne.n	8004e76 <HAL_RCC_OscConfig+0x3b6>
=======
 800567a:	f7fd f8a1 	bl	80027c0 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005680:	e00a      	b.n	8005698 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005682:	f7fd f89d 	bl	80027c0 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005690:	4293      	cmp	r3, r2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e129      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005698:	4b3a      	ldr	r3, [pc, #232]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 800569a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1ed      	bne.n	8005682 <HAL_RCC_OscConfig+0x3b6>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 8004e9a:	7ffb      	ldrb	r3, [r7, #31]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d105      	bne.n	8004eac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea0:	4b35      	ldr	r3, [pc, #212]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea4:	4a34      	ldr	r2, [pc, #208]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eaa:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 80056a6:	7ffb      	ldrb	r3, [r7, #31]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d105      	bne.n	80056b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ac:	4b35      	ldr	r3, [pc, #212]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 80056ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b0:	4a34      	ldr	r2, [pc, #208]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 80056b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056b6:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< HEAD
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d03c      	beq.n	8004f32 <HAL_RCC_OscConfig+0x472>
=======
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0320 	and.w	r3, r3, #32
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d03c      	beq.n	800573e <HAL_RCC_OscConfig+0x472>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
<<<<<<< HEAD
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01c      	beq.n	8004efa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed0:	f7fd fc14 	bl	80026fc <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ed8:	f7fd fc10 	bl	80026fc <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e0fa      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004eea:	4b23      	ldr	r3, [pc, #140]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0ef      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x418>
 8004ef8:	e01b      	b.n	8004f32 <HAL_RCC_OscConfig+0x472>
=======
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01c      	beq.n	8005706 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 80056ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 80056d4:	f043 0301 	orr.w	r3, r3, #1
 80056d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056dc:	f7fd f870 	bl	80027c0 <HAL_GetTick>
 80056e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056e4:	f7fd f86c 	bl	80027c0 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e0fa      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056f6:	4b23      	ldr	r3, [pc, #140]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 80056f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0ef      	beq.n	80056e4 <HAL_RCC_OscConfig+0x418>
 8005704:	e01b      	b.n	800573e <HAL_RCC_OscConfig+0x472>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< HEAD
 8004efa:	4b1f      	ldr	r3, [pc, #124]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f00:	4a1d      	ldr	r2, [pc, #116]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004f02:	f023 0301 	bic.w	r3, r3, #1
 8004f06:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0a:	f7fd fbf7 	bl	80026fc <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f12:	f7fd fbf3 	bl	80026fc <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e0dd      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f24:	4b14      	ldr	r3, [pc, #80]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1ef      	bne.n	8004f12 <HAL_RCC_OscConfig+0x452>
=======
 8005706:	4b1f      	ldr	r3, [pc, #124]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 8005708:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800570c:	4a1d      	ldr	r2, [pc, #116]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005716:	f7fd f853 	bl	80027c0 <HAL_GetTick>
 800571a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800571c:	e008      	b.n	8005730 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800571e:	f7fd f84f 	bl	80027c0 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d901      	bls.n	8005730 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e0dd      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005730:	4b14      	ldr	r3, [pc, #80]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 8005732:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1ef      	bne.n	800571e <HAL_RCC_OscConfig+0x452>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< HEAD
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 80d1 	beq.w	80050de <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 030c 	and.w	r3, r3, #12
 8004f44:	2b0c      	cmp	r3, #12
 8004f46:	f000 808b 	beq.w	8005060 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d15e      	bne.n	8005010 <HAL_RCC_OscConfig+0x550>
=======
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 80d1 	beq.w	80058ea <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005748:	4b0e      	ldr	r3, [pc, #56]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f003 030c 	and.w	r3, r3, #12
 8005750:	2b0c      	cmp	r3, #12
 8005752:	f000 808b 	beq.w	800586c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d15e      	bne.n	800581c <HAL_RCC_OscConfig+0x550>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8004f52:	4b09      	ldr	r3, [pc, #36]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a08      	ldr	r2, [pc, #32]	@ (8004f78 <HAL_RCC_OscConfig+0x4b8>)
 8004f58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5e:	f7fd fbcd 	bl	80026fc <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f64:	e00c      	b.n	8004f80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f66:	f7fd fbc9 	bl	80026fc <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d905      	bls.n	8004f80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e0b3      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f80:	4b59      	ldr	r3, [pc, #356]	@ (80050e8 <HAL_RCC_OscConfig+0x628>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1ec      	bne.n	8004f66 <HAL_RCC_OscConfig+0x4a6>
=======
 800575e:	4b09      	ldr	r3, [pc, #36]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a08      	ldr	r2, [pc, #32]	@ (8005784 <HAL_RCC_OscConfig+0x4b8>)
 8005764:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576a:	f7fd f829 	bl	80027c0 <HAL_GetTick>
 800576e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005770:	e00c      	b.n	800578c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005772:	f7fd f825 	bl	80027c0 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d905      	bls.n	800578c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e0b3      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
 8005784:	40021000 	.word	0x40021000
 8005788:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800578c:	4b59      	ldr	r3, [pc, #356]	@ (80058f4 <HAL_RCC_OscConfig+0x628>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1ec      	bne.n	8005772 <HAL_RCC_OscConfig+0x4a6>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8004f8c:	4b56      	ldr	r3, [pc, #344]	@ (80050e8 <HAL_RCC_OscConfig+0x628>)
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	4b56      	ldr	r3, [pc, #344]	@ (80050ec <HAL_RCC_OscConfig+0x62c>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6a11      	ldr	r1, [r2, #32]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f9c:	3a01      	subs	r2, #1
 8004f9e:	0112      	lsls	r2, r2, #4
 8004fa0:	4311      	orrs	r1, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004fa6:	0212      	lsls	r2, r2, #8
 8004fa8:	4311      	orrs	r1, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004fae:	0852      	lsrs	r2, r2, #1
 8004fb0:	3a01      	subs	r2, #1
 8004fb2:	0552      	lsls	r2, r2, #21
 8004fb4:	4311      	orrs	r1, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004fba:	0852      	lsrs	r2, r2, #1
 8004fbc:	3a01      	subs	r2, #1
 8004fbe:	0652      	lsls	r2, r2, #25
 8004fc0:	4311      	orrs	r1, r2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004fc6:	06d2      	lsls	r2, r2, #27
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	4947      	ldr	r1, [pc, #284]	@ (80050e8 <HAL_RCC_OscConfig+0x628>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60cb      	str	r3, [r1, #12]
=======
 8005798:	4b56      	ldr	r3, [pc, #344]	@ (80058f4 <HAL_RCC_OscConfig+0x628>)
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	4b56      	ldr	r3, [pc, #344]	@ (80058f8 <HAL_RCC_OscConfig+0x62c>)
 800579e:	4013      	ands	r3, r2
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6a11      	ldr	r1, [r2, #32]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057a8:	3a01      	subs	r2, #1
 80057aa:	0112      	lsls	r2, r2, #4
 80057ac:	4311      	orrs	r1, r2
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80057b2:	0212      	lsls	r2, r2, #8
 80057b4:	4311      	orrs	r1, r2
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80057ba:	0852      	lsrs	r2, r2, #1
 80057bc:	3a01      	subs	r2, #1
 80057be:	0552      	lsls	r2, r2, #21
 80057c0:	4311      	orrs	r1, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80057c6:	0852      	lsrs	r2, r2, #1
 80057c8:	3a01      	subs	r2, #1
 80057ca:	0652      	lsls	r2, r2, #25
 80057cc:	4311      	orrs	r1, r2
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80057d2:	06d2      	lsls	r2, r2, #27
 80057d4:	430a      	orrs	r2, r1
 80057d6:	4947      	ldr	r1, [pc, #284]	@ (80058f4 <HAL_RCC_OscConfig+0x628>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	60cb      	str	r3, [r1, #12]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8004fd0:	4b45      	ldr	r3, [pc, #276]	@ (80050e8 <HAL_RCC_OscConfig+0x628>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a44      	ldr	r2, [pc, #272]	@ (80050e8 <HAL_RCC_OscConfig+0x628>)
 8004fd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fdc:	4b42      	ldr	r3, [pc, #264]	@ (80050e8 <HAL_RCC_OscConfig+0x628>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	4a41      	ldr	r2, [pc, #260]	@ (80050e8 <HAL_RCC_OscConfig+0x628>)
 8004fe2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fe6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe8:	f7fd fb88 	bl	80026fc <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff0:	f7fd fb84 	bl	80026fc <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e06e      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005002:	4b39      	ldr	r3, [pc, #228]	@ (80050e8 <HAL_RCC_OscConfig+0x628>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0f0      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x530>
 800500e:	e066      	b.n	80050de <HAL_RCC_OscConfig+0x61e>
=======
 80057dc:	4b45      	ldr	r3, [pc, #276]	@ (80058f4 <HAL_RCC_OscConfig+0x628>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a44      	ldr	r2, [pc, #272]	@ (80058f4 <HAL_RCC_OscConfig+0x628>)
 80057e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057e8:	4b42      	ldr	r3, [pc, #264]	@ (80058f4 <HAL_RCC_OscConfig+0x628>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	4a41      	ldr	r2, [pc, #260]	@ (80058f4 <HAL_RCC_OscConfig+0x628>)
 80057ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f4:	f7fc ffe4 	bl	80027c0 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057fc:	f7fc ffe0 	bl	80027c0 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e06e      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800580e:	4b39      	ldr	r3, [pc, #228]	@ (80058f4 <HAL_RCC_OscConfig+0x628>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f0      	beq.n	80057fc <HAL_RCC_OscConfig+0x530>
 800581a:	e066      	b.n	80058ea <HAL_RCC_OscConfig+0x61e>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8005010:	4b35      	ldr	r3, [pc, #212]	@ (80050e8 <HAL_RCC_OscConfig+0x628>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a34      	ldr	r2, [pc, #208]	@ (80050e8 <HAL_RCC_OscConfig+0x628>)
 8005016:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800501a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800501c:	4b32      	ldr	r3, [pc, #200]	@ (80050e8 <HAL_RCC_OscConfig+0x628>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	4a31      	ldr	r2, [pc, #196]	@ (80050e8 <HAL_RCC_OscConfig+0x628>)
 8005022:	f023 0303 	bic.w	r3, r3, #3
 8005026:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005028:	4b2f      	ldr	r3, [pc, #188]	@ (80050e8 <HAL_RCC_OscConfig+0x628>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4a2e      	ldr	r2, [pc, #184]	@ (80050e8 <HAL_RCC_OscConfig+0x628>)
 800502e:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8005032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005036:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005038:	f7fd fb60 	bl	80026fc <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005040:	f7fd fb5c 	bl	80026fc <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e046      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005052:	4b25      	ldr	r3, [pc, #148]	@ (80050e8 <HAL_RCC_OscConfig+0x628>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x580>
 800505e:	e03e      	b.n	80050de <HAL_RCC_OscConfig+0x61e>
=======
 800581c:	4b35      	ldr	r3, [pc, #212]	@ (80058f4 <HAL_RCC_OscConfig+0x628>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a34      	ldr	r2, [pc, #208]	@ (80058f4 <HAL_RCC_OscConfig+0x628>)
 8005822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005826:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005828:	4b32      	ldr	r3, [pc, #200]	@ (80058f4 <HAL_RCC_OscConfig+0x628>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	4a31      	ldr	r2, [pc, #196]	@ (80058f4 <HAL_RCC_OscConfig+0x628>)
 800582e:	f023 0303 	bic.w	r3, r3, #3
 8005832:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005834:	4b2f      	ldr	r3, [pc, #188]	@ (80058f4 <HAL_RCC_OscConfig+0x628>)
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	4a2e      	ldr	r2, [pc, #184]	@ (80058f4 <HAL_RCC_OscConfig+0x628>)
 800583a:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800583e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005842:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005844:	f7fc ffbc 	bl	80027c0 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584c:	f7fc ffb8 	bl	80027c0 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e046      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800585e:	4b25      	ldr	r3, [pc, #148]	@ (80058f4 <HAL_RCC_OscConfig+0x628>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x580>
 800586a:	e03e      	b.n	80058ea <HAL_RCC_OscConfig+0x61e>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e039      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
=======
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e039      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
<<<<<<< HEAD
 800506c:	4b1e      	ldr	r3, [pc, #120]	@ (80050e8 <HAL_RCC_OscConfig+0x628>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f003 0203 	and.w	r2, r3, #3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	429a      	cmp	r2, r3
 800507e:	d12c      	bne.n	80050da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508a:	3b01      	subs	r3, #1
 800508c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508e:	429a      	cmp	r2, r3
 8005090:	d123      	bne.n	80050da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800509e:	429a      	cmp	r2, r3
 80050a0:	d11b      	bne.n	80050da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d113      	bne.n	80050da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050bc:	085b      	lsrs	r3, r3, #1
 80050be:	3b01      	subs	r3, #1
 80050c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d109      	bne.n	80050da <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d0:	085b      	lsrs	r3, r3, #1
 80050d2:	3b01      	subs	r3, #1
 80050d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d001      	beq.n	80050de <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <HAL_RCC_OscConfig+0x620>
=======
 8005878:	4b1e      	ldr	r3, [pc, #120]	@ (80058f4 <HAL_RCC_OscConfig+0x628>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f003 0203 	and.w	r2, r3, #3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	429a      	cmp	r2, r3
 800588a:	d12c      	bne.n	80058e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005896:	3b01      	subs	r3, #1
 8005898:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800589a:	429a      	cmp	r2, r3
 800589c:	d123      	bne.n	80058e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d11b      	bne.n	80058e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d113      	bne.n	80058e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c8:	085b      	lsrs	r3, r3, #1
 80058ca:	3b01      	subs	r3, #1
 80058cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d109      	bne.n	80058e6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058dc:	085b      	lsrs	r3, r3, #1
 80058de:	3b01      	subs	r3, #1
 80058e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d001      	beq.n	80058ea <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <HAL_RCC_OscConfig+0x620>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }
  }
  }

  return HAL_OK;
<<<<<<< HEAD
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3720      	adds	r7, #32
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40021000 	.word	0x40021000
 80050ec:	019f800c 	.word	0x019f800c

080050f0 <HAL_RCC_ClockConfig>:
=======
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3720      	adds	r7, #32
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	40021000 	.word	0x40021000
 80058f8:	019f800c 	.word	0x019f800c

080058fc <HAL_RCC_ClockConfig>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e11e      	b.n	8005346 <HAL_RCC_ClockConfig+0x256>
=======
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e11e      	b.n	8005b52 <HAL_RCC_ClockConfig+0x256>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8005108:	4b91      	ldr	r3, [pc, #580]	@ (8005350 <HAL_RCC_ClockConfig+0x260>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d910      	bls.n	8005138 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005116:	4b8e      	ldr	r3, [pc, #568]	@ (8005350 <HAL_RCC_ClockConfig+0x260>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f023 020f 	bic.w	r2, r3, #15
 800511e:	498c      	ldr	r1, [pc, #560]	@ (8005350 <HAL_RCC_ClockConfig+0x260>)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	4313      	orrs	r3, r2
 8005124:	600b      	str	r3, [r1, #0]
=======
 8005914:	4b91      	ldr	r3, [pc, #580]	@ (8005b5c <HAL_RCC_ClockConfig+0x260>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d910      	bls.n	8005944 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005922:	4b8e      	ldr	r3, [pc, #568]	@ (8005b5c <HAL_RCC_ClockConfig+0x260>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f023 020f 	bic.w	r2, r3, #15
 800592a:	498c      	ldr	r1, [pc, #560]	@ (8005b5c <HAL_RCC_ClockConfig+0x260>)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	4313      	orrs	r3, r2
 8005930:	600b      	str	r3, [r1, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8005126:	4b8a      	ldr	r3, [pc, #552]	@ (8005350 <HAL_RCC_ClockConfig+0x260>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d001      	beq.n	8005138 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e106      	b.n	8005346 <HAL_RCC_ClockConfig+0x256>
=======
 8005932:	4b8a      	ldr	r3, [pc, #552]	@ (8005b5c <HAL_RCC_ClockConfig+0x260>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d001      	beq.n	8005944 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e106      	b.n	8005b52 <HAL_RCC_ClockConfig+0x256>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d073      	beq.n	800522c <HAL_RCC_ClockConfig+0x13c>
=======
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d073      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x13c>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d129      	bne.n	80051a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800514c:	4b81      	ldr	r3, [pc, #516]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e0f4      	b.n	8005346 <HAL_RCC_ClockConfig+0x256>
=======
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b03      	cmp	r3, #3
 8005956:	d129      	bne.n	80059ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005958:	4b81      	ldr	r3, [pc, #516]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0f4      	b.n	8005b52 <HAL_RCC_ClockConfig+0x256>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
<<<<<<< HEAD
 800515c:	f000 f9d0 	bl	8005500 <RCC_GetSysClockFreqFromPLLSource>
 8005160:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	4a7c      	ldr	r2, [pc, #496]	@ (8005358 <HAL_RCC_ClockConfig+0x268>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d93f      	bls.n	80051ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800516a:	4b7a      	ldr	r3, [pc, #488]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d009      	beq.n	800518a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800517e:	2b00      	cmp	r3, #0
 8005180:	d033      	beq.n	80051ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005186:	2b00      	cmp	r3, #0
 8005188:	d12f      	bne.n	80051ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800518a:	4b72      	ldr	r3, [pc, #456]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005192:	4a70      	ldr	r2, [pc, #448]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 8005194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005198:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800519a:	2380      	movs	r3, #128	@ 0x80
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	e024      	b.n	80051ea <HAL_RCC_ClockConfig+0xfa>
=======
 8005968:	f000 f9d0 	bl	8005d0c <RCC_GetSysClockFreqFromPLLSource>
 800596c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4a7c      	ldr	r2, [pc, #496]	@ (8005b64 <HAL_RCC_ClockConfig+0x268>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d93f      	bls.n	80059f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005976:	4b7a      	ldr	r3, [pc, #488]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d009      	beq.n	8005996 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800598a:	2b00      	cmp	r3, #0
 800598c:	d033      	beq.n	80059f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005992:	2b00      	cmp	r3, #0
 8005994:	d12f      	bne.n	80059f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005996:	4b72      	ldr	r3, [pc, #456]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800599e:	4a70      	ldr	r2, [pc, #448]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 80059a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80059a6:	2380      	movs	r3, #128	@ 0x80
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	e024      	b.n	80059f6 <HAL_RCC_ClockConfig+0xfa>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d107      	bne.n	80051b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d109      	bne.n	80051c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0c6      	b.n	8005346 <HAL_RCC_ClockConfig+0x256>
=======
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d107      	bne.n	80059c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059b4:	4b6a      	ldr	r3, [pc, #424]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d109      	bne.n	80059d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e0c6      	b.n	8005b52 <HAL_RCC_ClockConfig+0x256>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
<<<<<<< HEAD
 80051b8:	4b66      	ldr	r3, [pc, #408]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e0be      	b.n	8005346 <HAL_RCC_ClockConfig+0x256>
=======
 80059c4:	4b66      	ldr	r3, [pc, #408]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e0be      	b.n	8005b52 <HAL_RCC_ClockConfig+0x256>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
<<<<<<< HEAD
 80051c8:	f000 f8ce 	bl	8005368 <HAL_RCC_GetSysClockFreq>
 80051cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	4a61      	ldr	r2, [pc, #388]	@ (8005358 <HAL_RCC_ClockConfig+0x268>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d909      	bls.n	80051ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051d6:	4b5f      	ldr	r3, [pc, #380]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051de:	4a5d      	ldr	r2, [pc, #372]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 80051e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80051e6:	2380      	movs	r3, #128	@ 0x80
 80051e8:	617b      	str	r3, [r7, #20]
=======
 80059d4:	f000 f8ce 	bl	8005b74 <HAL_RCC_GetSysClockFreq>
 80059d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4a61      	ldr	r2, [pc, #388]	@ (8005b64 <HAL_RCC_ClockConfig+0x268>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d909      	bls.n	80059f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059e2:	4b5f      	ldr	r3, [pc, #380]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059ea:	4a5d      	ldr	r2, [pc, #372]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 80059ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80059f2:	2380      	movs	r3, #128	@ 0x80
 80059f4:	617b      	str	r3, [r7, #20]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 80051ea:	4b5a      	ldr	r3, [pc, #360]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f023 0203 	bic.w	r2, r3, #3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	4957      	ldr	r1, [pc, #348]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051fc:	f7fd fa7e 	bl	80026fc <HAL_GetTick>
 8005200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005202:	e00a      	b.n	800521a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005204:	f7fd fa7a 	bl	80026fc <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e095      	b.n	8005346 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521a:	4b4e      	ldr	r3, [pc, #312]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 020c 	and.w	r2, r3, #12
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	429a      	cmp	r2, r3
 800522a:	d1eb      	bne.n	8005204 <HAL_RCC_ClockConfig+0x114>
=======
 80059f6:	4b5a      	ldr	r3, [pc, #360]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f023 0203 	bic.w	r2, r3, #3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	4957      	ldr	r1, [pc, #348]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a08:	f7fc feda 	bl	80027c0 <HAL_GetTick>
 8005a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a0e:	e00a      	b.n	8005a26 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a10:	f7fc fed6 	bl	80027c0 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e095      	b.n	8005b52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a26:	4b4e      	ldr	r3, [pc, #312]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 020c 	and.w	r2, r3, #12
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d1eb      	bne.n	8005a10 <HAL_RCC_ClockConfig+0x114>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d023      	beq.n	8005280 <HAL_RCC_ClockConfig+0x190>
=======
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d023      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x190>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005244:	4b43      	ldr	r3, [pc, #268]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	4a42      	ldr	r2, [pc, #264]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 800524a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800524e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800525c:	4b3d      	ldr	r3, [pc, #244]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005264:	4a3b      	ldr	r2, [pc, #236]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 8005266:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800526a:	6093      	str	r3, [r2, #8]
=======
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a50:	4b43      	ldr	r3, [pc, #268]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	4a42      	ldr	r2, [pc, #264]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 8005a56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a5a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d007      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005a68:	4b3d      	ldr	r3, [pc, #244]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a70:	4a3b      	ldr	r2, [pc, #236]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 8005a72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a76:	6093      	str	r3, [r2, #8]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 800526c:	4b39      	ldr	r3, [pc, #228]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	4936      	ldr	r1, [pc, #216]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 800527a:	4313      	orrs	r3, r2
 800527c:	608b      	str	r3, [r1, #8]
 800527e:	e008      	b.n	8005292 <HAL_RCC_ClockConfig+0x1a2>
=======
 8005a78:	4b39      	ldr	r3, [pc, #228]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	4936      	ldr	r1, [pc, #216]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	608b      	str	r3, [r1, #8]
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_ClockConfig+0x1a2>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
<<<<<<< HEAD
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	2b80      	cmp	r3, #128	@ 0x80
 8005284:	d105      	bne.n	8005292 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005286:	4b33      	ldr	r3, [pc, #204]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	4a32      	ldr	r2, [pc, #200]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 800528c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005290:	6093      	str	r3, [r2, #8]
=======
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2b80      	cmp	r3, #128	@ 0x80
 8005a90:	d105      	bne.n	8005a9e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a92:	4b33      	ldr	r3, [pc, #204]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	4a32      	ldr	r2, [pc, #200]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 8005a98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a9c:	6093      	str	r3, [r2, #8]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8005292:	4b2f      	ldr	r3, [pc, #188]	@ (8005350 <HAL_RCC_ClockConfig+0x260>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d21d      	bcs.n	80052dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005350 <HAL_RCC_ClockConfig+0x260>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f023 020f 	bic.w	r2, r3, #15
 80052a8:	4929      	ldr	r1, [pc, #164]	@ (8005350 <HAL_RCC_ClockConfig+0x260>)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	600b      	str	r3, [r1, #0]
=======
 8005a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8005b5c <HAL_RCC_ClockConfig+0x260>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d21d      	bcs.n	8005ae8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aac:	4b2b      	ldr	r3, [pc, #172]	@ (8005b5c <HAL_RCC_ClockConfig+0x260>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f023 020f 	bic.w	r2, r3, #15
 8005ab4:	4929      	ldr	r1, [pc, #164]	@ (8005b5c <HAL_RCC_ClockConfig+0x260>)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	600b      	str	r3, [r1, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 80052b0:	f7fd fa24 	bl	80026fc <HAL_GetTick>
 80052b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b6:	e00a      	b.n	80052ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b8:	f7fd fa20 	bl	80026fc <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e03b      	b.n	8005346 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	4b20      	ldr	r3, [pc, #128]	@ (8005350 <HAL_RCC_ClockConfig+0x260>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d1ed      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x1c8>
=======
 8005abc:	f7fc fe80 	bl	80027c0 <HAL_GetTick>
 8005ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ac2:	e00a      	b.n	8005ada <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac4:	f7fc fe7c 	bl	80027c0 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e03b      	b.n	8005b52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ada:	4b20      	ldr	r3, [pc, #128]	@ (8005b5c <HAL_RCC_ClockConfig+0x260>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d1ed      	bne.n	8005ac4 <HAL_RCC_ClockConfig+0x1c8>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	4917      	ldr	r1, [pc, #92]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	608b      	str	r3, [r1, #8]
=======
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005af4:	4b1a      	ldr	r3, [pc, #104]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	4917      	ldr	r1, [pc, #92]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	608b      	str	r3, [r1, #8]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005306:	4b13      	ldr	r3, [pc, #76]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	490f      	ldr	r1, [pc, #60]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
=======
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d009      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b12:	4b13      	ldr	r3, [pc, #76]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	490f      	ldr	r1, [pc, #60]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	608b      	str	r3, [r1, #8]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< HEAD
 800531a:	f000 f825 	bl	8005368 <HAL_RCC_GetSysClockFreq>
 800531e:	4602      	mov	r2, r0
 8005320:	4b0c      	ldr	r3, [pc, #48]	@ (8005354 <HAL_RCC_ClockConfig+0x264>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	490c      	ldr	r1, [pc, #48]	@ (800535c <HAL_RCC_ClockConfig+0x26c>)
 800532c:	5ccb      	ldrb	r3, [r1, r3]
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	fa22 f303 	lsr.w	r3, r2, r3
 8005336:	4a0a      	ldr	r2, [pc, #40]	@ (8005360 <HAL_RCC_ClockConfig+0x270>)
 8005338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800533a:	4b0a      	ldr	r3, [pc, #40]	@ (8005364 <HAL_RCC_ClockConfig+0x274>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f7fc fa08 	bl	8001754 <HAL_InitTick>
 8005344:	4603      	mov	r3, r0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40022000 	.word	0x40022000
 8005354:	40021000 	.word	0x40021000
 8005358:	04c4b400 	.word	0x04c4b400
 800535c:	0800df08 	.word	0x0800df08
 8005360:	20000000 	.word	0x20000000
 8005364:	200000e4 	.word	0x200000e4

08005368 <HAL_RCC_GetSysClockFreq>:
=======
 8005b26:	f000 f825 	bl	8005b74 <HAL_RCC_GetSysClockFreq>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b60 <HAL_RCC_ClockConfig+0x264>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	490c      	ldr	r1, [pc, #48]	@ (8005b68 <HAL_RCC_ClockConfig+0x26c>)
 8005b38:	5ccb      	ldrb	r3, [r1, r3]
 8005b3a:	f003 031f 	and.w	r3, r3, #31
 8005b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b42:	4a0a      	ldr	r2, [pc, #40]	@ (8005b6c <HAL_RCC_ClockConfig+0x270>)
 8005b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b46:	4b0a      	ldr	r3, [pc, #40]	@ (8005b70 <HAL_RCC_ClockConfig+0x274>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fb fe02 	bl	8001754 <HAL_InitTick>
 8005b50:	4603      	mov	r3, r0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	40022000 	.word	0x40022000
 8005b60:	40021000 	.word	0x40021000
 8005b64:	04c4b400 	.word	0x04c4b400
 8005b68:	0800e73c 	.word	0x0800e73c
 8005b6c:	20000004 	.word	0x20000004
 8005b70:	200000e8 	.word	0x200000e8

08005b74 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
=======
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
<<<<<<< HEAD
 800536e:	4b2c      	ldr	r3, [pc, #176]	@ (8005420 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 030c 	and.w	r3, r3, #12
 8005376:	2b04      	cmp	r3, #4
 8005378:	d102      	bne.n	8005380 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800537a:	4b2a      	ldr	r3, [pc, #168]	@ (8005424 <HAL_RCC_GetSysClockFreq+0xbc>)
 800537c:	613b      	str	r3, [r7, #16]
 800537e:	e047      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005380:	4b27      	ldr	r3, [pc, #156]	@ (8005420 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 030c 	and.w	r3, r3, #12
 8005388:	2b08      	cmp	r3, #8
 800538a:	d102      	bne.n	8005392 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800538c:	4b26      	ldr	r3, [pc, #152]	@ (8005428 <HAL_RCC_GetSysClockFreq+0xc0>)
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	e03e      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005392:	4b23      	ldr	r3, [pc, #140]	@ (8005420 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
 800539a:	2b0c      	cmp	r3, #12
 800539c:	d136      	bne.n	800540c <HAL_RCC_GetSysClockFreq+0xa4>
=======
 8005b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 030c 	and.w	r3, r3, #12
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d102      	bne.n	8005b8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b86:	4b2a      	ldr	r3, [pc, #168]	@ (8005c30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b88:	613b      	str	r3, [r7, #16]
 8005b8a:	e047      	b.n	8005c1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b8c:	4b27      	ldr	r3, [pc, #156]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 030c 	and.w	r3, r3, #12
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d102      	bne.n	8005b9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b98:	4b26      	ldr	r3, [pc, #152]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b9a:	613b      	str	r3, [r7, #16]
 8005b9c:	e03e      	b.n	8005c1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b9e:	4b23      	ldr	r3, [pc, #140]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
 8005ba6:	2b0c      	cmp	r3, #12
 8005ba8:	d136      	bne.n	8005c18 <HAL_RCC_GetSysClockFreq+0xa4>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< HEAD
 800539e:	4b20      	ldr	r3, [pc, #128]	@ (8005420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	091b      	lsrs	r3, r3, #4
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	3301      	adds	r3, #1
 80053b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d10c      	bne.n	80053d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053bc:	4a1a      	ldr	r2, [pc, #104]	@ (8005428 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c4:	4a16      	ldr	r2, [pc, #88]	@ (8005420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053c6:	68d2      	ldr	r2, [r2, #12]
 80053c8:	0a12      	lsrs	r2, r2, #8
 80053ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053ce:	fb02 f303 	mul.w	r3, r2, r3
 80053d2:	617b      	str	r3, [r7, #20]
      break;
 80053d4:	e00c      	b.n	80053f0 <HAL_RCC_GetSysClockFreq+0x88>
=======
 8005baa:	4b20      	ldr	r3, [pc, #128]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	091b      	lsrs	r3, r3, #4
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d10c      	bne.n	8005be2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8005c34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd0:	4a16      	ldr	r2, [pc, #88]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bd2:	68d2      	ldr	r2, [r2, #12]
 8005bd4:	0a12      	lsrs	r2, r2, #8
 8005bd6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005bda:	fb02 f303 	mul.w	r3, r2, r3
 8005bde:	617b      	str	r3, [r7, #20]
      break;
 8005be0:	e00c      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0x88>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
<<<<<<< HEAD
 80053d6:	4a13      	ldr	r2, [pc, #76]	@ (8005424 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	fbb2 f3f3 	udiv	r3, r2, r3
 80053de:	4a10      	ldr	r2, [pc, #64]	@ (8005420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053e0:	68d2      	ldr	r2, [r2, #12]
 80053e2:	0a12      	lsrs	r2, r2, #8
 80053e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053e8:	fb02 f303 	mul.w	r3, r2, r3
 80053ec:	617b      	str	r3, [r7, #20]
      break;
 80053ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005420 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	0e5b      	lsrs	r3, r3, #25
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	3301      	adds	r3, #1
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	fbb2 f3f3 	udiv	r3, r2, r3
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	e001      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0xa8>
=======
 8005be2:	4a13      	ldr	r2, [pc, #76]	@ (8005c30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bea:	4a10      	ldr	r2, [pc, #64]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bec:	68d2      	ldr	r2, [r2, #12]
 8005bee:	0a12      	lsrs	r2, r2, #8
 8005bf0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005bf4:	fb02 f303 	mul.w	r3, r2, r3
 8005bf8:	617b      	str	r3, [r7, #20]
      break;
 8005bfa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	0e5b      	lsrs	r3, r3, #25
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	3301      	adds	r3, #1
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	e001      	b.n	8005c1c <HAL_RCC_GetSysClockFreq+0xa8>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  else
  {
    sysclockfreq = 0U;
<<<<<<< HEAD
 800540c:	2300      	movs	r3, #0
 800540e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005410:	693b      	ldr	r3, [r7, #16]
}
 8005412:	4618      	mov	r0, r3
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40021000 	.word	0x40021000
 8005424:	00f42400 	.word	0x00f42400
 8005428:	016e3600 	.word	0x016e3600

0800542c <HAL_RCC_GetHCLKFreq>:
=======
 8005c18:	2300      	movs	r3, #0
 8005c1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c1c:	693b      	ldr	r3, [r7, #16]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	371c      	adds	r7, #28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	00f42400 	.word	0x00f42400
 8005c34:	016e3600 	.word	0x016e3600

08005c38 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005430:	4b03      	ldr	r3, [pc, #12]	@ (8005440 <HAL_RCC_GetHCLKFreq+0x14>)
 8005432:	681b      	ldr	r3, [r3, #0]
}
 8005434:	4618      	mov	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	20000000 	.word	0x20000000

08005444 <HAL_RCC_GetPCLK1Freq>:
=======
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c3c:	4b03      	ldr	r3, [pc, #12]	@ (8005c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	20000004 	.word	0x20000004

08005c50 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005448:	f7ff fff0 	bl	800542c <HAL_RCC_GetHCLKFreq>
 800544c:	4602      	mov	r2, r0
 800544e:	4b06      	ldr	r3, [pc, #24]	@ (8005468 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	0a1b      	lsrs	r3, r3, #8
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	4904      	ldr	r1, [pc, #16]	@ (800546c <HAL_RCC_GetPCLK1Freq+0x28>)
 800545a:	5ccb      	ldrb	r3, [r1, r3]
 800545c:	f003 031f 	and.w	r3, r3, #31
 8005460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005464:	4618      	mov	r0, r3
 8005466:	bd80      	pop	{r7, pc}
 8005468:	40021000 	.word	0x40021000
 800546c:	0800df18 	.word	0x0800df18

08005470 <HAL_RCC_GetPCLK2Freq>:
=======
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c54:	f7ff fff0 	bl	8005c38 <HAL_RCC_GetHCLKFreq>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	0a1b      	lsrs	r3, r3, #8
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	4904      	ldr	r1, [pc, #16]	@ (8005c78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c66:	5ccb      	ldrb	r3, [r1, r3]
 8005c68:	f003 031f 	and.w	r3, r3, #31
 8005c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40021000 	.word	0x40021000
 8005c78:	0800e74c 	.word	0x0800e74c

08005c7c <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005474:	f7ff ffda 	bl	800542c <HAL_RCC_GetHCLKFreq>
 8005478:	4602      	mov	r2, r0
 800547a:	4b06      	ldr	r3, [pc, #24]	@ (8005494 <HAL_RCC_GetPCLK2Freq+0x24>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	0adb      	lsrs	r3, r3, #11
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	4904      	ldr	r1, [pc, #16]	@ (8005498 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005486:	5ccb      	ldrb	r3, [r1, r3]
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005490:	4618      	mov	r0, r3
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40021000 	.word	0x40021000
 8005498:	0800df18 	.word	0x0800df18

0800549c <HAL_RCC_GetClockConfig>:
=======
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c80:	f7ff ffda 	bl	8005c38 <HAL_RCC_GetHCLKFreq>
 8005c84:	4602      	mov	r2, r0
 8005c86:	4b06      	ldr	r3, [pc, #24]	@ (8005ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	0adb      	lsrs	r3, r3, #11
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	4904      	ldr	r1, [pc, #16]	@ (8005ca4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c92:	5ccb      	ldrb	r3, [r1, r3]
 8005c94:	f003 031f 	and.w	r3, r3, #31
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	0800e74c 	.word	0x0800e74c

08005ca8 <HAL_RCC_GetClockConfig>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< HEAD
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
=======
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
<<<<<<< HEAD
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	220f      	movs	r2, #15
 80054aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80054ac:	4b12      	ldr	r3, [pc, #72]	@ (80054f8 <HAL_RCC_GetClockConfig+0x5c>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 0203 	and.w	r2, r3, #3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80054b8:	4b0f      	ldr	r3, [pc, #60]	@ (80054f8 <HAL_RCC_GetClockConfig+0x5c>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80054c4:	4b0c      	ldr	r3, [pc, #48]	@ (80054f8 <HAL_RCC_GetClockConfig+0x5c>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80054d0:	4b09      	ldr	r3, [pc, #36]	@ (80054f8 <HAL_RCC_GetClockConfig+0x5c>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	08db      	lsrs	r3, r3, #3
 80054d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80054de:	4b07      	ldr	r3, [pc, #28]	@ (80054fc <HAL_RCC_GetClockConfig+0x60>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 020f 	and.w	r2, r3, #15
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	601a      	str	r2, [r3, #0]
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40021000 	.word	0x40021000
 80054fc:	40022000 	.word	0x40022000

08005500 <RCC_GetSysClockFreqFromPLLSource>:
=======
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	220f      	movs	r2, #15
 8005cb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005cb8:	4b12      	ldr	r3, [pc, #72]	@ (8005d04 <HAL_RCC_GetClockConfig+0x5c>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f003 0203 	and.w	r2, r3, #3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005d04 <HAL_RCC_GetClockConfig+0x5c>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005d04 <HAL_RCC_GetClockConfig+0x5c>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005cdc:	4b09      	ldr	r3, [pc, #36]	@ (8005d04 <HAL_RCC_GetClockConfig+0x5c>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	08db      	lsrs	r3, r3, #3
 8005ce2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005cea:	4b07      	ldr	r3, [pc, #28]	@ (8005d08 <HAL_RCC_GetClockConfig+0x60>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 020f 	and.w	r2, r3, #15
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	601a      	str	r2, [r3, #0]
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	40021000 	.word	0x40021000
 8005d08:	40022000 	.word	0x40022000

08005d0c <RCC_GetSysClockFreqFromPLLSource>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
<<<<<<< HEAD
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
=======
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< HEAD
 8005506:	4b1e      	ldr	r3, [pc, #120]	@ (8005580 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005510:	4b1b      	ldr	r3, [pc, #108]	@ (8005580 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	091b      	lsrs	r3, r3, #4
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	3301      	adds	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	2b03      	cmp	r3, #3
 8005522:	d10c      	bne.n	800553e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005524:	4a17      	ldr	r2, [pc, #92]	@ (8005584 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	fbb2 f3f3 	udiv	r3, r2, r3
 800552c:	4a14      	ldr	r2, [pc, #80]	@ (8005580 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800552e:	68d2      	ldr	r2, [r2, #12]
 8005530:	0a12      	lsrs	r2, r2, #8
 8005532:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005536:	fb02 f303 	mul.w	r3, r2, r3
 800553a:	617b      	str	r3, [r7, #20]
    break;
 800553c:	e00c      	b.n	8005558 <RCC_GetSysClockFreqFromPLLSource+0x58>
=======
 8005d12:	4b1e      	ldr	r3, [pc, #120]	@ (8005d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	3301      	adds	r3, #1
 8005d28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	d10c      	bne.n	8005d4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d30:	4a17      	ldr	r2, [pc, #92]	@ (8005d90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d38:	4a14      	ldr	r2, [pc, #80]	@ (8005d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d3a:	68d2      	ldr	r2, [r2, #12]
 8005d3c:	0a12      	lsrs	r2, r2, #8
 8005d3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d42:	fb02 f303 	mul.w	r3, r2, r3
 8005d46:	617b      	str	r3, [r7, #20]
    break;
 8005d48:	e00c      	b.n	8005d64 <RCC_GetSysClockFreqFromPLLSource+0x58>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
<<<<<<< HEAD
 800553e:	4a12      	ldr	r2, [pc, #72]	@ (8005588 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	fbb2 f3f3 	udiv	r3, r2, r3
 8005546:	4a0e      	ldr	r2, [pc, #56]	@ (8005580 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005548:	68d2      	ldr	r2, [r2, #12]
 800554a:	0a12      	lsrs	r2, r2, #8
 800554c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005550:	fb02 f303 	mul.w	r3, r2, r3
 8005554:	617b      	str	r3, [r7, #20]
    break;
 8005556:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005558:	4b09      	ldr	r3, [pc, #36]	@ (8005580 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	0e5b      	lsrs	r3, r3, #25
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	3301      	adds	r3, #1
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005570:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005572:	687b      	ldr	r3, [r7, #4]
}
 8005574:	4618      	mov	r0, r3
 8005576:	371c      	adds	r7, #28
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	40021000 	.word	0x40021000
 8005584:	016e3600 	.word	0x016e3600
 8005588:	00f42400 	.word	0x00f42400

0800558c <HAL_RCCEx_PeriphCLKConfig>:
=======
 8005d4a:	4a12      	ldr	r2, [pc, #72]	@ (8005d94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d52:	4a0e      	ldr	r2, [pc, #56]	@ (8005d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d54:	68d2      	ldr	r2, [r2, #12]
 8005d56:	0a12      	lsrs	r2, r2, #8
 8005d58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d5c:	fb02 f303 	mul.w	r3, r2, r3
 8005d60:	617b      	str	r3, [r7, #20]
    break;
 8005d62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d64:	4b09      	ldr	r3, [pc, #36]	@ (8005d8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	0e5b      	lsrs	r3, r3, #25
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	3301      	adds	r3, #1
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005d7e:	687b      	ldr	r3, [r7, #4]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	016e3600 	.word	0x016e3600
 8005d94:	00f42400 	.word	0x00f42400

08005d98 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005594:	2300      	movs	r3, #0
 8005596:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005598:	2300      	movs	r3, #0
 800559a:	74bb      	strb	r3, [r7, #18]
=======
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005da0:	2300      	movs	r3, #0
 8005da2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005da4:	2300      	movs	r3, #0
 8005da6:	74bb      	strb	r3, [r7, #18]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< HEAD
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 8098 	beq.w	80056da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055aa:	2300      	movs	r3, #0
 80055ac:	747b      	strb	r3, [r7, #17]
=======
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 8098 	beq.w	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005db6:	2300      	movs	r3, #0
 8005db8:	747b      	strb	r3, [r7, #17]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 80055ae:	4b43      	ldr	r3, [pc, #268]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10d      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ba:	4b40      	ldr	r3, [pc, #256]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055be:	4a3f      	ldr	r2, [pc, #252]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80055c6:	4b3d      	ldr	r3, [pc, #244]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ce:	60bb      	str	r3, [r7, #8]
 80055d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055d2:	2301      	movs	r3, #1
 80055d4:	747b      	strb	r3, [r7, #17]
=======
 8005dba:	4b43      	ldr	r3, [pc, #268]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10d      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dc6:	4b40      	ldr	r3, [pc, #256]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dca:	4a3f      	ldr	r2, [pc, #252]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dda:	60bb      	str	r3, [r7, #8]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dde:	2301      	movs	r3, #1
 8005de0:	747b      	strb	r3, [r7, #17]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< HEAD
 80055d6:	4b3a      	ldr	r3, [pc, #232]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a39      	ldr	r2, [pc, #228]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055e2:	f7fd f88b 	bl	80026fc <HAL_GetTick>
 80055e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055e8:	e009      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ea:	f7fd f887 	bl	80026fc <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d902      	bls.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	74fb      	strb	r3, [r7, #19]
        break;
 80055fc:	e005      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055fe:	4b30      	ldr	r3, [pc, #192]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0ef      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
=======
 8005de2:	4b3a      	ldr	r3, [pc, #232]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a39      	ldr	r2, [pc, #228]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dee:	f7fc fce7 	bl	80027c0 <HAL_GetTick>
 8005df2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005df4:	e009      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df6:	f7fc fce3 	bl	80027c0 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d902      	bls.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	74fb      	strb	r3, [r7, #19]
        break;
 8005e08:	e005      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e0a:	4b30      	ldr	r3, [pc, #192]	@ (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0ef      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }

    if(ret == HAL_OK)
<<<<<<< HEAD
 800560a:	7cfb      	ldrb	r3, [r7, #19]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d159      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005610:	4b2a      	ldr	r3, [pc, #168]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800561a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d01e      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	429a      	cmp	r2, r3
 800562a:	d019      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800562c:	4b23      	ldr	r3, [pc, #140]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005632:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005636:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005638:	4b20      	ldr	r3, [pc, #128]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800563a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563e:	4a1f      	ldr	r2, [pc, #124]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005648:	4b1c      	ldr	r3, [pc, #112]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800564e:	4a1b      	ldr	r2, [pc, #108]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005658:	4a18      	ldr	r2, [pc, #96]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
=======
 8005e16:	7cfb      	ldrb	r3, [r7, #19]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d159      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d01e      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d019      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e38:	4b23      	ldr	r3, [pc, #140]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e44:	4b20      	ldr	r3, [pc, #128]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e54:	4b1c      	ldr	r3, [pc, #112]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e64:	4a18      	ldr	r2, [pc, #96]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
<<<<<<< HEAD
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d016      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566a:	f7fd f847 	bl	80026fc <HAL_GetTick>
 800566e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005670:	e00b      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005672:	f7fd f843 	bl	80026fc <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005680:	4293      	cmp	r3, r2
 8005682:	d902      	bls.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	74fb      	strb	r3, [r7, #19]
            break;
 8005688:	e006      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800568a:	4b0c      	ldr	r3, [pc, #48]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800568c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0ec      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xe6>
=======
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d016      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e76:	f7fc fca3 	bl	80027c0 <HAL_GetTick>
 8005e7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e7c:	e00b      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e7e:	f7fc fc9f 	bl	80027c0 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d902      	bls.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	74fb      	strb	r3, [r7, #19]
            break;
 8005e94:	e006      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e96:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0ec      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
          }
        }
      }
      
      if(ret == HAL_OK)
<<<<<<< HEAD
 8005698:	7cfb      	ldrb	r3, [r7, #19]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10b      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800569e:	4b07      	ldr	r3, [pc, #28]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ac:	4903      	ldr	r1, [pc, #12]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80056b4:	e008      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
=======
 8005ea4:	7cfb      	ldrb	r3, [r7, #19]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10b      	bne.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eaa:	4b07      	ldr	r3, [pc, #28]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb8:	4903      	ldr	r1, [pc, #12]	@ (8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< HEAD
 80056b6:	7cfb      	ldrb	r3, [r7, #19]
 80056b8:	74bb      	strb	r3, [r7, #18]
 80056ba:	e005      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80056bc:	40021000 	.word	0x40021000
 80056c0:	40007000 	.word	0x40007000
=======
 8005ec2:	7cfb      	ldrb	r3, [r7, #19]
 8005ec4:	74bb      	strb	r3, [r7, #18]
 8005ec6:	e005      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	40007000 	.word	0x40007000
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80056c4:	7cfb      	ldrb	r3, [r7, #19]
 80056c6:	74bb      	strb	r3, [r7, #18]
=======
 8005ed0:	7cfb      	ldrb	r3, [r7, #19]
 8005ed2:	74bb      	strb	r3, [r7, #18]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 80056c8:	7c7b      	ldrb	r3, [r7, #17]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d105      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ce:	4ba7      	ldr	r3, [pc, #668]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d2:	4aa6      	ldr	r2, [pc, #664]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056d8:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 8005ed4:	7c7b      	ldrb	r3, [r7, #17]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d105      	bne.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eda:	4ba7      	ldr	r3, [pc, #668]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ede:	4aa6      	ldr	r2, [pc, #664]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ee4:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< HEAD
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x170>
=======
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x170>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< HEAD
 80056e6:	4ba1      	ldr	r3, [pc, #644]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ec:	f023 0203 	bic.w	r2, r3, #3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	499d      	ldr	r1, [pc, #628]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8005ef2:	4ba1      	ldr	r3, [pc, #644]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef8:	f023 0203 	bic.w	r2, r3, #3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	499d      	ldr	r1, [pc, #628]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< HEAD
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x192>
=======
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x192>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< HEAD
 8005708:	4b98      	ldr	r3, [pc, #608]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570e:	f023 020c 	bic.w	r2, r3, #12
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	4995      	ldr	r1, [pc, #596]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8005f14:	4b98      	ldr	r3, [pc, #608]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f1a:	f023 020c 	bic.w	r2, r3, #12
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	4995      	ldr	r1, [pc, #596]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< HEAD
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
=======
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0304 	and.w	r3, r3, #4
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< HEAD
 800572a:	4b90      	ldr	r3, [pc, #576]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005730:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	498c      	ldr	r1, [pc, #560]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8005f36:	4b90      	ldr	r3, [pc, #576]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	498c      	ldr	r1, [pc, #560]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< HEAD
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
=======
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00a      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< HEAD
 800574c:	4b87      	ldr	r3, [pc, #540]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005752:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	4984      	ldr	r1, [pc, #528]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8005f58:	4b87      	ldr	r3, [pc, #540]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	4984      	ldr	r1, [pc, #528]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< HEAD
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
=======
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0310 	and.w	r3, r3, #16
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00a      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< HEAD
 800576e:	4b7f      	ldr	r3, [pc, #508]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005774:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	497b      	ldr	r1, [pc, #492]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8005f7a:	4b7f      	ldr	r3, [pc, #508]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	497b      	ldr	r1, [pc, #492]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< HEAD
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0320 	and.w	r3, r3, #32
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
=======
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0320 	and.w	r3, r3, #32
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00a      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< HEAD
 8005790:	4b76      	ldr	r3, [pc, #472]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005796:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	4973      	ldr	r1, [pc, #460]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8005f9c:	4b76      	ldr	r3, [pc, #472]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	4973      	ldr	r1, [pc, #460]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< HEAD
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
=======
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< HEAD
 80057b2:	4b6e      	ldr	r3, [pc, #440]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	496a      	ldr	r1, [pc, #424]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8005fbe:	4b6e      	ldr	r3, [pc, #440]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	496a      	ldr	r1, [pc, #424]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< HEAD
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
=======
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00a      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< HEAD
 80057d4:	4b65      	ldr	r3, [pc, #404]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	4962      	ldr	r1, [pc, #392]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8005fe0:	4b65      	ldr	r3, [pc, #404]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	4962      	ldr	r1, [pc, #392]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< HEAD
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x280>
=======
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x280>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< HEAD
 80057f6:	4b5d      	ldr	r3, [pc, #372]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005804:	4959      	ldr	r1, [pc, #356]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8006002:	4b5d      	ldr	r3, [pc, #372]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006008:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006010:	4959      	ldr	r1, [pc, #356]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006012:	4313      	orrs	r3, r2
 8006014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
<<<<<<< HEAD
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
=======
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00a      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
<<<<<<< HEAD
 8005818:	4b54      	ldr	r3, [pc, #336]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800581a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800581e:	f023 0203 	bic.w	r2, r3, #3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005826:	4951      	ldr	r1, [pc, #324]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
=======
 8006024:	4b54      	ldr	r3, [pc, #336]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006026:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800602a:	f023 0203 	bic.w	r2, r3, #3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006032:	4951      	ldr	r1, [pc, #324]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006034:	4313      	orrs	r3, r2
 8006036:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
<<<<<<< HEAD
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
=======
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
<<<<<<< HEAD
 800583a:	4b4c      	ldr	r3, [pc, #304]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800583c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005840:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005848:	4948      	ldr	r1, [pc, #288]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8006046:	4b4c      	ldr	r3, [pc, #304]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800604c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006054:	4948      	ldr	r1, [pc, #288]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006056:	4313      	orrs	r3, r2
 8006058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
<<<<<<< HEAD
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005858:	2b00      	cmp	r3, #0
 800585a:	d015      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
=======
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006064:	2b00      	cmp	r3, #0
 8006066:	d015      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
<<<<<<< HEAD
 800585c:	4b43      	ldr	r3, [pc, #268]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005862:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586a:	4940      	ldr	r1, [pc, #256]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005876:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800587a:	d105      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800587c:	4b3b      	ldr	r3, [pc, #236]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	4a3a      	ldr	r2, [pc, #232]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005882:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005886:	60d3      	str	r3, [r2, #12]
=======
 8006068:	4b43      	ldr	r3, [pc, #268]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800606a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800606e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006076:	4940      	ldr	r1, [pc, #256]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006078:	4313      	orrs	r3, r2
 800607a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006082:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006086:	d105      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006088:	4b3b      	ldr	r3, [pc, #236]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	4a3a      	ldr	r2, [pc, #232]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800608e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006092:	60d3      	str	r3, [r2, #12]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
<<<<<<< HEAD
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005890:	2b00      	cmp	r3, #0
 8005892:	d015      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
=======
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800609c:	2b00      	cmp	r3, #0
 800609e:	d015      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x334>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
<<<<<<< HEAD
 8005894:	4b35      	ldr	r3, [pc, #212]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a2:	4932      	ldr	r1, [pc, #200]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058b2:	d105      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058b4:	4b2d      	ldr	r3, [pc, #180]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	4a2c      	ldr	r2, [pc, #176]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058be:	60d3      	str	r3, [r2, #12]
=======
 80060a0:	4b35      	ldr	r3, [pc, #212]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ae:	4932      	ldr	r1, [pc, #200]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060be:	d105      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060c0:	4b2d      	ldr	r3, [pc, #180]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060ca:	60d3      	str	r3, [r2, #12]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
<<<<<<< HEAD
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d015      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
=======
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d015      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x36c>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
<<<<<<< HEAD
 80058cc:	4b27      	ldr	r3, [pc, #156]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058da:	4924      	ldr	r1, [pc, #144]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058ea:	d105      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058ec:	4b1f      	ldr	r3, [pc, #124]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	4a1e      	ldr	r2, [pc, #120]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058f6:	60d3      	str	r3, [r2, #12]
=======
 80060d8:	4b27      	ldr	r3, [pc, #156]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e6:	4924      	ldr	r1, [pc, #144]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060f6:	d105      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060f8:	4b1f      	ldr	r3, [pc, #124]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	4a1e      	ldr	r2, [pc, #120]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006102:	60d3      	str	r3, [r2, #12]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< HEAD
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d015      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005904:	4b19      	ldr	r3, [pc, #100]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800590a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005912:	4916      	ldr	r1, [pc, #88]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005922:	d105      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005924:	4b11      	ldr	r3, [pc, #68]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	4a10      	ldr	r2, [pc, #64]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800592a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800592e:	60d3      	str	r3, [r2, #12]
=======
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d015      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006110:	4b19      	ldr	r3, [pc, #100]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006116:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800611e:	4916      	ldr	r1, [pc, #88]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006120:	4313      	orrs	r3, r2
 8006122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800612a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800612e:	d105      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006130:	4b11      	ldr	r3, [pc, #68]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	4a10      	ldr	r2, [pc, #64]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800613a:	60d3      	str	r3, [r2, #12]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< HEAD
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d019      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800593c:	4b0b      	ldr	r3, [pc, #44]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800593e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005942:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594a:	4908      	ldr	r1, [pc, #32]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800594c:	4313      	orrs	r3, r2
 800594e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005956:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800595a:	d109      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800595c:	4b03      	ldr	r3, [pc, #12]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	4a02      	ldr	r2, [pc, #8]	@ (800596c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005962:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005966:	60d3      	str	r3, [r2, #12]
 8005968:	e002      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800596a:	bf00      	nop
 800596c:	40021000 	.word	0x40021000
=======
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d019      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006148:	4b0b      	ldr	r3, [pc, #44]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800614e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006156:	4908      	ldr	r1, [pc, #32]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006158:	4313      	orrs	r3, r2
 800615a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006162:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006166:	d109      	bne.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006168:	4b03      	ldr	r3, [pc, #12]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	4a02      	ldr	r2, [pc, #8]	@ (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800616e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006172:	60d3      	str	r3, [r2, #12]
 8006174:	e002      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006176:	bf00      	nop
 8006178:	40021000 	.word	0x40021000
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
<<<<<<< HEAD
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d015      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
=======
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d015      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
<<<<<<< HEAD
 800597c:	4b29      	ldr	r3, [pc, #164]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005982:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598a:	4926      	ldr	r1, [pc, #152]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005996:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800599a:	d105      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800599c:	4b21      	ldr	r3, [pc, #132]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	4a20      	ldr	r2, [pc, #128]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059a6:	60d3      	str	r3, [r2, #12]
=======
 8006188:	4b29      	ldr	r3, [pc, #164]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800618a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800618e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006196:	4926      	ldr	r1, [pc, #152]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006198:	4313      	orrs	r3, r2
 800619a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061a6:	d105      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80061a8:	4b21      	ldr	r3, [pc, #132]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	4a20      	ldr	r2, [pc, #128]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061b2:	60d3      	str	r3, [r2, #12]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
<<<<<<< HEAD
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d015      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
=======
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d015      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x454>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
<<<<<<< HEAD
 80059b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ba:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059c2:	4918      	ldr	r1, [pc, #96]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d2:	d105      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059d4:	4b13      	ldr	r3, [pc, #76]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	4a12      	ldr	r2, [pc, #72]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059de:	60d3      	str	r3, [r2, #12]
=======
 80061c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ce:	4918      	ldr	r1, [pc, #96]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061de:	d105      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80061e0:	4b13      	ldr	r3, [pc, #76]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	4a12      	ldr	r2, [pc, #72]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061ea:	60d3      	str	r3, [r2, #12]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
<<<<<<< HEAD
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d015      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
=======
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d015      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x48c>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
<<<<<<< HEAD
 80059ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059fa:	490a      	ldr	r1, [pc, #40]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a0a:	d105      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a0c:	4b05      	ldr	r3, [pc, #20]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	4a04      	ldr	r2, [pc, #16]	@ (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a16:	60d3      	str	r3, [r2, #12]
=======
 80061f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006206:	490a      	ldr	r1, [pc, #40]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006212:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006216:	d105      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006218:	4b05      	ldr	r3, [pc, #20]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	4a04      	ldr	r2, [pc, #16]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800621e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006222:	60d3      	str	r3, [r2, #12]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }

#endif /* QUADSPI */

  return status;
<<<<<<< HEAD
 8005a18:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40021000 	.word	0x40021000

08005a28 <HAL_TIM_Base_Init>:
=======
 8006224:	7cbb      	ldrb	r3, [r7, #18]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	40021000 	.word	0x40021000

08006234 <HAL_TIM_Base_Init>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e049      	b.n	8005ace <HAL_TIM_Base_Init+0xa6>
=======
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e049      	b.n	80062da <HAL_TIM_Base_Init+0xa6>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f841 	bl	8005ad6 <HAL_TIM_Base_MspInit>
=======
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f841 	bl	80062e2 <HAL_TIM_Base_MspInit>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f000 fd7a 	bl	8006560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_TIM_Base_MspInit>:
=======
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3304      	adds	r3, #4
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f000 fd7a 	bl	8006d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_TIM_Base_MspInit>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
=======
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
	...

08005aec <HAL_TIM_Base_Start_IT>:
=======
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
	...

080062f8 <HAL_TIM_Base_Start_IT>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
=======
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d001      	beq.n	8005b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e054      	b.n	8005bae <HAL_TIM_Base_Start_IT+0xc2>
=======
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b01      	cmp	r3, #1
 800630a:	d001      	beq.n	8006310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e054      	b.n	80063ba <HAL_TIM_Base_Start_IT+0xc2>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a26      	ldr	r2, [pc, #152]	@ (8005bbc <HAL_TIM_Base_Start_IT+0xd0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d022      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b2e:	d01d      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a22      	ldr	r2, [pc, #136]	@ (8005bc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d018      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a21      	ldr	r2, [pc, #132]	@ (8005bc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d013      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00e      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1e      	ldr	r2, [pc, #120]	@ (8005bcc <HAL_TIM_Base_Start_IT+0xe0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d009      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8005bd0 <HAL_TIM_Base_Start_IT+0xe4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d004      	beq.n	8005b6c <HAL_TIM_Base_Start_IT+0x80>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d115      	bne.n	8005b98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	4b19      	ldr	r3, [pc, #100]	@ (8005bd8 <HAL_TIM_Base_Start_IT+0xec>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b06      	cmp	r3, #6
 8005b7c:	d015      	beq.n	8005baa <HAL_TIM_Base_Start_IT+0xbe>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b84:	d011      	beq.n	8005baa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0201 	orr.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b96:	e008      	b.n	8005baa <HAL_TIM_Base_Start_IT+0xbe>
=======
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68da      	ldr	r2, [r3, #12]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0201 	orr.w	r2, r2, #1
 8006326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a26      	ldr	r2, [pc, #152]	@ (80063c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d022      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x80>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800633a:	d01d      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x80>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a22      	ldr	r2, [pc, #136]	@ (80063cc <HAL_TIM_Base_Start_IT+0xd4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d018      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x80>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a21      	ldr	r2, [pc, #132]	@ (80063d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d013      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x80>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a1f      	ldr	r2, [pc, #124]	@ (80063d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00e      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x80>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a1e      	ldr	r2, [pc, #120]	@ (80063d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d009      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x80>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a1c      	ldr	r2, [pc, #112]	@ (80063dc <HAL_TIM_Base_Start_IT+0xe4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d004      	beq.n	8006378 <HAL_TIM_Base_Start_IT+0x80>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a1b      	ldr	r2, [pc, #108]	@ (80063e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d115      	bne.n	80063a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	4b19      	ldr	r3, [pc, #100]	@ (80063e4 <HAL_TIM_Base_Start_IT+0xec>)
 8006380:	4013      	ands	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b06      	cmp	r3, #6
 8006388:	d015      	beq.n	80063b6 <HAL_TIM_Base_Start_IT+0xbe>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006390:	d011      	beq.n	80063b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0201 	orr.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a2:	e008      	b.n	80063b6 <HAL_TIM_Base_Start_IT+0xbe>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	e000      	b.n	8005bac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005baa:	bf00      	nop
=======
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	e000      	b.n	80063b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b6:	bf00      	nop
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40000400 	.word	0x40000400
 8005bc4:	40000800 	.word	0x40000800
 8005bc8:	40000c00 	.word	0x40000c00
 8005bcc:	40013400 	.word	0x40013400
 8005bd0:	40014000 	.word	0x40014000
 8005bd4:	40015000 	.word	0x40015000
 8005bd8:	00010007 	.word	0x00010007

08005bdc <HAL_TIM_PWM_Init>:
=======
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	40012c00 	.word	0x40012c00
 80063cc:	40000400 	.word	0x40000400
 80063d0:	40000800 	.word	0x40000800
 80063d4:	40000c00 	.word	0x40000c00
 80063d8:	40013400 	.word	0x40013400
 80063dc:	40014000 	.word	0x40014000
 80063e0:	40015000 	.word	0x40015000
 80063e4:	00010007 	.word	0x00010007

080063e8 <HAL_TIM_PWM_Init>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e049      	b.n	8005c82 <HAL_TIM_PWM_Init+0xa6>
=======
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e049      	b.n	800648e <HAL_TIM_PWM_Init+0xa6>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d106      	bne.n	8005c08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d106      	bne.n	8006414 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fc f842 	bl	8001c8c <HAL_TIM_PWM_MspInit>
=======
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7fb fc3c 	bl	8001c8c <HAL_TIM_PWM_MspInit>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	3304      	adds	r3, #4
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	f000 fca0 	bl	8006560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <HAL_TIM_PWM_Start>:
=======
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3304      	adds	r3, #4
 8006424:	4619      	mov	r1, r3
 8006426:	4610      	mov	r0, r2
 8006428:	f000 fca0 	bl	8006d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <HAL_TIM_PWM_Start>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
=======
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d109      	bne.n	8005cb0 <HAL_TIM_PWM_Start+0x24>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	bf14      	ite	ne
 8005ca8:	2301      	movne	r3, #1
 8005caa:	2300      	moveq	r3, #0
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	e03c      	b.n	8005d2a <HAL_TIM_PWM_Start+0x9e>
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d109      	bne.n	8005cca <HAL_TIM_PWM_Start+0x3e>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	bf14      	ite	ne
 8005cc2:	2301      	movne	r3, #1
 8005cc4:	2300      	moveq	r3, #0
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	e02f      	b.n	8005d2a <HAL_TIM_PWM_Start+0x9e>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d109      	bne.n	8005ce4 <HAL_TIM_PWM_Start+0x58>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	bf14      	ite	ne
 8005cdc:	2301      	movne	r3, #1
 8005cde:	2300      	moveq	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	e022      	b.n	8005d2a <HAL_TIM_PWM_Start+0x9e>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	2b0c      	cmp	r3, #12
 8005ce8:	d109      	bne.n	8005cfe <HAL_TIM_PWM_Start+0x72>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	bf14      	ite	ne
 8005cf6:	2301      	movne	r3, #1
 8005cf8:	2300      	moveq	r3, #0
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	e015      	b.n	8005d2a <HAL_TIM_PWM_Start+0x9e>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d109      	bne.n	8005d18 <HAL_TIM_PWM_Start+0x8c>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	bf14      	ite	ne
 8005d10:	2301      	movne	r3, #1
 8005d12:	2300      	moveq	r3, #0
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	e008      	b.n	8005d2a <HAL_TIM_PWM_Start+0x9e>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	bf14      	ite	ne
 8005d24:	2301      	movne	r3, #1
 8005d26:	2300      	moveq	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e0a6      	b.n	8005e80 <HAL_TIM_PWM_Start+0x1f4>
=======
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d109      	bne.n	80064bc <HAL_TIM_PWM_Start+0x24>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	bf14      	ite	ne
 80064b4:	2301      	movne	r3, #1
 80064b6:	2300      	moveq	r3, #0
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	e03c      	b.n	8006536 <HAL_TIM_PWM_Start+0x9e>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d109      	bne.n	80064d6 <HAL_TIM_PWM_Start+0x3e>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	bf14      	ite	ne
 80064ce:	2301      	movne	r3, #1
 80064d0:	2300      	moveq	r3, #0
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	e02f      	b.n	8006536 <HAL_TIM_PWM_Start+0x9e>
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b08      	cmp	r3, #8
 80064da:	d109      	bne.n	80064f0 <HAL_TIM_PWM_Start+0x58>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	bf14      	ite	ne
 80064e8:	2301      	movne	r3, #1
 80064ea:	2300      	moveq	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	e022      	b.n	8006536 <HAL_TIM_PWM_Start+0x9e>
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b0c      	cmp	r3, #12
 80064f4:	d109      	bne.n	800650a <HAL_TIM_PWM_Start+0x72>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b01      	cmp	r3, #1
 8006500:	bf14      	ite	ne
 8006502:	2301      	movne	r3, #1
 8006504:	2300      	moveq	r3, #0
 8006506:	b2db      	uxtb	r3, r3
 8006508:	e015      	b.n	8006536 <HAL_TIM_PWM_Start+0x9e>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b10      	cmp	r3, #16
 800650e:	d109      	bne.n	8006524 <HAL_TIM_PWM_Start+0x8c>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b01      	cmp	r3, #1
 800651a:	bf14      	ite	ne
 800651c:	2301      	movne	r3, #1
 800651e:	2300      	moveq	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	e008      	b.n	8006536 <HAL_TIM_PWM_Start+0x9e>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b01      	cmp	r3, #1
 800652e:	bf14      	ite	ne
 8006530:	2301      	movne	r3, #1
 8006532:	2300      	moveq	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e0a6      	b.n	800668c <HAL_TIM_PWM_Start+0x1f4>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <HAL_TIM_PWM_Start+0xb6>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d40:	e023      	b.n	8005d8a <HAL_TIM_PWM_Start+0xfe>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d104      	bne.n	8005d52 <HAL_TIM_PWM_Start+0xc6>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d50:	e01b      	b.n	8005d8a <HAL_TIM_PWM_Start+0xfe>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d104      	bne.n	8005d62 <HAL_TIM_PWM_Start+0xd6>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d60:	e013      	b.n	8005d8a <HAL_TIM_PWM_Start+0xfe>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b0c      	cmp	r3, #12
 8005d66:	d104      	bne.n	8005d72 <HAL_TIM_PWM_Start+0xe6>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d70:	e00b      	b.n	8005d8a <HAL_TIM_PWM_Start+0xfe>
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b10      	cmp	r3, #16
 8005d76:	d104      	bne.n	8005d82 <HAL_TIM_PWM_Start+0xf6>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d80:	e003      	b.n	8005d8a <HAL_TIM_PWM_Start+0xfe>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2202      	movs	r2, #2
 8005d86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f001 f82a 	bl	8006dec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a3a      	ldr	r2, [pc, #232]	@ (8005e88 <HAL_TIM_PWM_Start+0x1fc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d018      	beq.n	8005dd4 <HAL_TIM_PWM_Start+0x148>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a39      	ldr	r2, [pc, #228]	@ (8005e8c <HAL_TIM_PWM_Start+0x200>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d013      	beq.n	8005dd4 <HAL_TIM_PWM_Start+0x148>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a37      	ldr	r2, [pc, #220]	@ (8005e90 <HAL_TIM_PWM_Start+0x204>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00e      	beq.n	8005dd4 <HAL_TIM_PWM_Start+0x148>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a36      	ldr	r2, [pc, #216]	@ (8005e94 <HAL_TIM_PWM_Start+0x208>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d009      	beq.n	8005dd4 <HAL_TIM_PWM_Start+0x148>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a34      	ldr	r2, [pc, #208]	@ (8005e98 <HAL_TIM_PWM_Start+0x20c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d004      	beq.n	8005dd4 <HAL_TIM_PWM_Start+0x148>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a33      	ldr	r2, [pc, #204]	@ (8005e9c <HAL_TIM_PWM_Start+0x210>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d101      	bne.n	8005dd8 <HAL_TIM_PWM_Start+0x14c>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <HAL_TIM_PWM_Start+0x14e>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d007      	beq.n	8005dee <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005dec:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d104      	bne.n	800654e <HAL_TIM_PWM_Start+0xb6>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800654c:	e023      	b.n	8006596 <HAL_TIM_PWM_Start+0xfe>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b04      	cmp	r3, #4
 8006552:	d104      	bne.n	800655e <HAL_TIM_PWM_Start+0xc6>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800655c:	e01b      	b.n	8006596 <HAL_TIM_PWM_Start+0xfe>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b08      	cmp	r3, #8
 8006562:	d104      	bne.n	800656e <HAL_TIM_PWM_Start+0xd6>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800656c:	e013      	b.n	8006596 <HAL_TIM_PWM_Start+0xfe>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b0c      	cmp	r3, #12
 8006572:	d104      	bne.n	800657e <HAL_TIM_PWM_Start+0xe6>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800657c:	e00b      	b.n	8006596 <HAL_TIM_PWM_Start+0xfe>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b10      	cmp	r3, #16
 8006582:	d104      	bne.n	800658e <HAL_TIM_PWM_Start+0xf6>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800658c:	e003      	b.n	8006596 <HAL_TIM_PWM_Start+0xfe>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2201      	movs	r2, #1
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	4618      	mov	r0, r3
 80065a0:	f001 f82a 	bl	80075f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a3a      	ldr	r2, [pc, #232]	@ (8006694 <HAL_TIM_PWM_Start+0x1fc>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d018      	beq.n	80065e0 <HAL_TIM_PWM_Start+0x148>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a39      	ldr	r2, [pc, #228]	@ (8006698 <HAL_TIM_PWM_Start+0x200>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d013      	beq.n	80065e0 <HAL_TIM_PWM_Start+0x148>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a37      	ldr	r2, [pc, #220]	@ (800669c <HAL_TIM_PWM_Start+0x204>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00e      	beq.n	80065e0 <HAL_TIM_PWM_Start+0x148>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a36      	ldr	r2, [pc, #216]	@ (80066a0 <HAL_TIM_PWM_Start+0x208>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d009      	beq.n	80065e0 <HAL_TIM_PWM_Start+0x148>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a34      	ldr	r2, [pc, #208]	@ (80066a4 <HAL_TIM_PWM_Start+0x20c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d004      	beq.n	80065e0 <HAL_TIM_PWM_Start+0x148>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a33      	ldr	r2, [pc, #204]	@ (80066a8 <HAL_TIM_PWM_Start+0x210>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d101      	bne.n	80065e4 <HAL_TIM_PWM_Start+0x14c>
 80065e0:	2301      	movs	r3, #1
 80065e2:	e000      	b.n	80065e6 <HAL_TIM_PWM_Start+0x14e>
 80065e4:	2300      	movs	r3, #0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d007      	beq.n	80065fa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065f8:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a25      	ldr	r2, [pc, #148]	@ (8005e88 <HAL_TIM_PWM_Start+0x1fc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d022      	beq.n	8005e3e <HAL_TIM_PWM_Start+0x1b2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e00:	d01d      	beq.n	8005e3e <HAL_TIM_PWM_Start+0x1b2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a26      	ldr	r2, [pc, #152]	@ (8005ea0 <HAL_TIM_PWM_Start+0x214>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d018      	beq.n	8005e3e <HAL_TIM_PWM_Start+0x1b2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a24      	ldr	r2, [pc, #144]	@ (8005ea4 <HAL_TIM_PWM_Start+0x218>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d013      	beq.n	8005e3e <HAL_TIM_PWM_Start+0x1b2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a23      	ldr	r2, [pc, #140]	@ (8005ea8 <HAL_TIM_PWM_Start+0x21c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d00e      	beq.n	8005e3e <HAL_TIM_PWM_Start+0x1b2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a19      	ldr	r2, [pc, #100]	@ (8005e8c <HAL_TIM_PWM_Start+0x200>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d009      	beq.n	8005e3e <HAL_TIM_PWM_Start+0x1b2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a18      	ldr	r2, [pc, #96]	@ (8005e90 <HAL_TIM_PWM_Start+0x204>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d004      	beq.n	8005e3e <HAL_TIM_PWM_Start+0x1b2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a18      	ldr	r2, [pc, #96]	@ (8005e9c <HAL_TIM_PWM_Start+0x210>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d115      	bne.n	8005e6a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	4b19      	ldr	r3, [pc, #100]	@ (8005eac <HAL_TIM_PWM_Start+0x220>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b06      	cmp	r3, #6
 8005e4e:	d015      	beq.n	8005e7c <HAL_TIM_PWM_Start+0x1f0>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e56:	d011      	beq.n	8005e7c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0201 	orr.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e68:	e008      	b.n	8005e7c <HAL_TIM_PWM_Start+0x1f0>
=======
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a25      	ldr	r2, [pc, #148]	@ (8006694 <HAL_TIM_PWM_Start+0x1fc>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d022      	beq.n	800664a <HAL_TIM_PWM_Start+0x1b2>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800660c:	d01d      	beq.n	800664a <HAL_TIM_PWM_Start+0x1b2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a26      	ldr	r2, [pc, #152]	@ (80066ac <HAL_TIM_PWM_Start+0x214>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d018      	beq.n	800664a <HAL_TIM_PWM_Start+0x1b2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a24      	ldr	r2, [pc, #144]	@ (80066b0 <HAL_TIM_PWM_Start+0x218>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d013      	beq.n	800664a <HAL_TIM_PWM_Start+0x1b2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a23      	ldr	r2, [pc, #140]	@ (80066b4 <HAL_TIM_PWM_Start+0x21c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00e      	beq.n	800664a <HAL_TIM_PWM_Start+0x1b2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a19      	ldr	r2, [pc, #100]	@ (8006698 <HAL_TIM_PWM_Start+0x200>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d009      	beq.n	800664a <HAL_TIM_PWM_Start+0x1b2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a18      	ldr	r2, [pc, #96]	@ (800669c <HAL_TIM_PWM_Start+0x204>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d004      	beq.n	800664a <HAL_TIM_PWM_Start+0x1b2>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a18      	ldr	r2, [pc, #96]	@ (80066a8 <HAL_TIM_PWM_Start+0x210>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d115      	bne.n	8006676 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	4b19      	ldr	r3, [pc, #100]	@ (80066b8 <HAL_TIM_PWM_Start+0x220>)
 8006652:	4013      	ands	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2b06      	cmp	r3, #6
 800665a:	d015      	beq.n	8006688 <HAL_TIM_PWM_Start+0x1f0>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006662:	d011      	beq.n	8006688 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0201 	orr.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006674:	e008      	b.n	8006688 <HAL_TIM_PWM_Start+0x1f0>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f042 0201 	orr.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	e000      	b.n	8005e7e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7c:	bf00      	nop
=======
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f042 0201 	orr.w	r2, r2, #1
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	e000      	b.n	800668a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006688:	bf00      	nop
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40012c00 	.word	0x40012c00
 8005e8c:	40013400 	.word	0x40013400
 8005e90:	40014000 	.word	0x40014000
 8005e94:	40014400 	.word	0x40014400
 8005e98:	40014800 	.word	0x40014800
 8005e9c:	40015000 	.word	0x40015000
 8005ea0:	40000400 	.word	0x40000400
 8005ea4:	40000800 	.word	0x40000800
 8005ea8:	40000c00 	.word	0x40000c00
 8005eac:	00010007 	.word	0x00010007

08005eb0 <HAL_TIM_PWM_Stop>:
=======
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	40012c00 	.word	0x40012c00
 8006698:	40013400 	.word	0x40013400
 800669c:	40014000 	.word	0x40014000
 80066a0:	40014400 	.word	0x40014400
 80066a4:	40014800 	.word	0x40014800
 80066a8:	40015000 	.word	0x40015000
 80066ac:	40000400 	.word	0x40000400
 80066b0:	40000800 	.word	0x40000800
 80066b4:	40000c00 	.word	0x40000c00
 80066b8:	00010007 	.word	0x00010007

080066bc <HAL_TIM_PWM_Stop>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
=======
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
<<<<<<< HEAD
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 ff92 	bl	8006dec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a40      	ldr	r2, [pc, #256]	@ (8005fd0 <HAL_TIM_PWM_Stop+0x120>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d018      	beq.n	8005f04 <HAL_TIM_PWM_Stop+0x54>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a3f      	ldr	r2, [pc, #252]	@ (8005fd4 <HAL_TIM_PWM_Stop+0x124>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d013      	beq.n	8005f04 <HAL_TIM_PWM_Stop+0x54>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a3d      	ldr	r2, [pc, #244]	@ (8005fd8 <HAL_TIM_PWM_Stop+0x128>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00e      	beq.n	8005f04 <HAL_TIM_PWM_Stop+0x54>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a3c      	ldr	r2, [pc, #240]	@ (8005fdc <HAL_TIM_PWM_Stop+0x12c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d009      	beq.n	8005f04 <HAL_TIM_PWM_Stop+0x54>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a3a      	ldr	r2, [pc, #232]	@ (8005fe0 <HAL_TIM_PWM_Stop+0x130>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d004      	beq.n	8005f04 <HAL_TIM_PWM_Stop+0x54>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a39      	ldr	r2, [pc, #228]	@ (8005fe4 <HAL_TIM_PWM_Stop+0x134>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d101      	bne.n	8005f08 <HAL_TIM_PWM_Stop+0x58>
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <HAL_TIM_PWM_Stop+0x5a>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d017      	beq.n	8005f3e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6a1a      	ldr	r2, [r3, #32]
 8005f14:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f18:	4013      	ands	r3, r2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10f      	bne.n	8005f3e <HAL_TIM_PWM_Stop+0x8e>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6a1a      	ldr	r2, [r3, #32]
 8005f24:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d107      	bne.n	8005f3e <HAL_TIM_PWM_Stop+0x8e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f3c:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2200      	movs	r2, #0
 80066cc:	6839      	ldr	r1, [r7, #0]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 ff92 	bl	80075f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a40      	ldr	r2, [pc, #256]	@ (80067dc <HAL_TIM_PWM_Stop+0x120>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d018      	beq.n	8006710 <HAL_TIM_PWM_Stop+0x54>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a3f      	ldr	r2, [pc, #252]	@ (80067e0 <HAL_TIM_PWM_Stop+0x124>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d013      	beq.n	8006710 <HAL_TIM_PWM_Stop+0x54>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a3d      	ldr	r2, [pc, #244]	@ (80067e4 <HAL_TIM_PWM_Stop+0x128>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d00e      	beq.n	8006710 <HAL_TIM_PWM_Stop+0x54>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a3c      	ldr	r2, [pc, #240]	@ (80067e8 <HAL_TIM_PWM_Stop+0x12c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d009      	beq.n	8006710 <HAL_TIM_PWM_Stop+0x54>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a3a      	ldr	r2, [pc, #232]	@ (80067ec <HAL_TIM_PWM_Stop+0x130>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d004      	beq.n	8006710 <HAL_TIM_PWM_Stop+0x54>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a39      	ldr	r2, [pc, #228]	@ (80067f0 <HAL_TIM_PWM_Stop+0x134>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d101      	bne.n	8006714 <HAL_TIM_PWM_Stop+0x58>
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <HAL_TIM_PWM_Stop+0x5a>
 8006714:	2300      	movs	r3, #0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d017      	beq.n	800674a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6a1a      	ldr	r2, [r3, #32]
 8006720:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006724:	4013      	ands	r3, r2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10f      	bne.n	800674a <HAL_TIM_PWM_Stop+0x8e>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6a1a      	ldr	r2, [r3, #32]
 8006730:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006734:	4013      	ands	r3, r2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d107      	bne.n	800674a <HAL_TIM_PWM_Stop+0x8e>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006748:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
<<<<<<< HEAD
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6a1a      	ldr	r2, [r3, #32]
 8005f44:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f48:	4013      	ands	r3, r2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10f      	bne.n	8005f6e <HAL_TIM_PWM_Stop+0xbe>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6a1a      	ldr	r2, [r3, #32]
 8005f54:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005f58:	4013      	ands	r3, r2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d107      	bne.n	8005f6e <HAL_TIM_PWM_Stop+0xbe>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0201 	bic.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d104      	bne.n	8005f7e <HAL_TIM_PWM_Stop+0xce>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f7c:	e023      	b.n	8005fc6 <HAL_TIM_PWM_Stop+0x116>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d104      	bne.n	8005f8e <HAL_TIM_PWM_Stop+0xde>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f8c:	e01b      	b.n	8005fc6 <HAL_TIM_PWM_Stop+0x116>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d104      	bne.n	8005f9e <HAL_TIM_PWM_Stop+0xee>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f9c:	e013      	b.n	8005fc6 <HAL_TIM_PWM_Stop+0x116>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b0c      	cmp	r3, #12
 8005fa2:	d104      	bne.n	8005fae <HAL_TIM_PWM_Stop+0xfe>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fac:	e00b      	b.n	8005fc6 <HAL_TIM_PWM_Stop+0x116>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b10      	cmp	r3, #16
 8005fb2:	d104      	bne.n	8005fbe <HAL_TIM_PWM_Stop+0x10e>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fbc:	e003      	b.n	8005fc6 <HAL_TIM_PWM_Stop+0x116>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40012c00 	.word	0x40012c00
 8005fd4:	40013400 	.word	0x40013400
 8005fd8:	40014000 	.word	0x40014000
 8005fdc:	40014400 	.word	0x40014400
 8005fe0:	40014800 	.word	0x40014800
 8005fe4:	40015000 	.word	0x40015000

08005fe8 <HAL_TIM_IRQHandler>:
=======
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	6a1a      	ldr	r2, [r3, #32]
 8006750:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006754:	4013      	ands	r3, r2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10f      	bne.n	800677a <HAL_TIM_PWM_Stop+0xbe>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6a1a      	ldr	r2, [r3, #32]
 8006760:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006764:	4013      	ands	r3, r2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d107      	bne.n	800677a <HAL_TIM_PWM_Stop+0xbe>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0201 	bic.w	r2, r2, #1
 8006778:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d104      	bne.n	800678a <HAL_TIM_PWM_Stop+0xce>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006788:	e023      	b.n	80067d2 <HAL_TIM_PWM_Stop+0x116>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b04      	cmp	r3, #4
 800678e:	d104      	bne.n	800679a <HAL_TIM_PWM_Stop+0xde>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006798:	e01b      	b.n	80067d2 <HAL_TIM_PWM_Stop+0x116>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b08      	cmp	r3, #8
 800679e:	d104      	bne.n	80067aa <HAL_TIM_PWM_Stop+0xee>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067a8:	e013      	b.n	80067d2 <HAL_TIM_PWM_Stop+0x116>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b0c      	cmp	r3, #12
 80067ae:	d104      	bne.n	80067ba <HAL_TIM_PWM_Stop+0xfe>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067b8:	e00b      	b.n	80067d2 <HAL_TIM_PWM_Stop+0x116>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b10      	cmp	r3, #16
 80067be:	d104      	bne.n	80067ca <HAL_TIM_PWM_Stop+0x10e>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067c8:	e003      	b.n	80067d2 <HAL_TIM_PWM_Stop+0x116>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	40012c00 	.word	0x40012c00
 80067e0:	40013400 	.word	0x40013400
 80067e4:	40014000 	.word	0x40014000
 80067e8:	40014400 	.word	0x40014400
 80067ec:	40014800 	.word	0x40014800
 80067f0:	40015000 	.word	0x40015000

080067f4 <HAL_TIM_IRQHandler>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d122      	bne.n	8006044 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b02      	cmp	r3, #2
 800600a:	d11b      	bne.n	8006044 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0202 	mvn.w	r2, #2
 8006014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_TIM_IRQHandler+0x4a>
=======
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b02      	cmp	r3, #2
 8006808:	d122      	bne.n	8006850 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b02      	cmp	r3, #2
 8006816:	d11b      	bne.n	8006850 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f06f 0202 	mvn.w	r2, #2
 8006820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	f003 0303 	and.w	r3, r3, #3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <HAL_TIM_IRQHandler+0x4a>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fa7a 	bl	8006524 <HAL_TIM_IC_CaptureCallback>
 8006030:	e005      	b.n	800603e <HAL_TIM_IRQHandler+0x56>
=======
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa7a 	bl	8006d30 <HAL_TIM_IC_CaptureCallback>
 800683c:	e005      	b.n	800684a <HAL_TIM_IRQHandler+0x56>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fa6c 	bl	8006510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fa7d 	bl	8006538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	771a      	strb	r2, [r3, #28]
=======
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fa6c 	bl	8006d1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fa7d 	bl	8006d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	771a      	strb	r2, [r3, #28]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	2b04      	cmp	r3, #4
 8006050:	d122      	bne.n	8006098 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b04      	cmp	r3, #4
 800605e:	d11b      	bne.n	8006098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 0204 	mvn.w	r2, #4
 8006068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2202      	movs	r2, #2
 800606e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_TIM_IRQHandler+0x9e>
=======
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b04      	cmp	r3, #4
 800685c:	d122      	bne.n	80068a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b04      	cmp	r3, #4
 800686a:	d11b      	bne.n	80068a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f06f 0204 	mvn.w	r2, #4
 8006874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2202      	movs	r2, #2
 800687a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fa50 	bl	8006524 <HAL_TIM_IC_CaptureCallback>
 8006084:	e005      	b.n	8006092 <HAL_TIM_IRQHandler+0xaa>
=======
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fa50 	bl	8006d30 <HAL_TIM_IC_CaptureCallback>
 8006890:	e005      	b.n	800689e <HAL_TIM_IRQHandler+0xaa>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fa42 	bl	8006510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fa53 	bl	8006538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	771a      	strb	r2, [r3, #28]
=======
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fa42 	bl	8006d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fa53 	bl	8006d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	771a      	strb	r2, [r3, #28]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0308 	and.w	r3, r3, #8
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d122      	bne.n	80060ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d11b      	bne.n	80060ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0208 	mvn.w	r2, #8
 80060bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2204      	movs	r2, #4
 80060c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_TIM_IRQHandler+0xf2>
=======
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b08      	cmp	r3, #8
 80068b0:	d122      	bne.n	80068f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f003 0308 	and.w	r3, r3, #8
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d11b      	bne.n	80068f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f06f 0208 	mvn.w	r2, #8
 80068c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2204      	movs	r2, #4
 80068ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	f003 0303 	and.w	r3, r3, #3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fa26 	bl	8006524 <HAL_TIM_IC_CaptureCallback>
 80060d8:	e005      	b.n	80060e6 <HAL_TIM_IRQHandler+0xfe>
=======
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fa26 	bl	8006d30 <HAL_TIM_IC_CaptureCallback>
 80068e4:	e005      	b.n	80068f2 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fa18 	bl	8006510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fa29 	bl	8006538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]
=======
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fa18 	bl	8006d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fa29 	bl	8006d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	771a      	strb	r2, [r3, #28]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0310 	and.w	r3, r3, #16
 80060f6:	2b10      	cmp	r3, #16
 80060f8:	d122      	bne.n	8006140 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	2b10      	cmp	r3, #16
 8006106:	d11b      	bne.n	8006140 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0210 	mvn.w	r2, #16
 8006110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2208      	movs	r2, #8
 8006116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_TIM_IRQHandler+0x146>
=======
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	f003 0310 	and.w	r3, r3, #16
 8006902:	2b10      	cmp	r3, #16
 8006904:	d122      	bne.n	800694c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	f003 0310 	and.w	r3, r3, #16
 8006910:	2b10      	cmp	r3, #16
 8006912:	d11b      	bne.n	800694c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f06f 0210 	mvn.w	r2, #16
 800691c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2208      	movs	r2, #8
 8006922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_TIM_IRQHandler+0x146>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f9fc 	bl	8006524 <HAL_TIM_IC_CaptureCallback>
 800612c:	e005      	b.n	800613a <HAL_TIM_IRQHandler+0x152>
=======
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f9fc 	bl	8006d30 <HAL_TIM_IC_CaptureCallback>
 8006938:	e005      	b.n	8006946 <HAL_TIM_IRQHandler+0x152>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f9ee 	bl	8006510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f9ff 	bl	8006538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	771a      	strb	r2, [r3, #28]
=======
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f9ee 	bl	8006d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f9ff 	bl	8006d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	771a      	strb	r2, [r3, #28]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b01      	cmp	r3, #1
 800614c:	d10e      	bne.n	800616c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b01      	cmp	r3, #1
 800615a:	d107      	bne.n	800616c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0201 	mvn.w	r2, #1
 8006164:	611a      	str	r2, [r3, #16]
=======
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b01      	cmp	r3, #1
 8006958:	d10e      	bne.n	8006978 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b01      	cmp	r3, #1
 8006966:	d107      	bne.n	8006978 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f06f 0201 	mvn.w	r2, #1
 8006970:	611a      	str	r2, [r3, #16]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fb fab8 	bl	80016dc <HAL_TIM_PeriodElapsedCallback>
=======
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fa feb2 	bl	80016dc <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006176:	2b80      	cmp	r3, #128	@ 0x80
 8006178:	d10e      	bne.n	8006198 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006184:	2b80      	cmp	r3, #128	@ 0x80
 8006186:	d107      	bne.n	8006198 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006190:	611a      	str	r2, [r3, #16]
=======
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006982:	2b80      	cmp	r3, #128	@ 0x80
 8006984:	d10e      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006990:	2b80      	cmp	r3, #128	@ 0x80
 8006992:	d107      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800699c:	611a      	str	r2, [r3, #16]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f001 f970 	bl	8007478 <HAL_TIMEx_BreakCallback>
=======
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f001 f970 	bl	8007c84 <HAL_TIMEx_BreakCallback>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
<<<<<<< HEAD
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061a6:	d10e      	bne.n	80061c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b2:	2b80      	cmp	r3, #128	@ 0x80
 80061b4:	d107      	bne.n	80061c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80061be:	611a      	str	r2, [r3, #16]
=======
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069b2:	d10e      	bne.n	80069d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069be:	2b80      	cmp	r3, #128	@ 0x80
 80069c0:	d107      	bne.n	80069d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80069ca:	611a      	str	r2, [r3, #16]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< HEAD
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 f963 	bl	800748c <HAL_TIMEx_Break2Callback>
=======
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f001 f963 	bl	8007c98 <HAL_TIMEx_Break2Callback>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d0:	2b40      	cmp	r3, #64	@ 0x40
 80061d2:	d10e      	bne.n	80061f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061de:	2b40      	cmp	r3, #64	@ 0x40
 80061e0:	d107      	bne.n	80061f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061ea:	611a      	str	r2, [r3, #16]
=======
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069dc:	2b40      	cmp	r3, #64	@ 0x40
 80069de:	d10e      	bne.n	80069fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ea:	2b40      	cmp	r3, #64	@ 0x40
 80069ec:	d107      	bne.n	80069fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80069f6:	611a      	str	r2, [r3, #16]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f9ad 	bl	800654c <HAL_TIM_TriggerCallback>
=======
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f9ad 	bl	8006d58 <HAL_TIM_TriggerCallback>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	d10e      	bne.n	800621e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b20      	cmp	r3, #32
 800620c:	d107      	bne.n	800621e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f06f 0220 	mvn.w	r2, #32
 8006216:	611a      	str	r2, [r3, #16]
=======
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f003 0320 	and.w	r3, r3, #32
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d10e      	bne.n	8006a2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b20      	cmp	r3, #32
 8006a18:	d107      	bne.n	8006a2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f06f 0220 	mvn.w	r2, #32
 8006a22:	611a      	str	r2, [r3, #16]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f001 f923 	bl	8007464 <HAL_TIMEx_CommutCallback>
=======
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 f923 	bl	8007c70 <HAL_TIMEx_CommutCallback>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
<<<<<<< HEAD
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006228:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800622c:	d10f      	bne.n	800624e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006238:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800623c:	d107      	bne.n	800624e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006246:	611a      	str	r2, [r3, #16]
=======
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a38:	d10f      	bne.n	8006a5a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a48:	d107      	bne.n	8006a5a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006a52:	611a      	str	r2, [r3, #16]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
<<<<<<< HEAD
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 f929 	bl	80074a0 <HAL_TIMEx_EncoderIndexCallback>
=======
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 f929 	bl	8007cac <HAL_TIMEx_EncoderIndexCallback>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
<<<<<<< HEAD
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006258:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800625c:	d10f      	bne.n	800627e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006268:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800626c:	d107      	bne.n	800627e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006276:	611a      	str	r2, [r3, #16]
=======
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a68:	d10f      	bne.n	8006a8a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a78:	d107      	bne.n	8006a8a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006a82:	611a      	str	r2, [r3, #16]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
<<<<<<< HEAD
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 f91b 	bl	80074b4 <HAL_TIMEx_DirectionChangeCallback>
=======
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 f91b 	bl	8007cc0 <HAL_TIMEx_DirectionChangeCallback>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
<<<<<<< HEAD
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006288:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800628c:	d10f      	bne.n	80062ae <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006298:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800629c:	d107      	bne.n	80062ae <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80062a6:	611a      	str	r2, [r3, #16]
=======
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a98:	d10f      	bne.n	8006aba <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006aa8:	d107      	bne.n	8006aba <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006ab2:	611a      	str	r2, [r3, #16]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
<<<<<<< HEAD
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f001 f90d 	bl	80074c8 <HAL_TIMEx_IndexErrorCallback>
=======
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 f90d 	bl	8007cd4 <HAL_TIMEx_IndexErrorCallback>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
<<<<<<< HEAD
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062bc:	d10f      	bne.n	80062de <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062cc:	d107      	bne.n	80062de <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80062d6:	611a      	str	r2, [r3, #16]
=======
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ac4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ac8:	d10f      	bne.n	8006aea <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ad4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ad8:	d107      	bne.n	8006aea <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006ae2:	611a      	str	r2, [r3, #16]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
<<<<<<< HEAD
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 f8ff 	bl	80074dc <HAL_TIMEx_TransitionErrorCallback>
=======
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 f8ff 	bl	8007ce8 <HAL_TIMEx_TransitionErrorCallback>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 80062de:	bf00      	nop
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <HAL_TIM_PWM_ConfigChannel>:
=======
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	75fb      	strb	r3, [r7, #23]
=======
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	75fb      	strb	r3, [r7, #23]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006302:	2302      	movs	r3, #2
 8006304:	e0ff      	b.n	8006506 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b14      	cmp	r3, #20
 8006312:	f200 80f0 	bhi.w	80064f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006316:	a201      	add	r2, pc, #4	@ (adr r2, 800631c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631c:	08006371 	.word	0x08006371
 8006320:	080064f7 	.word	0x080064f7
 8006324:	080064f7 	.word	0x080064f7
 8006328:	080064f7 	.word	0x080064f7
 800632c:	080063b1 	.word	0x080063b1
 8006330:	080064f7 	.word	0x080064f7
 8006334:	080064f7 	.word	0x080064f7
 8006338:	080064f7 	.word	0x080064f7
 800633c:	080063f3 	.word	0x080063f3
 8006340:	080064f7 	.word	0x080064f7
 8006344:	080064f7 	.word	0x080064f7
 8006348:	080064f7 	.word	0x080064f7
 800634c:	08006433 	.word	0x08006433
 8006350:	080064f7 	.word	0x080064f7
 8006354:	080064f7 	.word	0x080064f7
 8006358:	080064f7 	.word	0x080064f7
 800635c:	08006475 	.word	0x08006475
 8006360:	080064f7 	.word	0x080064f7
 8006364:	080064f7 	.word	0x080064f7
 8006368:	080064f7 	.word	0x080064f7
 800636c:	080064b5 	.word	0x080064b5
=======
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e0ff      	b.n	8006d12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b14      	cmp	r3, #20
 8006b1e:	f200 80f0 	bhi.w	8006d02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b22:	a201      	add	r2, pc, #4	@ (adr r2, 8006b28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b28:	08006b7d 	.word	0x08006b7d
 8006b2c:	08006d03 	.word	0x08006d03
 8006b30:	08006d03 	.word	0x08006d03
 8006b34:	08006d03 	.word	0x08006d03
 8006b38:	08006bbd 	.word	0x08006bbd
 8006b3c:	08006d03 	.word	0x08006d03
 8006b40:	08006d03 	.word	0x08006d03
 8006b44:	08006d03 	.word	0x08006d03
 8006b48:	08006bff 	.word	0x08006bff
 8006b4c:	08006d03 	.word	0x08006d03
 8006b50:	08006d03 	.word	0x08006d03
 8006b54:	08006d03 	.word	0x08006d03
 8006b58:	08006c3f 	.word	0x08006c3f
 8006b5c:	08006d03 	.word	0x08006d03
 8006b60:	08006d03 	.word	0x08006d03
 8006b64:	08006d03 	.word	0x08006d03
 8006b68:	08006c81 	.word	0x08006c81
 8006b6c:	08006d03 	.word	0x08006d03
 8006b70:	08006d03 	.word	0x08006d03
 8006b74:	08006d03 	.word	0x08006d03
 8006b78:	08006cc1 	.word	0x08006cc1
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68b9      	ldr	r1, [r7, #8]
 8006376:	4618      	mov	r0, r3
 8006378:	f000 f99a 	bl	80066b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0208 	orr.w	r2, r2, #8
 800638a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699a      	ldr	r2, [r3, #24]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0204 	bic.w	r2, r2, #4
 800639a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6999      	ldr	r1, [r3, #24]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	691a      	ldr	r2, [r3, #16]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	619a      	str	r2, [r3, #24]
      break;
 80063ae:	e0a5      	b.n	80064fc <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68b9      	ldr	r1, [r7, #8]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 f99a 	bl	8006ebc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0208 	orr.w	r2, r2, #8
 8006b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	699a      	ldr	r2, [r3, #24]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0204 	bic.w	r2, r2, #4
 8006ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6999      	ldr	r1, [r3, #24]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	691a      	ldr	r2, [r3, #16]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	619a      	str	r2, [r3, #24]
      break;
 8006bba:	e0a5      	b.n	8006d08 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 fa14 	bl	80067e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699a      	ldr	r2, [r3, #24]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6999      	ldr	r1, [r3, #24]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	021a      	lsls	r2, r3, #8
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	619a      	str	r2, [r3, #24]
      break;
 80063f0:	e084      	b.n	80064fc <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68b9      	ldr	r1, [r7, #8]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fa14 	bl	8006ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699a      	ldr	r2, [r3, #24]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699a      	ldr	r2, [r3, #24]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6999      	ldr	r1, [r3, #24]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	021a      	lsls	r2, r3, #8
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	619a      	str	r2, [r3, #24]
      break;
 8006bfc:	e084      	b.n	8006d08 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68b9      	ldr	r1, [r7, #8]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 fa87 	bl	800690c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69da      	ldr	r2, [r3, #28]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0208 	orr.w	r2, r2, #8
 800640c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69da      	ldr	r2, [r3, #28]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 0204 	bic.w	r2, r2, #4
 800641c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69d9      	ldr	r1, [r3, #28]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	691a      	ldr	r2, [r3, #16]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	61da      	str	r2, [r3, #28]
      break;
 8006430:	e064      	b.n	80064fc <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 fa87 	bl	8007118 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69da      	ldr	r2, [r3, #28]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f042 0208 	orr.w	r2, r2, #8
 8006c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69da      	ldr	r2, [r3, #28]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0204 	bic.w	r2, r2, #4
 8006c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69d9      	ldr	r1, [r3, #28]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	691a      	ldr	r2, [r3, #16]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	61da      	str	r2, [r3, #28]
      break;
 8006c3c:	e064      	b.n	8006d08 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68b9      	ldr	r1, [r7, #8]
 8006438:	4618      	mov	r0, r3
 800643a:	f000 faf9 	bl	8006a30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69da      	ldr	r2, [r3, #28]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800644c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800645c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69d9      	ldr	r1, [r3, #28]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	021a      	lsls	r2, r3, #8
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	61da      	str	r2, [r3, #28]
      break;
 8006472:	e043      	b.n	80064fc <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68b9      	ldr	r1, [r7, #8]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 faf9 	bl	800723c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69da      	ldr	r2, [r3, #28]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69da      	ldr	r2, [r3, #28]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69d9      	ldr	r1, [r3, #28]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	021a      	lsls	r2, r3, #8
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	61da      	str	r2, [r3, #28]
      break;
 8006c7e:	e043      	b.n	8006d08 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fb6c 	bl	8006b58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0208 	orr.w	r2, r2, #8
 800648e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0204 	bic.w	r2, r2, #4
 800649e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	691a      	ldr	r2, [r3, #16]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80064b2:	e023      	b.n	80064fc <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68b9      	ldr	r1, [r7, #8]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fb6c 	bl	8007364 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0208 	orr.w	r2, r2, #8
 8006c9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0204 	bic.w	r2, r2, #4
 8006caa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	691a      	ldr	r2, [r3, #16]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006cbe:	e023      	b.n	8006d08 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fbb6 	bl	8006c2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064de:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	021a      	lsls	r2, r3, #8
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80064f4:	e002      	b.n	80064fc <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68b9      	ldr	r1, [r7, #8]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 fbb6 	bl	8007438 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cda:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	021a      	lsls	r2, r3, #8
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006d00:	e002      	b.n	8006d08 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 80064f6:	2301      	movs	r3, #1
 80064f8:	75fb      	strb	r3, [r7, #23]
      break;
 80064fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006504:	7dfb      	ldrb	r3, [r7, #23]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop

08006510 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8006d02:	2301      	movs	r3, #1
 8006d04:	75fb      	strb	r3, [r7, #23]
      break;
 8006d06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop

08006d1c <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
=======
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_TIM_IC_CaptureCallback>:
=======
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
=======
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
=======
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_TIM_TriggerCallback>:
=======
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_TIM_TriggerCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
=======
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <TIM_Base_SetConfig>:
=======
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <TIM_Base_SetConfig>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a46      	ldr	r2, [pc, #280]	@ (800668c <TIM_Base_SetConfig+0x12c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d017      	beq.n	80065a8 <TIM_Base_SetConfig+0x48>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800657e:	d013      	beq.n	80065a8 <TIM_Base_SetConfig+0x48>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a43      	ldr	r2, [pc, #268]	@ (8006690 <TIM_Base_SetConfig+0x130>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00f      	beq.n	80065a8 <TIM_Base_SetConfig+0x48>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a42      	ldr	r2, [pc, #264]	@ (8006694 <TIM_Base_SetConfig+0x134>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00b      	beq.n	80065a8 <TIM_Base_SetConfig+0x48>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a41      	ldr	r2, [pc, #260]	@ (8006698 <TIM_Base_SetConfig+0x138>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d007      	beq.n	80065a8 <TIM_Base_SetConfig+0x48>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a40      	ldr	r2, [pc, #256]	@ (800669c <TIM_Base_SetConfig+0x13c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d003      	beq.n	80065a8 <TIM_Base_SetConfig+0x48>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a3f      	ldr	r2, [pc, #252]	@ (80066a0 <TIM_Base_SetConfig+0x140>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d108      	bne.n	80065ba <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a33      	ldr	r2, [pc, #204]	@ (800668c <TIM_Base_SetConfig+0x12c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d023      	beq.n	800660a <TIM_Base_SetConfig+0xaa>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065c8:	d01f      	beq.n	800660a <TIM_Base_SetConfig+0xaa>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a30      	ldr	r2, [pc, #192]	@ (8006690 <TIM_Base_SetConfig+0x130>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d01b      	beq.n	800660a <TIM_Base_SetConfig+0xaa>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a2f      	ldr	r2, [pc, #188]	@ (8006694 <TIM_Base_SetConfig+0x134>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d017      	beq.n	800660a <TIM_Base_SetConfig+0xaa>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a2e      	ldr	r2, [pc, #184]	@ (8006698 <TIM_Base_SetConfig+0x138>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d013      	beq.n	800660a <TIM_Base_SetConfig+0xaa>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a2d      	ldr	r2, [pc, #180]	@ (800669c <TIM_Base_SetConfig+0x13c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00f      	beq.n	800660a <TIM_Base_SetConfig+0xaa>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a2d      	ldr	r2, [pc, #180]	@ (80066a4 <TIM_Base_SetConfig+0x144>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d00b      	beq.n	800660a <TIM_Base_SetConfig+0xaa>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a2c      	ldr	r2, [pc, #176]	@ (80066a8 <TIM_Base_SetConfig+0x148>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d007      	beq.n	800660a <TIM_Base_SetConfig+0xaa>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a2b      	ldr	r2, [pc, #172]	@ (80066ac <TIM_Base_SetConfig+0x14c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d003      	beq.n	800660a <TIM_Base_SetConfig+0xaa>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a26      	ldr	r2, [pc, #152]	@ (80066a0 <TIM_Base_SetConfig+0x140>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d108      	bne.n	800661c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]
=======
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a46      	ldr	r2, [pc, #280]	@ (8006e98 <TIM_Base_SetConfig+0x12c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d017      	beq.n	8006db4 <TIM_Base_SetConfig+0x48>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d8a:	d013      	beq.n	8006db4 <TIM_Base_SetConfig+0x48>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a43      	ldr	r2, [pc, #268]	@ (8006e9c <TIM_Base_SetConfig+0x130>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d00f      	beq.n	8006db4 <TIM_Base_SetConfig+0x48>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a42      	ldr	r2, [pc, #264]	@ (8006ea0 <TIM_Base_SetConfig+0x134>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d00b      	beq.n	8006db4 <TIM_Base_SetConfig+0x48>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a41      	ldr	r2, [pc, #260]	@ (8006ea4 <TIM_Base_SetConfig+0x138>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d007      	beq.n	8006db4 <TIM_Base_SetConfig+0x48>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a40      	ldr	r2, [pc, #256]	@ (8006ea8 <TIM_Base_SetConfig+0x13c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d003      	beq.n	8006db4 <TIM_Base_SetConfig+0x48>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a3f      	ldr	r2, [pc, #252]	@ (8006eac <TIM_Base_SetConfig+0x140>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d108      	bne.n	8006dc6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a33      	ldr	r2, [pc, #204]	@ (8006e98 <TIM_Base_SetConfig+0x12c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d023      	beq.n	8006e16 <TIM_Base_SetConfig+0xaa>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dd4:	d01f      	beq.n	8006e16 <TIM_Base_SetConfig+0xaa>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a30      	ldr	r2, [pc, #192]	@ (8006e9c <TIM_Base_SetConfig+0x130>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d01b      	beq.n	8006e16 <TIM_Base_SetConfig+0xaa>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a2f      	ldr	r2, [pc, #188]	@ (8006ea0 <TIM_Base_SetConfig+0x134>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d017      	beq.n	8006e16 <TIM_Base_SetConfig+0xaa>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a2e      	ldr	r2, [pc, #184]	@ (8006ea4 <TIM_Base_SetConfig+0x138>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d013      	beq.n	8006e16 <TIM_Base_SetConfig+0xaa>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a2d      	ldr	r2, [pc, #180]	@ (8006ea8 <TIM_Base_SetConfig+0x13c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00f      	beq.n	8006e16 <TIM_Base_SetConfig+0xaa>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a2d      	ldr	r2, [pc, #180]	@ (8006eb0 <TIM_Base_SetConfig+0x144>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00b      	beq.n	8006e16 <TIM_Base_SetConfig+0xaa>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a2c      	ldr	r2, [pc, #176]	@ (8006eb4 <TIM_Base_SetConfig+0x148>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d007      	beq.n	8006e16 <TIM_Base_SetConfig+0xaa>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a2b      	ldr	r2, [pc, #172]	@ (8006eb8 <TIM_Base_SetConfig+0x14c>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d003      	beq.n	8006e16 <TIM_Base_SetConfig+0xaa>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a26      	ldr	r2, [pc, #152]	@ (8006eac <TIM_Base_SetConfig+0x140>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d108      	bne.n	8006e28 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a12      	ldr	r2, [pc, #72]	@ (800668c <TIM_Base_SetConfig+0x12c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d013      	beq.n	8006670 <TIM_Base_SetConfig+0x110>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a14      	ldr	r2, [pc, #80]	@ (800669c <TIM_Base_SetConfig+0x13c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d00f      	beq.n	8006670 <TIM_Base_SetConfig+0x110>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a14      	ldr	r2, [pc, #80]	@ (80066a4 <TIM_Base_SetConfig+0x144>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00b      	beq.n	8006670 <TIM_Base_SetConfig+0x110>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a13      	ldr	r2, [pc, #76]	@ (80066a8 <TIM_Base_SetConfig+0x148>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d007      	beq.n	8006670 <TIM_Base_SetConfig+0x110>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a12      	ldr	r2, [pc, #72]	@ (80066ac <TIM_Base_SetConfig+0x14c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d003      	beq.n	8006670 <TIM_Base_SetConfig+0x110>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a0d      	ldr	r2, [pc, #52]	@ (80066a0 <TIM_Base_SetConfig+0x140>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d103      	bne.n	8006678 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	691a      	ldr	r2, [r3, #16]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a12      	ldr	r2, [pc, #72]	@ (8006e98 <TIM_Base_SetConfig+0x12c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d013      	beq.n	8006e7c <TIM_Base_SetConfig+0x110>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a14      	ldr	r2, [pc, #80]	@ (8006ea8 <TIM_Base_SetConfig+0x13c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d00f      	beq.n	8006e7c <TIM_Base_SetConfig+0x110>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a14      	ldr	r2, [pc, #80]	@ (8006eb0 <TIM_Base_SetConfig+0x144>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00b      	beq.n	8006e7c <TIM_Base_SetConfig+0x110>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a13      	ldr	r2, [pc, #76]	@ (8006eb4 <TIM_Base_SetConfig+0x148>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d007      	beq.n	8006e7c <TIM_Base_SetConfig+0x110>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a12      	ldr	r2, [pc, #72]	@ (8006eb8 <TIM_Base_SetConfig+0x14c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d003      	beq.n	8006e7c <TIM_Base_SetConfig+0x110>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a0d      	ldr	r2, [pc, #52]	@ (8006eac <TIM_Base_SetConfig+0x140>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d103      	bne.n	8006e84 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	615a      	str	r2, [r3, #20]
}
 800667e:	bf00      	nop
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	40012c00 	.word	0x40012c00
 8006690:	40000400 	.word	0x40000400
 8006694:	40000800 	.word	0x40000800
 8006698:	40000c00 	.word	0x40000c00
 800669c:	40013400 	.word	0x40013400
 80066a0:	40015000 	.word	0x40015000
 80066a4:	40014000 	.word	0x40014000
 80066a8:	40014400 	.word	0x40014400
 80066ac:	40014800 	.word	0x40014800

080066b0 <TIM_OC1_SetConfig>:
=======
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	615a      	str	r2, [r3, #20]
}
 8006e8a:	bf00      	nop
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	40012c00 	.word	0x40012c00
 8006e9c:	40000400 	.word	0x40000400
 8006ea0:	40000800 	.word	0x40000800
 8006ea4:	40000c00 	.word	0x40000c00
 8006ea8:	40013400 	.word	0x40013400
 8006eac:	40015000 	.word	0x40015000
 8006eb0:	40014000 	.word	0x40014000
 8006eb4:	40014400 	.word	0x40014400
 8006eb8:	40014800 	.word	0x40014800

08006ebc <TIM_OC1_SetConfig>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
=======
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	f023 0201 	bic.w	r2, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0303 	bic.w	r3, r3, #3
 80066ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f023 0302 	bic.w	r3, r3, #2
 80066fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	4313      	orrs	r3, r2
 8006706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a30      	ldr	r2, [pc, #192]	@ (80067cc <TIM_OC1_SetConfig+0x11c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d013      	beq.n	8006738 <TIM_OC1_SetConfig+0x88>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a2f      	ldr	r2, [pc, #188]	@ (80067d0 <TIM_OC1_SetConfig+0x120>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00f      	beq.n	8006738 <TIM_OC1_SetConfig+0x88>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a2e      	ldr	r2, [pc, #184]	@ (80067d4 <TIM_OC1_SetConfig+0x124>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d00b      	beq.n	8006738 <TIM_OC1_SetConfig+0x88>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a2d      	ldr	r2, [pc, #180]	@ (80067d8 <TIM_OC1_SetConfig+0x128>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d007      	beq.n	8006738 <TIM_OC1_SetConfig+0x88>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a2c      	ldr	r2, [pc, #176]	@ (80067dc <TIM_OC1_SetConfig+0x12c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d003      	beq.n	8006738 <TIM_OC1_SetConfig+0x88>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a2b      	ldr	r2, [pc, #172]	@ (80067e0 <TIM_OC1_SetConfig+0x130>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d10c      	bne.n	8006752 <TIM_OC1_SetConfig+0xa2>
=======
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	f023 0201 	bic.w	r2, r3, #1
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 0303 	bic.w	r3, r3, #3
 8006ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f023 0302 	bic.w	r3, r3, #2
 8006f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a30      	ldr	r2, [pc, #192]	@ (8006fd8 <TIM_OC1_SetConfig+0x11c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d013      	beq.n	8006f44 <TIM_OC1_SetConfig+0x88>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8006fdc <TIM_OC1_SetConfig+0x120>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00f      	beq.n	8006f44 <TIM_OC1_SetConfig+0x88>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a2e      	ldr	r2, [pc, #184]	@ (8006fe0 <TIM_OC1_SetConfig+0x124>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d00b      	beq.n	8006f44 <TIM_OC1_SetConfig+0x88>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a2d      	ldr	r2, [pc, #180]	@ (8006fe4 <TIM_OC1_SetConfig+0x128>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d007      	beq.n	8006f44 <TIM_OC1_SetConfig+0x88>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a2c      	ldr	r2, [pc, #176]	@ (8006fe8 <TIM_OC1_SetConfig+0x12c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d003      	beq.n	8006f44 <TIM_OC1_SetConfig+0x88>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a2b      	ldr	r2, [pc, #172]	@ (8006fec <TIM_OC1_SetConfig+0x130>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d10c      	bne.n	8006f5e <TIM_OC1_SetConfig+0xa2>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f023 0308 	bic.w	r3, r3, #8
 800673e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	4313      	orrs	r3, r2
 8006748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f023 0304 	bic.w	r3, r3, #4
 8006750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a1d      	ldr	r2, [pc, #116]	@ (80067cc <TIM_OC1_SetConfig+0x11c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d013      	beq.n	8006782 <TIM_OC1_SetConfig+0xd2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a1c      	ldr	r2, [pc, #112]	@ (80067d0 <TIM_OC1_SetConfig+0x120>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00f      	beq.n	8006782 <TIM_OC1_SetConfig+0xd2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a1b      	ldr	r2, [pc, #108]	@ (80067d4 <TIM_OC1_SetConfig+0x124>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00b      	beq.n	8006782 <TIM_OC1_SetConfig+0xd2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a1a      	ldr	r2, [pc, #104]	@ (80067d8 <TIM_OC1_SetConfig+0x128>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d007      	beq.n	8006782 <TIM_OC1_SetConfig+0xd2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a19      	ldr	r2, [pc, #100]	@ (80067dc <TIM_OC1_SetConfig+0x12c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d003      	beq.n	8006782 <TIM_OC1_SetConfig+0xd2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a18      	ldr	r2, [pc, #96]	@ (80067e0 <TIM_OC1_SetConfig+0x130>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d111      	bne.n	80067a6 <TIM_OC1_SetConfig+0xf6>
=======
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f023 0308 	bic.w	r3, r3, #8
 8006f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f023 0304 	bic.w	r3, r3, #4
 8006f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd8 <TIM_OC1_SetConfig+0x11c>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d013      	beq.n	8006f8e <TIM_OC1_SetConfig+0xd2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a1c      	ldr	r2, [pc, #112]	@ (8006fdc <TIM_OC1_SetConfig+0x120>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d00f      	beq.n	8006f8e <TIM_OC1_SetConfig+0xd2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a1b      	ldr	r2, [pc, #108]	@ (8006fe0 <TIM_OC1_SetConfig+0x124>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00b      	beq.n	8006f8e <TIM_OC1_SetConfig+0xd2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a1a      	ldr	r2, [pc, #104]	@ (8006fe4 <TIM_OC1_SetConfig+0x128>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d007      	beq.n	8006f8e <TIM_OC1_SetConfig+0xd2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a19      	ldr	r2, [pc, #100]	@ (8006fe8 <TIM_OC1_SetConfig+0x12c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d003      	beq.n	8006f8e <TIM_OC1_SetConfig+0xd2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a18      	ldr	r2, [pc, #96]	@ (8006fec <TIM_OC1_SetConfig+0x130>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d111      	bne.n	8006fb2 <TIM_OC1_SetConfig+0xf6>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]
=======
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	621a      	str	r2, [r3, #32]
}
 80067c0:	bf00      	nop
 80067c2:	371c      	adds	r7, #28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	40012c00 	.word	0x40012c00
 80067d0:	40013400 	.word	0x40013400
 80067d4:	40014000 	.word	0x40014000
 80067d8:	40014400 	.word	0x40014400
 80067dc:	40014800 	.word	0x40014800
 80067e0:	40015000 	.word	0x40015000

080067e4 <TIM_OC2_SetConfig>:
=======
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	621a      	str	r2, [r3, #32]
}
 8006fcc:	bf00      	nop
 8006fce:	371c      	adds	r7, #28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	40012c00 	.word	0x40012c00
 8006fdc:	40013400 	.word	0x40013400
 8006fe0:	40014000 	.word	0x40014000
 8006fe4:	40014400 	.word	0x40014400
 8006fe8:	40014800 	.word	0x40014800
 8006fec:	40015000 	.word	0x40015000

08006ff0 <TIM_OC2_SetConfig>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80067e4:	b480      	push	{r7}
 80067e6:	b087      	sub	sp, #28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
=======
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	f023 0210 	bic.w	r2, r3, #16
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006812:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800681e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f023 0320 	bic.w	r3, r3, #32
 8006832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	4313      	orrs	r3, r2
 800683e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a2c      	ldr	r2, [pc, #176]	@ (80068f4 <TIM_OC2_SetConfig+0x110>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d007      	beq.n	8006858 <TIM_OC2_SetConfig+0x74>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a2b      	ldr	r2, [pc, #172]	@ (80068f8 <TIM_OC2_SetConfig+0x114>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d003      	beq.n	8006858 <TIM_OC2_SetConfig+0x74>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a2a      	ldr	r2, [pc, #168]	@ (80068fc <TIM_OC2_SetConfig+0x118>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d10d      	bne.n	8006874 <TIM_OC2_SetConfig+0x90>
=======
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	f023 0210 	bic.w	r2, r3, #16
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800701e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800702a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	021b      	lsls	r3, r3, #8
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f023 0320 	bic.w	r3, r3, #32
 800703e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a2c      	ldr	r2, [pc, #176]	@ (8007100 <TIM_OC2_SetConfig+0x110>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d007      	beq.n	8007064 <TIM_OC2_SetConfig+0x74>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a2b      	ldr	r2, [pc, #172]	@ (8007104 <TIM_OC2_SetConfig+0x114>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d003      	beq.n	8007064 <TIM_OC2_SetConfig+0x74>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a2a      	ldr	r2, [pc, #168]	@ (8007108 <TIM_OC2_SetConfig+0x118>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d10d      	bne.n	8007080 <TIM_OC2_SetConfig+0x90>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800685e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006872:	617b      	str	r3, [r7, #20]
=======
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800706a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	011b      	lsls	r3, r3, #4
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800707e:	617b      	str	r3, [r7, #20]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a1f      	ldr	r2, [pc, #124]	@ (80068f4 <TIM_OC2_SetConfig+0x110>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d013      	beq.n	80068a4 <TIM_OC2_SetConfig+0xc0>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a1e      	ldr	r2, [pc, #120]	@ (80068f8 <TIM_OC2_SetConfig+0x114>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00f      	beq.n	80068a4 <TIM_OC2_SetConfig+0xc0>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a1e      	ldr	r2, [pc, #120]	@ (8006900 <TIM_OC2_SetConfig+0x11c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00b      	beq.n	80068a4 <TIM_OC2_SetConfig+0xc0>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a1d      	ldr	r2, [pc, #116]	@ (8006904 <TIM_OC2_SetConfig+0x120>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d007      	beq.n	80068a4 <TIM_OC2_SetConfig+0xc0>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a1c      	ldr	r2, [pc, #112]	@ (8006908 <TIM_OC2_SetConfig+0x124>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d003      	beq.n	80068a4 <TIM_OC2_SetConfig+0xc0>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a17      	ldr	r2, [pc, #92]	@ (80068fc <TIM_OC2_SetConfig+0x118>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d113      	bne.n	80068cc <TIM_OC2_SetConfig+0xe8>
=======
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a1f      	ldr	r2, [pc, #124]	@ (8007100 <TIM_OC2_SetConfig+0x110>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d013      	beq.n	80070b0 <TIM_OC2_SetConfig+0xc0>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a1e      	ldr	r2, [pc, #120]	@ (8007104 <TIM_OC2_SetConfig+0x114>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d00f      	beq.n	80070b0 <TIM_OC2_SetConfig+0xc0>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a1e      	ldr	r2, [pc, #120]	@ (800710c <TIM_OC2_SetConfig+0x11c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d00b      	beq.n	80070b0 <TIM_OC2_SetConfig+0xc0>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a1d      	ldr	r2, [pc, #116]	@ (8007110 <TIM_OC2_SetConfig+0x120>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d007      	beq.n	80070b0 <TIM_OC2_SetConfig+0xc0>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a1c      	ldr	r2, [pc, #112]	@ (8007114 <TIM_OC2_SetConfig+0x124>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d003      	beq.n	80070b0 <TIM_OC2_SetConfig+0xc0>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a17      	ldr	r2, [pc, #92]	@ (8007108 <TIM_OC2_SetConfig+0x118>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d113      	bne.n	80070d8 <TIM_OC2_SetConfig+0xe8>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	4313      	orrs	r3, r2
 80068be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]
=======
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	613b      	str	r3, [r7, #16]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	621a      	str	r2, [r3, #32]
}
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40012c00 	.word	0x40012c00
 80068f8:	40013400 	.word	0x40013400
 80068fc:	40015000 	.word	0x40015000
 8006900:	40014000 	.word	0x40014000
 8006904:	40014400 	.word	0x40014400
 8006908:	40014800 	.word	0x40014800

0800690c <TIM_OC3_SetConfig>:
=======
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	621a      	str	r2, [r3, #32]
}
 80070f2:	bf00      	nop
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	40012c00 	.word	0x40012c00
 8007104:	40013400 	.word	0x40013400
 8007108:	40015000 	.word	0x40015000
 800710c:	40014000 	.word	0x40014000
 8007110:	40014400 	.word	0x40014400
 8007114:	40014800 	.word	0x40014800

08007118 <TIM_OC3_SetConfig>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
=======
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800693a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800693e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 0303 	bic.w	r3, r3, #3
 8006946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	021b      	lsls	r3, r3, #8
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	4313      	orrs	r3, r2
 8006964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a2b      	ldr	r2, [pc, #172]	@ (8006a18 <TIM_OC3_SetConfig+0x10c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d007      	beq.n	800697e <TIM_OC3_SetConfig+0x72>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a2a      	ldr	r2, [pc, #168]	@ (8006a1c <TIM_OC3_SetConfig+0x110>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d003      	beq.n	800697e <TIM_OC3_SetConfig+0x72>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a29      	ldr	r2, [pc, #164]	@ (8006a20 <TIM_OC3_SetConfig+0x114>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d10d      	bne.n	800699a <TIM_OC3_SetConfig+0x8e>
=======
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800714a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 0303 	bic.w	r3, r3, #3
 8007152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a2b      	ldr	r2, [pc, #172]	@ (8007224 <TIM_OC3_SetConfig+0x10c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d007      	beq.n	800718a <TIM_OC3_SetConfig+0x72>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a2a      	ldr	r2, [pc, #168]	@ (8007228 <TIM_OC3_SetConfig+0x110>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d003      	beq.n	800718a <TIM_OC3_SetConfig+0x72>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a29      	ldr	r2, [pc, #164]	@ (800722c <TIM_OC3_SetConfig+0x114>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d10d      	bne.n	80071a6 <TIM_OC3_SetConfig+0x8e>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	021b      	lsls	r3, r3, #8
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	4313      	orrs	r3, r2
 8006990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a1e      	ldr	r2, [pc, #120]	@ (8006a18 <TIM_OC3_SetConfig+0x10c>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d013      	beq.n	80069ca <TIM_OC3_SetConfig+0xbe>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a1d      	ldr	r2, [pc, #116]	@ (8006a1c <TIM_OC3_SetConfig+0x110>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00f      	beq.n	80069ca <TIM_OC3_SetConfig+0xbe>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006a24 <TIM_OC3_SetConfig+0x118>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00b      	beq.n	80069ca <TIM_OC3_SetConfig+0xbe>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a28 <TIM_OC3_SetConfig+0x11c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d007      	beq.n	80069ca <TIM_OC3_SetConfig+0xbe>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a1b      	ldr	r2, [pc, #108]	@ (8006a2c <TIM_OC3_SetConfig+0x120>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d003      	beq.n	80069ca <TIM_OC3_SetConfig+0xbe>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a16      	ldr	r2, [pc, #88]	@ (8006a20 <TIM_OC3_SetConfig+0x114>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d113      	bne.n	80069f2 <TIM_OC3_SetConfig+0xe6>
=======
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	021b      	lsls	r3, r3, #8
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	4313      	orrs	r3, r2
 800719c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a1e      	ldr	r2, [pc, #120]	@ (8007224 <TIM_OC3_SetConfig+0x10c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d013      	beq.n	80071d6 <TIM_OC3_SetConfig+0xbe>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007228 <TIM_OC3_SetConfig+0x110>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00f      	beq.n	80071d6 <TIM_OC3_SetConfig+0xbe>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007230 <TIM_OC3_SetConfig+0x118>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d00b      	beq.n	80071d6 <TIM_OC3_SetConfig+0xbe>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007234 <TIM_OC3_SetConfig+0x11c>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d007      	beq.n	80071d6 <TIM_OC3_SetConfig+0xbe>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007238 <TIM_OC3_SetConfig+0x120>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d003      	beq.n	80071d6 <TIM_OC3_SetConfig+0xbe>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a16      	ldr	r2, [pc, #88]	@ (800722c <TIM_OC3_SetConfig+0x114>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d113      	bne.n	80071fe <TIM_OC3_SetConfig+0xe6>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	011b      	lsls	r3, r3, #4
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	613b      	str	r3, [r7, #16]
=======
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80071e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	011b      	lsls	r3, r3, #4
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	621a      	str	r2, [r3, #32]
}
 8006a0c:	bf00      	nop
 8006a0e:	371c      	adds	r7, #28
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	40012c00 	.word	0x40012c00
 8006a1c:	40013400 	.word	0x40013400
 8006a20:	40015000 	.word	0x40015000
 8006a24:	40014000 	.word	0x40014000
 8006a28:	40014400 	.word	0x40014400
 8006a2c:	40014800 	.word	0x40014800

08006a30 <TIM_OC4_SetConfig>:
=======
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	621a      	str	r2, [r3, #32]
}
 8007218:	bf00      	nop
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	40012c00 	.word	0x40012c00
 8007228:	40013400 	.word	0x40013400
 800722c:	40015000 	.word	0x40015000
 8007230:	40014000 	.word	0x40014000
 8007234:	40014400 	.word	0x40014400
 8007238:	40014800 	.word	0x40014800

0800723c <TIM_OC4_SetConfig>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
=======
 800723c:	b480      	push	{r7}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	021b      	lsls	r3, r3, #8
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	031b      	lsls	r3, r3, #12
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8006b40 <TIM_OC4_SetConfig+0x110>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d007      	beq.n	8006aa4 <TIM_OC4_SetConfig+0x74>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a2b      	ldr	r2, [pc, #172]	@ (8006b44 <TIM_OC4_SetConfig+0x114>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d003      	beq.n	8006aa4 <TIM_OC4_SetConfig+0x74>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8006b48 <TIM_OC4_SetConfig+0x118>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d10d      	bne.n	8006ac0 <TIM_OC4_SetConfig+0x90>
=======
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800726a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800726e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	021b      	lsls	r3, r3, #8
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	4313      	orrs	r3, r2
 8007282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800728a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	031b      	lsls	r3, r3, #12
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	4313      	orrs	r3, r2
 8007296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a2c      	ldr	r2, [pc, #176]	@ (800734c <TIM_OC4_SetConfig+0x110>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d007      	beq.n	80072b0 <TIM_OC4_SetConfig+0x74>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a2b      	ldr	r2, [pc, #172]	@ (8007350 <TIM_OC4_SetConfig+0x114>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d003      	beq.n	80072b0 <TIM_OC4_SetConfig+0x74>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a2a      	ldr	r2, [pc, #168]	@ (8007354 <TIM_OC4_SetConfig+0x118>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d10d      	bne.n	80072cc <TIM_OC4_SetConfig+0x90>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
<<<<<<< HEAD
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	031b      	lsls	r3, r3, #12
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006abe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8006b40 <TIM_OC4_SetConfig+0x110>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d013      	beq.n	8006af0 <TIM_OC4_SetConfig+0xc0>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a1e      	ldr	r2, [pc, #120]	@ (8006b44 <TIM_OC4_SetConfig+0x114>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00f      	beq.n	8006af0 <TIM_OC4_SetConfig+0xc0>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8006b4c <TIM_OC4_SetConfig+0x11c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00b      	beq.n	8006af0 <TIM_OC4_SetConfig+0xc0>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a1d      	ldr	r2, [pc, #116]	@ (8006b50 <TIM_OC4_SetConfig+0x120>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d007      	beq.n	8006af0 <TIM_OC4_SetConfig+0xc0>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8006b54 <TIM_OC4_SetConfig+0x124>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d003      	beq.n	8006af0 <TIM_OC4_SetConfig+0xc0>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a17      	ldr	r2, [pc, #92]	@ (8006b48 <TIM_OC4_SetConfig+0x118>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d113      	bne.n	8006b18 <TIM_OC4_SetConfig+0xe8>
=======
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	031b      	lsls	r3, r3, #12
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a1f      	ldr	r2, [pc, #124]	@ (800734c <TIM_OC4_SetConfig+0x110>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d013      	beq.n	80072fc <TIM_OC4_SetConfig+0xc0>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007350 <TIM_OC4_SetConfig+0x114>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d00f      	beq.n	80072fc <TIM_OC4_SetConfig+0xc0>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a1e      	ldr	r2, [pc, #120]	@ (8007358 <TIM_OC4_SetConfig+0x11c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d00b      	beq.n	80072fc <TIM_OC4_SetConfig+0xc0>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a1d      	ldr	r2, [pc, #116]	@ (800735c <TIM_OC4_SetConfig+0x120>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d007      	beq.n	80072fc <TIM_OC4_SetConfig+0xc0>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007360 <TIM_OC4_SetConfig+0x124>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d003      	beq.n	80072fc <TIM_OC4_SetConfig+0xc0>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a17      	ldr	r2, [pc, #92]	@ (8007354 <TIM_OC4_SetConfig+0x118>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d113      	bne.n	8007324 <TIM_OC4_SetConfig+0xe8>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006af6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006afe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	019b      	lsls	r3, r3, #6
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	019b      	lsls	r3, r3, #6
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]
=======
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007302:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800730a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	019b      	lsls	r3, r3, #6
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	4313      	orrs	r3, r2
 8007316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	019b      	lsls	r3, r3, #6
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	4313      	orrs	r3, r2
 8007322:	613b      	str	r3, [r7, #16]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	621a      	str	r2, [r3, #32]
}
 8006b32:	bf00      	nop
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	40012c00 	.word	0x40012c00
 8006b44:	40013400 	.word	0x40013400
 8006b48:	40015000 	.word	0x40015000
 8006b4c:	40014000 	.word	0x40014000
 8006b50:	40014400 	.word	0x40014400
 8006b54:	40014800 	.word	0x40014800

08006b58 <TIM_OC5_SetConfig>:
=======
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	621a      	str	r2, [r3, #32]
}
 800733e:	bf00      	nop
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	40012c00 	.word	0x40012c00
 8007350:	40013400 	.word	0x40013400
 8007354:	40015000 	.word	0x40015000
 8007358:	40014000 	.word	0x40014000
 800735c:	40014400 	.word	0x40014400
 8007360:	40014800 	.word	0x40014800

08007364 <TIM_OC5_SetConfig>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
=======
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
<<<<<<< HEAD
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006b9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	041b      	lsls	r3, r3, #16
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a19      	ldr	r2, [pc, #100]	@ (8006c14 <TIM_OC5_SetConfig+0xbc>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d013      	beq.n	8006bda <TIM_OC5_SetConfig+0x82>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a18      	ldr	r2, [pc, #96]	@ (8006c18 <TIM_OC5_SetConfig+0xc0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00f      	beq.n	8006bda <TIM_OC5_SetConfig+0x82>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a17      	ldr	r2, [pc, #92]	@ (8006c1c <TIM_OC5_SetConfig+0xc4>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00b      	beq.n	8006bda <TIM_OC5_SetConfig+0x82>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a16      	ldr	r2, [pc, #88]	@ (8006c20 <TIM_OC5_SetConfig+0xc8>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d007      	beq.n	8006bda <TIM_OC5_SetConfig+0x82>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a15      	ldr	r2, [pc, #84]	@ (8006c24 <TIM_OC5_SetConfig+0xcc>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d003      	beq.n	8006bda <TIM_OC5_SetConfig+0x82>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a14      	ldr	r2, [pc, #80]	@ (8006c28 <TIM_OC5_SetConfig+0xd0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d109      	bne.n	8006bee <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006be0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	021b      	lsls	r3, r3, #8
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	621a      	str	r2, [r3, #32]
}
 8006c08:	bf00      	nop
 8006c0a:	371c      	adds	r7, #28
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	40012c00 	.word	0x40012c00
 8006c18:	40013400 	.word	0x40013400
 8006c1c:	40014000 	.word	0x40014000
 8006c20:	40014400 	.word	0x40014400
 8006c24:	40014800 	.word	0x40014800
 8006c28:	40015000 	.word	0x40015000

08006c2c <TIM_OC6_SetConfig>:
=======
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800738a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80073a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	041b      	lsls	r3, r3, #16
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a19      	ldr	r2, [pc, #100]	@ (8007420 <TIM_OC5_SetConfig+0xbc>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d013      	beq.n	80073e6 <TIM_OC5_SetConfig+0x82>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a18      	ldr	r2, [pc, #96]	@ (8007424 <TIM_OC5_SetConfig+0xc0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d00f      	beq.n	80073e6 <TIM_OC5_SetConfig+0x82>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a17      	ldr	r2, [pc, #92]	@ (8007428 <TIM_OC5_SetConfig+0xc4>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d00b      	beq.n	80073e6 <TIM_OC5_SetConfig+0x82>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a16      	ldr	r2, [pc, #88]	@ (800742c <TIM_OC5_SetConfig+0xc8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d007      	beq.n	80073e6 <TIM_OC5_SetConfig+0x82>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a15      	ldr	r2, [pc, #84]	@ (8007430 <TIM_OC5_SetConfig+0xcc>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d003      	beq.n	80073e6 <TIM_OC5_SetConfig+0x82>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a14      	ldr	r2, [pc, #80]	@ (8007434 <TIM_OC5_SetConfig+0xd0>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d109      	bne.n	80073fa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	021b      	lsls	r3, r3, #8
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	621a      	str	r2, [r3, #32]
}
 8007414:	bf00      	nop
 8007416:	371c      	adds	r7, #28
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	40012c00 	.word	0x40012c00
 8007424:	40013400 	.word	0x40013400
 8007428:	40014000 	.word	0x40014000
 800742c:	40014400 	.word	0x40014400
 8007430:	40014800 	.word	0x40014800
 8007434:	40015000 	.word	0x40015000

08007438 <TIM_OC6_SetConfig>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
=======
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
<<<<<<< HEAD
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	021b      	lsls	r3, r3, #8
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	051b      	lsls	r3, r3, #20
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a1a      	ldr	r2, [pc, #104]	@ (8006cec <TIM_OC6_SetConfig+0xc0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d013      	beq.n	8006cb0 <TIM_OC6_SetConfig+0x84>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a19      	ldr	r2, [pc, #100]	@ (8006cf0 <TIM_OC6_SetConfig+0xc4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d00f      	beq.n	8006cb0 <TIM_OC6_SetConfig+0x84>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a18      	ldr	r2, [pc, #96]	@ (8006cf4 <TIM_OC6_SetConfig+0xc8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00b      	beq.n	8006cb0 <TIM_OC6_SetConfig+0x84>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a17      	ldr	r2, [pc, #92]	@ (8006cf8 <TIM_OC6_SetConfig+0xcc>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d007      	beq.n	8006cb0 <TIM_OC6_SetConfig+0x84>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a16      	ldr	r2, [pc, #88]	@ (8006cfc <TIM_OC6_SetConfig+0xd0>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d003      	beq.n	8006cb0 <TIM_OC6_SetConfig+0x84>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a15      	ldr	r2, [pc, #84]	@ (8006d00 <TIM_OC6_SetConfig+0xd4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d109      	bne.n	8006cc4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	029b      	lsls	r3, r3, #10
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]
=======
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800745e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800746a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	4313      	orrs	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800747e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	051b      	lsls	r3, r3, #20
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	4313      	orrs	r3, r2
 800748a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a1a      	ldr	r2, [pc, #104]	@ (80074f8 <TIM_OC6_SetConfig+0xc0>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d013      	beq.n	80074bc <TIM_OC6_SetConfig+0x84>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a19      	ldr	r2, [pc, #100]	@ (80074fc <TIM_OC6_SetConfig+0xc4>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00f      	beq.n	80074bc <TIM_OC6_SetConfig+0x84>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a18      	ldr	r2, [pc, #96]	@ (8007500 <TIM_OC6_SetConfig+0xc8>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00b      	beq.n	80074bc <TIM_OC6_SetConfig+0x84>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a17      	ldr	r2, [pc, #92]	@ (8007504 <TIM_OC6_SetConfig+0xcc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d007      	beq.n	80074bc <TIM_OC6_SetConfig+0x84>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a16      	ldr	r2, [pc, #88]	@ (8007508 <TIM_OC6_SetConfig+0xd0>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d003      	beq.n	80074bc <TIM_OC6_SetConfig+0x84>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a15      	ldr	r2, [pc, #84]	@ (800750c <TIM_OC6_SetConfig+0xd4>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d109      	bne.n	80074d0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	029b      	lsls	r3, r3, #10
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	617b      	str	r3, [r7, #20]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	621a      	str	r2, [r3, #32]
}
 8006cde:	bf00      	nop
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40012c00 	.word	0x40012c00
 8006cf0:	40013400 	.word	0x40013400
 8006cf4:	40014000 	.word	0x40014000
 8006cf8:	40014400 	.word	0x40014400
 8006cfc:	40014800 	.word	0x40014800
 8006d00:	40015000 	.word	0x40015000

08006d04 <TIM_TI1_SetConfig>:
=======
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	621a      	str	r2, [r3, #32]
}
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	40012c00 	.word	0x40012c00
 80074fc:	40013400 	.word	0x40013400
 8007500:	40014000 	.word	0x40014000
 8007504:	40014400 	.word	0x40014400
 8007508:	40014800 	.word	0x40014800
 800750c:	40015000 	.word	0x40015000

08007510 <TIM_TI1_SetConfig>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
=======
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	603b      	str	r3, [r7, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	f023 0201 	bic.w	r2, r3, #1
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4a28      	ldr	r2, [pc, #160]	@ (8006dd0 <TIM_TI1_SetConfig+0xcc>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d01b      	beq.n	8006d6a <TIM_TI1_SetConfig+0x66>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d38:	d017      	beq.n	8006d6a <TIM_TI1_SetConfig+0x66>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	4a25      	ldr	r2, [pc, #148]	@ (8006dd4 <TIM_TI1_SetConfig+0xd0>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d013      	beq.n	8006d6a <TIM_TI1_SetConfig+0x66>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4a24      	ldr	r2, [pc, #144]	@ (8006dd8 <TIM_TI1_SetConfig+0xd4>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00f      	beq.n	8006d6a <TIM_TI1_SetConfig+0x66>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4a23      	ldr	r2, [pc, #140]	@ (8006ddc <TIM_TI1_SetConfig+0xd8>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00b      	beq.n	8006d6a <TIM_TI1_SetConfig+0x66>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4a22      	ldr	r2, [pc, #136]	@ (8006de0 <TIM_TI1_SetConfig+0xdc>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d007      	beq.n	8006d6a <TIM_TI1_SetConfig+0x66>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4a21      	ldr	r2, [pc, #132]	@ (8006de4 <TIM_TI1_SetConfig+0xe0>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d003      	beq.n	8006d6a <TIM_TI1_SetConfig+0x66>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4a20      	ldr	r2, [pc, #128]	@ (8006de8 <TIM_TI1_SetConfig+0xe4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d101      	bne.n	8006d6e <TIM_TI1_SetConfig+0x6a>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e000      	b.n	8006d70 <TIM_TI1_SetConfig+0x6c>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d008      	beq.n	8006d86 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f023 0303 	bic.w	r3, r3, #3
 8006d7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	e003      	b.n	8006d8e <TIM_TI1_SetConfig+0x8a>
=======
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	f023 0201 	bic.w	r2, r3, #1
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	4a28      	ldr	r2, [pc, #160]	@ (80075dc <TIM_TI1_SetConfig+0xcc>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d01b      	beq.n	8007576 <TIM_TI1_SetConfig+0x66>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007544:	d017      	beq.n	8007576 <TIM_TI1_SetConfig+0x66>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4a25      	ldr	r2, [pc, #148]	@ (80075e0 <TIM_TI1_SetConfig+0xd0>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d013      	beq.n	8007576 <TIM_TI1_SetConfig+0x66>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4a24      	ldr	r2, [pc, #144]	@ (80075e4 <TIM_TI1_SetConfig+0xd4>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00f      	beq.n	8007576 <TIM_TI1_SetConfig+0x66>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4a23      	ldr	r2, [pc, #140]	@ (80075e8 <TIM_TI1_SetConfig+0xd8>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d00b      	beq.n	8007576 <TIM_TI1_SetConfig+0x66>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4a22      	ldr	r2, [pc, #136]	@ (80075ec <TIM_TI1_SetConfig+0xdc>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d007      	beq.n	8007576 <TIM_TI1_SetConfig+0x66>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4a21      	ldr	r2, [pc, #132]	@ (80075f0 <TIM_TI1_SetConfig+0xe0>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d003      	beq.n	8007576 <TIM_TI1_SetConfig+0x66>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4a20      	ldr	r2, [pc, #128]	@ (80075f4 <TIM_TI1_SetConfig+0xe4>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d101      	bne.n	800757a <TIM_TI1_SetConfig+0x6a>
 8007576:	2301      	movs	r3, #1
 8007578:	e000      	b.n	800757c <TIM_TI1_SetConfig+0x6c>
 800757a:	2300      	movs	r3, #0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d008      	beq.n	8007592 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f023 0303 	bic.w	r3, r3, #3
 8007586:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4313      	orrs	r3, r2
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	e003      	b.n	800759a <TIM_TI1_SetConfig+0x8a>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
<<<<<<< HEAD
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f043 0301 	orr.w	r3, r3, #1
 8006d8c:	617b      	str	r3, [r7, #20]
=======
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f043 0301 	orr.w	r3, r3, #1
 8007598:	617b      	str	r3, [r7, #20]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
<<<<<<< HEAD
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	011b      	lsls	r3, r3, #4
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f023 030a 	bic.w	r3, r3, #10
 8006da8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f003 030a 	and.w	r3, r3, #10
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	621a      	str	r2, [r3, #32]
}
 8006dc2:	bf00      	nop
 8006dc4:	371c      	adds	r7, #28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	40012c00 	.word	0x40012c00
 8006dd4:	40000400 	.word	0x40000400
 8006dd8:	40000800 	.word	0x40000800
 8006ddc:	40000c00 	.word	0x40000c00
 8006de0:	40013400 	.word	0x40013400
 8006de4:	40014000 	.word	0x40014000
 8006de8:	40015000 	.word	0x40015000

08006dec <TIM_CCxChannelCmd>:
=======
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	011b      	lsls	r3, r3, #4
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f023 030a 	bic.w	r3, r3, #10
 80075b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	f003 030a 	and.w	r3, r3, #10
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	4313      	orrs	r3, r2
 80075c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	621a      	str	r2, [r3, #32]
}
 80075ce:	bf00      	nop
 80075d0:	371c      	adds	r7, #28
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40012c00 	.word	0x40012c00
 80075e0:	40000400 	.word	0x40000400
 80075e4:	40000800 	.word	0x40000800
 80075e8:	40000c00 	.word	0x40000c00
 80075ec:	40013400 	.word	0x40013400
 80075f0:	40014000 	.word	0x40014000
 80075f4:	40015000 	.word	0x40015000

080075f8 <TIM_CCxChannelCmd>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
=======
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f003 031f 	and.w	r3, r3, #31
 8006dfe:	2201      	movs	r2, #1
 8006e00:	fa02 f303 	lsl.w	r3, r2, r3
 8006e04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a1a      	ldr	r2, [r3, #32]
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	43db      	mvns	r3, r3
 8006e0e:	401a      	ands	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6a1a      	ldr	r2, [r3, #32]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f003 031f 	and.w	r3, r3, #31
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	fa01 f303 	lsl.w	r3, r1, r3
 8006e24:	431a      	orrs	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	621a      	str	r2, [r3, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <HAL_TIMEx_HallSensor_Init>:
=======
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f003 031f 	and.w	r3, r3, #31
 800760a:	2201      	movs	r2, #1
 800760c:	fa02 f303 	lsl.w	r3, r2, r3
 8007610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6a1a      	ldr	r2, [r3, #32]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	43db      	mvns	r3, r3
 800761a:	401a      	ands	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6a1a      	ldr	r2, [r3, #32]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f003 031f 	and.w	r3, r3, #31
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	fa01 f303 	lsl.w	r3, r1, r3
 8007630:	431a      	orrs	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	621a      	str	r2, [r3, #32]
}
 8007636:	bf00      	nop
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <HAL_TIMEx_HallSensor_Init>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
<<<<<<< HEAD
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b08a      	sub	sp, #40	@ 0x28
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	6039      	str	r1, [r7, #0]
=======
 8007642:	b580      	push	{r7, lr}
 8007644:	b08a      	sub	sp, #40	@ 0x28
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	6039      	str	r1, [r7, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
<<<<<<< HEAD
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e0a0      	b.n	8006f8c <HAL_TIMEx_HallSensor_Init+0x156>
=======
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e0a0      	b.n	8007798 <HAL_TIMEx_HallSensor_Init+0x156>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d106      	bne.n	8006e64 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d106      	bne.n	8007670 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
<<<<<<< HEAD
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7fa ff34 	bl	8001ccc <HAL_TIMEx_HallSensor_MspInit>
=======
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7fa fb2e 	bl	8001ccc <HAL_TIMEx_HallSensor_MspInit>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2202      	movs	r2, #2
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3304      	adds	r3, #4
 8006e74:	4619      	mov	r1, r3
 8006e76:	4610      	mov	r0, r2
 8006e78:	f7ff fb72 	bl	8006560 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6818      	ldr	r0, [r3, #0]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	6819      	ldr	r1, [r3, #0]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	2203      	movs	r2, #3
 8006e8a:	f7ff ff3b 	bl	8006d04 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699a      	ldr	r2, [r3, #24]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 020c 	bic.w	r2, r2, #12
 8006e9c:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6999      	ldr	r1, [r3, #24]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ebe:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	6812      	ldr	r2, [r2, #0]
 8006eca:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ed2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ee2:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	6812      	ldr	r2, [r2, #0]
 8006eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ef2:	f023 0307 	bic.w	r3, r3, #7
 8006ef6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689a      	ldr	r2, [r3, #8]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f042 0204 	orr.w	r2, r2, #4
 8006f06:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006f10:	2370      	movs	r3, #112	@ 0x70
 8006f12:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006f14:	2300      	movs	r3, #0
 8006f16:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f107 020c 	add.w	r2, r7, #12
 8006f2e:	4611      	mov	r1, r2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff fc57 	bl	80067e4 <TIM_OC2_SetConfig>
=======
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3304      	adds	r3, #4
 8007680:	4619      	mov	r1, r3
 8007682:	4610      	mov	r0, r2
 8007684:	f7ff fb72 	bl	8006d6c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6818      	ldr	r0, [r3, #0]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	6819      	ldr	r1, [r3, #0]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	2203      	movs	r2, #3
 8007696:	f7ff ff3b 	bl	8007510 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	699a      	ldr	r2, [r3, #24]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 020c 	bic.w	r2, r2, #12
 80076a8:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6999      	ldr	r1, [r3, #24]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80076ca:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	6812      	ldr	r2, [r2, #0]
 80076d6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80076da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076de:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689a      	ldr	r2, [r3, #8]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076ee:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076fe:	f023 0307 	bic.w	r3, r3, #7
 8007702:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f042 0204 	orr.w	r2, r2, #4
 8007712:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8007714:	2300      	movs	r3, #0
 8007716:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007718:	2300      	movs	r3, #0
 800771a:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800771c:	2370      	movs	r3, #112	@ 0x70
 800771e:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007720:	2300      	movs	r3, #0
 8007722:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007724:	2300      	movs	r3, #0
 8007726:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007728:	2300      	movs	r3, #0
 800772a:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f107 020c 	add.w	r2, r7, #12
 800773a:	4611      	mov	r1, r2
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff fc57 	bl	8006ff0 <TIM_OC2_SetConfig>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
<<<<<<< HEAD
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	6812      	ldr	r2, [r2, #0]
 8006f40:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006f44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f48:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8006f58:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3728      	adds	r7, #40	@ 0x28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_TIMEx_PWMN_Start>:
=======
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	6812      	ldr	r2, [r2, #0]
 800774c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007754:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8007764:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3728      	adds	r7, #40	@ 0x28
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <HAL_TIMEx_PWMN_Start>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
=======
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d109      	bne.n	8006fb8 <HAL_TIMEx_PWMN_Start+0x24>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	bf14      	ite	ne
 8006fb0:	2301      	movne	r3, #1
 8006fb2:	2300      	moveq	r3, #0
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	e022      	b.n	8006ffe <HAL_TIMEx_PWMN_Start+0x6a>
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	d109      	bne.n	8006fd2 <HAL_TIMEx_PWMN_Start+0x3e>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	bf14      	ite	ne
 8006fca:	2301      	movne	r3, #1
 8006fcc:	2300      	moveq	r3, #0
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	e015      	b.n	8006ffe <HAL_TIMEx_PWMN_Start+0x6a>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b08      	cmp	r3, #8
 8006fd6:	d109      	bne.n	8006fec <HAL_TIMEx_PWMN_Start+0x58>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	bf14      	ite	ne
 8006fe4:	2301      	movne	r3, #1
 8006fe6:	2300      	moveq	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	e008      	b.n	8006ffe <HAL_TIMEx_PWMN_Start+0x6a>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	bf14      	ite	ne
 8006ff8:	2301      	movne	r3, #1
 8006ffa:	2300      	moveq	r3, #0
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e073      	b.n	80070ee <HAL_TIMEx_PWMN_Start+0x15a>
=======
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d109      	bne.n	80077c4 <HAL_TIMEx_PWMN_Start+0x24>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	bf14      	ite	ne
 80077bc:	2301      	movne	r3, #1
 80077be:	2300      	moveq	r3, #0
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	e022      	b.n	800780a <HAL_TIMEx_PWMN_Start+0x6a>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	d109      	bne.n	80077de <HAL_TIMEx_PWMN_Start+0x3e>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	bf14      	ite	ne
 80077d6:	2301      	movne	r3, #1
 80077d8:	2300      	moveq	r3, #0
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	e015      	b.n	800780a <HAL_TIMEx_PWMN_Start+0x6a>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b08      	cmp	r3, #8
 80077e2:	d109      	bne.n	80077f8 <HAL_TIMEx_PWMN_Start+0x58>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	bf14      	ite	ne
 80077f0:	2301      	movne	r3, #1
 80077f2:	2300      	moveq	r3, #0
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	e008      	b.n	800780a <HAL_TIMEx_PWMN_Start+0x6a>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b01      	cmp	r3, #1
 8007802:	bf14      	ite	ne
 8007804:	2301      	movne	r3, #1
 8007806:	2300      	moveq	r3, #0
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e073      	b.n	80078fa <HAL_TIMEx_PWMN_Start+0x15a>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d104      	bne.n	8007016 <HAL_TIMEx_PWMN_Start+0x82>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007014:	e013      	b.n	800703e <HAL_TIMEx_PWMN_Start+0xaa>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b04      	cmp	r3, #4
 800701a:	d104      	bne.n	8007026 <HAL_TIMEx_PWMN_Start+0x92>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007024:	e00b      	b.n	800703e <HAL_TIMEx_PWMN_Start+0xaa>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	2b08      	cmp	r3, #8
 800702a:	d104      	bne.n	8007036 <HAL_TIMEx_PWMN_Start+0xa2>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007034:	e003      	b.n	800703e <HAL_TIMEx_PWMN_Start+0xaa>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2202      	movs	r2, #2
 800703a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2204      	movs	r2, #4
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	4618      	mov	r0, r3
 8007048:	f000 fa52 	bl	80074f0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800705a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a25      	ldr	r2, [pc, #148]	@ (80070f8 <HAL_TIMEx_PWMN_Start+0x164>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d022      	beq.n	80070ac <HAL_TIMEx_PWMN_Start+0x118>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800706e:	d01d      	beq.n	80070ac <HAL_TIMEx_PWMN_Start+0x118>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a21      	ldr	r2, [pc, #132]	@ (80070fc <HAL_TIMEx_PWMN_Start+0x168>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d018      	beq.n	80070ac <HAL_TIMEx_PWMN_Start+0x118>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a20      	ldr	r2, [pc, #128]	@ (8007100 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d013      	beq.n	80070ac <HAL_TIMEx_PWMN_Start+0x118>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a1e      	ldr	r2, [pc, #120]	@ (8007104 <HAL_TIMEx_PWMN_Start+0x170>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d00e      	beq.n	80070ac <HAL_TIMEx_PWMN_Start+0x118>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a1d      	ldr	r2, [pc, #116]	@ (8007108 <HAL_TIMEx_PWMN_Start+0x174>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d009      	beq.n	80070ac <HAL_TIMEx_PWMN_Start+0x118>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a1b      	ldr	r2, [pc, #108]	@ (800710c <HAL_TIMEx_PWMN_Start+0x178>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d004      	beq.n	80070ac <HAL_TIMEx_PWMN_Start+0x118>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a1a      	ldr	r2, [pc, #104]	@ (8007110 <HAL_TIMEx_PWMN_Start+0x17c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d115      	bne.n	80070d8 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689a      	ldr	r2, [r3, #8]
 80070b2:	4b18      	ldr	r3, [pc, #96]	@ (8007114 <HAL_TIMEx_PWMN_Start+0x180>)
 80070b4:	4013      	ands	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2b06      	cmp	r3, #6
 80070bc:	d015      	beq.n	80070ea <HAL_TIMEx_PWMN_Start+0x156>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070c4:	d011      	beq.n	80070ea <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f042 0201 	orr.w	r2, r2, #1
 80070d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070d6:	e008      	b.n	80070ea <HAL_TIMEx_PWMN_Start+0x156>
=======
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d104      	bne.n	8007822 <HAL_TIMEx_PWMN_Start+0x82>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007820:	e013      	b.n	800784a <HAL_TIMEx_PWMN_Start+0xaa>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b04      	cmp	r3, #4
 8007826:	d104      	bne.n	8007832 <HAL_TIMEx_PWMN_Start+0x92>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007830:	e00b      	b.n	800784a <HAL_TIMEx_PWMN_Start+0xaa>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	2b08      	cmp	r3, #8
 8007836:	d104      	bne.n	8007842 <HAL_TIMEx_PWMN_Start+0xa2>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007840:	e003      	b.n	800784a <HAL_TIMEx_PWMN_Start+0xaa>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2202      	movs	r2, #2
 8007846:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2204      	movs	r2, #4
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fa52 	bl	8007cfc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007866:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a25      	ldr	r2, [pc, #148]	@ (8007904 <HAL_TIMEx_PWMN_Start+0x164>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d022      	beq.n	80078b8 <HAL_TIMEx_PWMN_Start+0x118>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800787a:	d01d      	beq.n	80078b8 <HAL_TIMEx_PWMN_Start+0x118>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a21      	ldr	r2, [pc, #132]	@ (8007908 <HAL_TIMEx_PWMN_Start+0x168>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d018      	beq.n	80078b8 <HAL_TIMEx_PWMN_Start+0x118>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a20      	ldr	r2, [pc, #128]	@ (800790c <HAL_TIMEx_PWMN_Start+0x16c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d013      	beq.n	80078b8 <HAL_TIMEx_PWMN_Start+0x118>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a1e      	ldr	r2, [pc, #120]	@ (8007910 <HAL_TIMEx_PWMN_Start+0x170>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00e      	beq.n	80078b8 <HAL_TIMEx_PWMN_Start+0x118>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a1d      	ldr	r2, [pc, #116]	@ (8007914 <HAL_TIMEx_PWMN_Start+0x174>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d009      	beq.n	80078b8 <HAL_TIMEx_PWMN_Start+0x118>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a1b      	ldr	r2, [pc, #108]	@ (8007918 <HAL_TIMEx_PWMN_Start+0x178>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d004      	beq.n	80078b8 <HAL_TIMEx_PWMN_Start+0x118>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a1a      	ldr	r2, [pc, #104]	@ (800791c <HAL_TIMEx_PWMN_Start+0x17c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d115      	bne.n	80078e4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689a      	ldr	r2, [r3, #8]
 80078be:	4b18      	ldr	r3, [pc, #96]	@ (8007920 <HAL_TIMEx_PWMN_Start+0x180>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b06      	cmp	r3, #6
 80078c8:	d015      	beq.n	80078f6 <HAL_TIMEx_PWMN_Start+0x156>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078d0:	d011      	beq.n	80078f6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f042 0201 	orr.w	r2, r2, #1
 80078e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e2:	e008      	b.n	80078f6 <HAL_TIMEx_PWMN_Start+0x156>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f042 0201 	orr.w	r2, r2, #1
 80070e6:	601a      	str	r2, [r3, #0]
 80070e8:	e000      	b.n	80070ec <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ea:	bf00      	nop
=======
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 0201 	orr.w	r2, r2, #1
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	e000      	b.n	80078f8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078f6:	bf00      	nop
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	40012c00 	.word	0x40012c00
 80070fc:	40000400 	.word	0x40000400
 8007100:	40000800 	.word	0x40000800
 8007104:	40000c00 	.word	0x40000c00
 8007108:	40013400 	.word	0x40013400
 800710c:	40014000 	.word	0x40014000
 8007110:	40015000 	.word	0x40015000
 8007114:	00010007 	.word	0x00010007

08007118 <HAL_TIMEx_PWMN_Stop>:
=======
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	40012c00 	.word	0x40012c00
 8007908:	40000400 	.word	0x40000400
 800790c:	40000800 	.word	0x40000800
 8007910:	40000c00 	.word	0x40000c00
 8007914:	40013400 	.word	0x40013400
 8007918:	40014000 	.word	0x40014000
 800791c:	40015000 	.word	0x40015000
 8007920:	00010007 	.word	0x00010007

08007924 <HAL_TIMEx_PWMN_Stop>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
=======
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
<<<<<<< HEAD
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2200      	movs	r2, #0
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	4618      	mov	r0, r3
 800712c:	f000 f9e0 	bl	80074f0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6a1a      	ldr	r2, [r3, #32]
 8007136:	f241 1311 	movw	r3, #4369	@ 0x1111
 800713a:	4013      	ands	r3, r2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10f      	bne.n	8007160 <HAL_TIMEx_PWMN_Stop+0x48>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6a1a      	ldr	r2, [r3, #32]
 8007146:	f244 4344 	movw	r3, #17476	@ 0x4444
 800714a:	4013      	ands	r3, r2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d107      	bne.n	8007160 <HAL_TIMEx_PWMN_Stop+0x48>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800715e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6a1a      	ldr	r2, [r3, #32]
 8007166:	f241 1311 	movw	r3, #4369	@ 0x1111
 800716a:	4013      	ands	r3, r2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10f      	bne.n	8007190 <HAL_TIMEx_PWMN_Stop+0x78>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6a1a      	ldr	r2, [r3, #32]
 8007176:	f244 4344 	movw	r3, #17476	@ 0x4444
 800717a:	4013      	ands	r3, r2
 800717c:	2b00      	cmp	r3, #0
 800717e:	d107      	bne.n	8007190 <HAL_TIMEx_PWMN_Stop+0x78>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0201 	bic.w	r2, r2, #1
 800718e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d104      	bne.n	80071a0 <HAL_TIMEx_PWMN_Stop+0x88>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800719e:	e013      	b.n	80071c8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d104      	bne.n	80071b0 <HAL_TIMEx_PWMN_Stop+0x98>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071ae:	e00b      	b.n	80071c8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	d104      	bne.n	80071c0 <HAL_TIMEx_PWMN_Stop+0xa8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071be:	e003      	b.n	80071c8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2200      	movs	r2, #0
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	4618      	mov	r0, r3
 8007938:	f000 f9e0 	bl	8007cfc <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6a1a      	ldr	r2, [r3, #32]
 8007942:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007946:	4013      	ands	r3, r2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10f      	bne.n	800796c <HAL_TIMEx_PWMN_Stop+0x48>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6a1a      	ldr	r2, [r3, #32]
 8007952:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007956:	4013      	ands	r3, r2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d107      	bne.n	800796c <HAL_TIMEx_PWMN_Stop+0x48>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800796a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6a1a      	ldr	r2, [r3, #32]
 8007972:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007976:	4013      	ands	r3, r2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10f      	bne.n	800799c <HAL_TIMEx_PWMN_Stop+0x78>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6a1a      	ldr	r2, [r3, #32]
 8007982:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007986:	4013      	ands	r3, r2
 8007988:	2b00      	cmp	r3, #0
 800798a:	d107      	bne.n	800799c <HAL_TIMEx_PWMN_Stop+0x78>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0201 	bic.w	r2, r2, #1
 800799a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d104      	bne.n	80079ac <HAL_TIMEx_PWMN_Stop+0x88>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079aa:	e013      	b.n	80079d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d104      	bne.n	80079bc <HAL_TIMEx_PWMN_Stop+0x98>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079ba:	e00b      	b.n	80079d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	2b08      	cmp	r3, #8
 80079c0:	d104      	bne.n	80079cc <HAL_TIMEx_PWMN_Stop+0xa8>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079ca:	e003      	b.n	80079d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
=======
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071e8:	2302      	movs	r3, #2
 80071ea:	e074      	b.n	80072d6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2202      	movs	r2, #2
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a34      	ldr	r2, [pc, #208]	@ (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d009      	beq.n	800722a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a33      	ldr	r2, [pc, #204]	@ (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d004      	beq.n	800722a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a31      	ldr	r2, [pc, #196]	@ (80072ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d108      	bne.n	800723c <HAL_TIMEx_MasterConfigSynchronization+0x68>
=======
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d101      	bne.n	80079f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079f4:	2302      	movs	r3, #2
 80079f6:	e074      	b.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a34      	ldr	r2, [pc, #208]	@ (8007af0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d009      	beq.n	8007a36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a33      	ldr	r2, [pc, #204]	@ (8007af4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d004      	beq.n	8007a36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a31      	ldr	r2, [pc, #196]	@ (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d108      	bne.n	8007a48 <HAL_TIMEx_MasterConfigSynchronization+0x68>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< HEAD
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007230:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	4313      	orrs	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]
=======
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007a3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< HEAD
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007246:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	4313      	orrs	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a21      	ldr	r2, [pc, #132]	@ (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d022      	beq.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800726c:	d01d      	beq.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a1f      	ldr	r2, [pc, #124]	@ (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d018      	beq.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1d      	ldr	r2, [pc, #116]	@ (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a1c      	ldr	r2, [pc, #112]	@ (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00e      	beq.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a15      	ldr	r2, [pc, #84]	@ (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d009      	beq.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a18      	ldr	r2, [pc, #96]	@ (80072fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d004      	beq.n	80072aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a11      	ldr	r2, [pc, #68]	@ (80072ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d10c      	bne.n	80072c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	609a      	str	r2, [r3, #8]
=======
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a21      	ldr	r2, [pc, #132]	@ (8007af0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d022      	beq.n	8007ab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a78:	d01d      	beq.n	8007ab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8007afc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d018      	beq.n	8007ab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a1d      	ldr	r2, [pc, #116]	@ (8007b00 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d013      	beq.n	8007ab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a1c      	ldr	r2, [pc, #112]	@ (8007b04 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d00e      	beq.n	8007ab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a15      	ldr	r2, [pc, #84]	@ (8007af4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d009      	beq.n	8007ab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a18      	ldr	r2, [pc, #96]	@ (8007b08 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d004      	beq.n	8007ab6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a11      	ldr	r2, [pc, #68]	@ (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d10c      	bne.n	8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	609a      	str	r2, [r3, #8]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	40012c00 	.word	0x40012c00
 80072e8:	40013400 	.word	0x40013400
 80072ec:	40015000 	.word	0x40015000
 80072f0:	40000400 	.word	0x40000400
 80072f4:	40000800 	.word	0x40000800
 80072f8:	40000c00 	.word	0x40000c00
 80072fc:	40014000 	.word	0x40014000

08007300 <HAL_TIMEx_ConfigBreakDeadTime>:
=======
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	40012c00 	.word	0x40012c00
 8007af4:	40013400 	.word	0x40013400
 8007af8:	40015000 	.word	0x40015000
 8007afc:	40000400 	.word	0x40000400
 8007b00:	40000800 	.word	0x40000800
 8007b04:	40000c00 	.word	0x40000c00
 8007b08:	40014000 	.word	0x40014000

08007b0c <HAL_TIMEx_ConfigBreakDeadTime>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
<<<<<<< HEAD
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800730a:	2300      	movs	r3, #0
 800730c:	60fb      	str	r3, [r7, #12]
=======
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007314:	2b01      	cmp	r3, #1
 8007316:	d101      	bne.n	800731c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007318:	2302      	movs	r3, #2
 800731a:	e096      	b.n	800744a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d101      	bne.n	8007b28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b24:	2302      	movs	r3, #2
 8007b26:	e096      	b.n	8007c56 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
<<<<<<< HEAD
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	4313      	orrs	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	4313      	orrs	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	041b      	lsls	r3, r3, #16
 8007392:	4313      	orrs	r3, r2
 8007394:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a2f      	ldr	r2, [pc, #188]	@ (8007458 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d009      	beq.n	80073b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a2d      	ldr	r2, [pc, #180]	@ (800745c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d004      	beq.n	80073b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a2c      	ldr	r2, [pc, #176]	@ (8007460 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d106      	bne.n	80073c2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
=======
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	041b      	lsls	r3, r3, #16
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8007c64 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d009      	beq.n	8007bc0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8007c68 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d004      	beq.n	8007bc0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a2c      	ldr	r2, [pc, #176]	@ (8007c6c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d106      	bne.n	8007bce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
<<<<<<< HEAD
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	4313      	orrs	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a24      	ldr	r2, [pc, #144]	@ (8007458 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d009      	beq.n	80073e0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a22      	ldr	r2, [pc, #136]	@ (800745c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d004      	beq.n	80073e0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a21      	ldr	r2, [pc, #132]	@ (8007460 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d12b      	bne.n	8007438 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
=======
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a24      	ldr	r2, [pc, #144]	@ (8007c64 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d009      	beq.n	8007bec <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a22      	ldr	r2, [pc, #136]	@ (8007c68 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d004      	beq.n	8007bec <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a21      	ldr	r2, [pc, #132]	@ (8007c6c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d12b      	bne.n	8007c44 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
<<<<<<< HEAD
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ea:	051b      	lsls	r3, r3, #20
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007408:	4313      	orrs	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a11      	ldr	r2, [pc, #68]	@ (8007458 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d009      	beq.n	800742a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a10      	ldr	r2, [pc, #64]	@ (800745c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d004      	beq.n	800742a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a0e      	ldr	r2, [pc, #56]	@ (8007460 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d106      	bne.n	8007438 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
=======
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf6:	051b      	lsls	r3, r3, #20
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a11      	ldr	r2, [pc, #68]	@ (8007c64 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d009      	beq.n	8007c36 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a10      	ldr	r2, [pc, #64]	@ (8007c68 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d004      	beq.n	8007c36 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a0e      	ldr	r2, [pc, #56]	@ (8007c6c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d106      	bne.n	8007c44 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
<<<<<<< HEAD
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007434:	4313      	orrs	r3, r2
 8007436:	60fb      	str	r3, [r7, #12]
=======
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
<<<<<<< HEAD
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	40012c00 	.word	0x40012c00
 800745c:	40013400 	.word	0x40013400
 8007460:	40015000 	.word	0x40015000

08007464 <HAL_TIMEx_CommutCallback>:
=======
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	40012c00 	.word	0x40012c00
 8007c68:	40013400 	.word	0x40013400
 8007c6c:	40015000 	.word	0x40015000

08007c70 <HAL_TIMEx_CommutCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
=======
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_TIMEx_BreakCallback>:
=======
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_TIMEx_BreakCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
=======
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_TIMEx_Break2Callback>:
=======
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_TIMEx_Break2Callback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
=======
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_TIMEx_EncoderIndexCallback>:
=======
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_TIMEx_EncoderIndexCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
=======
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_TIMEx_DirectionChangeCallback>:
=======
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_TIMEx_DirectionChangeCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
=======
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <HAL_TIMEx_IndexErrorCallback>:
=======
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <HAL_TIMEx_IndexErrorCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
=======
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_TIMEx_TransitionErrorCallback>:
=======
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <HAL_TIMEx_TransitionErrorCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
=======
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <TIM_CCxNChannelCmd>:
=======
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <TIM_CCxNChannelCmd>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
<<<<<<< HEAD
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f003 031f 	and.w	r3, r3, #31
 8007502:	2204      	movs	r2, #4
 8007504:	fa02 f303 	lsl.w	r3, r2, r3
 8007508:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6a1a      	ldr	r2, [r3, #32]
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	43db      	mvns	r3, r3
 8007512:	401a      	ands	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a1a      	ldr	r2, [r3, #32]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f003 031f 	and.w	r3, r3, #31
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	fa01 f303 	lsl.w	r3, r1, r3
 8007528:	431a      	orrs	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	621a      	str	r2, [r3, #32]
}
 800752e:	bf00      	nop
 8007530:	371c      	adds	r7, #28
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <HAL_UART_Init>:
=======
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f003 031f 	and.w	r3, r3, #31
 8007d0e:	2204      	movs	r2, #4
 8007d10:	fa02 f303 	lsl.w	r3, r2, r3
 8007d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6a1a      	ldr	r2, [r3, #32]
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	43db      	mvns	r3, r3
 8007d1e:	401a      	ands	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a1a      	ldr	r2, [r3, #32]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f003 031f 	and.w	r3, r3, #31
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	fa01 f303 	lsl.w	r3, r1, r3
 8007d34:	431a      	orrs	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	621a      	str	r2, [r3, #32]
}
 8007d3a:	bf00      	nop
 8007d3c:	371c      	adds	r7, #28
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <HAL_UART_Init>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800753a:	b580      	push	{r7, lr}
 800753c:	b082      	sub	sp, #8
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e042      	b.n	80075d2 <HAL_UART_Init+0x98>
=======
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b082      	sub	sp, #8
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e042      	b.n	8007dde <HAL_UART_Init+0x98>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
=======
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d106      	bne.n	8007d70 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7fa fd16 	bl	8001f90 <HAL_UART_MspInit>
=======
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7fa f910 	bl	8001f90 <HAL_UART_MspInit>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2224      	movs	r2, #36	@ 0x24
 8007568:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0201 	bic.w	r2, r2, #1
 800757a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fc51 	bl	8007e24 <UART_SetConfig>
 8007582:	4603      	mov	r3, r0
 8007584:	2b01      	cmp	r3, #1
 8007586:	d101      	bne.n	800758c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e022      	b.n	80075d2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 ff41 	bl	800841c <UART_AdvFeatureConfig>
=======
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2224      	movs	r2, #36	@ 0x24
 8007d74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 0201 	bic.w	r2, r2, #1
 8007d86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fc51 	bl	8008630 <UART_SetConfig>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d101      	bne.n	8007d98 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e022      	b.n	8007dde <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d002      	beq.n	8007da6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 ff41 	bl	8008c28 <UART_AdvFeatureConfig>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f042 0201 	orr.w	r2, r2, #1
 80075c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 ffc8 	bl	8008560 <UART_CheckIdleState>
 80075d0:	4603      	mov	r3, r0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <HAL_UART_Transmit>:
=======
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007db4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689a      	ldr	r2, [r3, #8]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007dc4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f042 0201 	orr.w	r2, r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 ffc8 	bl	8008d6c <UART_CheckIdleState>
 8007ddc:	4603      	mov	r3, r0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <HAL_UART_Transmit>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80075da:	b580      	push	{r7, lr}
 80075dc:	b08a      	sub	sp, #40	@ 0x28
 80075de:	af02      	add	r7, sp, #8
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	603b      	str	r3, [r7, #0]
 80075e6:	4613      	mov	r3, r2
 80075e8:	80fb      	strh	r3, [r7, #6]
=======
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b08a      	sub	sp, #40	@ 0x28
 8007dea:	af02      	add	r7, sp, #8
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	60b9      	str	r1, [r7, #8]
 8007df0:	603b      	str	r3, [r7, #0]
 8007df2:	4613      	mov	r3, r2
 8007df4:	80fb      	strh	r3, [r7, #6]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
<<<<<<< HEAD
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075f0:	2b20      	cmp	r3, #32
 80075f2:	f040 8083 	bne.w	80076fc <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d002      	beq.n	8007602 <HAL_UART_Transmit+0x28>
 80075fc:	88fb      	ldrh	r3, [r7, #6]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e07b      	b.n	80076fe <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_UART_Transmit+0x3a>
 8007610:	2302      	movs	r3, #2
 8007612:	e074      	b.n	80076fe <HAL_UART_Transmit+0x124>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2221      	movs	r2, #33	@ 0x21
 8007628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800762c:	f7fb f866 	bl	80026fc <HAL_GetTick>
 8007630:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	88fa      	ldrh	r2, [r7, #6]
 8007636:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	88fa      	ldrh	r2, [r7, #6]
 800763e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800764a:	d108      	bne.n	800765e <HAL_UART_Transmit+0x84>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d104      	bne.n	800765e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007654:	2300      	movs	r3, #0
 8007656:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	61bb      	str	r3, [r7, #24]
 800765c:	e003      	b.n	8007666 <HAL_UART_Transmit+0x8c>
=======
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	f040 8083 	bne.w	8007f08 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d002      	beq.n	8007e0e <HAL_UART_Transmit+0x28>
 8007e08:	88fb      	ldrh	r3, [r7, #6]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e07b      	b.n	8007f0a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d101      	bne.n	8007e20 <HAL_UART_Transmit+0x3a>
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	e074      	b.n	8007f0a <HAL_UART_Transmit+0x124>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2221      	movs	r2, #33	@ 0x21
 8007e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e38:	f7fa fcc2 	bl	80027c0 <HAL_GetTick>
 8007e3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	88fa      	ldrh	r2, [r7, #6]
 8007e42:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	88fa      	ldrh	r2, [r7, #6]
 8007e4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e56:	d108      	bne.n	8007e6a <HAL_UART_Transmit+0x84>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d104      	bne.n	8007e6a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007e60:	2300      	movs	r3, #0
 8007e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	61bb      	str	r3, [r7, #24]
 8007e68:	e003      	b.n	8007e72 <HAL_UART_Transmit+0x8c>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007662:	2300      	movs	r3, #0
 8007664:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 800766e:	e02c      	b.n	80076ca <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	2200      	movs	r2, #0
 8007678:	2180      	movs	r1, #128	@ 0x80
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 ffbb 	bl	80085f6 <UART_WaitOnFlagUntilTimeout>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e039      	b.n	80076fe <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10b      	bne.n	80076a8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800769e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	3302      	adds	r3, #2
 80076a4:	61bb      	str	r3, [r7, #24]
 80076a6:	e007      	b.n	80076b8 <HAL_UART_Transmit+0xde>
=======
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8007e7a:	e02c      	b.n	8007ed6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	2200      	movs	r2, #0
 8007e84:	2180      	movs	r1, #128	@ 0x80
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 ffbb 	bl	8008e02 <UART_WaitOnFlagUntilTimeout>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e039      	b.n	8007f0a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10b      	bne.n	8007eb4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eaa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	3302      	adds	r3, #2
 8007eb0:	61bb      	str	r3, [r7, #24]
 8007eb2:	e007      	b.n	8007ec4 <HAL_UART_Transmit+0xde>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	781a      	ldrb	r2, [r3, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	3301      	adds	r3, #1
 80076b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1cc      	bne.n	8007670 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2200      	movs	r2, #0
 80076de:	2140      	movs	r1, #64	@ 0x40
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 ff88 	bl	80085f6 <UART_WaitOnFlagUntilTimeout>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e006      	b.n	80076fe <HAL_UART_Transmit+0x124>
=======
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	781a      	ldrb	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1cc      	bne.n	8007e7c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2140      	movs	r1, #64	@ 0x40
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 ff88 	bl	8008e02 <UART_WaitOnFlagUntilTimeout>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e006      	b.n	8007f0a <HAL_UART_Transmit+0x124>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2220      	movs	r2, #32
 80076f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	e000      	b.n	80076fe <HAL_UART_Transmit+0x124>
=======
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2220      	movs	r2, #32
 8007f00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	e000      	b.n	8007f0a <HAL_UART_Transmit+0x124>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80076fc:	2302      	movs	r3, #2
  }
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3720      	adds	r7, #32
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <HAL_UART_Receive_IT>:
=======
 8007f08:	2302      	movs	r3, #2
  }
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3720      	adds	r7, #32
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
	...

08007f14 <HAL_UART_Receive_IT>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8007708:	b580      	push	{r7, lr}
 800770a:	b08a      	sub	sp, #40	@ 0x28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	4613      	mov	r3, r2
 8007714:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800771c:	2b20      	cmp	r3, #32
 800771e:	d142      	bne.n	80077a6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d002      	beq.n	800772c <HAL_UART_Receive_IT+0x24>
 8007726:	88fb      	ldrh	r3, [r7, #6]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e03b      	b.n	80077a8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007736:	2b01      	cmp	r3, #1
 8007738:	d101      	bne.n	800773e <HAL_UART_Receive_IT+0x36>
 800773a:	2302      	movs	r3, #2
 800773c:	e034      	b.n	80077a8 <HAL_UART_Receive_IT+0xa0>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a17      	ldr	r2, [pc, #92]	@ (80077b0 <HAL_UART_Receive_IT+0xa8>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d01f      	beq.n	8007796 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d018      	beq.n	8007796 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	617b      	str	r3, [r7, #20]
=======
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08a      	sub	sp, #40	@ 0x28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f28:	2b20      	cmp	r3, #32
 8007f2a:	d142      	bne.n	8007fb2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d002      	beq.n	8007f38 <HAL_UART_Receive_IT+0x24>
 8007f32:	88fb      	ldrh	r3, [r7, #6]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d101      	bne.n	8007f3c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e03b      	b.n	8007fb4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d101      	bne.n	8007f4a <HAL_UART_Receive_IT+0x36>
 8007f46:	2302      	movs	r3, #2
 8007f48:	e034      	b.n	8007fb4 <HAL_UART_Receive_IT+0xa0>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a17      	ldr	r2, [pc, #92]	@ (8007fbc <HAL_UART_Receive_IT+0xa8>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d01f      	beq.n	8007fa2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d018      	beq.n	8007fa2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	617b      	str	r3, [r7, #20]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	613b      	str	r3, [r7, #16]
   return(result);
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007778:	627b      	str	r3, [r7, #36]	@ 0x24
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007782:	623b      	str	r3, [r7, #32]
 8007784:	61fa      	str	r2, [r7, #28]
=======
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8e:	623b      	str	r3, [r7, #32]
 8007f90:	61fa      	str	r2, [r7, #28]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8007786:	69f9      	ldr	r1, [r7, #28]
 8007788:	6a3a      	ldr	r2, [r7, #32]
 800778a:	e841 2300 	strex	r3, r2, [r1]
 800778e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1e6      	bne.n	8007764 <HAL_UART_Receive_IT+0x5c>
=======
 8007f92:	69f9      	ldr	r1, [r7, #28]
 8007f94:	6a3a      	ldr	r2, [r7, #32]
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e6      	bne.n	8007f70 <HAL_UART_Receive_IT+0x5c>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
<<<<<<< HEAD
 8007796:	88fb      	ldrh	r3, [r7, #6]
 8007798:	461a      	mov	r2, r3
 800779a:	68b9      	ldr	r1, [r7, #8]
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 fff3 	bl	8008788 <UART_Start_Receive_IT>
 80077a2:	4603      	mov	r3, r0
 80077a4:	e000      	b.n	80077a8 <HAL_UART_Receive_IT+0xa0>
=======
 8007fa2:	88fb      	ldrh	r3, [r7, #6]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68b9      	ldr	r1, [r7, #8]
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f000 fff3 	bl	8008f94 <UART_Start_Receive_IT>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	e000      	b.n	8007fb4 <HAL_UART_Receive_IT+0xa0>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80077a6:	2302      	movs	r3, #2
  }
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3728      	adds	r7, #40	@ 0x28
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	40008000 	.word	0x40008000

080077b4 <HAL_UART_IRQHandler>:
=======
 8007fb2:	2302      	movs	r3, #2
  }
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3728      	adds	r7, #40	@ 0x28
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	40008000 	.word	0x40008000

08007fc0 <HAL_UART_IRQHandler>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b0ba      	sub	sp, #232	@ 0xe8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
=======
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b0ba      	sub	sp, #232	@ 0xe8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< HEAD
 80077da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80077de:	f640 030f 	movw	r3, #2063	@ 0x80f
 80077e2:	4013      	ands	r3, r2
 80077e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80077e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d11b      	bne.n	8007828 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077f4:	f003 0320 	and.w	r3, r3, #32
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d015      	beq.n	8007828 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007800:	f003 0320 	and.w	r3, r3, #32
 8007804:	2b00      	cmp	r3, #0
 8007806:	d105      	bne.n	8007814 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007808:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800780c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d009      	beq.n	8007828 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 82d6 	beq.w	8007dca <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	4798      	blx	r3
      }
      return;
 8007826:	e2d0      	b.n	8007dca <HAL_UART_IRQHandler+0x616>
=======
 8007fe6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007fea:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007fee:	4013      	ands	r3, r2
 8007ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007ff4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d11b      	bne.n	8008034 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008000:	f003 0320 	and.w	r3, r3, #32
 8008004:	2b00      	cmp	r3, #0
 8008006:	d015      	beq.n	8008034 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800800c:	f003 0320 	and.w	r3, r3, #32
 8008010:	2b00      	cmp	r3, #0
 8008012:	d105      	bne.n	8008020 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d009      	beq.n	8008034 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 82d6 	beq.w	80085d6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	4798      	blx	r3
      }
      return;
 8008032:	e2d0      	b.n	80085d6 <HAL_UART_IRQHandler+0x616>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
<<<<<<< HEAD
 8007828:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 811f 	beq.w	8007a70 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007832:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007836:	4b8b      	ldr	r3, [pc, #556]	@ (8007a64 <HAL_UART_IRQHandler+0x2b0>)
 8007838:	4013      	ands	r3, r2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d106      	bne.n	800784c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800783e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007842:	4b89      	ldr	r3, [pc, #548]	@ (8007a68 <HAL_UART_IRQHandler+0x2b4>)
 8007844:	4013      	ands	r3, r2
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 8112 	beq.w	8007a70 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800784c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b00      	cmp	r3, #0
 8007856:	d011      	beq.n	800787c <HAL_UART_IRQHandler+0xc8>
 8007858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800785c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00b      	beq.n	800787c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2201      	movs	r2, #1
 800786a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007872:	f043 0201 	orr.w	r2, r3, #1
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
=======
 8008034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 811f 	beq.w	800827c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800803e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008042:	4b8b      	ldr	r3, [pc, #556]	@ (8008270 <HAL_UART_IRQHandler+0x2b0>)
 8008044:	4013      	ands	r3, r2
 8008046:	2b00      	cmp	r3, #0
 8008048:	d106      	bne.n	8008058 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800804a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800804e:	4b89      	ldr	r3, [pc, #548]	@ (8008274 <HAL_UART_IRQHandler+0x2b4>)
 8008050:	4013      	ands	r3, r2
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 8112 	beq.w	800827c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	d011      	beq.n	8008088 <HAL_UART_IRQHandler+0xc8>
 8008064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00b      	beq.n	8008088 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2201      	movs	r2, #1
 8008076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800807e:	f043 0201 	orr.w	r2, r3, #1
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 800787c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d011      	beq.n	80078ac <HAL_UART_IRQHandler+0xf8>
 8007888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00b      	beq.n	80078ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2202      	movs	r2, #2
 800789a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078a2:	f043 0204 	orr.w	r2, r3, #4
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
=======
 8008088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d011      	beq.n	80080b8 <HAL_UART_IRQHandler+0xf8>
 8008094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00b      	beq.n	80080b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2202      	movs	r2, #2
 80080a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080ae:	f043 0204 	orr.w	r2, r3, #4
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 80078ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d011      	beq.n	80078dc <HAL_UART_IRQHandler+0x128>
 80078b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00b      	beq.n	80078dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2204      	movs	r2, #4
 80078ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078d2:	f043 0202 	orr.w	r2, r3, #2
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
=======
 80080b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080bc:	f003 0304 	and.w	r3, r3, #4
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d011      	beq.n	80080e8 <HAL_UART_IRQHandler+0x128>
 80080c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00b      	beq.n	80080e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2204      	movs	r2, #4
 80080d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080de:	f043 0202 	orr.w	r2, r3, #2
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< HEAD
 80078dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078e0:	f003 0308 	and.w	r3, r3, #8
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d017      	beq.n	8007918 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078ec:	f003 0320 	and.w	r3, r3, #32
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d105      	bne.n	8007900 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80078f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80078f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007a64 <HAL_UART_IRQHandler+0x2b0>)
 80078fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00b      	beq.n	8007918 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2208      	movs	r2, #8
 8007906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800790e:	f043 0208 	orr.w	r2, r3, #8
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
=======
 80080e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080ec:	f003 0308 	and.w	r3, r3, #8
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d017      	beq.n	8008124 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080f8:	f003 0320 	and.w	r3, r3, #32
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d105      	bne.n	800810c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008100:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008104:	4b5a      	ldr	r3, [pc, #360]	@ (8008270 <HAL_UART_IRQHandler+0x2b0>)
 8008106:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00b      	beq.n	8008124 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2208      	movs	r2, #8
 8008112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800811a:	f043 0208 	orr.w	r2, r3, #8
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< HEAD
 8007918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800791c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007920:	2b00      	cmp	r3, #0
 8007922:	d012      	beq.n	800794a <HAL_UART_IRQHandler+0x196>
 8007924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007928:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00c      	beq.n	800794a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007938:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007940:	f043 0220 	orr.w	r2, r3, #32
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
=======
 8008124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800812c:	2b00      	cmp	r3, #0
 800812e:	d012      	beq.n	8008156 <HAL_UART_IRQHandler+0x196>
 8008130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008134:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00c      	beq.n	8008156 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008144:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800814c:	f043 0220 	orr.w	r2, r3, #32
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 823c 	beq.w	8007dce <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800795a:	f003 0320 	and.w	r3, r3, #32
 800795e:	2b00      	cmp	r3, #0
 8007960:	d013      	beq.n	800798a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007966:	f003 0320 	and.w	r3, r3, #32
 800796a:	2b00      	cmp	r3, #0
 800796c:	d105      	bne.n	800797a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800796e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d007      	beq.n	800798a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	4798      	blx	r3
=======
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 823c 	beq.w	80085da <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b00      	cmp	r3, #0
 800816c:	d013      	beq.n	8008196 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800816e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008172:	f003 0320 	and.w	r3, r3, #32
 8008176:	2b00      	cmp	r3, #0
 8008178:	d105      	bne.n	8008186 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800817a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800817e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d007      	beq.n	8008196 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	4798      	blx	r3
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< HEAD
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007990:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800799e:	2b40      	cmp	r3, #64	@ 0x40
 80079a0:	d005      	beq.n	80079ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d04f      	beq.n	8007a4e <HAL_UART_IRQHandler+0x29a>
=======
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800819c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081aa:	2b40      	cmp	r3, #64	@ 0x40
 80081ac:	d005      	beq.n	80081ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80081ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80081b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d04f      	beq.n	800825a <HAL_UART_IRQHandler+0x29a>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 f814 	bl	80089dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079be:	2b40      	cmp	r3, #64	@ 0x40
 80079c0:	d141      	bne.n	8007a46 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3308      	adds	r3, #8
 80079c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80079d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3308      	adds	r3, #8
 80079ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80079ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80079f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80079fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1d9      	bne.n	80079c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d013      	beq.n	8007a3e <HAL_UART_IRQHandler+0x28a>
=======
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f001 f814 	bl	80091e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ca:	2b40      	cmp	r3, #64	@ 0x40
 80081cc:	d141      	bne.n	8008252 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3308      	adds	r3, #8
 80081d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081dc:	e853 3f00 	ldrex	r3, [r3]
 80081e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80081e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3308      	adds	r3, #8
 80081f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80081fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80081fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008206:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800820a:	e841 2300 	strex	r3, r2, [r1]
 800820e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1d9      	bne.n	80081ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800821e:	2b00      	cmp	r3, #0
 8008220:	d013      	beq.n	800824a <HAL_UART_IRQHandler+0x28a>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a1a:	4a14      	ldr	r2, [pc, #80]	@ (8007a6c <HAL_UART_IRQHandler+0x2b8>)
 8007a1c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fc fc24 	bl	8004270 <HAL_DMA_Abort_IT>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d017      	beq.n	8007a5e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8007a38:	4610      	mov	r0, r2
 8007a3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a3c:	e00f      	b.n	8007a5e <HAL_UART_IRQHandler+0x2aa>
=======
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008226:	4a14      	ldr	r2, [pc, #80]	@ (8008278 <HAL_UART_IRQHandler+0x2b8>)
 8008228:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800822e:	4618      	mov	r0, r3
 8008230:	f7fc fc24 	bl	8004a7c <HAL_DMA_Abort_IT>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d017      	beq.n	800826a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800823e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8008244:	4610      	mov	r0, r2
 8008246:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008248:	e00f      	b.n	800826a <HAL_UART_IRQHandler+0x2aa>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f9da 	bl	8007df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a44:	e00b      	b.n	8007a5e <HAL_UART_IRQHandler+0x2aa>
=======
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f9da 	bl	8008604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008250:	e00b      	b.n	800826a <HAL_UART_IRQHandler+0x2aa>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f9d6 	bl	8007df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a4c:	e007      	b.n	8007a5e <HAL_UART_IRQHandler+0x2aa>
=======
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f9d6 	bl	8008604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008258:	e007      	b.n	800826a <HAL_UART_IRQHandler+0x2aa>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f9d2 	bl	8007df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8007a5c:	e1b7      	b.n	8007dce <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a5e:	bf00      	nop
    return;
 8007a60:	e1b5      	b.n	8007dce <HAL_UART_IRQHandler+0x61a>
 8007a62:	bf00      	nop
 8007a64:	10000001 	.word	0x10000001
 8007a68:	04000120 	.word	0x04000120
 8007a6c:	08008aa9 	.word	0x08008aa9
=======
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f9d2 	bl	8008604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8008268:	e1b7      	b.n	80085da <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800826a:	bf00      	nop
    return;
 800826c:	e1b5      	b.n	80085da <HAL_UART_IRQHandler+0x61a>
 800826e:	bf00      	nop
 8008270:	10000001 	.word	0x10000001
 8008274:	04000120 	.word	0x04000120
 8008278:	080092b5 	.word	0x080092b5
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	f040 814a 	bne.w	8007d0e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a7e:	f003 0310 	and.w	r3, r3, #16
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 8143 	beq.w	8007d0e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a8c:	f003 0310 	and.w	r3, r3, #16
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 813c 	beq.w	8007d0e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2210      	movs	r2, #16
 8007a9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aa8:	2b40      	cmp	r3, #64	@ 0x40
 8007aaa:	f040 80b5 	bne.w	8007c18 <HAL_UART_IRQHandler+0x464>
=======
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008280:	2b01      	cmp	r3, #1
 8008282:	f040 814a 	bne.w	800851a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800828a:	f003 0310 	and.w	r3, r3, #16
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 8143 	beq.w	800851a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008298:	f003 0310 	and.w	r3, r3, #16
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 813c 	beq.w	800851a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2210      	movs	r2, #16
 80082a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082b4:	2b40      	cmp	r3, #64	@ 0x40
 80082b6:	f040 80b5 	bne.w	8008424 <HAL_UART_IRQHandler+0x464>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007aba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 8187 	beq.w	8007dd2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	f080 817f 	bcs.w	8007dd2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ada:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0320 	and.w	r3, r3, #32
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f040 8086 	bne.w	8007bfc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007afc:	e853 3f00 	ldrex	r3, [r3]
 8007b00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	461a      	mov	r2, r3
 8007b16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b1e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b2a:	e841 2300 	strex	r3, r2, [r1]
 8007b2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1da      	bne.n	8007af0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3308      	adds	r3, #8
 8007b40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b4c:	f023 0301 	bic.w	r3, r3, #1
 8007b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3308      	adds	r3, #8
 8007b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1e1      	bne.n	8007b3a <HAL_UART_IRQHandler+0x386>
=======
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 8187 	beq.w	80085de <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80082d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082da:	429a      	cmp	r2, r3
 80082dc:	f080 817f 	bcs.w	80085de <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0320 	and.w	r3, r3, #32
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f040 8086 	bne.w	8008408 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008308:	e853 3f00 	ldrex	r3, [r3]
 800830c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008310:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	461a      	mov	r2, r3
 8008322:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008326:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800832a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008332:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800833e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1da      	bne.n	80082fc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	3308      	adds	r3, #8
 800834c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008356:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008358:	f023 0301 	bic.w	r3, r3, #1
 800835c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3308      	adds	r3, #8
 8008366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800836a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800836e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008370:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008372:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008376:	e841 2300 	strex	r3, r2, [r1]
 800837a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800837c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1e1      	bne.n	8008346 <HAL_UART_IRQHandler+0x386>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3308      	adds	r3, #8
 8007b96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ba0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ba8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e3      	bne.n	8007b76 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bc4:	e853 3f00 	ldrex	r3, [r3]
 8007bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bcc:	f023 0310 	bic.w	r3, r3, #16
 8007bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007be0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007be4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007be6:	e841 2300 	strex	r3, r2, [r1]
 8007bea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1e4      	bne.n	8007bbc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fc fae1 	bl	80041be <HAL_DMA_Abort>
=======
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3308      	adds	r3, #8
 8008388:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3308      	adds	r3, #8
 80083a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80083a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80083a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80083ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80083b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e3      	bne.n	8008382 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083d0:	e853 3f00 	ldrex	r3, [r3]
 80083d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083d8:	f023 0310 	bic.w	r3, r3, #16
 80083dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	461a      	mov	r2, r3
 80083e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083f2:	e841 2300 	strex	r3, r2, [r1]
 80083f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1e4      	bne.n	80083c8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008402:	4618      	mov	r0, r3
 8008404:	f7fc fae1 	bl	80049ca <HAL_DMA_Abort>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f8fb 	bl	8007e0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c16:	e0dc      	b.n	8007dd2 <HAL_UART_IRQHandler+0x61e>
=======
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008414:	b29b      	uxth	r3, r3
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	b29b      	uxth	r3, r3
 800841a:	4619      	mov	r1, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f8fb 	bl	8008618 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008422:	e0dc      	b.n	80085de <HAL_UART_IRQHandler+0x61e>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 80ce 	beq.w	8007dd6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007c3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 80c9 	beq.w	8007dd6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4c:	e853 3f00 	ldrex	r3, [r3]
 8007c50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	461a      	mov	r2, r3
 8007c62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c66:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c68:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c6e:	e841 2300 	strex	r3, r2, [r1]
 8007c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e4      	bne.n	8007c44 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3308      	adds	r3, #8
 8007c80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c84:	e853 3f00 	ldrex	r3, [r3]
 8007c88:	623b      	str	r3, [r7, #32]
   return(result);
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c90:	f023 0301 	bic.w	r3, r3, #1
 8007c94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3308      	adds	r3, #8
 8007c9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ca2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007caa:	e841 2300 	strex	r3, r2, [r1]
 8007cae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e1      	bne.n	8007c7a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	e853 3f00 	ldrex	r3, [r3]
 8007cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f023 0310 	bic.w	r3, r3, #16
 8007cde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007cec:	61fb      	str	r3, [r7, #28]
 8007cee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	69b9      	ldr	r1, [r7, #24]
 8007cf2:	69fa      	ldr	r2, [r7, #28]
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e4      	bne.n	8007cca <HAL_UART_IRQHandler+0x516>
=======
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008430:	b29b      	uxth	r3, r3
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800843e:	b29b      	uxth	r3, r3
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 80ce 	beq.w	80085e2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008446:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 80c9 	beq.w	80085e2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800845e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008460:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008464:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	461a      	mov	r2, r3
 800846e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008472:	647b      	str	r3, [r7, #68]	@ 0x44
 8008474:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008476:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008478:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800847a:	e841 2300 	strex	r3, r2, [r1]
 800847e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1e4      	bne.n	8008450 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3308      	adds	r3, #8
 800848c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008490:	e853 3f00 	ldrex	r3, [r3]
 8008494:	623b      	str	r3, [r7, #32]
   return(result);
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800849c:	f023 0301 	bic.w	r3, r3, #1
 80084a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3308      	adds	r3, #8
 80084aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80084ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80084b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e1      	bne.n	8008486 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2220      	movs	r2, #32
 80084c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0310 	bic.w	r3, r3, #16
 80084ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80084f8:	61fb      	str	r3, [r7, #28]
 80084fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	69b9      	ldr	r1, [r7, #24]
 80084fe:	69fa      	ldr	r2, [r7, #28]
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	617b      	str	r3, [r7, #20]
   return(result);
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e4      	bne.n	80084d6 <HAL_UART_IRQHandler+0x516>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 8007d00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f880 	bl	8007e0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d0c:	e063      	b.n	8007dd6 <HAL_UART_IRQHandler+0x622>
=======
 800850c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f880 	bl	8008618 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008518:	e063      	b.n	80085e2 <HAL_UART_IRQHandler+0x622>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
<<<<<<< HEAD
 8007d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00e      	beq.n	8007d38 <HAL_UART_IRQHandler+0x584>
 8007d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d008      	beq.n	8007d38 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007d2e:	621a      	str	r2, [r3, #32]
=======
 800851a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800851e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00e      	beq.n	8008544 <HAL_UART_IRQHandler+0x584>
 8008526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800852a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d008      	beq.n	8008544 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800853a:	621a      	str	r2, [r3, #32]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
<<<<<<< HEAD
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f001 fb57 	bl	80093e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d36:	e051      	b.n	8007ddc <HAL_UART_IRQHandler+0x628>
=======
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f001 fb57 	bl	8009bf0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008542:	e051      	b.n	80085e8 <HAL_UART_IRQHandler+0x628>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
<<<<<<< HEAD
 8007d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d014      	beq.n	8007d6e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d105      	bne.n	8007d5c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d008      	beq.n	8007d6e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d03a      	beq.n	8007dda <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	4798      	blx	r3
    }
    return;
 8007d6c:	e035      	b.n	8007dda <HAL_UART_IRQHandler+0x626>
=======
 8008544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800854c:	2b00      	cmp	r3, #0
 800854e:	d014      	beq.n	800857a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008558:	2b00      	cmp	r3, #0
 800855a:	d105      	bne.n	8008568 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800855c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008560:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d008      	beq.n	800857a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800856c:	2b00      	cmp	r3, #0
 800856e:	d03a      	beq.n	80085e6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	4798      	blx	r3
    }
    return;
 8008578:	e035      	b.n	80085e6 <HAL_UART_IRQHandler+0x626>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< HEAD
 8007d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d009      	beq.n	8007d8e <HAL_UART_IRQHandler+0x5da>
 8007d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d003      	beq.n	8007d8e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fea4 	bl	8008ad4 <UART_EndTransmit_IT>
    return;
 8007d8c:	e026      	b.n	8007ddc <HAL_UART_IRQHandler+0x628>
=======
 800857a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800857e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008582:	2b00      	cmp	r3, #0
 8008584:	d009      	beq.n	800859a <HAL_UART_IRQHandler+0x5da>
 8008586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800858a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fea4 	bl	80092e0 <UART_EndTransmit_IT>
    return;
 8008598:	e026      	b.n	80085e8 <HAL_UART_IRQHandler+0x628>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
<<<<<<< HEAD
 8007d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d009      	beq.n	8007dae <HAL_UART_IRQHandler+0x5fa>
 8007d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d9e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d003      	beq.n	8007dae <HAL_UART_IRQHandler+0x5fa>
=======
 800859a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800859e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d009      	beq.n	80085ba <HAL_UART_IRQHandler+0x5fa>
 80085a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085aa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d003      	beq.n	80085ba <HAL_UART_IRQHandler+0x5fa>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
<<<<<<< HEAD
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 fb30 	bl	800940c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dac:	e016      	b.n	8007ddc <HAL_UART_IRQHandler+0x628>
=======
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f001 fb30 	bl	8009c18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085b8:	e016      	b.n	80085e8 <HAL_UART_IRQHandler+0x628>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
<<<<<<< HEAD
 8007dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007db2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d010      	beq.n	8007ddc <HAL_UART_IRQHandler+0x628>
 8007dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	da0c      	bge.n	8007ddc <HAL_UART_IRQHandler+0x628>
=======
 80085ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d010      	beq.n	80085e8 <HAL_UART_IRQHandler+0x628>
 80085c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	da0c      	bge.n	80085e8 <HAL_UART_IRQHandler+0x628>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
<<<<<<< HEAD
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f001 fb18 	bl	80093f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dc8:	e008      	b.n	8007ddc <HAL_UART_IRQHandler+0x628>
      return;
 8007dca:	bf00      	nop
 8007dcc:	e006      	b.n	8007ddc <HAL_UART_IRQHandler+0x628>
    return;
 8007dce:	bf00      	nop
 8007dd0:	e004      	b.n	8007ddc <HAL_UART_IRQHandler+0x628>
      return;
 8007dd2:	bf00      	nop
 8007dd4:	e002      	b.n	8007ddc <HAL_UART_IRQHandler+0x628>
      return;
 8007dd6:	bf00      	nop
 8007dd8:	e000      	b.n	8007ddc <HAL_UART_IRQHandler+0x628>
    return;
 8007dda:	bf00      	nop
  }
}
 8007ddc:	37e8      	adds	r7, #232	@ 0xe8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop

08007de4 <HAL_UART_TxCpltCallback>:
=======
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f001 fb18 	bl	8009c04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085d4:	e008      	b.n	80085e8 <HAL_UART_IRQHandler+0x628>
      return;
 80085d6:	bf00      	nop
 80085d8:	e006      	b.n	80085e8 <HAL_UART_IRQHandler+0x628>
    return;
 80085da:	bf00      	nop
 80085dc:	e004      	b.n	80085e8 <HAL_UART_IRQHandler+0x628>
      return;
 80085de:	bf00      	nop
 80085e0:	e002      	b.n	80085e8 <HAL_UART_IRQHandler+0x628>
      return;
 80085e2:	bf00      	nop
 80085e4:	e000      	b.n	80085e8 <HAL_UART_IRQHandler+0x628>
    return;
 80085e6:	bf00      	nop
  }
}
 80085e8:	37e8      	adds	r7, #232	@ 0xe8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop

080085f0 <HAL_UART_TxCpltCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
=======
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_UART_ErrorCallback>:
=======
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_UART_ErrorCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
=======
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_UARTEx_RxEventCallback>:
=======
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_UARTEx_RxEventCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	807b      	strh	r3, [r7, #2]
=======
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	460b      	mov	r3, r1
 8008622:	807b      	strh	r3, [r7, #2]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <UART_SetConfig>:
=======
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <UART_SetConfig>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e28:	b08c      	sub	sp, #48	@ 0x30
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6178      	str	r0, [r7, #20]
=======
 8008630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008634:	b08c      	sub	sp, #48	@ 0x30
 8008636:	af00      	add	r7, sp, #0
 8008638:	6178      	str	r0, [r7, #20]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< HEAD
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
=======
 800863a:	2300      	movs	r3, #0
 800863c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< HEAD
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	689a      	ldr	r2, [r3, #8]
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	431a      	orrs	r2, r3
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	4baa      	ldr	r3, [pc, #680]	@ (80080fc <UART_SetConfig+0x2d8>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	6812      	ldr	r2, [r2, #0]
 8007e5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e5c:	430b      	orrs	r3, r1
 8007e5e:	6013      	str	r3, [r2, #0]
=======
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	431a      	orrs	r2, r3
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	431a      	orrs	r2, r3
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	4313      	orrs	r3, r2
 8008656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	4baa      	ldr	r3, [pc, #680]	@ (8008908 <UART_SetConfig+0x2d8>)
 8008660:	4013      	ands	r3, r2
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	6812      	ldr	r2, [r2, #0]
 8008666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008668:	430b      	orrs	r3, r1
 800866a:	6013      	str	r3, [r2, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	68da      	ldr	r2, [r3, #12]
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	430a      	orrs	r2, r1
 8007e74:	605a      	str	r2, [r3, #4]
=======
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	68da      	ldr	r2, [r3, #12]
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	605a      	str	r2, [r3, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< HEAD
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a9f      	ldr	r2, [pc, #636]	@ (8008100 <UART_SetConfig+0x2dc>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d004      	beq.n	8007e90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007e9a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	6812      	ldr	r2, [r2, #0]
 8007ea2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ea4:	430b      	orrs	r3, r1
 8007ea6:	6093      	str	r3, [r2, #8]
=======
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a9f      	ldr	r2, [pc, #636]	@ (800890c <UART_SetConfig+0x2dc>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d004      	beq.n	800869c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008698:	4313      	orrs	r3, r2
 800869a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80086a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	6812      	ldr	r2, [r2, #0]
 80086ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086b0:	430b      	orrs	r3, r1
 80086b2:	6093      	str	r3, [r2, #8]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
<<<<<<< HEAD
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eae:	f023 010f 	bic.w	r1, r3, #15
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a90      	ldr	r2, [pc, #576]	@ (8008104 <UART_SetConfig+0x2e0>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d125      	bne.n	8007f14 <UART_SetConfig+0xf0>
 8007ec8:	4b8f      	ldr	r3, [pc, #572]	@ (8008108 <UART_SetConfig+0x2e4>)
 8007eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ece:	f003 0303 	and.w	r3, r3, #3
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d81a      	bhi.n	8007f0c <UART_SetConfig+0xe8>
 8007ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8007edc <UART_SetConfig+0xb8>)
 8007ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007edc:	08007eed 	.word	0x08007eed
 8007ee0:	08007efd 	.word	0x08007efd
 8007ee4:	08007ef5 	.word	0x08007ef5
 8007ee8:	08007f05 	.word	0x08007f05
 8007eec:	2301      	movs	r3, #1
 8007eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ef2:	e116      	b.n	8008122 <UART_SetConfig+0x2fe>
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007efa:	e112      	b.n	8008122 <UART_SetConfig+0x2fe>
 8007efc:	2304      	movs	r3, #4
 8007efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f02:	e10e      	b.n	8008122 <UART_SetConfig+0x2fe>
 8007f04:	2308      	movs	r3, #8
 8007f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f0a:	e10a      	b.n	8008122 <UART_SetConfig+0x2fe>
 8007f0c:	2310      	movs	r3, #16
 8007f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f12:	e106      	b.n	8008122 <UART_SetConfig+0x2fe>
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a7c      	ldr	r2, [pc, #496]	@ (800810c <UART_SetConfig+0x2e8>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d138      	bne.n	8007f90 <UART_SetConfig+0x16c>
 8007f1e:	4b7a      	ldr	r3, [pc, #488]	@ (8008108 <UART_SetConfig+0x2e4>)
 8007f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f24:	f003 030c 	and.w	r3, r3, #12
 8007f28:	2b0c      	cmp	r3, #12
 8007f2a:	d82d      	bhi.n	8007f88 <UART_SetConfig+0x164>
 8007f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f34 <UART_SetConfig+0x110>)
 8007f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f32:	bf00      	nop
 8007f34:	08007f69 	.word	0x08007f69
 8007f38:	08007f89 	.word	0x08007f89
 8007f3c:	08007f89 	.word	0x08007f89
 8007f40:	08007f89 	.word	0x08007f89
 8007f44:	08007f79 	.word	0x08007f79
 8007f48:	08007f89 	.word	0x08007f89
 8007f4c:	08007f89 	.word	0x08007f89
 8007f50:	08007f89 	.word	0x08007f89
 8007f54:	08007f71 	.word	0x08007f71
 8007f58:	08007f89 	.word	0x08007f89
 8007f5c:	08007f89 	.word	0x08007f89
 8007f60:	08007f89 	.word	0x08007f89
 8007f64:	08007f81 	.word	0x08007f81
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f6e:	e0d8      	b.n	8008122 <UART_SetConfig+0x2fe>
 8007f70:	2302      	movs	r3, #2
 8007f72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f76:	e0d4      	b.n	8008122 <UART_SetConfig+0x2fe>
 8007f78:	2304      	movs	r3, #4
 8007f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f7e:	e0d0      	b.n	8008122 <UART_SetConfig+0x2fe>
 8007f80:	2308      	movs	r3, #8
 8007f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f86:	e0cc      	b.n	8008122 <UART_SetConfig+0x2fe>
 8007f88:	2310      	movs	r3, #16
 8007f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8e:	e0c8      	b.n	8008122 <UART_SetConfig+0x2fe>
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a5e      	ldr	r2, [pc, #376]	@ (8008110 <UART_SetConfig+0x2ec>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d125      	bne.n	8007fe6 <UART_SetConfig+0x1c2>
 8007f9a:	4b5b      	ldr	r3, [pc, #364]	@ (8008108 <UART_SetConfig+0x2e4>)
 8007f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fa0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007fa4:	2b30      	cmp	r3, #48	@ 0x30
 8007fa6:	d016      	beq.n	8007fd6 <UART_SetConfig+0x1b2>
 8007fa8:	2b30      	cmp	r3, #48	@ 0x30
 8007faa:	d818      	bhi.n	8007fde <UART_SetConfig+0x1ba>
 8007fac:	2b20      	cmp	r3, #32
 8007fae:	d00a      	beq.n	8007fc6 <UART_SetConfig+0x1a2>
 8007fb0:	2b20      	cmp	r3, #32
 8007fb2:	d814      	bhi.n	8007fde <UART_SetConfig+0x1ba>
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <UART_SetConfig+0x19a>
 8007fb8:	2b10      	cmp	r3, #16
 8007fba:	d008      	beq.n	8007fce <UART_SetConfig+0x1aa>
 8007fbc:	e00f      	b.n	8007fde <UART_SetConfig+0x1ba>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fc4:	e0ad      	b.n	8008122 <UART_SetConfig+0x2fe>
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fcc:	e0a9      	b.n	8008122 <UART_SetConfig+0x2fe>
 8007fce:	2304      	movs	r3, #4
 8007fd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fd4:	e0a5      	b.n	8008122 <UART_SetConfig+0x2fe>
 8007fd6:	2308      	movs	r3, #8
 8007fd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fdc:	e0a1      	b.n	8008122 <UART_SetConfig+0x2fe>
 8007fde:	2310      	movs	r3, #16
 8007fe0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fe4:	e09d      	b.n	8008122 <UART_SetConfig+0x2fe>
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a4a      	ldr	r2, [pc, #296]	@ (8008114 <UART_SetConfig+0x2f0>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d125      	bne.n	800803c <UART_SetConfig+0x218>
 8007ff0:	4b45      	ldr	r3, [pc, #276]	@ (8008108 <UART_SetConfig+0x2e4>)
 8007ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ff6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ffa:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ffc:	d016      	beq.n	800802c <UART_SetConfig+0x208>
 8007ffe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008000:	d818      	bhi.n	8008034 <UART_SetConfig+0x210>
 8008002:	2b80      	cmp	r3, #128	@ 0x80
 8008004:	d00a      	beq.n	800801c <UART_SetConfig+0x1f8>
 8008006:	2b80      	cmp	r3, #128	@ 0x80
 8008008:	d814      	bhi.n	8008034 <UART_SetConfig+0x210>
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <UART_SetConfig+0x1f0>
 800800e:	2b40      	cmp	r3, #64	@ 0x40
 8008010:	d008      	beq.n	8008024 <UART_SetConfig+0x200>
 8008012:	e00f      	b.n	8008034 <UART_SetConfig+0x210>
 8008014:	2300      	movs	r3, #0
 8008016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801a:	e082      	b.n	8008122 <UART_SetConfig+0x2fe>
 800801c:	2302      	movs	r3, #2
 800801e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008022:	e07e      	b.n	8008122 <UART_SetConfig+0x2fe>
 8008024:	2304      	movs	r3, #4
 8008026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800802a:	e07a      	b.n	8008122 <UART_SetConfig+0x2fe>
 800802c:	2308      	movs	r3, #8
 800802e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008032:	e076      	b.n	8008122 <UART_SetConfig+0x2fe>
 8008034:	2310      	movs	r3, #16
 8008036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800803a:	e072      	b.n	8008122 <UART_SetConfig+0x2fe>
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a35      	ldr	r2, [pc, #212]	@ (8008118 <UART_SetConfig+0x2f4>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d12a      	bne.n	800809c <UART_SetConfig+0x278>
 8008046:	4b30      	ldr	r3, [pc, #192]	@ (8008108 <UART_SetConfig+0x2e4>)
 8008048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800804c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008050:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008054:	d01a      	beq.n	800808c <UART_SetConfig+0x268>
 8008056:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800805a:	d81b      	bhi.n	8008094 <UART_SetConfig+0x270>
 800805c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008060:	d00c      	beq.n	800807c <UART_SetConfig+0x258>
 8008062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008066:	d815      	bhi.n	8008094 <UART_SetConfig+0x270>
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <UART_SetConfig+0x250>
 800806c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008070:	d008      	beq.n	8008084 <UART_SetConfig+0x260>
 8008072:	e00f      	b.n	8008094 <UART_SetConfig+0x270>
 8008074:	2300      	movs	r3, #0
 8008076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800807a:	e052      	b.n	8008122 <UART_SetConfig+0x2fe>
 800807c:	2302      	movs	r3, #2
 800807e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008082:	e04e      	b.n	8008122 <UART_SetConfig+0x2fe>
 8008084:	2304      	movs	r3, #4
 8008086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800808a:	e04a      	b.n	8008122 <UART_SetConfig+0x2fe>
 800808c:	2308      	movs	r3, #8
 800808e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008092:	e046      	b.n	8008122 <UART_SetConfig+0x2fe>
 8008094:	2310      	movs	r3, #16
 8008096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800809a:	e042      	b.n	8008122 <UART_SetConfig+0x2fe>
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a17      	ldr	r2, [pc, #92]	@ (8008100 <UART_SetConfig+0x2dc>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d13a      	bne.n	800811c <UART_SetConfig+0x2f8>
 80080a6:	4b18      	ldr	r3, [pc, #96]	@ (8008108 <UART_SetConfig+0x2e4>)
 80080a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80080b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080b4:	d01a      	beq.n	80080ec <UART_SetConfig+0x2c8>
 80080b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080ba:	d81b      	bhi.n	80080f4 <UART_SetConfig+0x2d0>
 80080bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080c0:	d00c      	beq.n	80080dc <UART_SetConfig+0x2b8>
 80080c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080c6:	d815      	bhi.n	80080f4 <UART_SetConfig+0x2d0>
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <UART_SetConfig+0x2b0>
 80080cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080d0:	d008      	beq.n	80080e4 <UART_SetConfig+0x2c0>
 80080d2:	e00f      	b.n	80080f4 <UART_SetConfig+0x2d0>
 80080d4:	2300      	movs	r3, #0
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080da:	e022      	b.n	8008122 <UART_SetConfig+0x2fe>
 80080dc:	2302      	movs	r3, #2
 80080de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080e2:	e01e      	b.n	8008122 <UART_SetConfig+0x2fe>
 80080e4:	2304      	movs	r3, #4
 80080e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ea:	e01a      	b.n	8008122 <UART_SetConfig+0x2fe>
 80080ec:	2308      	movs	r3, #8
 80080ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080f2:	e016      	b.n	8008122 <UART_SetConfig+0x2fe>
 80080f4:	2310      	movs	r3, #16
 80080f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080fa:	e012      	b.n	8008122 <UART_SetConfig+0x2fe>
 80080fc:	cfff69f3 	.word	0xcfff69f3
 8008100:	40008000 	.word	0x40008000
 8008104:	40013800 	.word	0x40013800
 8008108:	40021000 	.word	0x40021000
 800810c:	40004400 	.word	0x40004400
 8008110:	40004800 	.word	0x40004800
 8008114:	40004c00 	.word	0x40004c00
 8008118:	40005000 	.word	0x40005000
 800811c:	2310      	movs	r3, #16
 800811e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4aae      	ldr	r2, [pc, #696]	@ (80083e0 <UART_SetConfig+0x5bc>)
 8008128:	4293      	cmp	r3, r2
 800812a:	f040 8097 	bne.w	800825c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800812e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008132:	2b08      	cmp	r3, #8
 8008134:	d823      	bhi.n	800817e <UART_SetConfig+0x35a>
 8008136:	a201      	add	r2, pc, #4	@ (adr r2, 800813c <UART_SetConfig+0x318>)
 8008138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813c:	08008161 	.word	0x08008161
 8008140:	0800817f 	.word	0x0800817f
 8008144:	08008169 	.word	0x08008169
 8008148:	0800817f 	.word	0x0800817f
 800814c:	0800816f 	.word	0x0800816f
 8008150:	0800817f 	.word	0x0800817f
 8008154:	0800817f 	.word	0x0800817f
 8008158:	0800817f 	.word	0x0800817f
 800815c:	08008177 	.word	0x08008177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008160:	f7fd f970 	bl	8005444 <HAL_RCC_GetPCLK1Freq>
 8008164:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008166:	e010      	b.n	800818a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008168:	4b9e      	ldr	r3, [pc, #632]	@ (80083e4 <UART_SetConfig+0x5c0>)
 800816a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800816c:	e00d      	b.n	800818a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800816e:	f7fd f8fb 	bl	8005368 <HAL_RCC_GetSysClockFreq>
 8008172:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008174:	e009      	b.n	800818a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800817a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800817c:	e005      	b.n	800818a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800817e:	2300      	movs	r3, #0
 8008180:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008188:	bf00      	nop
=======
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ba:	f023 010f 	bic.w	r1, r3, #15
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	430a      	orrs	r2, r1
 80086c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a90      	ldr	r2, [pc, #576]	@ (8008910 <UART_SetConfig+0x2e0>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d125      	bne.n	8008720 <UART_SetConfig+0xf0>
 80086d4:	4b8f      	ldr	r3, [pc, #572]	@ (8008914 <UART_SetConfig+0x2e4>)
 80086d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086da:	f003 0303 	and.w	r3, r3, #3
 80086de:	2b03      	cmp	r3, #3
 80086e0:	d81a      	bhi.n	8008718 <UART_SetConfig+0xe8>
 80086e2:	a201      	add	r2, pc, #4	@ (adr r2, 80086e8 <UART_SetConfig+0xb8>)
 80086e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e8:	080086f9 	.word	0x080086f9
 80086ec:	08008709 	.word	0x08008709
 80086f0:	08008701 	.word	0x08008701
 80086f4:	08008711 	.word	0x08008711
 80086f8:	2301      	movs	r3, #1
 80086fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086fe:	e116      	b.n	800892e <UART_SetConfig+0x2fe>
 8008700:	2302      	movs	r3, #2
 8008702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008706:	e112      	b.n	800892e <UART_SetConfig+0x2fe>
 8008708:	2304      	movs	r3, #4
 800870a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800870e:	e10e      	b.n	800892e <UART_SetConfig+0x2fe>
 8008710:	2308      	movs	r3, #8
 8008712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008716:	e10a      	b.n	800892e <UART_SetConfig+0x2fe>
 8008718:	2310      	movs	r3, #16
 800871a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800871e:	e106      	b.n	800892e <UART_SetConfig+0x2fe>
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a7c      	ldr	r2, [pc, #496]	@ (8008918 <UART_SetConfig+0x2e8>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d138      	bne.n	800879c <UART_SetConfig+0x16c>
 800872a:	4b7a      	ldr	r3, [pc, #488]	@ (8008914 <UART_SetConfig+0x2e4>)
 800872c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008730:	f003 030c 	and.w	r3, r3, #12
 8008734:	2b0c      	cmp	r3, #12
 8008736:	d82d      	bhi.n	8008794 <UART_SetConfig+0x164>
 8008738:	a201      	add	r2, pc, #4	@ (adr r2, 8008740 <UART_SetConfig+0x110>)
 800873a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873e:	bf00      	nop
 8008740:	08008775 	.word	0x08008775
 8008744:	08008795 	.word	0x08008795
 8008748:	08008795 	.word	0x08008795
 800874c:	08008795 	.word	0x08008795
 8008750:	08008785 	.word	0x08008785
 8008754:	08008795 	.word	0x08008795
 8008758:	08008795 	.word	0x08008795
 800875c:	08008795 	.word	0x08008795
 8008760:	0800877d 	.word	0x0800877d
 8008764:	08008795 	.word	0x08008795
 8008768:	08008795 	.word	0x08008795
 800876c:	08008795 	.word	0x08008795
 8008770:	0800878d 	.word	0x0800878d
 8008774:	2300      	movs	r3, #0
 8008776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800877a:	e0d8      	b.n	800892e <UART_SetConfig+0x2fe>
 800877c:	2302      	movs	r3, #2
 800877e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008782:	e0d4      	b.n	800892e <UART_SetConfig+0x2fe>
 8008784:	2304      	movs	r3, #4
 8008786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800878a:	e0d0      	b.n	800892e <UART_SetConfig+0x2fe>
 800878c:	2308      	movs	r3, #8
 800878e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008792:	e0cc      	b.n	800892e <UART_SetConfig+0x2fe>
 8008794:	2310      	movs	r3, #16
 8008796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800879a:	e0c8      	b.n	800892e <UART_SetConfig+0x2fe>
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a5e      	ldr	r2, [pc, #376]	@ (800891c <UART_SetConfig+0x2ec>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d125      	bne.n	80087f2 <UART_SetConfig+0x1c2>
 80087a6:	4b5b      	ldr	r3, [pc, #364]	@ (8008914 <UART_SetConfig+0x2e4>)
 80087a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80087b0:	2b30      	cmp	r3, #48	@ 0x30
 80087b2:	d016      	beq.n	80087e2 <UART_SetConfig+0x1b2>
 80087b4:	2b30      	cmp	r3, #48	@ 0x30
 80087b6:	d818      	bhi.n	80087ea <UART_SetConfig+0x1ba>
 80087b8:	2b20      	cmp	r3, #32
 80087ba:	d00a      	beq.n	80087d2 <UART_SetConfig+0x1a2>
 80087bc:	2b20      	cmp	r3, #32
 80087be:	d814      	bhi.n	80087ea <UART_SetConfig+0x1ba>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <UART_SetConfig+0x19a>
 80087c4:	2b10      	cmp	r3, #16
 80087c6:	d008      	beq.n	80087da <UART_SetConfig+0x1aa>
 80087c8:	e00f      	b.n	80087ea <UART_SetConfig+0x1ba>
 80087ca:	2300      	movs	r3, #0
 80087cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087d0:	e0ad      	b.n	800892e <UART_SetConfig+0x2fe>
 80087d2:	2302      	movs	r3, #2
 80087d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087d8:	e0a9      	b.n	800892e <UART_SetConfig+0x2fe>
 80087da:	2304      	movs	r3, #4
 80087dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087e0:	e0a5      	b.n	800892e <UART_SetConfig+0x2fe>
 80087e2:	2308      	movs	r3, #8
 80087e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087e8:	e0a1      	b.n	800892e <UART_SetConfig+0x2fe>
 80087ea:	2310      	movs	r3, #16
 80087ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087f0:	e09d      	b.n	800892e <UART_SetConfig+0x2fe>
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a4a      	ldr	r2, [pc, #296]	@ (8008920 <UART_SetConfig+0x2f0>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d125      	bne.n	8008848 <UART_SetConfig+0x218>
 80087fc:	4b45      	ldr	r3, [pc, #276]	@ (8008914 <UART_SetConfig+0x2e4>)
 80087fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008802:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008806:	2bc0      	cmp	r3, #192	@ 0xc0
 8008808:	d016      	beq.n	8008838 <UART_SetConfig+0x208>
 800880a:	2bc0      	cmp	r3, #192	@ 0xc0
 800880c:	d818      	bhi.n	8008840 <UART_SetConfig+0x210>
 800880e:	2b80      	cmp	r3, #128	@ 0x80
 8008810:	d00a      	beq.n	8008828 <UART_SetConfig+0x1f8>
 8008812:	2b80      	cmp	r3, #128	@ 0x80
 8008814:	d814      	bhi.n	8008840 <UART_SetConfig+0x210>
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <UART_SetConfig+0x1f0>
 800881a:	2b40      	cmp	r3, #64	@ 0x40
 800881c:	d008      	beq.n	8008830 <UART_SetConfig+0x200>
 800881e:	e00f      	b.n	8008840 <UART_SetConfig+0x210>
 8008820:	2300      	movs	r3, #0
 8008822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008826:	e082      	b.n	800892e <UART_SetConfig+0x2fe>
 8008828:	2302      	movs	r3, #2
 800882a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800882e:	e07e      	b.n	800892e <UART_SetConfig+0x2fe>
 8008830:	2304      	movs	r3, #4
 8008832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008836:	e07a      	b.n	800892e <UART_SetConfig+0x2fe>
 8008838:	2308      	movs	r3, #8
 800883a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800883e:	e076      	b.n	800892e <UART_SetConfig+0x2fe>
 8008840:	2310      	movs	r3, #16
 8008842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008846:	e072      	b.n	800892e <UART_SetConfig+0x2fe>
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a35      	ldr	r2, [pc, #212]	@ (8008924 <UART_SetConfig+0x2f4>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d12a      	bne.n	80088a8 <UART_SetConfig+0x278>
 8008852:	4b30      	ldr	r3, [pc, #192]	@ (8008914 <UART_SetConfig+0x2e4>)
 8008854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008858:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800885c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008860:	d01a      	beq.n	8008898 <UART_SetConfig+0x268>
 8008862:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008866:	d81b      	bhi.n	80088a0 <UART_SetConfig+0x270>
 8008868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800886c:	d00c      	beq.n	8008888 <UART_SetConfig+0x258>
 800886e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008872:	d815      	bhi.n	80088a0 <UART_SetConfig+0x270>
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <UART_SetConfig+0x250>
 8008878:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800887c:	d008      	beq.n	8008890 <UART_SetConfig+0x260>
 800887e:	e00f      	b.n	80088a0 <UART_SetConfig+0x270>
 8008880:	2300      	movs	r3, #0
 8008882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008886:	e052      	b.n	800892e <UART_SetConfig+0x2fe>
 8008888:	2302      	movs	r3, #2
 800888a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800888e:	e04e      	b.n	800892e <UART_SetConfig+0x2fe>
 8008890:	2304      	movs	r3, #4
 8008892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008896:	e04a      	b.n	800892e <UART_SetConfig+0x2fe>
 8008898:	2308      	movs	r3, #8
 800889a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800889e:	e046      	b.n	800892e <UART_SetConfig+0x2fe>
 80088a0:	2310      	movs	r3, #16
 80088a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088a6:	e042      	b.n	800892e <UART_SetConfig+0x2fe>
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a17      	ldr	r2, [pc, #92]	@ (800890c <UART_SetConfig+0x2dc>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d13a      	bne.n	8008928 <UART_SetConfig+0x2f8>
 80088b2:	4b18      	ldr	r3, [pc, #96]	@ (8008914 <UART_SetConfig+0x2e4>)
 80088b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80088bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088c0:	d01a      	beq.n	80088f8 <UART_SetConfig+0x2c8>
 80088c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088c6:	d81b      	bhi.n	8008900 <UART_SetConfig+0x2d0>
 80088c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088cc:	d00c      	beq.n	80088e8 <UART_SetConfig+0x2b8>
 80088ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088d2:	d815      	bhi.n	8008900 <UART_SetConfig+0x2d0>
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <UART_SetConfig+0x2b0>
 80088d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088dc:	d008      	beq.n	80088f0 <UART_SetConfig+0x2c0>
 80088de:	e00f      	b.n	8008900 <UART_SetConfig+0x2d0>
 80088e0:	2300      	movs	r3, #0
 80088e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088e6:	e022      	b.n	800892e <UART_SetConfig+0x2fe>
 80088e8:	2302      	movs	r3, #2
 80088ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ee:	e01e      	b.n	800892e <UART_SetConfig+0x2fe>
 80088f0:	2304      	movs	r3, #4
 80088f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088f6:	e01a      	b.n	800892e <UART_SetConfig+0x2fe>
 80088f8:	2308      	movs	r3, #8
 80088fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088fe:	e016      	b.n	800892e <UART_SetConfig+0x2fe>
 8008900:	2310      	movs	r3, #16
 8008902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008906:	e012      	b.n	800892e <UART_SetConfig+0x2fe>
 8008908:	cfff69f3 	.word	0xcfff69f3
 800890c:	40008000 	.word	0x40008000
 8008910:	40013800 	.word	0x40013800
 8008914:	40021000 	.word	0x40021000
 8008918:	40004400 	.word	0x40004400
 800891c:	40004800 	.word	0x40004800
 8008920:	40004c00 	.word	0x40004c00
 8008924:	40005000 	.word	0x40005000
 8008928:	2310      	movs	r3, #16
 800892a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4aae      	ldr	r2, [pc, #696]	@ (8008bec <UART_SetConfig+0x5bc>)
 8008934:	4293      	cmp	r3, r2
 8008936:	f040 8097 	bne.w	8008a68 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800893a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800893e:	2b08      	cmp	r3, #8
 8008940:	d823      	bhi.n	800898a <UART_SetConfig+0x35a>
 8008942:	a201      	add	r2, pc, #4	@ (adr r2, 8008948 <UART_SetConfig+0x318>)
 8008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008948:	0800896d 	.word	0x0800896d
 800894c:	0800898b 	.word	0x0800898b
 8008950:	08008975 	.word	0x08008975
 8008954:	0800898b 	.word	0x0800898b
 8008958:	0800897b 	.word	0x0800897b
 800895c:	0800898b 	.word	0x0800898b
 8008960:	0800898b 	.word	0x0800898b
 8008964:	0800898b 	.word	0x0800898b
 8008968:	08008983 	.word	0x08008983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800896c:	f7fd f970 	bl	8005c50 <HAL_RCC_GetPCLK1Freq>
 8008970:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008972:	e010      	b.n	8008996 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008974:	4b9e      	ldr	r3, [pc, #632]	@ (8008bf0 <UART_SetConfig+0x5c0>)
 8008976:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008978:	e00d      	b.n	8008996 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800897a:	f7fd f8fb 	bl	8005b74 <HAL_RCC_GetSysClockFreq>
 800897e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008980:	e009      	b.n	8008996 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008986:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008988:	e005      	b.n	8008996 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008994:	bf00      	nop
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< HEAD
 800818a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 8130 	beq.w	80083f2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008196:	4a94      	ldr	r2, [pc, #592]	@ (80083e8 <UART_SetConfig+0x5c4>)
 8008198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800819c:	461a      	mov	r2, r3
 800819e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80081a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	4613      	mov	r3, r2
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	4413      	add	r3, r2
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d305      	bcc.n	80081c2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d903      	bls.n	80081ca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80081c8:	e113      	b.n	80083f2 <UART_SetConfig+0x5ce>
=======
 8008996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 8130 	beq.w	8008bfe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a2:	4a94      	ldr	r2, [pc, #592]	@ (8008bf4 <UART_SetConfig+0x5c4>)
 80089a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089a8:	461a      	mov	r2, r3
 80089aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80089b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	4613      	mov	r3, r2
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	4413      	add	r3, r2
 80089bc:	69ba      	ldr	r2, [r7, #24]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d305      	bcc.n	80089ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089c8:	69ba      	ldr	r2, [r7, #24]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d903      	bls.n	80089d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80089d4:	e113      	b.n	8008bfe <UART_SetConfig+0x5ce>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
<<<<<<< HEAD
 80081ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081cc:	2200      	movs	r2, #0
 80081ce:	60bb      	str	r3, [r7, #8]
 80081d0:	60fa      	str	r2, [r7, #12]
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d6:	4a84      	ldr	r2, [pc, #528]	@ (80083e8 <UART_SetConfig+0x5c4>)
 80081d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081dc:	b29b      	uxth	r3, r3
 80081de:	2200      	movs	r2, #0
 80081e0:	603b      	str	r3, [r7, #0]
 80081e2:	607a      	str	r2, [r7, #4]
 80081e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081ec:	f7f8 fd84 	bl	8000cf8 <__aeabi_uldivmod>
 80081f0:	4602      	mov	r2, r0
 80081f2:	460b      	mov	r3, r1
 80081f4:	4610      	mov	r0, r2
 80081f6:	4619      	mov	r1, r3
 80081f8:	f04f 0200 	mov.w	r2, #0
 80081fc:	f04f 0300 	mov.w	r3, #0
 8008200:	020b      	lsls	r3, r1, #8
 8008202:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008206:	0202      	lsls	r2, r0, #8
 8008208:	6979      	ldr	r1, [r7, #20]
 800820a:	6849      	ldr	r1, [r1, #4]
 800820c:	0849      	lsrs	r1, r1, #1
 800820e:	2000      	movs	r0, #0
 8008210:	460c      	mov	r4, r1
 8008212:	4605      	mov	r5, r0
 8008214:	eb12 0804 	adds.w	r8, r2, r4
 8008218:	eb43 0905 	adc.w	r9, r3, r5
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	469a      	mov	sl, r3
 8008224:	4693      	mov	fp, r2
 8008226:	4652      	mov	r2, sl
 8008228:	465b      	mov	r3, fp
 800822a:	4640      	mov	r0, r8
 800822c:	4649      	mov	r1, r9
 800822e:	f7f8 fd63 	bl	8000cf8 <__aeabi_uldivmod>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	4613      	mov	r3, r2
 8008238:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008240:	d308      	bcc.n	8008254 <UART_SetConfig+0x430>
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008248:	d204      	bcs.n	8008254 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6a3a      	ldr	r2, [r7, #32]
 8008250:	60da      	str	r2, [r3, #12]
 8008252:	e0ce      	b.n	80083f2 <UART_SetConfig+0x5ce>
=======
 80089d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d8:	2200      	movs	r2, #0
 80089da:	60bb      	str	r3, [r7, #8]
 80089dc:	60fa      	str	r2, [r7, #12]
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e2:	4a84      	ldr	r2, [pc, #528]	@ (8008bf4 <UART_SetConfig+0x5c4>)
 80089e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	2200      	movs	r2, #0
 80089ec:	603b      	str	r3, [r7, #0]
 80089ee:	607a      	str	r2, [r7, #4]
 80089f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80089f8:	f7f8 f97e 	bl	8000cf8 <__aeabi_uldivmod>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	4610      	mov	r0, r2
 8008a02:	4619      	mov	r1, r3
 8008a04:	f04f 0200 	mov.w	r2, #0
 8008a08:	f04f 0300 	mov.w	r3, #0
 8008a0c:	020b      	lsls	r3, r1, #8
 8008a0e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a12:	0202      	lsls	r2, r0, #8
 8008a14:	6979      	ldr	r1, [r7, #20]
 8008a16:	6849      	ldr	r1, [r1, #4]
 8008a18:	0849      	lsrs	r1, r1, #1
 8008a1a:	2000      	movs	r0, #0
 8008a1c:	460c      	mov	r4, r1
 8008a1e:	4605      	mov	r5, r0
 8008a20:	eb12 0804 	adds.w	r8, r2, r4
 8008a24:	eb43 0905 	adc.w	r9, r3, r5
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	469a      	mov	sl, r3
 8008a30:	4693      	mov	fp, r2
 8008a32:	4652      	mov	r2, sl
 8008a34:	465b      	mov	r3, fp
 8008a36:	4640      	mov	r0, r8
 8008a38:	4649      	mov	r1, r9
 8008a3a:	f7f8 f95d 	bl	8000cf8 <__aeabi_uldivmod>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4613      	mov	r3, r2
 8008a44:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a46:	6a3b      	ldr	r3, [r7, #32]
 8008a48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a4c:	d308      	bcc.n	8008a60 <UART_SetConfig+0x430>
 8008a4e:	6a3b      	ldr	r3, [r7, #32]
 8008a50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a54:	d204      	bcs.n	8008a60 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6a3a      	ldr	r2, [r7, #32]
 8008a5c:	60da      	str	r2, [r3, #12]
 8008a5e:	e0ce      	b.n	8008bfe <UART_SetConfig+0x5ce>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< HEAD
 8008254:	2301      	movs	r3, #1
 8008256:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800825a:	e0ca      	b.n	80083f2 <UART_SetConfig+0x5ce>
=======
 8008a60:	2301      	movs	r3, #1
 8008a62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a66:	e0ca      	b.n	8008bfe <UART_SetConfig+0x5ce>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< HEAD
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008264:	d166      	bne.n	8008334 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008266:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800826a:	2b08      	cmp	r3, #8
 800826c:	d827      	bhi.n	80082be <UART_SetConfig+0x49a>
 800826e:	a201      	add	r2, pc, #4	@ (adr r2, 8008274 <UART_SetConfig+0x450>)
 8008270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008274:	08008299 	.word	0x08008299
 8008278:	080082a1 	.word	0x080082a1
 800827c:	080082a9 	.word	0x080082a9
 8008280:	080082bf 	.word	0x080082bf
 8008284:	080082af 	.word	0x080082af
 8008288:	080082bf 	.word	0x080082bf
 800828c:	080082bf 	.word	0x080082bf
 8008290:	080082bf 	.word	0x080082bf
 8008294:	080082b7 	.word	0x080082b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008298:	f7fd f8d4 	bl	8005444 <HAL_RCC_GetPCLK1Freq>
 800829c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800829e:	e014      	b.n	80082ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082a0:	f7fd f8e6 	bl	8005470 <HAL_RCC_GetPCLK2Freq>
 80082a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082a6:	e010      	b.n	80082ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082a8:	4b4e      	ldr	r3, [pc, #312]	@ (80083e4 <UART_SetConfig+0x5c0>)
 80082aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082ac:	e00d      	b.n	80082ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082ae:	f7fd f85b 	bl	8005368 <HAL_RCC_GetSysClockFreq>
 80082b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082b4:	e009      	b.n	80082ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082bc:	e005      	b.n	80082ca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082c8:	bf00      	nop
=======
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	69db      	ldr	r3, [r3, #28]
 8008a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a70:	d166      	bne.n	8008b40 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008a72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a76:	2b08      	cmp	r3, #8
 8008a78:	d827      	bhi.n	8008aca <UART_SetConfig+0x49a>
 8008a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a80 <UART_SetConfig+0x450>)
 8008a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a80:	08008aa5 	.word	0x08008aa5
 8008a84:	08008aad 	.word	0x08008aad
 8008a88:	08008ab5 	.word	0x08008ab5
 8008a8c:	08008acb 	.word	0x08008acb
 8008a90:	08008abb 	.word	0x08008abb
 8008a94:	08008acb 	.word	0x08008acb
 8008a98:	08008acb 	.word	0x08008acb
 8008a9c:	08008acb 	.word	0x08008acb
 8008aa0:	08008ac3 	.word	0x08008ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aa4:	f7fd f8d4 	bl	8005c50 <HAL_RCC_GetPCLK1Freq>
 8008aa8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008aaa:	e014      	b.n	8008ad6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008aac:	f7fd f8e6 	bl	8005c7c <HAL_RCC_GetPCLK2Freq>
 8008ab0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ab2:	e010      	b.n	8008ad6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ab4:	4b4e      	ldr	r3, [pc, #312]	@ (8008bf0 <UART_SetConfig+0x5c0>)
 8008ab6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ab8:	e00d      	b.n	8008ad6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008aba:	f7fd f85b 	bl	8005b74 <HAL_RCC_GetSysClockFreq>
 8008abe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ac0:	e009      	b.n	8008ad6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ac6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ac8:	e005      	b.n	8008ad6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008aca:	2300      	movs	r3, #0
 8008acc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ad4:	bf00      	nop
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< HEAD
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 8090 	beq.w	80083f2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d6:	4a44      	ldr	r2, [pc, #272]	@ (80083e8 <UART_SetConfig+0x5c4>)
 80082d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082dc:	461a      	mov	r2, r3
 80082de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80082e4:	005a      	lsls	r2, r3, #1
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	085b      	lsrs	r3, r3, #1
 80082ec:	441a      	add	r2, r3
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	2b0f      	cmp	r3, #15
 80082fc:	d916      	bls.n	800832c <UART_SetConfig+0x508>
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008304:	d212      	bcs.n	800832c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	b29b      	uxth	r3, r3
 800830a:	f023 030f 	bic.w	r3, r3, #15
 800830e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	085b      	lsrs	r3, r3, #1
 8008314:	b29b      	uxth	r3, r3
 8008316:	f003 0307 	and.w	r3, r3, #7
 800831a:	b29a      	uxth	r2, r3
 800831c:	8bfb      	ldrh	r3, [r7, #30]
 800831e:	4313      	orrs	r3, r2
 8008320:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	8bfa      	ldrh	r2, [r7, #30]
 8008328:	60da      	str	r2, [r3, #12]
 800832a:	e062      	b.n	80083f2 <UART_SetConfig+0x5ce>
=======
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 8090 	beq.w	8008bfe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae2:	4a44      	ldr	r2, [pc, #272]	@ (8008bf4 <UART_SetConfig+0x5c4>)
 8008ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aec:	fbb3 f3f2 	udiv	r3, r3, r2
 8008af0:	005a      	lsls	r2, r3, #1
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	085b      	lsrs	r3, r3, #1
 8008af8:	441a      	add	r2, r3
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	2b0f      	cmp	r3, #15
 8008b08:	d916      	bls.n	8008b38 <UART_SetConfig+0x508>
 8008b0a:	6a3b      	ldr	r3, [r7, #32]
 8008b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b10:	d212      	bcs.n	8008b38 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b12:	6a3b      	ldr	r3, [r7, #32]
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	f023 030f 	bic.w	r3, r3, #15
 8008b1a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	085b      	lsrs	r3, r3, #1
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	f003 0307 	and.w	r3, r3, #7
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	8bfb      	ldrh	r3, [r7, #30]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	8bfa      	ldrh	r2, [r7, #30]
 8008b34:	60da      	str	r2, [r3, #12]
 8008b36:	e062      	b.n	8008bfe <UART_SetConfig+0x5ce>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 800832c:	2301      	movs	r3, #1
 800832e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008332:	e05e      	b.n	80083f2 <UART_SetConfig+0x5ce>
=======
 8008b38:	2301      	movs	r3, #1
 8008b3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b3e:	e05e      	b.n	8008bfe <UART_SetConfig+0x5ce>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< HEAD
 8008334:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008338:	2b08      	cmp	r3, #8
 800833a:	d828      	bhi.n	800838e <UART_SetConfig+0x56a>
 800833c:	a201      	add	r2, pc, #4	@ (adr r2, 8008344 <UART_SetConfig+0x520>)
 800833e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008342:	bf00      	nop
 8008344:	08008369 	.word	0x08008369
 8008348:	08008371 	.word	0x08008371
 800834c:	08008379 	.word	0x08008379
 8008350:	0800838f 	.word	0x0800838f
 8008354:	0800837f 	.word	0x0800837f
 8008358:	0800838f 	.word	0x0800838f
 800835c:	0800838f 	.word	0x0800838f
 8008360:	0800838f 	.word	0x0800838f
 8008364:	08008387 	.word	0x08008387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008368:	f7fd f86c 	bl	8005444 <HAL_RCC_GetPCLK1Freq>
 800836c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800836e:	e014      	b.n	800839a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008370:	f7fd f87e 	bl	8005470 <HAL_RCC_GetPCLK2Freq>
 8008374:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008376:	e010      	b.n	800839a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008378:	4b1a      	ldr	r3, [pc, #104]	@ (80083e4 <UART_SetConfig+0x5c0>)
 800837a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800837c:	e00d      	b.n	800839a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800837e:	f7fc fff3 	bl	8005368 <HAL_RCC_GetSysClockFreq>
 8008382:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008384:	e009      	b.n	800839a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800838a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800838c:	e005      	b.n	800839a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800838e:	2300      	movs	r3, #0
 8008390:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008398:	bf00      	nop
    }

    if (pclk != 0U)
 800839a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839c:	2b00      	cmp	r3, #0
 800839e:	d028      	beq.n	80083f2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a4:	4a10      	ldr	r2, [pc, #64]	@ (80083e8 <UART_SetConfig+0x5c4>)
 80083a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083aa:	461a      	mov	r2, r3
 80083ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	085b      	lsrs	r3, r3, #1
 80083b8:	441a      	add	r2, r3
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	2b0f      	cmp	r3, #15
 80083c8:	d910      	bls.n	80083ec <UART_SetConfig+0x5c8>
 80083ca:	6a3b      	ldr	r3, [r7, #32]
 80083cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083d0:	d20c      	bcs.n	80083ec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	60da      	str	r2, [r3, #12]
 80083dc:	e009      	b.n	80083f2 <UART_SetConfig+0x5ce>
 80083de:	bf00      	nop
 80083e0:	40008000 	.word	0x40008000
 80083e4:	00f42400 	.word	0x00f42400
 80083e8:	0800df20 	.word	0x0800df20
=======
 8008b40:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d828      	bhi.n	8008b9a <UART_SetConfig+0x56a>
 8008b48:	a201      	add	r2, pc, #4	@ (adr r2, 8008b50 <UART_SetConfig+0x520>)
 8008b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4e:	bf00      	nop
 8008b50:	08008b75 	.word	0x08008b75
 8008b54:	08008b7d 	.word	0x08008b7d
 8008b58:	08008b85 	.word	0x08008b85
 8008b5c:	08008b9b 	.word	0x08008b9b
 8008b60:	08008b8b 	.word	0x08008b8b
 8008b64:	08008b9b 	.word	0x08008b9b
 8008b68:	08008b9b 	.word	0x08008b9b
 8008b6c:	08008b9b 	.word	0x08008b9b
 8008b70:	08008b93 	.word	0x08008b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b74:	f7fd f86c 	bl	8005c50 <HAL_RCC_GetPCLK1Freq>
 8008b78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b7a:	e014      	b.n	8008ba6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b7c:	f7fd f87e 	bl	8005c7c <HAL_RCC_GetPCLK2Freq>
 8008b80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b82:	e010      	b.n	8008ba6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b84:	4b1a      	ldr	r3, [pc, #104]	@ (8008bf0 <UART_SetConfig+0x5c0>)
 8008b86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b88:	e00d      	b.n	8008ba6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b8a:	f7fc fff3 	bl	8005b74 <HAL_RCC_GetSysClockFreq>
 8008b8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b90:	e009      	b.n	8008ba6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b98:	e005      	b.n	8008ba6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ba4:	bf00      	nop
    }

    if (pclk != 0U)
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d028      	beq.n	8008bfe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb0:	4a10      	ldr	r2, [pc, #64]	@ (8008bf4 <UART_SetConfig+0x5c4>)
 8008bb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bba:	fbb3 f2f2 	udiv	r2, r3, r2
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	085b      	lsrs	r3, r3, #1
 8008bc4:	441a      	add	r2, r3
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bd0:	6a3b      	ldr	r3, [r7, #32]
 8008bd2:	2b0f      	cmp	r3, #15
 8008bd4:	d910      	bls.n	8008bf8 <UART_SetConfig+0x5c8>
 8008bd6:	6a3b      	ldr	r3, [r7, #32]
 8008bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bdc:	d20c      	bcs.n	8008bf8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	60da      	str	r2, [r3, #12]
 8008be8:	e009      	b.n	8008bfe <UART_SetConfig+0x5ce>
 8008bea:	bf00      	nop
 8008bec:	40008000 	.word	0x40008000
 8008bf0:	00f42400 	.word	0x00f42400
 8008bf4:	0800e754 	.word	0x0800e754
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 80083ec:	2301      	movs	r3, #1
 80083ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
=======
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
<<<<<<< HEAD
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2200      	movs	r2, #0
 8008406:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2200      	movs	r2, #0
 800840c:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 800840e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008412:	4618      	mov	r0, r3
 8008414:	3730      	adds	r7, #48	@ 0x30
 8008416:	46bd      	mov	sp, r7
 8008418:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800841c <UART_AdvFeatureConfig>:
=======
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2200      	movs	r2, #0
 8008c12:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	2200      	movs	r2, #0
 8008c18:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8008c1a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3730      	adds	r7, #48	@ 0x30
 8008c22:	46bd      	mov	sp, r7
 8008c24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008c28 <UART_AdvFeatureConfig>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
=======
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< HEAD
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00a      	beq.n	8008446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	605a      	str	r2, [r3, #4]
=======
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c34:	f003 0301 	and.w	r3, r3, #1
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00a      	beq.n	8008c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	605a      	str	r2, [r3, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< HEAD
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800844a:	f003 0302 	and.w	r3, r3, #2
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00a      	beq.n	8008468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	430a      	orrs	r2, r1
 8008466:	605a      	str	r2, [r3, #4]
=======
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c56:	f003 0302 	and.w	r3, r3, #2
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00a      	beq.n	8008c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	430a      	orrs	r2, r1
 8008c72:	605a      	str	r2, [r3, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< HEAD
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846c:	f003 0304 	and.w	r3, r3, #4
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00a      	beq.n	800848a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	430a      	orrs	r2, r1
 8008488:	605a      	str	r2, [r3, #4]
=======
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c78:	f003 0304 	and.w	r3, r3, #4
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00a      	beq.n	8008c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	605a      	str	r2, [r3, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< HEAD
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848e:	f003 0308 	and.w	r3, r3, #8
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00a      	beq.n	80084ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	430a      	orrs	r2, r1
 80084aa:	605a      	str	r2, [r3, #4]
=======
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c9a:	f003 0308 	and.w	r3, r3, #8
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00a      	beq.n	8008cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	605a      	str	r2, [r3, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< HEAD
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b0:	f003 0310 	and.w	r3, r3, #16
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00a      	beq.n	80084ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	430a      	orrs	r2, r1
 80084cc:	609a      	str	r2, [r3, #8]
=======
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cbc:	f003 0310 	and.w	r3, r3, #16
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00a      	beq.n	8008cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	609a      	str	r2, [r3, #8]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< HEAD
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00a      	beq.n	80084f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	430a      	orrs	r2, r1
 80084ee:	609a      	str	r2, [r3, #8]
=======
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cde:	f003 0320 	and.w	r3, r3, #32
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00a      	beq.n	8008cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	430a      	orrs	r2, r1
 8008cfa:	609a      	str	r2, [r3, #8]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< HEAD
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d01a      	beq.n	8008532 <UART_AdvFeatureConfig+0x116>
=======
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d01a      	beq.n	8008d3e <UART_AdvFeatureConfig+0x116>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< HEAD
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	430a      	orrs	r2, r1
 8008510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008516:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800851a:	d10a      	bne.n	8008532 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	605a      	str	r2, [r3, #4]
=======
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d26:	d10a      	bne.n	8008d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	430a      	orrs	r2, r1
 8008d3c:	605a      	str	r2, [r3, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< HEAD
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	430a      	orrs	r2, r1
 8008552:	605a      	str	r2, [r3, #4]
  }
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <UART_CheckIdleState>:
=======
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00a      	beq.n	8008d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	430a      	orrs	r2, r1
 8008d5e:	605a      	str	r2, [r3, #4]
  }
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <UART_CheckIdleState>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af02      	add	r7, sp, #8
 8008566:	6078      	str	r0, [r7, #4]
=======
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af02      	add	r7, sp, #8
 8008d72:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008570:	f7fa f8c4 	bl	80026fc <HAL_GetTick>
 8008574:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0308 	and.w	r3, r3, #8
 8008580:	2b08      	cmp	r3, #8
 8008582:	d10e      	bne.n	80085a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008584:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f82f 	bl	80085f6 <UART_WaitOnFlagUntilTimeout>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d001      	beq.n	80085a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e025      	b.n	80085ee <UART_CheckIdleState+0x8e>
=======
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d7c:	f7f9 fd20 	bl	80027c0 <HAL_GetTick>
 8008d80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 0308 	and.w	r3, r3, #8
 8008d8c:	2b08      	cmp	r3, #8
 8008d8e:	d10e      	bne.n	8008dae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f82f 	bl	8008e02 <UART_WaitOnFlagUntilTimeout>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d001      	beq.n	8008dae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e025      	b.n	8008dfa <UART_CheckIdleState+0x8e>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< HEAD
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0304 	and.w	r3, r3, #4
 80085ac:	2b04      	cmp	r3, #4
 80085ae:	d10e      	bne.n	80085ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f819 	bl	80085f6 <UART_WaitOnFlagUntilTimeout>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e00f      	b.n	80085ee <UART_CheckIdleState+0x8e>
=======
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0304 	and.w	r3, r3, #4
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	d10e      	bne.n	8008dda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f819 	bl	8008e02 <UART_WaitOnFlagUntilTimeout>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e00f      	b.n	8008dfa <UART_CheckIdleState+0x8e>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2220      	movs	r2, #32
 80085d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2220      	movs	r2, #32
 80085da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <UART_WaitOnFlagUntilTimeout>:
=======
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2220      	movs	r2, #32
 8008dde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2220      	movs	r2, #32
 8008de6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b09c      	sub	sp, #112	@ 0x70
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	603b      	str	r3, [r7, #0]
 8008602:	4613      	mov	r3, r2
 8008604:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008606:	e0a9      	b.n	800875c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800860a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860e:	f000 80a5 	beq.w	800875c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008612:	f7fa f873 	bl	80026fc <HAL_GetTick>
 8008616:	4602      	mov	r2, r0
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800861e:	429a      	cmp	r2, r3
 8008620:	d302      	bcc.n	8008628 <UART_WaitOnFlagUntilTimeout+0x32>
 8008622:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008624:	2b00      	cmp	r3, #0
 8008626:	d140      	bne.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb4>
=======
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b09c      	sub	sp, #112	@ 0x70
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	60f8      	str	r0, [r7, #12]
 8008e0a:	60b9      	str	r1, [r7, #8]
 8008e0c:	603b      	str	r3, [r7, #0]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e12:	e0a9      	b.n	8008f68 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1a:	f000 80a5 	beq.w	8008f68 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e1e:	f7f9 fccf 	bl	80027c0 <HAL_GetTick>
 8008e22:	4602      	mov	r2, r0
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d302      	bcc.n	8008e34 <UART_WaitOnFlagUntilTimeout+0x32>
 8008e2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d140      	bne.n	8008eb6 <UART_WaitOnFlagUntilTimeout+0xb4>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
<<<<<<< HEAD
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008638:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800863c:	667b      	str	r3, [r7, #100]	@ 0x64
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	461a      	mov	r2, r3
 8008644:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008646:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008648:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800864c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800864e:	e841 2300 	strex	r3, r2, [r1]
 8008652:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1e6      	bne.n	8008628 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3308      	adds	r3, #8
 8008660:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008664:	e853 3f00 	ldrex	r3, [r3]
 8008668:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800866a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800866c:	f023 0301 	bic.w	r3, r3, #1
 8008670:	663b      	str	r3, [r7, #96]	@ 0x60
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3308      	adds	r3, #8
 8008678:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800867a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800867c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008680:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008682:	e841 2300 	strex	r3, r2, [r1]
 8008686:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1e5      	bne.n	800865a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2220      	movs	r2, #32
 8008692:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2220      	movs	r2, #32
 800869a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e069      	b.n	800877e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d051      	beq.n	800875c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086c6:	d149      	bne.n	800875c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086d0:	621a      	str	r2, [r3, #32]
=======
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e3c:	e853 3f00 	ldrex	r3, [r3]
 8008e40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e44:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008e48:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e54:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e56:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008e58:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e5a:	e841 2300 	strex	r3, r2, [r1]
 8008e5e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1e6      	bne.n	8008e34 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e70:	e853 3f00 	ldrex	r3, [r3]
 8008e74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e78:	f023 0301 	bic.w	r3, r3, #1
 8008e7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3308      	adds	r3, #8
 8008e84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e86:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008e88:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e8e:	e841 2300 	strex	r3, r2, [r1]
 8008e92:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008e94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1e5      	bne.n	8008e66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2220      	movs	r2, #32
 8008ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e069      	b.n	8008f8a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0304 	and.w	r3, r3, #4
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d051      	beq.n	8008f68 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ece:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ed2:	d149      	bne.n	8008f68 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008edc:	621a      	str	r2, [r3, #32]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
<<<<<<< HEAD
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086da:	e853 3f00 	ldrex	r3, [r3]
 80086de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80086e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	461a      	mov	r2, r3
 80086ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80086f2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80086f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80086fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e6      	bne.n	80086d2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3308      	adds	r3, #8
 800870a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	e853 3f00 	ldrex	r3, [r3]
 8008712:	613b      	str	r3, [r7, #16]
   return(result);
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	f023 0301 	bic.w	r3, r3, #1
 800871a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3308      	adds	r3, #8
 8008722:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008724:	623a      	str	r2, [r7, #32]
 8008726:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008728:	69f9      	ldr	r1, [r7, #28]
 800872a:	6a3a      	ldr	r2, [r7, #32]
 800872c:	e841 2300 	strex	r3, r2, [r1]
 8008730:	61bb      	str	r3, [r7, #24]
   return(result);
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1e5      	bne.n	8008704 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2220      	movs	r2, #32
 800873c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2220      	movs	r2, #32
 8008744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2220      	movs	r2, #32
 800874c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e010      	b.n	800877e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	69da      	ldr	r2, [r3, #28]
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	4013      	ands	r3, r2
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	429a      	cmp	r2, r3
 800876a:	bf0c      	ite	eq
 800876c:	2301      	moveq	r3, #1
 800876e:	2300      	movne	r3, #0
 8008770:	b2db      	uxtb	r3, r3
 8008772:	461a      	mov	r2, r3
 8008774:	79fb      	ldrb	r3, [r7, #7]
 8008776:	429a      	cmp	r2, r3
 8008778:	f43f af46 	beq.w	8008608 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eee:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008ef2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008efe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e6      	bne.n	8008ede <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3308      	adds	r3, #8
 8008f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	e853 3f00 	ldrex	r3, [r3]
 8008f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f023 0301 	bic.w	r3, r3, #1
 8008f26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	3308      	adds	r3, #8
 8008f2e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f30:	623a      	str	r2, [r7, #32]
 8008f32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f34:	69f9      	ldr	r1, [r7, #28]
 8008f36:	6a3a      	ldr	r2, [r7, #32]
 8008f38:	e841 2300 	strex	r3, r2, [r1]
 8008f3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1e5      	bne.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2220      	movs	r2, #32
 8008f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2220      	movs	r2, #32
 8008f50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2220      	movs	r2, #32
 8008f58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	e010      	b.n	8008f8a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	69da      	ldr	r2, [r3, #28]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	4013      	ands	r3, r2
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	bf0c      	ite	eq
 8008f78:	2301      	moveq	r3, #1
 8008f7a:	2300      	movne	r3, #0
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	461a      	mov	r2, r3
 8008f80:	79fb      	ldrb	r3, [r7, #7]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	f43f af46 	beq.w	8008e14 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3770      	adds	r7, #112	@ 0x70
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
	...

08008788 <UART_Start_Receive_IT>:
=======
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3770      	adds	r7, #112	@ 0x70
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
	...

08008f94 <UART_Start_Receive_IT>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8008788:	b480      	push	{r7}
 800878a:	b0a3      	sub	sp, #140	@ 0x8c
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	4613      	mov	r3, r2
 8008794:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	88fa      	ldrh	r2, [r7, #6]
 80087a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	88fa      	ldrh	r2, [r7, #6]
 80087a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087ba:	d10e      	bne.n	80087da <UART_Start_Receive_IT+0x52>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d105      	bne.n	80087d0 <UART_Start_Receive_IT+0x48>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80087ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087ce:	e02d      	b.n	800882c <UART_Start_Receive_IT+0xa4>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	22ff      	movs	r2, #255	@ 0xff
 80087d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087d8:	e028      	b.n	800882c <UART_Start_Receive_IT+0xa4>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10d      	bne.n	80087fe <UART_Start_Receive_IT+0x76>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d104      	bne.n	80087f4 <UART_Start_Receive_IT+0x6c>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	22ff      	movs	r2, #255	@ 0xff
 80087ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087f2:	e01b      	b.n	800882c <UART_Start_Receive_IT+0xa4>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	227f      	movs	r2, #127	@ 0x7f
 80087f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087fc:	e016      	b.n	800882c <UART_Start_Receive_IT+0xa4>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008806:	d10d      	bne.n	8008824 <UART_Start_Receive_IT+0x9c>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d104      	bne.n	800881a <UART_Start_Receive_IT+0x92>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	227f      	movs	r2, #127	@ 0x7f
 8008814:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008818:	e008      	b.n	800882c <UART_Start_Receive_IT+0xa4>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	223f      	movs	r2, #63	@ 0x3f
 800881e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008822:	e003      	b.n	800882c <UART_Start_Receive_IT+0xa4>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2222      	movs	r2, #34	@ 0x22
 8008838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3308      	adds	r3, #8
 8008842:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008844:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008846:	e853 3f00 	ldrex	r3, [r3]
 800884a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800884c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800884e:	f043 0301 	orr.w	r3, r3, #1
 8008852:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	3308      	adds	r3, #8
 800885c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008860:	673a      	str	r2, [r7, #112]	@ 0x70
 8008862:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008864:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008866:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008868:	e841 2300 	strex	r3, r2, [r1]
 800886c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800886e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1e3      	bne.n	800883c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800887c:	d153      	bne.n	8008926 <UART_Start_Receive_IT+0x19e>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008884:	88fa      	ldrh	r2, [r7, #6]
 8008886:	429a      	cmp	r2, r3
 8008888:	d34d      	bcc.n	8008926 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008892:	d107      	bne.n	80088a4 <UART_Start_Receive_IT+0x11c>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d103      	bne.n	80088a4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4a4b      	ldr	r2, [pc, #300]	@ (80089cc <UART_Start_Receive_IT+0x244>)
 80088a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80088a2:	e002      	b.n	80088aa <UART_Start_Receive_IT+0x122>
=======
 8008f94:	b480      	push	{r7}
 8008f96:	b0a3      	sub	sp, #140	@ 0x8c
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	88fa      	ldrh	r2, [r7, #6]
 8008fac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	88fa      	ldrh	r2, [r7, #6]
 8008fb4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fc6:	d10e      	bne.n	8008fe6 <UART_Start_Receive_IT+0x52>
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d105      	bne.n	8008fdc <UART_Start_Receive_IT+0x48>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008fd6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008fda:	e02d      	b.n	8009038 <UART_Start_Receive_IT+0xa4>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	22ff      	movs	r2, #255	@ 0xff
 8008fe0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008fe4:	e028      	b.n	8009038 <UART_Start_Receive_IT+0xa4>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10d      	bne.n	800900a <UART_Start_Receive_IT+0x76>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d104      	bne.n	8009000 <UART_Start_Receive_IT+0x6c>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	22ff      	movs	r2, #255	@ 0xff
 8008ffa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ffe:	e01b      	b.n	8009038 <UART_Start_Receive_IT+0xa4>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	227f      	movs	r2, #127	@ 0x7f
 8009004:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009008:	e016      	b.n	8009038 <UART_Start_Receive_IT+0xa4>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009012:	d10d      	bne.n	8009030 <UART_Start_Receive_IT+0x9c>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d104      	bne.n	8009026 <UART_Start_Receive_IT+0x92>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	227f      	movs	r2, #127	@ 0x7f
 8009020:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009024:	e008      	b.n	8009038 <UART_Start_Receive_IT+0xa4>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	223f      	movs	r2, #63	@ 0x3f
 800902a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800902e:	e003      	b.n	8009038 <UART_Start_Receive_IT+0xa4>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2222      	movs	r2, #34	@ 0x22
 8009044:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3308      	adds	r3, #8
 800904e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009050:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009052:	e853 3f00 	ldrex	r3, [r3]
 8009056:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009058:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800905a:	f043 0301 	orr.w	r3, r3, #1
 800905e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3308      	adds	r3, #8
 8009068:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800906c:	673a      	str	r2, [r7, #112]	@ 0x70
 800906e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009072:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009074:	e841 2300 	strex	r3, r2, [r1]
 8009078:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800907a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e3      	bne.n	8009048 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009088:	d153      	bne.n	8009132 <UART_Start_Receive_IT+0x19e>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009090:	88fa      	ldrh	r2, [r7, #6]
 8009092:	429a      	cmp	r2, r3
 8009094:	d34d      	bcc.n	8009132 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800909e:	d107      	bne.n	80090b0 <UART_Start_Receive_IT+0x11c>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d103      	bne.n	80090b0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	4a4b      	ldr	r2, [pc, #300]	@ (80091d8 <UART_Start_Receive_IT+0x244>)
 80090ac:	671a      	str	r2, [r3, #112]	@ 0x70
 80090ae:	e002      	b.n	80090b6 <UART_Start_Receive_IT+0x122>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
<<<<<<< HEAD
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4a4a      	ldr	r2, [pc, #296]	@ (80089d0 <UART_Start_Receive_IT+0x248>)
 80088a8:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d01a      	beq.n	80088f0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088c2:	e853 3f00 	ldrex	r3, [r3]
 80088c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80088c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80088dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088de:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80088e2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80088ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e4      	bne.n	80088ba <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3308      	adds	r3, #8
 80088f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088fa:	e853 3f00 	ldrex	r3, [r3]
 80088fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008906:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3308      	adds	r3, #8
 800890e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008910:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008912:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008916:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008918:	e841 2300 	strex	r3, r2, [r1]
 800891c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800891e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e5      	bne.n	80088f0 <UART_Start_Receive_IT+0x168>
 8008924:	e04a      	b.n	80089bc <UART_Start_Receive_IT+0x234>
=======
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	4a4a      	ldr	r2, [pc, #296]	@ (80091dc <UART_Start_Receive_IT+0x248>)
 80090b4:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d01a      	beq.n	80090fc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80090d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80090e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090ea:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80090ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80090f0:	e841 2300 	strex	r3, r2, [r1]
 80090f4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80090f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1e4      	bne.n	80090c6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3308      	adds	r3, #8
 8009102:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009106:	e853 3f00 	ldrex	r3, [r3]
 800910a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800910c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800910e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009112:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3308      	adds	r3, #8
 800911a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800911c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800911e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009120:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009122:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009124:	e841 2300 	strex	r3, r2, [r1]
 8009128:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800912a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e5      	bne.n	80090fc <UART_Start_Receive_IT+0x168>
 8009130:	e04a      	b.n	80091c8 <UART_Start_Receive_IT+0x234>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
<<<<<<< HEAD
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800892e:	d107      	bne.n	8008940 <UART_Start_Receive_IT+0x1b8>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d103      	bne.n	8008940 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	4a26      	ldr	r2, [pc, #152]	@ (80089d4 <UART_Start_Receive_IT+0x24c>)
 800893c:	671a      	str	r2, [r3, #112]	@ 0x70
 800893e:	e002      	b.n	8008946 <UART_Start_Receive_IT+0x1be>
=======
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800913a:	d107      	bne.n	800914c <UART_Start_Receive_IT+0x1b8>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d103      	bne.n	800914c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	4a26      	ldr	r2, [pc, #152]	@ (80091e0 <UART_Start_Receive_IT+0x24c>)
 8009148:	671a      	str	r2, [r3, #112]	@ 0x70
 800914a:	e002      	b.n	8009152 <UART_Start_Receive_IT+0x1be>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
<<<<<<< HEAD
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4a25      	ldr	r2, [pc, #148]	@ (80089d8 <UART_Start_Receive_IT+0x250>)
 8008944:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d019      	beq.n	800898a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008966:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800896a:	677b      	str	r3, [r7, #116]	@ 0x74
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	461a      	mov	r2, r3
 8008972:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008974:	637b      	str	r3, [r7, #52]	@ 0x34
 8008976:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800897a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e6      	bne.n	8008956 <UART_Start_Receive_IT+0x1ce>
 8008988:	e018      	b.n	80089bc <UART_Start_Receive_IT+0x234>
=======
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4a25      	ldr	r2, [pc, #148]	@ (80091e4 <UART_Start_Receive_IT+0x250>)
 8009150:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d019      	beq.n	8009196 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800916a:	e853 3f00 	ldrex	r3, [r3]
 800916e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009172:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009176:	677b      	str	r3, [r7, #116]	@ 0x74
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	461a      	mov	r2, r3
 800917e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009180:	637b      	str	r3, [r7, #52]	@ 0x34
 8009182:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009184:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009186:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009188:	e841 2300 	strex	r3, r2, [r1]
 800918c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800918e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e6      	bne.n	8009162 <UART_Start_Receive_IT+0x1ce>
 8009194:	e018      	b.n	80091c8 <UART_Start_Receive_IT+0x234>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
<<<<<<< HEAD
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	613b      	str	r3, [r7, #16]
   return(result);
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	f043 0320 	orr.w	r3, r3, #32
 800899e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	461a      	mov	r2, r3
 80089a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089a8:	623b      	str	r3, [r7, #32]
 80089aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	69f9      	ldr	r1, [r7, #28]
 80089ae:	6a3a      	ldr	r2, [r7, #32]
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e6      	bne.n	800898a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	378c      	adds	r7, #140	@ 0x8c
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	080090e5 	.word	0x080090e5
 80089d0:	08008ded 	.word	0x08008ded
 80089d4:	08008c8b 	.word	0x08008c8b
 80089d8:	08008b2b 	.word	0x08008b2b

080089dc <UART_EndRxTransfer>:
=======
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	e853 3f00 	ldrex	r3, [r3]
 80091a2:	613b      	str	r3, [r7, #16]
   return(result);
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f043 0320 	orr.w	r3, r3, #32
 80091aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	461a      	mov	r2, r3
 80091b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091b4:	623b      	str	r3, [r7, #32]
 80091b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	69f9      	ldr	r1, [r7, #28]
 80091ba:	6a3a      	ldr	r2, [r7, #32]
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e6      	bne.n	8009196 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	378c      	adds	r7, #140	@ 0x8c
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	080098f1 	.word	0x080098f1
 80091dc:	080095f9 	.word	0x080095f9
 80091e0:	08009497 	.word	0x08009497
 80091e4:	08009337 	.word	0x08009337

080091e8 <UART_EndRxTransfer>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80089dc:	b480      	push	{r7}
 80089de:	b095      	sub	sp, #84	@ 0x54
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ec:	e853 3f00 	ldrex	r3, [r3]
 80089f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a02:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a04:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a0a:	e841 2300 	strex	r3, r2, [r1]
 8008a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1e6      	bne.n	80089e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3308      	adds	r3, #8
 8008a1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	e853 3f00 	ldrex	r3, [r3]
 8008a24:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a2c:	f023 0301 	bic.w	r3, r3, #1
 8008a30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3308      	adds	r3, #8
 8008a38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a42:	e841 2300 	strex	r3, r2, [r1]
 8008a46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1e3      	bne.n	8008a16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d118      	bne.n	8008a88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	e853 3f00 	ldrex	r3, [r3]
 8008a62:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f023 0310 	bic.w	r3, r3, #16
 8008a6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	461a      	mov	r2, r3
 8008a72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a74:	61bb      	str	r3, [r7, #24]
 8008a76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a78:	6979      	ldr	r1, [r7, #20]
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	e841 2300 	strex	r3, r2, [r1]
 8008a80:	613b      	str	r3, [r7, #16]
   return(result);
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1e6      	bne.n	8008a56 <UART_EndRxTransfer+0x7a>
=======
 80091e8:	b480      	push	{r7}
 80091ea:	b095      	sub	sp, #84	@ 0x54
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009200:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009204:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800920e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009210:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009214:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800921c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e6      	bne.n	80091f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3308      	adds	r3, #8
 8009228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	61fb      	str	r3, [r7, #28]
   return(result);
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009238:	f023 0301 	bic.w	r3, r3, #1
 800923c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3308      	adds	r3, #8
 8009244:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009246:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009248:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800924c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800924e:	e841 2300 	strex	r3, r2, [r1]
 8009252:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1e3      	bne.n	8009222 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800925e:	2b01      	cmp	r3, #1
 8009260:	d118      	bne.n	8009294 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	e853 3f00 	ldrex	r3, [r3]
 800926e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	f023 0310 	bic.w	r3, r3, #16
 8009276:	647b      	str	r3, [r7, #68]	@ 0x44
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	461a      	mov	r2, r3
 800927e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009280:	61bb      	str	r3, [r7, #24]
 8009282:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009284:	6979      	ldr	r1, [r7, #20]
 8009286:	69ba      	ldr	r2, [r7, #24]
 8009288:	e841 2300 	strex	r3, r2, [r1]
 800928c:	613b      	str	r3, [r7, #16]
   return(result);
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1e6      	bne.n	8009262 <UART_EndRxTransfer+0x7a>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8008a9c:	bf00      	nop
 8008a9e:	3754      	adds	r7, #84	@ 0x54
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <UART_DMAAbortOnError>:
=======
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2220      	movs	r2, #32
 8009298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80092a8:	bf00      	nop
 80092aa:	3754      	adds	r7, #84	@ 0x54
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <UART_DMAAbortOnError>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
=======
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f7ff f996 	bl	8007df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008acc:	bf00      	nop
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <UART_EndTransmit_IT>:
=======
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f7ff f996 	bl	8008604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092d8:	bf00      	nop
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <UART_EndTransmit_IT>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b088      	sub	sp, #32
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	e853 3f00 	ldrex	r3, [r3]
 8008ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008af0:	61fb      	str	r3, [r7, #28]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	461a      	mov	r2, r3
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	61bb      	str	r3, [r7, #24]
 8008afc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afe:	6979      	ldr	r1, [r7, #20]
 8008b00:	69ba      	ldr	r2, [r7, #24]
 8008b02:	e841 2300 	strex	r3, r2, [r1]
 8008b06:	613b      	str	r3, [r7, #16]
   return(result);
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1e6      	bne.n	8008adc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2220      	movs	r2, #32
 8008b12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	675a      	str	r2, [r3, #116]	@ 0x74
=======
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b088      	sub	sp, #32
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092fc:	61fb      	str	r3, [r7, #28]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	61bb      	str	r3, [r7, #24]
 8009308:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	6979      	ldr	r1, [r7, #20]
 800930c:	69ba      	ldr	r2, [r7, #24]
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	613b      	str	r3, [r7, #16]
   return(result);
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e6      	bne.n	80092e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2220      	movs	r2, #32
 800931e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	675a      	str	r2, [r3, #116]	@ 0x74
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7ff f961 	bl	8007de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b22:	bf00      	nop
 8008b24:	3720      	adds	r7, #32
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <UART_RxISR_8BIT>:
=======
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7ff f961 	bl	80085f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800932e:	bf00      	nop
 8009330:	3720      	adds	r7, #32
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <UART_RxISR_8BIT>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b096      	sub	sp, #88	@ 0x58
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b38:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
=======
 8009336:	b580      	push	{r7, lr}
 8009338:	b096      	sub	sp, #88	@ 0x58
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009344:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b42:	2b22      	cmp	r3, #34	@ 0x22
 8008b44:	f040 8095 	bne.w	8008c72 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b4e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b52:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8008b56:	b2d9      	uxtb	r1, r3
 8008b58:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b62:	400a      	ands	r2, r1
 8008b64:	b2d2      	uxtb	r2, r2
 8008b66:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d178      	bne.n	8008c82 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b98:	e853 3f00 	ldrex	r3, [r3]
 8008b9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ba4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bae:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bb0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008bb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e6      	bne.n	8008b90 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3308      	adds	r3, #8
 8008bc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8008bd2:	6a3b      	ldr	r3, [r7, #32]
 8008bd4:	f023 0301 	bic.w	r3, r3, #1
 8008bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3308      	adds	r3, #8
 8008be0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008be2:	633a      	str	r2, [r7, #48]	@ 0x30
 8008be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bea:	e841 2300 	strex	r3, r2, [r1]
 8008bee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1e5      	bne.n	8008bc2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	671a      	str	r2, [r3, #112]	@ 0x70
=======
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800934e:	2b22      	cmp	r3, #34	@ 0x22
 8009350:	f040 8095 	bne.w	800947e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800935a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800935e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8009362:	b2d9      	uxtb	r1, r3
 8009364:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009368:	b2da      	uxtb	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800936e:	400a      	ands	r2, r1
 8009370:	b2d2      	uxtb	r2, r2
 8009372:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009384:	b29b      	uxth	r3, r3
 8009386:	3b01      	subs	r3, #1
 8009388:	b29a      	uxth	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009396:	b29b      	uxth	r3, r3
 8009398:	2b00      	cmp	r3, #0
 800939a:	d178      	bne.n	800948e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a4:	e853 3f00 	ldrex	r3, [r3]
 80093a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	461a      	mov	r2, r3
 80093b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80093bc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093c2:	e841 2300 	strex	r3, r2, [r1]
 80093c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1e6      	bne.n	800939c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3308      	adds	r3, #8
 80093d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d8:	e853 3f00 	ldrex	r3, [r3]
 80093dc:	623b      	str	r3, [r7, #32]
   return(result);
 80093de:	6a3b      	ldr	r3, [r7, #32]
 80093e0:	f023 0301 	bic.w	r3, r3, #1
 80093e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3308      	adds	r3, #8
 80093ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80093ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80093f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093f6:	e841 2300 	strex	r3, r2, [r1]
 80093fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1e5      	bne.n	80093ce <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2220      	movs	r2, #32
 8009406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	671a      	str	r2, [r3, #112]	@ 0x70
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d12e      	bne.n	8008c6a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	e853 3f00 	ldrex	r3, [r3]
 8008c1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f023 0310 	bic.w	r3, r3, #16
 8008c26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c30:	61fb      	str	r3, [r7, #28]
 8008c32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c34:	69b9      	ldr	r1, [r7, #24]
 8008c36:	69fa      	ldr	r2, [r7, #28]
 8008c38:	e841 2300 	strex	r3, r2, [r1]
 8008c3c:	617b      	str	r3, [r7, #20]
   return(result);
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1e6      	bne.n	8008c12 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	f003 0310 	and.w	r3, r3, #16
 8008c4e:	2b10      	cmp	r3, #16
 8008c50:	d103      	bne.n	8008c5a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2210      	movs	r2, #16
 8008c58:	621a      	str	r2, [r3, #32]
=======
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009414:	2b01      	cmp	r3, #1
 8009416:	d12e      	bne.n	8009476 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	e853 3f00 	ldrex	r3, [r3]
 800942a:	60fb      	str	r3, [r7, #12]
   return(result);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f023 0310 	bic.w	r3, r3, #16
 8009432:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	461a      	mov	r2, r3
 800943a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800943c:	61fb      	str	r3, [r7, #28]
 800943e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009440:	69b9      	ldr	r1, [r7, #24]
 8009442:	69fa      	ldr	r2, [r7, #28]
 8009444:	e841 2300 	strex	r3, r2, [r1]
 8009448:	617b      	str	r3, [r7, #20]
   return(result);
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1e6      	bne.n	800941e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	f003 0310 	and.w	r3, r3, #16
 800945a:	2b10      	cmp	r3, #16
 800945c:	d103      	bne.n	8009466 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2210      	movs	r2, #16
 8009464:	621a      	str	r2, [r3, #32]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008c60:	4619      	mov	r1, r3
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7ff f8d2 	bl	8007e0c <HAL_UARTEx_RxEventCallback>
=======
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7ff f8d2 	bl	8008618 <HAL_UARTEx_RxEventCallback>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 8008c68:	e00b      	b.n	8008c82 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7f9 fca8 	bl	80025c0 <HAL_UART_RxCpltCallback>
}
 8008c70:	e007      	b.n	8008c82 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	699a      	ldr	r2, [r3, #24]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f042 0208 	orr.w	r2, r2, #8
 8008c80:	619a      	str	r2, [r3, #24]
}
 8008c82:	bf00      	nop
 8008c84:	3758      	adds	r7, #88	@ 0x58
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <UART_RxISR_16BIT>:
=======
 8009474:	e00b      	b.n	800948e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7f9 f904 	bl	8002684 <HAL_UART_RxCpltCallback>
}
 800947c:	e007      	b.n	800948e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	699a      	ldr	r2, [r3, #24]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f042 0208 	orr.w	r2, r2, #8
 800948c:	619a      	str	r2, [r3, #24]
}
 800948e:	bf00      	nop
 8009490:	3758      	adds	r7, #88	@ 0x58
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <UART_RxISR_16BIT>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b096      	sub	sp, #88	@ 0x58
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c98:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
=======
 8009496:	b580      	push	{r7, lr}
 8009498:	b096      	sub	sp, #88	@ 0x58
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80094a4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ca2:	2b22      	cmp	r3, #34	@ 0x22
 8008ca4:	f040 8095 	bne.w	8008dd2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cae:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cb6:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008cb8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8008cbc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cc6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ccc:	1c9a      	adds	r2, r3, #2
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d178      	bne.n	8008de2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf8:	e853 3f00 	ldrex	r3, [r3]
 8008cfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d10:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d16:	e841 2300 	strex	r3, r2, [r1]
 8008d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1e6      	bne.n	8008cf0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3308      	adds	r3, #8
 8008d28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2a:	6a3b      	ldr	r3, [r7, #32]
 8008d2c:	e853 3f00 	ldrex	r3, [r3]
 8008d30:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	f023 0301 	bic.w	r3, r3, #1
 8008d38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3308      	adds	r3, #8
 8008d40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d4a:	e841 2300 	strex	r3, r2, [r1]
 8008d4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1e5      	bne.n	8008d22 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2220      	movs	r2, #32
 8008d5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	671a      	str	r2, [r3, #112]	@ 0x70
=======
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ae:	2b22      	cmp	r3, #34	@ 0x22
 80094b0:	f040 8095 	bne.w	80095de <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ba:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094c2:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80094c4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 80094c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80094cc:	4013      	ands	r3, r2
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094d2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094d8:	1c9a      	adds	r2, r3, #2
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	3b01      	subs	r3, #1
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d178      	bne.n	80095ee <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009504:	e853 3f00 	ldrex	r3, [r3]
 8009508:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800950a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009510:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800951a:	643b      	str	r3, [r7, #64]	@ 0x40
 800951c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009520:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009522:	e841 2300 	strex	r3, r2, [r1]
 8009526:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1e6      	bne.n	80094fc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3308      	adds	r3, #8
 8009534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009536:	6a3b      	ldr	r3, [r7, #32]
 8009538:	e853 3f00 	ldrex	r3, [r3]
 800953c:	61fb      	str	r3, [r7, #28]
   return(result);
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	f023 0301 	bic.w	r3, r3, #1
 8009544:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	3308      	adds	r3, #8
 800954c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800954e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009550:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009552:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009554:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009556:	e841 2300 	strex	r3, r2, [r1]
 800955a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800955c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1e5      	bne.n	800952e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2220      	movs	r2, #32
 8009566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	671a      	str	r2, [r3, #112]	@ 0x70
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d12e      	bne.n	8008dca <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	e853 3f00 	ldrex	r3, [r3]
 8008d7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	f023 0310 	bic.w	r3, r3, #16
 8008d86:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d90:	61bb      	str	r3, [r7, #24]
 8008d92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d94:	6979      	ldr	r1, [r7, #20]
 8008d96:	69ba      	ldr	r2, [r7, #24]
 8008d98:	e841 2300 	strex	r3, r2, [r1]
 8008d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1e6      	bne.n	8008d72 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	f003 0310 	and.w	r3, r3, #16
 8008dae:	2b10      	cmp	r3, #16
 8008db0:	d103      	bne.n	8008dba <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2210      	movs	r2, #16
 8008db8:	621a      	str	r2, [r3, #32]
=======
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009574:	2b01      	cmp	r3, #1
 8009576:	d12e      	bne.n	80095d6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	e853 3f00 	ldrex	r3, [r3]
 800958a:	60bb      	str	r3, [r7, #8]
   return(result);
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f023 0310 	bic.w	r3, r3, #16
 8009592:	647b      	str	r3, [r7, #68]	@ 0x44
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	461a      	mov	r2, r3
 800959a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800959c:	61bb      	str	r3, [r7, #24]
 800959e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a0:	6979      	ldr	r1, [r7, #20]
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	e841 2300 	strex	r3, r2, [r1]
 80095a8:	613b      	str	r3, [r7, #16]
   return(result);
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1e6      	bne.n	800957e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	f003 0310 	and.w	r3, r3, #16
 80095ba:	2b10      	cmp	r3, #16
 80095bc:	d103      	bne.n	80095c6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2210      	movs	r2, #16
 80095c4:	621a      	str	r2, [r3, #32]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7ff f822 	bl	8007e0c <HAL_UARTEx_RxEventCallback>
=======
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7ff f822 	bl	8008618 <HAL_UARTEx_RxEventCallback>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 8008dc8:	e00b      	b.n	8008de2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7f9 fbf8 	bl	80025c0 <HAL_UART_RxCpltCallback>
}
 8008dd0:	e007      	b.n	8008de2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	699a      	ldr	r2, [r3, #24]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f042 0208 	orr.w	r2, r2, #8
 8008de0:	619a      	str	r2, [r3, #24]
}
 8008de2:	bf00      	nop
 8008de4:	3758      	adds	r7, #88	@ 0x58
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <UART_RxISR_8BIT_FIFOEN>:
=======
 80095d4:	e00b      	b.n	80095ee <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f7f9 f854 	bl	8002684 <HAL_UART_RxCpltCallback>
}
 80095dc:	e007      	b.n	80095ee <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	699a      	ldr	r2, [r3, #24]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f042 0208 	orr.w	r2, r2, #8
 80095ec:	619a      	str	r2, [r3, #24]
}
 80095ee:	bf00      	nop
 80095f0:	3758      	adds	r7, #88	@ 0x58
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
	...

080095f8 <UART_RxISR_8BIT_FIFOEN>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b0a6      	sub	sp, #152	@ 0x98
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008dfa:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
=======
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b0a6      	sub	sp, #152	@ 0x98
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009606:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
<<<<<<< HEAD
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	69db      	ldr	r3, [r3, #28]
 8008e04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e22:	2b22      	cmp	r3, #34	@ 0x22
 8008e24:	f040 814f 	bne.w	80090c6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e2e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e32:	e0f6      	b.n	8009022 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e3a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e3e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8008e42:	b2d9      	uxtb	r1, r3
 8008e44:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e4e:	400a      	ands	r2, r1
 8008e50:	b2d2      	uxtb	r2, r2
 8008e52:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e58:	1c5a      	adds	r2, r3, #1
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	3b01      	subs	r3, #1
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008e7e:	f003 0307 	and.w	r3, r3, #7
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d053      	beq.n	8008f2e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d011      	beq.n	8008eb6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00b      	beq.n	8008eb6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008eac:	f043 0201 	orr.w	r2, r3, #1
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
=======
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	69db      	ldr	r3, [r3, #28]
 8009610:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800962e:	2b22      	cmp	r3, #34	@ 0x22
 8009630:	f040 814f 	bne.w	80098d2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800963a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800963e:	e0f6      	b.n	800982e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009646:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800964a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800964e:	b2d9      	uxtb	r1, r3
 8009650:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009654:	b2da      	uxtb	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800965a:	400a      	ands	r2, r1
 800965c:	b2d2      	uxtb	r2, r2
 800965e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009664:	1c5a      	adds	r2, r3, #1
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009670:	b29b      	uxth	r3, r3
 8009672:	3b01      	subs	r3, #1
 8009674:	b29a      	uxth	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009686:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800968a:	f003 0307 	and.w	r3, r3, #7
 800968e:	2b00      	cmp	r3, #0
 8009690:	d053      	beq.n	800973a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009692:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009696:	f003 0301 	and.w	r3, r3, #1
 800969a:	2b00      	cmp	r3, #0
 800969c:	d011      	beq.n	80096c2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800969e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00b      	beq.n	80096c2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2201      	movs	r2, #1
 80096b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096b8:	f043 0201 	orr.w	r2, r3, #1
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8008eb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008eba:	f003 0302 	and.w	r3, r3, #2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d011      	beq.n	8008ee6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008ec2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ec6:	f003 0301 	and.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00b      	beq.n	8008ee6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008edc:	f043 0204 	orr.w	r2, r3, #4
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
=======
 80096c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80096c6:	f003 0302 	and.w	r3, r3, #2
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d011      	beq.n	80096f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80096ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80096d2:	f003 0301 	and.w	r3, r3, #1
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00b      	beq.n	80096f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2202      	movs	r2, #2
 80096e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096e8:	f043 0204 	orr.w	r2, r3, #4
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8008ee6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008eea:	f003 0304 	and.w	r3, r3, #4
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d011      	beq.n	8008f16 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008ef2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00b      	beq.n	8008f16 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2204      	movs	r2, #4
 8008f04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f0c:	f043 0202 	orr.w	r2, r3, #2
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
=======
 80096f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80096f6:	f003 0304 	and.w	r3, r3, #4
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d011      	beq.n	8009722 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80096fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009702:	f003 0301 	and.w	r3, r3, #1
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00b      	beq.n	8009722 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2204      	movs	r2, #4
 8009710:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009718:	f043 0202 	orr.w	r2, r3, #2
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d006      	beq.n	8008f2e <UART_RxISR_8BIT_FIFOEN+0x142>
=======
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009728:	2b00      	cmp	r3, #0
 800972a:	d006      	beq.n	800973a <UART_RxISR_8BIT_FIFOEN+0x142>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7fe ff69 	bl	8007df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
=======
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7fe ff69 	bl	8008604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }
      }

      if (huart->RxXferCount == 0U)
<<<<<<< HEAD
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d173      	bne.n	8009022 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f42:	e853 3f00 	ldrex	r3, [r3]
 8008f46:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008f48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	461a      	mov	r2, r3
 8008f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f5e:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f60:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008f62:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f64:	e841 2300 	strex	r3, r2, [r1]
 8008f68:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008f6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e4      	bne.n	8008f3a <UART_RxISR_8BIT_FIFOEN+0x14e>
=======
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009740:	b29b      	uxth	r3, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	d173      	bne.n	800982e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800974e:	e853 3f00 	ldrex	r3, [r3]
 8009752:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009754:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009756:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800975a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009768:	66bb      	str	r3, [r7, #104]	@ 0x68
 800976a:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800976e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009770:	e841 2300 	strex	r3, r2, [r1]
 8009774:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009776:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1e4      	bne.n	8009746 <UART_RxISR_8BIT_FIFOEN+0x14e>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
<<<<<<< HEAD
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3308      	adds	r3, #8
 8008f76:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f7a:	e853 3f00 	ldrex	r3, [r3]
 8008f7e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f86:	f023 0301 	bic.w	r3, r3, #1
 8008f8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3308      	adds	r3, #8
 8008f92:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008f94:	657a      	str	r2, [r7, #84]	@ 0x54
 8008f96:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f98:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008f9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008f9c:	e841 2300 	strex	r3, r2, [r1]
 8008fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e3      	bne.n	8008f70 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2220      	movs	r2, #32
 8008fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	671a      	str	r2, [r3, #112]	@ 0x70
=======
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3308      	adds	r3, #8
 8009782:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009786:	e853 3f00 	ldrex	r3, [r3]
 800978a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800978c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800978e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009792:	f023 0301 	bic.w	r3, r3, #1
 8009796:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	3308      	adds	r3, #8
 800979e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80097a0:	657a      	str	r2, [r7, #84]	@ 0x54
 80097a2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80097a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80097a8:	e841 2300 	strex	r3, r2, [r1]
 80097ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80097ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1e3      	bne.n	800977c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2220      	movs	r2, #32
 80097b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	671a      	str	r2, [r3, #112]	@ 0x70
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d12e      	bne.n	800901c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fcc:	e853 3f00 	ldrex	r3, [r3]
 8008fd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd4:	f023 0310 	bic.w	r3, r3, #16
 8008fd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fe2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fe4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008fe8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fea:	e841 2300 	strex	r3, r2, [r1]
 8008fee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1e6      	bne.n	8008fc4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	69db      	ldr	r3, [r3, #28]
 8008ffc:	f003 0310 	and.w	r3, r3, #16
 8009000:	2b10      	cmp	r3, #16
 8009002:	d103      	bne.n	800900c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2210      	movs	r2, #16
 800900a:	621a      	str	r2, [r3, #32]
=======
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d12e      	bne.n	8009828 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d8:	e853 3f00 	ldrex	r3, [r3]
 80097dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e0:	f023 0310 	bic.w	r3, r3, #16
 80097e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	461a      	mov	r2, r3
 80097ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80097f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097f6:	e841 2300 	strex	r3, r2, [r1]
 80097fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1e6      	bne.n	80097d0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	69db      	ldr	r3, [r3, #28]
 8009808:	f003 0310 	and.w	r3, r3, #16
 800980c:	2b10      	cmp	r3, #16
 800980e:	d103      	bne.n	8009818 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2210      	movs	r2, #16
 8009816:	621a      	str	r2, [r3, #32]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7fe fef9 	bl	8007e0c <HAL_UARTEx_RxEventCallback>
 800901a:	e002      	b.n	8009022 <UART_RxISR_8BIT_FIFOEN+0x236>
=======
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800981e:	4619      	mov	r1, r3
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7fe fef9 	bl	8008618 <HAL_UARTEx_RxEventCallback>
 8009826:	e002      	b.n	800982e <UART_RxISR_8BIT_FIFOEN+0x236>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7f9 facf 	bl	80025c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009022:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009026:	2b00      	cmp	r3, #0
 8009028:	d006      	beq.n	8009038 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800902a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800902e:	f003 0320 	and.w	r3, r3, #32
 8009032:	2b00      	cmp	r3, #0
 8009034:	f47f aefe 	bne.w	8008e34 <UART_RxISR_8BIT_FIFOEN+0x48>
=======
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7f8 ff2b 	bl	8002684 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800982e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009832:	2b00      	cmp	r3, #0
 8009834:	d006      	beq.n	8009844 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009836:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800983a:	f003 0320 	and.w	r3, r3, #32
 800983e:	2b00      	cmp	r3, #0
 8009840:	f47f aefe 	bne.w	8009640 <UART_RxISR_8BIT_FIFOEN+0x48>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
<<<<<<< HEAD
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800903e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009042:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8009046:	2b00      	cmp	r3, #0
 8009048:	d045      	beq.n	80090d6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009050:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009054:	429a      	cmp	r2, r3
 8009056:	d23e      	bcs.n	80090d6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3308      	adds	r3, #8
 800905e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	e853 3f00 	ldrex	r3, [r3]
 8009066:	61fb      	str	r3, [r7, #28]
   return(result);
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800906e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3308      	adds	r3, #8
 8009076:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009078:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800907a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800907e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009080:	e841 2300 	strex	r3, r2, [r1]
 8009084:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1e5      	bne.n	8009058 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a14      	ldr	r2, [pc, #80]	@ (80090e0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009090:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	e853 3f00 	ldrex	r3, [r3]
 800909e:	60bb      	str	r3, [r7, #8]
   return(result);
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	f043 0320 	orr.w	r3, r3, #32
 80090a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	461a      	mov	r2, r3
 80090ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090b0:	61bb      	str	r3, [r7, #24]
 80090b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b4:	6979      	ldr	r1, [r7, #20]
 80090b6:	69ba      	ldr	r2, [r7, #24]
 80090b8:	e841 2300 	strex	r3, r2, [r1]
 80090bc:	613b      	str	r3, [r7, #16]
   return(result);
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e6      	bne.n	8009092 <UART_RxISR_8BIT_FIFOEN+0x2a6>
=======
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800984a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800984e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8009852:	2b00      	cmp	r3, #0
 8009854:	d045      	beq.n	80098e2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800985c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009860:	429a      	cmp	r2, r3
 8009862:	d23e      	bcs.n	80098e2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	3308      	adds	r3, #8
 800986a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	e853 3f00 	ldrex	r3, [r3]
 8009872:	61fb      	str	r3, [r7, #28]
   return(result);
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800987a:	673b      	str	r3, [r7, #112]	@ 0x70
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3308      	adds	r3, #8
 8009882:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009884:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009886:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009888:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800988a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800988c:	e841 2300 	strex	r3, r2, [r1]
 8009890:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1e5      	bne.n	8009864 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a14      	ldr	r2, [pc, #80]	@ (80098ec <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800989c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	e853 3f00 	ldrex	r3, [r3]
 80098aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	f043 0320 	orr.w	r3, r3, #32
 80098b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	461a      	mov	r2, r3
 80098ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098bc:	61bb      	str	r3, [r7, #24]
 80098be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c0:	6979      	ldr	r1, [r7, #20]
 80098c2:	69ba      	ldr	r2, [r7, #24]
 80098c4:	e841 2300 	strex	r3, r2, [r1]
 80098c8:	613b      	str	r3, [r7, #16]
   return(result);
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1e6      	bne.n	800989e <UART_RxISR_8BIT_FIFOEN+0x2a6>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 80090c4:	e007      	b.n	80090d6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	699a      	ldr	r2, [r3, #24]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f042 0208 	orr.w	r2, r2, #8
 80090d4:	619a      	str	r2, [r3, #24]
}
 80090d6:	bf00      	nop
 80090d8:	3798      	adds	r7, #152	@ 0x98
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	08008b2b 	.word	0x08008b2b

080090e4 <UART_RxISR_16BIT_FIFOEN>:
=======
 80098d0:	e007      	b.n	80098e2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	699a      	ldr	r2, [r3, #24]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f042 0208 	orr.w	r2, r2, #8
 80098e0:	619a      	str	r2, [r3, #24]
}
 80098e2:	bf00      	nop
 80098e4:	3798      	adds	r7, #152	@ 0x98
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	08009337 	.word	0x08009337

080098f0 <UART_RxISR_16BIT_FIFOEN>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b0a8      	sub	sp, #160	@ 0xa0
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80090f2:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
=======
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b0a8      	sub	sp, #160	@ 0xa0
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80098fe:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
<<<<<<< HEAD
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	69db      	ldr	r3, [r3, #28]
 80090fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800911a:	2b22      	cmp	r3, #34	@ 0x22
 800911c:	f040 8153 	bne.w	80093c6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009126:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800912a:	e0fa      	b.n	8009322 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009132:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800913a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800913e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8009142:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009146:	4013      	ands	r3, r2
 8009148:	b29a      	uxth	r2, r3
 800914a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800914e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009154:	1c9a      	adds	r2, r3, #2
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009160:	b29b      	uxth	r3, r3
 8009162:	3b01      	subs	r3, #1
 8009164:	b29a      	uxth	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	69db      	ldr	r3, [r3, #28]
 8009172:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009176:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800917a:	f003 0307 	and.w	r3, r3, #7
 800917e:	2b00      	cmp	r3, #0
 8009180:	d053      	beq.n	800922a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009182:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b00      	cmp	r3, #0
 800918c:	d011      	beq.n	80091b2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800918e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00b      	beq.n	80091b2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2201      	movs	r2, #1
 80091a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091a8:	f043 0201 	orr.w	r2, r3, #1
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
=======
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	69db      	ldr	r3, [r3, #28]
 8009908:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009926:	2b22      	cmp	r3, #34	@ 0x22
 8009928:	f040 8153 	bne.w	8009bd2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009932:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009936:	e0fa      	b.n	8009b2e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800993e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009946:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800994a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 800994e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009952:	4013      	ands	r3, r2
 8009954:	b29a      	uxth	r2, r3
 8009956:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800995a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009960:	1c9a      	adds	r2, r3, #2
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800996c:	b29b      	uxth	r3, r3
 800996e:	3b01      	subs	r3, #1
 8009970:	b29a      	uxth	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009982:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009986:	f003 0307 	and.w	r3, r3, #7
 800998a:	2b00      	cmp	r3, #0
 800998c:	d053      	beq.n	8009a36 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800998e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009992:	f003 0301 	and.w	r3, r3, #1
 8009996:	2b00      	cmp	r3, #0
 8009998:	d011      	beq.n	80099be <UART_RxISR_16BIT_FIFOEN+0xce>
 800999a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800999e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00b      	beq.n	80099be <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2201      	movs	r2, #1
 80099ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099b4:	f043 0201 	orr.w	r2, r3, #1
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 80091b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80091b6:	f003 0302 	and.w	r3, r3, #2
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d011      	beq.n	80091e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80091be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00b      	beq.n	80091e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2202      	movs	r2, #2
 80091d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091d8:	f043 0204 	orr.w	r2, r3, #4
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
=======
 80099be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80099c2:	f003 0302 	and.w	r3, r3, #2
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d011      	beq.n	80099ee <UART_RxISR_16BIT_FIFOEN+0xfe>
 80099ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80099ce:	f003 0301 	and.w	r3, r3, #1
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00b      	beq.n	80099ee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2202      	movs	r2, #2
 80099dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099e4:	f043 0204 	orr.w	r2, r3, #4
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 80091e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80091e6:	f003 0304 	and.w	r3, r3, #4
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d011      	beq.n	8009212 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80091ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00b      	beq.n	8009212 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2204      	movs	r2, #4
 8009200:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009208:	f043 0202 	orr.w	r2, r3, #2
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
=======
 80099ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80099f2:	f003 0304 	and.w	r3, r3, #4
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d011      	beq.n	8009a1e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80099fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80099fe:	f003 0301 	and.w	r3, r3, #1
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00b      	beq.n	8009a1e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2204      	movs	r2, #4
 8009a0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a14:	f043 0202 	orr.w	r2, r3, #2
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009218:	2b00      	cmp	r3, #0
 800921a:	d006      	beq.n	800922a <UART_RxISR_16BIT_FIFOEN+0x146>
=======
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d006      	beq.n	8009a36 <UART_RxISR_16BIT_FIFOEN+0x146>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7fe fdeb 	bl	8007df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
=======
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7fe fdeb 	bl	8008604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
        }
      }

      if (huart->RxXferCount == 0U)
<<<<<<< HEAD
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009230:	b29b      	uxth	r3, r3
 8009232:	2b00      	cmp	r3, #0
 8009234:	d175      	bne.n	8009322 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800923e:	e853 3f00 	ldrex	r3, [r3]
 8009242:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009244:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009246:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800924a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009258:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800925a:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800925e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009266:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e4      	bne.n	8009236 <UART_RxISR_16BIT_FIFOEN+0x152>
=======
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d175      	bne.n	8009b2e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a4a:	e853 3f00 	ldrex	r3, [r3]
 8009a4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009a64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a66:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a68:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a6a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a6c:	e841 2300 	strex	r3, r2, [r1]
 8009a70:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1e4      	bne.n	8009a42 <UART_RxISR_16BIT_FIFOEN+0x152>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
<<<<<<< HEAD
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	3308      	adds	r3, #8
 8009272:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009276:	e853 3f00 	ldrex	r3, [r3]
 800927a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800927c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800927e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009282:	f023 0301 	bic.w	r3, r3, #1
 8009286:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3308      	adds	r3, #8
 8009290:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009294:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009296:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009298:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800929a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800929c:	e841 2300 	strex	r3, r2, [r1]
 80092a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80092a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1e1      	bne.n	800926c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2220      	movs	r2, #32
 80092ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	671a      	str	r2, [r3, #112]	@ 0x70
=======
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3308      	adds	r3, #8
 8009a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a82:	e853 3f00 	ldrex	r3, [r3]
 8009a86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a8e:	f023 0301 	bic.w	r3, r3, #1
 8009a92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	3308      	adds	r3, #8
 8009a9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009aa0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009aa2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009aa6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009aa8:	e841 2300 	strex	r3, r2, [r1]
 8009aac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1e1      	bne.n	8009a78 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2220      	movs	r2, #32
 8009ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	671a      	str	r2, [r3, #112]	@ 0x70
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d12e      	bne.n	800931c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092cc:	e853 3f00 	ldrex	r3, [r3]
 80092d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092d4:	f023 0310 	bic.w	r3, r3, #16
 80092d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	461a      	mov	r2, r3
 80092e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80092e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80092e4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092ea:	e841 2300 	strex	r3, r2, [r1]
 80092ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1e6      	bne.n	80092c4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	69db      	ldr	r3, [r3, #28]
 80092fc:	f003 0310 	and.w	r3, r3, #16
 8009300:	2b10      	cmp	r3, #16
 8009302:	d103      	bne.n	800930c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2210      	movs	r2, #16
 800930a:	621a      	str	r2, [r3, #32]
=======
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d12e      	bne.n	8009b28 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad8:	e853 3f00 	ldrex	r3, [r3]
 8009adc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ae0:	f023 0310 	bic.w	r3, r3, #16
 8009ae4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	461a      	mov	r2, r3
 8009aec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009aee:	647b      	str	r3, [r7, #68]	@ 0x44
 8009af0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009af4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009af6:	e841 2300 	strex	r3, r2, [r1]
 8009afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1e6      	bne.n	8009ad0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	69db      	ldr	r3, [r3, #28]
 8009b08:	f003 0310 	and.w	r3, r3, #16
 8009b0c:	2b10      	cmp	r3, #16
 8009b0e:	d103      	bne.n	8009b18 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2210      	movs	r2, #16
 8009b16:	621a      	str	r2, [r3, #32]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7fe fd79 	bl	8007e0c <HAL_UARTEx_RxEventCallback>
 800931a:	e002      	b.n	8009322 <UART_RxISR_16BIT_FIFOEN+0x23e>
=======
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7fe fd79 	bl	8008618 <HAL_UARTEx_RxEventCallback>
 8009b26:	e002      	b.n	8009b2e <UART_RxISR_16BIT_FIFOEN+0x23e>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f7f9 f94f 	bl	80025c0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009322:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009326:	2b00      	cmp	r3, #0
 8009328:	d006      	beq.n	8009338 <UART_RxISR_16BIT_FIFOEN+0x254>
 800932a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800932e:	f003 0320 	and.w	r3, r3, #32
 8009332:	2b00      	cmp	r3, #0
 8009334:	f47f aefa 	bne.w	800912c <UART_RxISR_16BIT_FIFOEN+0x48>
=======
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7f8 fdab 	bl	8002684 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b2e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d006      	beq.n	8009b44 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009b36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b3a:	f003 0320 	and.w	r3, r3, #32
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f47f aefa 	bne.w	8009938 <UART_RxISR_16BIT_FIFOEN+0x48>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
<<<<<<< HEAD
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800933e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009342:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8009346:	2b00      	cmp	r3, #0
 8009348:	d045      	beq.n	80093d6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009350:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009354:	429a      	cmp	r2, r3
 8009356:	d23e      	bcs.n	80093d6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3308      	adds	r3, #8
 800935e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009362:	e853 3f00 	ldrex	r3, [r3]
 8009366:	623b      	str	r3, [r7, #32]
   return(result);
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800936e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3308      	adds	r3, #8
 8009376:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009378:	633a      	str	r2, [r7, #48]	@ 0x30
 800937a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800937e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009380:	e841 2300 	strex	r3, r2, [r1]
 8009384:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1e5      	bne.n	8009358 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a14      	ldr	r2, [pc, #80]	@ (80093e0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009390:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	e853 3f00 	ldrex	r3, [r3]
 800939e:	60fb      	str	r3, [r7, #12]
   return(result);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f043 0320 	orr.w	r3, r3, #32
 80093a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	461a      	mov	r2, r3
 80093ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80093b0:	61fb      	str	r3, [r7, #28]
 80093b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b4:	69b9      	ldr	r1, [r7, #24]
 80093b6:	69fa      	ldr	r2, [r7, #28]
 80093b8:	e841 2300 	strex	r3, r2, [r1]
 80093bc:	617b      	str	r3, [r7, #20]
   return(result);
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1e6      	bne.n	8009392 <UART_RxISR_16BIT_FIFOEN+0x2ae>
=======
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b4a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009b4e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d045      	beq.n	8009be2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b5c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d23e      	bcs.n	8009be2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	3308      	adds	r3, #8
 8009b6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6e:	e853 3f00 	ldrex	r3, [r3]
 8009b72:	623b      	str	r3, [r7, #32]
   return(result);
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3308      	adds	r3, #8
 8009b82:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009b84:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b8c:	e841 2300 	strex	r3, r2, [r1]
 8009b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1e5      	bne.n	8009b64 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a14      	ldr	r2, [pc, #80]	@ (8009bec <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009b9c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	e853 3f00 	ldrex	r3, [r3]
 8009baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f043 0320 	orr.w	r3, r3, #32
 8009bb2:	673b      	str	r3, [r7, #112]	@ 0x70
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	461a      	mov	r2, r3
 8009bba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009bbc:	61fb      	str	r3, [r7, #28]
 8009bbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc0:	69b9      	ldr	r1, [r7, #24]
 8009bc2:	69fa      	ldr	r2, [r7, #28]
 8009bc4:	e841 2300 	strex	r3, r2, [r1]
 8009bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1e6      	bne.n	8009b9e <UART_RxISR_16BIT_FIFOEN+0x2ae>
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
<<<<<<< HEAD
 80093c4:	e007      	b.n	80093d6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	699a      	ldr	r2, [r3, #24]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f042 0208 	orr.w	r2, r2, #8
 80093d4:	619a      	str	r2, [r3, #24]
}
 80093d6:	bf00      	nop
 80093d8:	37a0      	adds	r7, #160	@ 0xa0
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	08008c8b 	.word	0x08008c8b

080093e4 <HAL_UARTEx_WakeupCallback>:
=======
 8009bd0:	e007      	b.n	8009be2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	699a      	ldr	r2, [r3, #24]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f042 0208 	orr.w	r2, r2, #8
 8009be0:	619a      	str	r2, [r3, #24]
}
 8009be2:	bf00      	nop
 8009be4:	37a0      	adds	r7, #160	@ 0xa0
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	08009497 	.word	0x08009497

08009bf0 <HAL_UARTEx_WakeupCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
=======
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <HAL_UARTEx_RxFifoFullCallback>:
=======
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <HAL_UARTEx_RxFifoFullCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
=======
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <HAL_UARTEx_TxFifoEmptyCallback>:
=======
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <HAL_UARTEx_TxFifoEmptyCallback>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
=======
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_UARTEx_DisableFifoMode>:
=======
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <HAL_UARTEx_DisableFifoMode>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
=======
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800942e:	2b01      	cmp	r3, #1
 8009430:	d101      	bne.n	8009436 <HAL_UARTEx_DisableFifoMode+0x16>
 8009432:	2302      	movs	r3, #2
 8009434:	e027      	b.n	8009486 <HAL_UARTEx_DisableFifoMode+0x66>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2224      	movs	r2, #36	@ 0x24
 8009442:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f022 0201 	bic.w	r2, r2, #1
 800945c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009464:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2220      	movs	r2, #32
 8009478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <HAL_UARTEx_SetTxFifoThreshold>:
=======
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d101      	bne.n	8009c42 <HAL_UARTEx_DisableFifoMode+0x16>
 8009c3e:	2302      	movs	r3, #2
 8009c40:	e027      	b.n	8009c92 <HAL_UARTEx_DisableFifoMode+0x66>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2224      	movs	r2, #36	@ 0x24
 8009c4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f022 0201 	bic.w	r2, r2, #1
 8009c68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009c70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2220      	movs	r2, #32
 8009c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3714      	adds	r7, #20
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr

08009c9e <HAL_UARTEx_SetTxFifoThreshold>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< HEAD
 8009492:	b580      	push	{r7, lr}
 8009494:	b084      	sub	sp, #16
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	6039      	str	r1, [r7, #0]
=======
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b084      	sub	sp, #16
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	6039      	str	r1, [r7, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d101      	bne.n	80094aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094a6:	2302      	movs	r3, #2
 80094a8:	e02d      	b.n	8009506 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2224      	movs	r2, #36	@ 0x24
 80094b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f022 0201 	bic.w	r2, r2, #1
 80094d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f850 	bl	800958c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2220      	movs	r2, #32
 80094f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <HAL_UARTEx_SetRxFifoThreshold>:
=======
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d101      	bne.n	8009cb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009cb2:	2302      	movs	r3, #2
 8009cb4:	e02d      	b.n	8009d12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2224      	movs	r2, #36	@ 0x24
 8009cc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f022 0201 	bic.w	r2, r2, #1
 8009cdc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	683a      	ldr	r2, [r7, #0]
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f850 	bl	8009d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2220      	movs	r2, #32
 8009d04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <HAL_UARTEx_SetRxFifoThreshold>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< HEAD
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	6039      	str	r1, [r7, #0]
=======
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b084      	sub	sp, #16
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	6039      	str	r1, [r7, #0]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800951e:	2b01      	cmp	r3, #1
 8009520:	d101      	bne.n	8009526 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009522:	2302      	movs	r3, #2
 8009524:	e02d      	b.n	8009582 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2224      	movs	r2, #36	@ 0x24
 8009532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f022 0201 	bic.w	r2, r2, #1
 800954c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	430a      	orrs	r2, r1
 8009560:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f812 	bl	800958c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2220      	movs	r2, #32
 8009574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
	...

0800958c <UARTEx_SetNbDataToProcess>:
=======
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d101      	bne.n	8009d32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d2e:	2302      	movs	r3, #2
 8009d30:	e02d      	b.n	8009d8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2224      	movs	r2, #36	@ 0x24
 8009d3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f022 0201 	bic.w	r2, r2, #1
 8009d58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f812 	bl	8009d98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
	...

08009d98 <UARTEx_SetNbDataToProcess>:
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
=======
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
<<<<<<< HEAD
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009598:	2b00      	cmp	r3, #0
 800959a:	d108      	bne.n	80095ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
=======
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d108      	bne.n	8009dba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
<<<<<<< HEAD
 80095ac:	e031      	b.n	8009612 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095ae:	2308      	movs	r3, #8
 80095b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095b2:	2308      	movs	r3, #8
 80095b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	0e5b      	lsrs	r3, r3, #25
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	f003 0307 	and.w	r3, r3, #7
 80095c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	0f5b      	lsrs	r3, r3, #29
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	f003 0307 	and.w	r3, r3, #7
 80095d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
 80095d8:	7b3a      	ldrb	r2, [r7, #12]
 80095da:	4911      	ldr	r1, [pc, #68]	@ (8009620 <UARTEx_SetNbDataToProcess+0x94>)
 80095dc:	5c8a      	ldrb	r2, [r1, r2]
 80095de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095e2:	7b3a      	ldrb	r2, [r7, #12]
 80095e4:	490f      	ldr	r1, [pc, #60]	@ (8009624 <UARTEx_SetNbDataToProcess+0x98>)
 80095e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	7b7a      	ldrb	r2, [r7, #13]
 80095f8:	4909      	ldr	r1, [pc, #36]	@ (8009620 <UARTEx_SetNbDataToProcess+0x94>)
 80095fa:	5c8a      	ldrb	r2, [r1, r2]
 80095fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009600:	7b7a      	ldrb	r2, [r7, #13]
 8009602:	4908      	ldr	r1, [pc, #32]	@ (8009624 <UARTEx_SetNbDataToProcess+0x98>)
 8009604:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009606:	fb93 f3f2 	sdiv	r3, r3, r2
 800960a:	b29a      	uxth	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009612:	bf00      	nop
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	0800df38 	.word	0x0800df38
 8009624:	0800df40 	.word	0x0800df40

08009628 <atoi>:
 8009628:	220a      	movs	r2, #10
 800962a:	2100      	movs	r1, #0
 800962c:	f000 b87c 	b.w	8009728 <strtol>

08009630 <_strtol_l.constprop.0>:
 8009630:	2b24      	cmp	r3, #36	@ 0x24
 8009632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009636:	4686      	mov	lr, r0
 8009638:	4690      	mov	r8, r2
 800963a:	d801      	bhi.n	8009640 <_strtol_l.constprop.0+0x10>
 800963c:	2b01      	cmp	r3, #1
 800963e:	d106      	bne.n	800964e <_strtol_l.constprop.0+0x1e>
 8009640:	f001 f8f0 	bl	800a824 <__errno>
 8009644:	2316      	movs	r3, #22
 8009646:	6003      	str	r3, [r0, #0]
 8009648:	2000      	movs	r0, #0
 800964a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964e:	4834      	ldr	r0, [pc, #208]	@ (8009720 <_strtol_l.constprop.0+0xf0>)
 8009650:	460d      	mov	r5, r1
 8009652:	462a      	mov	r2, r5
 8009654:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009658:	5d06      	ldrb	r6, [r0, r4]
 800965a:	f016 0608 	ands.w	r6, r6, #8
 800965e:	d1f8      	bne.n	8009652 <_strtol_l.constprop.0+0x22>
 8009660:	2c2d      	cmp	r4, #45	@ 0x2d
 8009662:	d12d      	bne.n	80096c0 <_strtol_l.constprop.0+0x90>
 8009664:	782c      	ldrb	r4, [r5, #0]
 8009666:	2601      	movs	r6, #1
 8009668:	1c95      	adds	r5, r2, #2
 800966a:	f033 0210 	bics.w	r2, r3, #16
 800966e:	d109      	bne.n	8009684 <_strtol_l.constprop.0+0x54>
 8009670:	2c30      	cmp	r4, #48	@ 0x30
 8009672:	d12a      	bne.n	80096ca <_strtol_l.constprop.0+0x9a>
 8009674:	782a      	ldrb	r2, [r5, #0]
 8009676:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800967a:	2a58      	cmp	r2, #88	@ 0x58
 800967c:	d125      	bne.n	80096ca <_strtol_l.constprop.0+0x9a>
 800967e:	786c      	ldrb	r4, [r5, #1]
 8009680:	2310      	movs	r3, #16
 8009682:	3502      	adds	r5, #2
 8009684:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009688:	f10c 3cff 	add.w	ip, ip, #4294967295
 800968c:	2200      	movs	r2, #0
 800968e:	fbbc f9f3 	udiv	r9, ip, r3
 8009692:	4610      	mov	r0, r2
 8009694:	fb03 ca19 	mls	sl, r3, r9, ip
 8009698:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800969c:	2f09      	cmp	r7, #9
 800969e:	d81b      	bhi.n	80096d8 <_strtol_l.constprop.0+0xa8>
 80096a0:	463c      	mov	r4, r7
 80096a2:	42a3      	cmp	r3, r4
 80096a4:	dd27      	ble.n	80096f6 <_strtol_l.constprop.0+0xc6>
 80096a6:	1c57      	adds	r7, r2, #1
 80096a8:	d007      	beq.n	80096ba <_strtol_l.constprop.0+0x8a>
 80096aa:	4581      	cmp	r9, r0
 80096ac:	d320      	bcc.n	80096f0 <_strtol_l.constprop.0+0xc0>
 80096ae:	d101      	bne.n	80096b4 <_strtol_l.constprop.0+0x84>
 80096b0:	45a2      	cmp	sl, r4
 80096b2:	db1d      	blt.n	80096f0 <_strtol_l.constprop.0+0xc0>
 80096b4:	fb00 4003 	mla	r0, r0, r3, r4
 80096b8:	2201      	movs	r2, #1
 80096ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096be:	e7eb      	b.n	8009698 <_strtol_l.constprop.0+0x68>
 80096c0:	2c2b      	cmp	r4, #43	@ 0x2b
 80096c2:	bf04      	itt	eq
 80096c4:	782c      	ldrbeq	r4, [r5, #0]
 80096c6:	1c95      	addeq	r5, r2, #2
 80096c8:	e7cf      	b.n	800966a <_strtol_l.constprop.0+0x3a>
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1da      	bne.n	8009684 <_strtol_l.constprop.0+0x54>
 80096ce:	2c30      	cmp	r4, #48	@ 0x30
 80096d0:	bf0c      	ite	eq
 80096d2:	2308      	moveq	r3, #8
 80096d4:	230a      	movne	r3, #10
 80096d6:	e7d5      	b.n	8009684 <_strtol_l.constprop.0+0x54>
 80096d8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80096dc:	2f19      	cmp	r7, #25
 80096de:	d801      	bhi.n	80096e4 <_strtol_l.constprop.0+0xb4>
 80096e0:	3c37      	subs	r4, #55	@ 0x37
 80096e2:	e7de      	b.n	80096a2 <_strtol_l.constprop.0+0x72>
 80096e4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80096e8:	2f19      	cmp	r7, #25
 80096ea:	d804      	bhi.n	80096f6 <_strtol_l.constprop.0+0xc6>
 80096ec:	3c57      	subs	r4, #87	@ 0x57
 80096ee:	e7d8      	b.n	80096a2 <_strtol_l.constprop.0+0x72>
 80096f0:	f04f 32ff 	mov.w	r2, #4294967295
 80096f4:	e7e1      	b.n	80096ba <_strtol_l.constprop.0+0x8a>
 80096f6:	1c53      	adds	r3, r2, #1
 80096f8:	d108      	bne.n	800970c <_strtol_l.constprop.0+0xdc>
 80096fa:	2322      	movs	r3, #34	@ 0x22
 80096fc:	f8ce 3000 	str.w	r3, [lr]
 8009700:	4660      	mov	r0, ip
 8009702:	f1b8 0f00 	cmp.w	r8, #0
 8009706:	d0a0      	beq.n	800964a <_strtol_l.constprop.0+0x1a>
 8009708:	1e69      	subs	r1, r5, #1
 800970a:	e006      	b.n	800971a <_strtol_l.constprop.0+0xea>
 800970c:	b106      	cbz	r6, 8009710 <_strtol_l.constprop.0+0xe0>
 800970e:	4240      	negs	r0, r0
 8009710:	f1b8 0f00 	cmp.w	r8, #0
 8009714:	d099      	beq.n	800964a <_strtol_l.constprop.0+0x1a>
 8009716:	2a00      	cmp	r2, #0
 8009718:	d1f6      	bne.n	8009708 <_strtol_l.constprop.0+0xd8>
 800971a:	f8c8 1000 	str.w	r1, [r8]
 800971e:	e794      	b.n	800964a <_strtol_l.constprop.0+0x1a>
 8009720:	0800df49 	.word	0x0800df49

08009724 <_strtol_r>:
 8009724:	f7ff bf84 	b.w	8009630 <_strtol_l.constprop.0>

08009728 <strtol>:
 8009728:	4613      	mov	r3, r2
 800972a:	460a      	mov	r2, r1
 800972c:	4601      	mov	r1, r0
 800972e:	4802      	ldr	r0, [pc, #8]	@ (8009738 <strtol+0x10>)
 8009730:	6800      	ldr	r0, [r0, #0]
 8009732:	f7ff bf7d 	b.w	8009630 <_strtol_l.constprop.0>
 8009736:	bf00      	nop
 8009738:	200000f8 	.word	0x200000f8

0800973c <__cvt>:
 800973c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009740:	ec57 6b10 	vmov	r6, r7, d0
 8009744:	2f00      	cmp	r7, #0
 8009746:	460c      	mov	r4, r1
 8009748:	4619      	mov	r1, r3
 800974a:	463b      	mov	r3, r7
 800974c:	bfbb      	ittet	lt
 800974e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009752:	461f      	movlt	r7, r3
 8009754:	2300      	movge	r3, #0
 8009756:	232d      	movlt	r3, #45	@ 0x2d
 8009758:	700b      	strb	r3, [r1, #0]
 800975a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800975c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009760:	4691      	mov	r9, r2
 8009762:	f023 0820 	bic.w	r8, r3, #32
 8009766:	bfbc      	itt	lt
 8009768:	4632      	movlt	r2, r6
 800976a:	4616      	movlt	r6, r2
 800976c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009770:	d005      	beq.n	800977e <__cvt+0x42>
 8009772:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009776:	d100      	bne.n	800977a <__cvt+0x3e>
 8009778:	3401      	adds	r4, #1
 800977a:	2102      	movs	r1, #2
 800977c:	e000      	b.n	8009780 <__cvt+0x44>
 800977e:	2103      	movs	r1, #3
 8009780:	ab03      	add	r3, sp, #12
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	ab02      	add	r3, sp, #8
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	ec47 6b10 	vmov	d0, r6, r7
 800978c:	4653      	mov	r3, sl
 800978e:	4622      	mov	r2, r4
 8009790:	f001 f922 	bl	800a9d8 <_dtoa_r>
 8009794:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009798:	4605      	mov	r5, r0
 800979a:	d119      	bne.n	80097d0 <__cvt+0x94>
 800979c:	f019 0f01 	tst.w	r9, #1
 80097a0:	d00e      	beq.n	80097c0 <__cvt+0x84>
 80097a2:	eb00 0904 	add.w	r9, r0, r4
 80097a6:	2200      	movs	r2, #0
 80097a8:	2300      	movs	r3, #0
 80097aa:	4630      	mov	r0, r6
 80097ac:	4639      	mov	r1, r7
 80097ae:	f7f7 f9c3 	bl	8000b38 <__aeabi_dcmpeq>
 80097b2:	b108      	cbz	r0, 80097b8 <__cvt+0x7c>
 80097b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80097b8:	2230      	movs	r2, #48	@ 0x30
 80097ba:	9b03      	ldr	r3, [sp, #12]
 80097bc:	454b      	cmp	r3, r9
 80097be:	d31e      	bcc.n	80097fe <__cvt+0xc2>
 80097c0:	9b03      	ldr	r3, [sp, #12]
 80097c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097c4:	1b5b      	subs	r3, r3, r5
 80097c6:	4628      	mov	r0, r5
 80097c8:	6013      	str	r3, [r2, #0]
 80097ca:	b004      	add	sp, #16
 80097cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80097d4:	eb00 0904 	add.w	r9, r0, r4
 80097d8:	d1e5      	bne.n	80097a6 <__cvt+0x6a>
 80097da:	7803      	ldrb	r3, [r0, #0]
 80097dc:	2b30      	cmp	r3, #48	@ 0x30
 80097de:	d10a      	bne.n	80097f6 <__cvt+0xba>
 80097e0:	2200      	movs	r2, #0
 80097e2:	2300      	movs	r3, #0
 80097e4:	4630      	mov	r0, r6
 80097e6:	4639      	mov	r1, r7
 80097e8:	f7f7 f9a6 	bl	8000b38 <__aeabi_dcmpeq>
 80097ec:	b918      	cbnz	r0, 80097f6 <__cvt+0xba>
 80097ee:	f1c4 0401 	rsb	r4, r4, #1
 80097f2:	f8ca 4000 	str.w	r4, [sl]
 80097f6:	f8da 3000 	ldr.w	r3, [sl]
 80097fa:	4499      	add	r9, r3
 80097fc:	e7d3      	b.n	80097a6 <__cvt+0x6a>
 80097fe:	1c59      	adds	r1, r3, #1
 8009800:	9103      	str	r1, [sp, #12]
 8009802:	701a      	strb	r2, [r3, #0]
 8009804:	e7d9      	b.n	80097ba <__cvt+0x7e>

08009806 <__exponent>:
 8009806:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009808:	2900      	cmp	r1, #0
 800980a:	bfba      	itte	lt
 800980c:	4249      	neglt	r1, r1
 800980e:	232d      	movlt	r3, #45	@ 0x2d
 8009810:	232b      	movge	r3, #43	@ 0x2b
 8009812:	2909      	cmp	r1, #9
 8009814:	7002      	strb	r2, [r0, #0]
 8009816:	7043      	strb	r3, [r0, #1]
 8009818:	dd29      	ble.n	800986e <__exponent+0x68>
 800981a:	f10d 0307 	add.w	r3, sp, #7
 800981e:	461d      	mov	r5, r3
 8009820:	270a      	movs	r7, #10
 8009822:	461a      	mov	r2, r3
 8009824:	fbb1 f6f7 	udiv	r6, r1, r7
 8009828:	fb07 1416 	mls	r4, r7, r6, r1
 800982c:	3430      	adds	r4, #48	@ 0x30
 800982e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009832:	460c      	mov	r4, r1
 8009834:	2c63      	cmp	r4, #99	@ 0x63
 8009836:	f103 33ff 	add.w	r3, r3, #4294967295
 800983a:	4631      	mov	r1, r6
 800983c:	dcf1      	bgt.n	8009822 <__exponent+0x1c>
 800983e:	3130      	adds	r1, #48	@ 0x30
 8009840:	1e94      	subs	r4, r2, #2
 8009842:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009846:	1c41      	adds	r1, r0, #1
 8009848:	4623      	mov	r3, r4
 800984a:	42ab      	cmp	r3, r5
 800984c:	d30a      	bcc.n	8009864 <__exponent+0x5e>
 800984e:	f10d 0309 	add.w	r3, sp, #9
 8009852:	1a9b      	subs	r3, r3, r2
 8009854:	42ac      	cmp	r4, r5
 8009856:	bf88      	it	hi
 8009858:	2300      	movhi	r3, #0
 800985a:	3302      	adds	r3, #2
 800985c:	4403      	add	r3, r0
 800985e:	1a18      	subs	r0, r3, r0
 8009860:	b003      	add	sp, #12
 8009862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009864:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009868:	f801 6f01 	strb.w	r6, [r1, #1]!
 800986c:	e7ed      	b.n	800984a <__exponent+0x44>
 800986e:	2330      	movs	r3, #48	@ 0x30
 8009870:	3130      	adds	r1, #48	@ 0x30
 8009872:	7083      	strb	r3, [r0, #2]
 8009874:	70c1      	strb	r1, [r0, #3]
 8009876:	1d03      	adds	r3, r0, #4
 8009878:	e7f1      	b.n	800985e <__exponent+0x58>
	...

0800987c <_printf_float>:
 800987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009880:	b08d      	sub	sp, #52	@ 0x34
 8009882:	460c      	mov	r4, r1
 8009884:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009888:	4616      	mov	r6, r2
 800988a:	461f      	mov	r7, r3
 800988c:	4605      	mov	r5, r0
 800988e:	f000 ff7f 	bl	800a790 <_localeconv_r>
 8009892:	6803      	ldr	r3, [r0, #0]
 8009894:	9304      	str	r3, [sp, #16]
 8009896:	4618      	mov	r0, r3
 8009898:	f7f6 fd22 	bl	80002e0 <strlen>
 800989c:	2300      	movs	r3, #0
 800989e:	930a      	str	r3, [sp, #40]	@ 0x28
 80098a0:	f8d8 3000 	ldr.w	r3, [r8]
 80098a4:	9005      	str	r0, [sp, #20]
 80098a6:	3307      	adds	r3, #7
 80098a8:	f023 0307 	bic.w	r3, r3, #7
 80098ac:	f103 0208 	add.w	r2, r3, #8
 80098b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80098b4:	f8d4 b000 	ldr.w	fp, [r4]
 80098b8:	f8c8 2000 	str.w	r2, [r8]
 80098bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80098c4:	9307      	str	r3, [sp, #28]
 80098c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80098ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80098ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098d2:	4b9c      	ldr	r3, [pc, #624]	@ (8009b44 <_printf_float+0x2c8>)
 80098d4:	f04f 32ff 	mov.w	r2, #4294967295
 80098d8:	f7f7 f960 	bl	8000b9c <__aeabi_dcmpun>
 80098dc:	bb70      	cbnz	r0, 800993c <_printf_float+0xc0>
 80098de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098e2:	4b98      	ldr	r3, [pc, #608]	@ (8009b44 <_printf_float+0x2c8>)
 80098e4:	f04f 32ff 	mov.w	r2, #4294967295
 80098e8:	f7f7 f93a 	bl	8000b60 <__aeabi_dcmple>
 80098ec:	bb30      	cbnz	r0, 800993c <_printf_float+0xc0>
 80098ee:	2200      	movs	r2, #0
 80098f0:	2300      	movs	r3, #0
 80098f2:	4640      	mov	r0, r8
 80098f4:	4649      	mov	r1, r9
 80098f6:	f7f7 f929 	bl	8000b4c <__aeabi_dcmplt>
 80098fa:	b110      	cbz	r0, 8009902 <_printf_float+0x86>
 80098fc:	232d      	movs	r3, #45	@ 0x2d
 80098fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009902:	4a91      	ldr	r2, [pc, #580]	@ (8009b48 <_printf_float+0x2cc>)
 8009904:	4b91      	ldr	r3, [pc, #580]	@ (8009b4c <_printf_float+0x2d0>)
 8009906:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800990a:	bf94      	ite	ls
 800990c:	4690      	movls	r8, r2
 800990e:	4698      	movhi	r8, r3
 8009910:	2303      	movs	r3, #3
 8009912:	6123      	str	r3, [r4, #16]
 8009914:	f02b 0304 	bic.w	r3, fp, #4
 8009918:	6023      	str	r3, [r4, #0]
 800991a:	f04f 0900 	mov.w	r9, #0
 800991e:	9700      	str	r7, [sp, #0]
 8009920:	4633      	mov	r3, r6
 8009922:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009924:	4621      	mov	r1, r4
 8009926:	4628      	mov	r0, r5
 8009928:	f000 f9d2 	bl	8009cd0 <_printf_common>
 800992c:	3001      	adds	r0, #1
 800992e:	f040 808d 	bne.w	8009a4c <_printf_float+0x1d0>
 8009932:	f04f 30ff 	mov.w	r0, #4294967295
 8009936:	b00d      	add	sp, #52	@ 0x34
 8009938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993c:	4642      	mov	r2, r8
 800993e:	464b      	mov	r3, r9
 8009940:	4640      	mov	r0, r8
 8009942:	4649      	mov	r1, r9
 8009944:	f7f7 f92a 	bl	8000b9c <__aeabi_dcmpun>
 8009948:	b140      	cbz	r0, 800995c <_printf_float+0xe0>
 800994a:	464b      	mov	r3, r9
 800994c:	2b00      	cmp	r3, #0
 800994e:	bfbc      	itt	lt
 8009950:	232d      	movlt	r3, #45	@ 0x2d
 8009952:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009956:	4a7e      	ldr	r2, [pc, #504]	@ (8009b50 <_printf_float+0x2d4>)
 8009958:	4b7e      	ldr	r3, [pc, #504]	@ (8009b54 <_printf_float+0x2d8>)
 800995a:	e7d4      	b.n	8009906 <_printf_float+0x8a>
 800995c:	6863      	ldr	r3, [r4, #4]
 800995e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009962:	9206      	str	r2, [sp, #24]
 8009964:	1c5a      	adds	r2, r3, #1
 8009966:	d13b      	bne.n	80099e0 <_printf_float+0x164>
 8009968:	2306      	movs	r3, #6
 800996a:	6063      	str	r3, [r4, #4]
 800996c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009970:	2300      	movs	r3, #0
 8009972:	6022      	str	r2, [r4, #0]
 8009974:	9303      	str	r3, [sp, #12]
 8009976:	ab0a      	add	r3, sp, #40	@ 0x28
 8009978:	e9cd a301 	strd	sl, r3, [sp, #4]
 800997c:	ab09      	add	r3, sp, #36	@ 0x24
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	6861      	ldr	r1, [r4, #4]
 8009982:	ec49 8b10 	vmov	d0, r8, r9
 8009986:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800998a:	4628      	mov	r0, r5
 800998c:	f7ff fed6 	bl	800973c <__cvt>
 8009990:	9b06      	ldr	r3, [sp, #24]
 8009992:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009994:	2b47      	cmp	r3, #71	@ 0x47
 8009996:	4680      	mov	r8, r0
 8009998:	d129      	bne.n	80099ee <_printf_float+0x172>
 800999a:	1cc8      	adds	r0, r1, #3
 800999c:	db02      	blt.n	80099a4 <_printf_float+0x128>
 800999e:	6863      	ldr	r3, [r4, #4]
 80099a0:	4299      	cmp	r1, r3
 80099a2:	dd41      	ble.n	8009a28 <_printf_float+0x1ac>
 80099a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80099a8:	fa5f fa8a 	uxtb.w	sl, sl
 80099ac:	3901      	subs	r1, #1
 80099ae:	4652      	mov	r2, sl
 80099b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80099b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80099b6:	f7ff ff26 	bl	8009806 <__exponent>
 80099ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099bc:	1813      	adds	r3, r2, r0
 80099be:	2a01      	cmp	r2, #1
 80099c0:	4681      	mov	r9, r0
 80099c2:	6123      	str	r3, [r4, #16]
 80099c4:	dc02      	bgt.n	80099cc <_printf_float+0x150>
 80099c6:	6822      	ldr	r2, [r4, #0]
 80099c8:	07d2      	lsls	r2, r2, #31
 80099ca:	d501      	bpl.n	80099d0 <_printf_float+0x154>
 80099cc:	3301      	adds	r3, #1
 80099ce:	6123      	str	r3, [r4, #16]
 80099d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d0a2      	beq.n	800991e <_printf_float+0xa2>
 80099d8:	232d      	movs	r3, #45	@ 0x2d
 80099da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099de:	e79e      	b.n	800991e <_printf_float+0xa2>
 80099e0:	9a06      	ldr	r2, [sp, #24]
 80099e2:	2a47      	cmp	r2, #71	@ 0x47
 80099e4:	d1c2      	bne.n	800996c <_printf_float+0xf0>
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1c0      	bne.n	800996c <_printf_float+0xf0>
 80099ea:	2301      	movs	r3, #1
 80099ec:	e7bd      	b.n	800996a <_printf_float+0xee>
 80099ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80099f2:	d9db      	bls.n	80099ac <_printf_float+0x130>
 80099f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80099f8:	d118      	bne.n	8009a2c <_printf_float+0x1b0>
 80099fa:	2900      	cmp	r1, #0
 80099fc:	6863      	ldr	r3, [r4, #4]
 80099fe:	dd0b      	ble.n	8009a18 <_printf_float+0x19c>
 8009a00:	6121      	str	r1, [r4, #16]
 8009a02:	b913      	cbnz	r3, 8009a0a <_printf_float+0x18e>
 8009a04:	6822      	ldr	r2, [r4, #0]
 8009a06:	07d0      	lsls	r0, r2, #31
 8009a08:	d502      	bpl.n	8009a10 <_printf_float+0x194>
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	440b      	add	r3, r1
 8009a0e:	6123      	str	r3, [r4, #16]
 8009a10:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009a12:	f04f 0900 	mov.w	r9, #0
 8009a16:	e7db      	b.n	80099d0 <_printf_float+0x154>
 8009a18:	b913      	cbnz	r3, 8009a20 <_printf_float+0x1a4>
 8009a1a:	6822      	ldr	r2, [r4, #0]
 8009a1c:	07d2      	lsls	r2, r2, #31
 8009a1e:	d501      	bpl.n	8009a24 <_printf_float+0x1a8>
 8009a20:	3302      	adds	r3, #2
 8009a22:	e7f4      	b.n	8009a0e <_printf_float+0x192>
 8009a24:	2301      	movs	r3, #1
 8009a26:	e7f2      	b.n	8009a0e <_printf_float+0x192>
 8009a28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009a2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a2e:	4299      	cmp	r1, r3
 8009a30:	db05      	blt.n	8009a3e <_printf_float+0x1c2>
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	6121      	str	r1, [r4, #16]
 8009a36:	07d8      	lsls	r0, r3, #31
 8009a38:	d5ea      	bpl.n	8009a10 <_printf_float+0x194>
 8009a3a:	1c4b      	adds	r3, r1, #1
 8009a3c:	e7e7      	b.n	8009a0e <_printf_float+0x192>
 8009a3e:	2900      	cmp	r1, #0
 8009a40:	bfd4      	ite	le
 8009a42:	f1c1 0202 	rsble	r2, r1, #2
 8009a46:	2201      	movgt	r2, #1
 8009a48:	4413      	add	r3, r2
 8009a4a:	e7e0      	b.n	8009a0e <_printf_float+0x192>
 8009a4c:	6823      	ldr	r3, [r4, #0]
 8009a4e:	055a      	lsls	r2, r3, #21
 8009a50:	d407      	bmi.n	8009a62 <_printf_float+0x1e6>
 8009a52:	6923      	ldr	r3, [r4, #16]
 8009a54:	4642      	mov	r2, r8
 8009a56:	4631      	mov	r1, r6
 8009a58:	4628      	mov	r0, r5
 8009a5a:	47b8      	blx	r7
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	d12b      	bne.n	8009ab8 <_printf_float+0x23c>
 8009a60:	e767      	b.n	8009932 <_printf_float+0xb6>
 8009a62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a66:	f240 80dd 	bls.w	8009c24 <_printf_float+0x3a8>
 8009a6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2300      	movs	r3, #0
 8009a72:	f7f7 f861 	bl	8000b38 <__aeabi_dcmpeq>
 8009a76:	2800      	cmp	r0, #0
 8009a78:	d033      	beq.n	8009ae2 <_printf_float+0x266>
 8009a7a:	4a37      	ldr	r2, [pc, #220]	@ (8009b58 <_printf_float+0x2dc>)
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	4631      	mov	r1, r6
 8009a80:	4628      	mov	r0, r5
 8009a82:	47b8      	blx	r7
 8009a84:	3001      	adds	r0, #1
 8009a86:	f43f af54 	beq.w	8009932 <_printf_float+0xb6>
 8009a8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009a8e:	4543      	cmp	r3, r8
 8009a90:	db02      	blt.n	8009a98 <_printf_float+0x21c>
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	07d8      	lsls	r0, r3, #31
 8009a96:	d50f      	bpl.n	8009ab8 <_printf_float+0x23c>
 8009a98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a9c:	4631      	mov	r1, r6
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	47b8      	blx	r7
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	f43f af45 	beq.w	8009932 <_printf_float+0xb6>
 8009aa8:	f04f 0900 	mov.w	r9, #0
 8009aac:	f108 38ff 	add.w	r8, r8, #4294967295
 8009ab0:	f104 0a1a 	add.w	sl, r4, #26
 8009ab4:	45c8      	cmp	r8, r9
 8009ab6:	dc09      	bgt.n	8009acc <_printf_float+0x250>
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	079b      	lsls	r3, r3, #30
 8009abc:	f100 8103 	bmi.w	8009cc6 <_printf_float+0x44a>
 8009ac0:	68e0      	ldr	r0, [r4, #12]
 8009ac2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ac4:	4298      	cmp	r0, r3
 8009ac6:	bfb8      	it	lt
 8009ac8:	4618      	movlt	r0, r3
 8009aca:	e734      	b.n	8009936 <_printf_float+0xba>
 8009acc:	2301      	movs	r3, #1
 8009ace:	4652      	mov	r2, sl
 8009ad0:	4631      	mov	r1, r6
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	47b8      	blx	r7
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	f43f af2b 	beq.w	8009932 <_printf_float+0xb6>
 8009adc:	f109 0901 	add.w	r9, r9, #1
 8009ae0:	e7e8      	b.n	8009ab4 <_printf_float+0x238>
 8009ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	dc39      	bgt.n	8009b5c <_printf_float+0x2e0>
 8009ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8009b58 <_printf_float+0x2dc>)
 8009aea:	2301      	movs	r3, #1
 8009aec:	4631      	mov	r1, r6
 8009aee:	4628      	mov	r0, r5
 8009af0:	47b8      	blx	r7
 8009af2:	3001      	adds	r0, #1
 8009af4:	f43f af1d 	beq.w	8009932 <_printf_float+0xb6>
 8009af8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009afc:	ea59 0303 	orrs.w	r3, r9, r3
 8009b00:	d102      	bne.n	8009b08 <_printf_float+0x28c>
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	07d9      	lsls	r1, r3, #31
 8009b06:	d5d7      	bpl.n	8009ab8 <_printf_float+0x23c>
 8009b08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	4628      	mov	r0, r5
 8009b10:	47b8      	blx	r7
 8009b12:	3001      	adds	r0, #1
 8009b14:	f43f af0d 	beq.w	8009932 <_printf_float+0xb6>
 8009b18:	f04f 0a00 	mov.w	sl, #0
 8009b1c:	f104 0b1a 	add.w	fp, r4, #26
 8009b20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b22:	425b      	negs	r3, r3
 8009b24:	4553      	cmp	r3, sl
 8009b26:	dc01      	bgt.n	8009b2c <_printf_float+0x2b0>
 8009b28:	464b      	mov	r3, r9
 8009b2a:	e793      	b.n	8009a54 <_printf_float+0x1d8>
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	465a      	mov	r2, fp
 8009b30:	4631      	mov	r1, r6
 8009b32:	4628      	mov	r0, r5
 8009b34:	47b8      	blx	r7
 8009b36:	3001      	adds	r0, #1
 8009b38:	f43f aefb 	beq.w	8009932 <_printf_float+0xb6>
 8009b3c:	f10a 0a01 	add.w	sl, sl, #1
 8009b40:	e7ee      	b.n	8009b20 <_printf_float+0x2a4>
 8009b42:	bf00      	nop
 8009b44:	7fefffff 	.word	0x7fefffff
 8009b48:	0800e049 	.word	0x0800e049
 8009b4c:	0800e04d 	.word	0x0800e04d
 8009b50:	0800e051 	.word	0x0800e051
 8009b54:	0800e055 	.word	0x0800e055
 8009b58:	0800e059 	.word	0x0800e059
 8009b5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009b5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009b62:	4553      	cmp	r3, sl
 8009b64:	bfa8      	it	ge
 8009b66:	4653      	movge	r3, sl
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	4699      	mov	r9, r3
 8009b6c:	dc36      	bgt.n	8009bdc <_printf_float+0x360>
 8009b6e:	f04f 0b00 	mov.w	fp, #0
 8009b72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b76:	f104 021a 	add.w	r2, r4, #26
 8009b7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009b7c:	9306      	str	r3, [sp, #24]
 8009b7e:	eba3 0309 	sub.w	r3, r3, r9
 8009b82:	455b      	cmp	r3, fp
 8009b84:	dc31      	bgt.n	8009bea <_printf_float+0x36e>
 8009b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b88:	459a      	cmp	sl, r3
 8009b8a:	dc3a      	bgt.n	8009c02 <_printf_float+0x386>
 8009b8c:	6823      	ldr	r3, [r4, #0]
 8009b8e:	07da      	lsls	r2, r3, #31
 8009b90:	d437      	bmi.n	8009c02 <_printf_float+0x386>
 8009b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b94:	ebaa 0903 	sub.w	r9, sl, r3
 8009b98:	9b06      	ldr	r3, [sp, #24]
 8009b9a:	ebaa 0303 	sub.w	r3, sl, r3
 8009b9e:	4599      	cmp	r9, r3
 8009ba0:	bfa8      	it	ge
 8009ba2:	4699      	movge	r9, r3
 8009ba4:	f1b9 0f00 	cmp.w	r9, #0
 8009ba8:	dc33      	bgt.n	8009c12 <_printf_float+0x396>
 8009baa:	f04f 0800 	mov.w	r8, #0
 8009bae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bb2:	f104 0b1a 	add.w	fp, r4, #26
 8009bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb8:	ebaa 0303 	sub.w	r3, sl, r3
 8009bbc:	eba3 0309 	sub.w	r3, r3, r9
 8009bc0:	4543      	cmp	r3, r8
 8009bc2:	f77f af79 	ble.w	8009ab8 <_printf_float+0x23c>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	465a      	mov	r2, fp
 8009bca:	4631      	mov	r1, r6
 8009bcc:	4628      	mov	r0, r5
 8009bce:	47b8      	blx	r7
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	f43f aeae 	beq.w	8009932 <_printf_float+0xb6>
 8009bd6:	f108 0801 	add.w	r8, r8, #1
 8009bda:	e7ec      	b.n	8009bb6 <_printf_float+0x33a>
 8009bdc:	4642      	mov	r2, r8
 8009bde:	4631      	mov	r1, r6
 8009be0:	4628      	mov	r0, r5
 8009be2:	47b8      	blx	r7
 8009be4:	3001      	adds	r0, #1
 8009be6:	d1c2      	bne.n	8009b6e <_printf_float+0x2f2>
 8009be8:	e6a3      	b.n	8009932 <_printf_float+0xb6>
 8009bea:	2301      	movs	r3, #1
 8009bec:	4631      	mov	r1, r6
 8009bee:	4628      	mov	r0, r5
 8009bf0:	9206      	str	r2, [sp, #24]
 8009bf2:	47b8      	blx	r7
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	f43f ae9c 	beq.w	8009932 <_printf_float+0xb6>
 8009bfa:	9a06      	ldr	r2, [sp, #24]
 8009bfc:	f10b 0b01 	add.w	fp, fp, #1
 8009c00:	e7bb      	b.n	8009b7a <_printf_float+0x2fe>
 8009c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c06:	4631      	mov	r1, r6
 8009c08:	4628      	mov	r0, r5
 8009c0a:	47b8      	blx	r7
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	d1c0      	bne.n	8009b92 <_printf_float+0x316>
 8009c10:	e68f      	b.n	8009932 <_printf_float+0xb6>
 8009c12:	9a06      	ldr	r2, [sp, #24]
 8009c14:	464b      	mov	r3, r9
 8009c16:	4442      	add	r2, r8
 8009c18:	4631      	mov	r1, r6
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	47b8      	blx	r7
 8009c1e:	3001      	adds	r0, #1
 8009c20:	d1c3      	bne.n	8009baa <_printf_float+0x32e>
 8009c22:	e686      	b.n	8009932 <_printf_float+0xb6>
 8009c24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c28:	f1ba 0f01 	cmp.w	sl, #1
 8009c2c:	dc01      	bgt.n	8009c32 <_printf_float+0x3b6>
 8009c2e:	07db      	lsls	r3, r3, #31
 8009c30:	d536      	bpl.n	8009ca0 <_printf_float+0x424>
 8009c32:	2301      	movs	r3, #1
 8009c34:	4642      	mov	r2, r8
 8009c36:	4631      	mov	r1, r6
 8009c38:	4628      	mov	r0, r5
 8009c3a:	47b8      	blx	r7
 8009c3c:	3001      	adds	r0, #1
 8009c3e:	f43f ae78 	beq.w	8009932 <_printf_float+0xb6>
 8009c42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c46:	4631      	mov	r1, r6
 8009c48:	4628      	mov	r0, r5
 8009c4a:	47b8      	blx	r7
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	f43f ae70 	beq.w	8009932 <_printf_float+0xb6>
 8009c52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c56:	2200      	movs	r2, #0
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c5e:	f7f6 ff6b 	bl	8000b38 <__aeabi_dcmpeq>
 8009c62:	b9c0      	cbnz	r0, 8009c96 <_printf_float+0x41a>
 8009c64:	4653      	mov	r3, sl
 8009c66:	f108 0201 	add.w	r2, r8, #1
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	47b8      	blx	r7
 8009c70:	3001      	adds	r0, #1
 8009c72:	d10c      	bne.n	8009c8e <_printf_float+0x412>
 8009c74:	e65d      	b.n	8009932 <_printf_float+0xb6>
 8009c76:	2301      	movs	r3, #1
 8009c78:	465a      	mov	r2, fp
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	47b8      	blx	r7
 8009c80:	3001      	adds	r0, #1
 8009c82:	f43f ae56 	beq.w	8009932 <_printf_float+0xb6>
 8009c86:	f108 0801 	add.w	r8, r8, #1
 8009c8a:	45d0      	cmp	r8, sl
 8009c8c:	dbf3      	blt.n	8009c76 <_printf_float+0x3fa>
 8009c8e:	464b      	mov	r3, r9
 8009c90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009c94:	e6df      	b.n	8009a56 <_printf_float+0x1da>
 8009c96:	f04f 0800 	mov.w	r8, #0
 8009c9a:	f104 0b1a 	add.w	fp, r4, #26
 8009c9e:	e7f4      	b.n	8009c8a <_printf_float+0x40e>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	4642      	mov	r2, r8
 8009ca4:	e7e1      	b.n	8009c6a <_printf_float+0x3ee>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	464a      	mov	r2, r9
 8009caa:	4631      	mov	r1, r6
 8009cac:	4628      	mov	r0, r5
 8009cae:	47b8      	blx	r7
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	f43f ae3e 	beq.w	8009932 <_printf_float+0xb6>
 8009cb6:	f108 0801 	add.w	r8, r8, #1
 8009cba:	68e3      	ldr	r3, [r4, #12]
 8009cbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009cbe:	1a5b      	subs	r3, r3, r1
 8009cc0:	4543      	cmp	r3, r8
 8009cc2:	dcf0      	bgt.n	8009ca6 <_printf_float+0x42a>
 8009cc4:	e6fc      	b.n	8009ac0 <_printf_float+0x244>
 8009cc6:	f04f 0800 	mov.w	r8, #0
 8009cca:	f104 0919 	add.w	r9, r4, #25
 8009cce:	e7f4      	b.n	8009cba <_printf_float+0x43e>

08009cd0 <_printf_common>:
 8009cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cd4:	4616      	mov	r6, r2
 8009cd6:	4698      	mov	r8, r3
 8009cd8:	688a      	ldr	r2, [r1, #8]
 8009cda:	690b      	ldr	r3, [r1, #16]
 8009cdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	bfb8      	it	lt
 8009ce4:	4613      	movlt	r3, r2
 8009ce6:	6033      	str	r3, [r6, #0]
 8009ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009cec:	4607      	mov	r7, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	b10a      	cbz	r2, 8009cf6 <_printf_common+0x26>
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	6033      	str	r3, [r6, #0]
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	0699      	lsls	r1, r3, #26
 8009cfa:	bf42      	ittt	mi
 8009cfc:	6833      	ldrmi	r3, [r6, #0]
 8009cfe:	3302      	addmi	r3, #2
 8009d00:	6033      	strmi	r3, [r6, #0]
 8009d02:	6825      	ldr	r5, [r4, #0]
 8009d04:	f015 0506 	ands.w	r5, r5, #6
 8009d08:	d106      	bne.n	8009d18 <_printf_common+0x48>
 8009d0a:	f104 0a19 	add.w	sl, r4, #25
 8009d0e:	68e3      	ldr	r3, [r4, #12]
 8009d10:	6832      	ldr	r2, [r6, #0]
 8009d12:	1a9b      	subs	r3, r3, r2
 8009d14:	42ab      	cmp	r3, r5
 8009d16:	dc26      	bgt.n	8009d66 <_printf_common+0x96>
 8009d18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d1c:	6822      	ldr	r2, [r4, #0]
 8009d1e:	3b00      	subs	r3, #0
 8009d20:	bf18      	it	ne
 8009d22:	2301      	movne	r3, #1
 8009d24:	0692      	lsls	r2, r2, #26
 8009d26:	d42b      	bmi.n	8009d80 <_printf_common+0xb0>
 8009d28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d2c:	4641      	mov	r1, r8
 8009d2e:	4638      	mov	r0, r7
 8009d30:	47c8      	blx	r9
 8009d32:	3001      	adds	r0, #1
 8009d34:	d01e      	beq.n	8009d74 <_printf_common+0xa4>
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	6922      	ldr	r2, [r4, #16]
 8009d3a:	f003 0306 	and.w	r3, r3, #6
 8009d3e:	2b04      	cmp	r3, #4
 8009d40:	bf02      	ittt	eq
 8009d42:	68e5      	ldreq	r5, [r4, #12]
 8009d44:	6833      	ldreq	r3, [r6, #0]
 8009d46:	1aed      	subeq	r5, r5, r3
 8009d48:	68a3      	ldr	r3, [r4, #8]
 8009d4a:	bf0c      	ite	eq
 8009d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d50:	2500      	movne	r5, #0
 8009d52:	4293      	cmp	r3, r2
 8009d54:	bfc4      	itt	gt
 8009d56:	1a9b      	subgt	r3, r3, r2
 8009d58:	18ed      	addgt	r5, r5, r3
 8009d5a:	2600      	movs	r6, #0
 8009d5c:	341a      	adds	r4, #26
 8009d5e:	42b5      	cmp	r5, r6
 8009d60:	d11a      	bne.n	8009d98 <_printf_common+0xc8>
 8009d62:	2000      	movs	r0, #0
 8009d64:	e008      	b.n	8009d78 <_printf_common+0xa8>
 8009d66:	2301      	movs	r3, #1
 8009d68:	4652      	mov	r2, sl
 8009d6a:	4641      	mov	r1, r8
 8009d6c:	4638      	mov	r0, r7
 8009d6e:	47c8      	blx	r9
 8009d70:	3001      	adds	r0, #1
 8009d72:	d103      	bne.n	8009d7c <_printf_common+0xac>
 8009d74:	f04f 30ff 	mov.w	r0, #4294967295
 8009d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7c:	3501      	adds	r5, #1
 8009d7e:	e7c6      	b.n	8009d0e <_printf_common+0x3e>
 8009d80:	18e1      	adds	r1, r4, r3
 8009d82:	1c5a      	adds	r2, r3, #1
 8009d84:	2030      	movs	r0, #48	@ 0x30
 8009d86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009d8a:	4422      	add	r2, r4
 8009d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009d90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009d94:	3302      	adds	r3, #2
 8009d96:	e7c7      	b.n	8009d28 <_printf_common+0x58>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	4622      	mov	r2, r4
 8009d9c:	4641      	mov	r1, r8
 8009d9e:	4638      	mov	r0, r7
 8009da0:	47c8      	blx	r9
 8009da2:	3001      	adds	r0, #1
 8009da4:	d0e6      	beq.n	8009d74 <_printf_common+0xa4>
 8009da6:	3601      	adds	r6, #1
 8009da8:	e7d9      	b.n	8009d5e <_printf_common+0x8e>
	...

08009dac <_printf_i>:
 8009dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009db0:	7e0f      	ldrb	r7, [r1, #24]
 8009db2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009db4:	2f78      	cmp	r7, #120	@ 0x78
 8009db6:	4691      	mov	r9, r2
 8009db8:	4680      	mov	r8, r0
 8009dba:	460c      	mov	r4, r1
 8009dbc:	469a      	mov	sl, r3
 8009dbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009dc2:	d807      	bhi.n	8009dd4 <_printf_i+0x28>
 8009dc4:	2f62      	cmp	r7, #98	@ 0x62
 8009dc6:	d80a      	bhi.n	8009dde <_printf_i+0x32>
 8009dc8:	2f00      	cmp	r7, #0
 8009dca:	f000 80d2 	beq.w	8009f72 <_printf_i+0x1c6>
 8009dce:	2f58      	cmp	r7, #88	@ 0x58
 8009dd0:	f000 80b9 	beq.w	8009f46 <_printf_i+0x19a>
 8009dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009dd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ddc:	e03a      	b.n	8009e54 <_printf_i+0xa8>
 8009dde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009de2:	2b15      	cmp	r3, #21
 8009de4:	d8f6      	bhi.n	8009dd4 <_printf_i+0x28>
 8009de6:	a101      	add	r1, pc, #4	@ (adr r1, 8009dec <_printf_i+0x40>)
 8009de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009dec:	08009e45 	.word	0x08009e45
 8009df0:	08009e59 	.word	0x08009e59
 8009df4:	08009dd5 	.word	0x08009dd5
 8009df8:	08009dd5 	.word	0x08009dd5
 8009dfc:	08009dd5 	.word	0x08009dd5
 8009e00:	08009dd5 	.word	0x08009dd5
 8009e04:	08009e59 	.word	0x08009e59
 8009e08:	08009dd5 	.word	0x08009dd5
 8009e0c:	08009dd5 	.word	0x08009dd5
 8009e10:	08009dd5 	.word	0x08009dd5
 8009e14:	08009dd5 	.word	0x08009dd5
 8009e18:	08009f59 	.word	0x08009f59
 8009e1c:	08009e83 	.word	0x08009e83
 8009e20:	08009f13 	.word	0x08009f13
 8009e24:	08009dd5 	.word	0x08009dd5
 8009e28:	08009dd5 	.word	0x08009dd5
 8009e2c:	08009f7b 	.word	0x08009f7b
 8009e30:	08009dd5 	.word	0x08009dd5
 8009e34:	08009e83 	.word	0x08009e83
 8009e38:	08009dd5 	.word	0x08009dd5
 8009e3c:	08009dd5 	.word	0x08009dd5
 8009e40:	08009f1b 	.word	0x08009f1b
 8009e44:	6833      	ldr	r3, [r6, #0]
 8009e46:	1d1a      	adds	r2, r3, #4
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6032      	str	r2, [r6, #0]
 8009e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009e54:	2301      	movs	r3, #1
 8009e56:	e09d      	b.n	8009f94 <_printf_i+0x1e8>
 8009e58:	6833      	ldr	r3, [r6, #0]
 8009e5a:	6820      	ldr	r0, [r4, #0]
 8009e5c:	1d19      	adds	r1, r3, #4
 8009e5e:	6031      	str	r1, [r6, #0]
 8009e60:	0606      	lsls	r6, r0, #24
 8009e62:	d501      	bpl.n	8009e68 <_printf_i+0xbc>
 8009e64:	681d      	ldr	r5, [r3, #0]
 8009e66:	e003      	b.n	8009e70 <_printf_i+0xc4>
 8009e68:	0645      	lsls	r5, r0, #25
 8009e6a:	d5fb      	bpl.n	8009e64 <_printf_i+0xb8>
 8009e6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009e70:	2d00      	cmp	r5, #0
 8009e72:	da03      	bge.n	8009e7c <_printf_i+0xd0>
 8009e74:	232d      	movs	r3, #45	@ 0x2d
 8009e76:	426d      	negs	r5, r5
 8009e78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e7c:	4859      	ldr	r0, [pc, #356]	@ (8009fe4 <_printf_i+0x238>)
 8009e7e:	230a      	movs	r3, #10
 8009e80:	e011      	b.n	8009ea6 <_printf_i+0xfa>
 8009e82:	6821      	ldr	r1, [r4, #0]
 8009e84:	6833      	ldr	r3, [r6, #0]
 8009e86:	0608      	lsls	r0, r1, #24
 8009e88:	f853 5b04 	ldr.w	r5, [r3], #4
 8009e8c:	d402      	bmi.n	8009e94 <_printf_i+0xe8>
 8009e8e:	0649      	lsls	r1, r1, #25
 8009e90:	bf48      	it	mi
 8009e92:	b2ad      	uxthmi	r5, r5
 8009e94:	2f6f      	cmp	r7, #111	@ 0x6f
 8009e96:	4853      	ldr	r0, [pc, #332]	@ (8009fe4 <_printf_i+0x238>)
 8009e98:	6033      	str	r3, [r6, #0]
 8009e9a:	bf14      	ite	ne
 8009e9c:	230a      	movne	r3, #10
 8009e9e:	2308      	moveq	r3, #8
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009ea6:	6866      	ldr	r6, [r4, #4]
 8009ea8:	60a6      	str	r6, [r4, #8]
 8009eaa:	2e00      	cmp	r6, #0
 8009eac:	bfa2      	ittt	ge
 8009eae:	6821      	ldrge	r1, [r4, #0]
 8009eb0:	f021 0104 	bicge.w	r1, r1, #4
 8009eb4:	6021      	strge	r1, [r4, #0]
 8009eb6:	b90d      	cbnz	r5, 8009ebc <_printf_i+0x110>
 8009eb8:	2e00      	cmp	r6, #0
 8009eba:	d04b      	beq.n	8009f54 <_printf_i+0x1a8>
 8009ebc:	4616      	mov	r6, r2
 8009ebe:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ec2:	fb03 5711 	mls	r7, r3, r1, r5
 8009ec6:	5dc7      	ldrb	r7, [r0, r7]
 8009ec8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ecc:	462f      	mov	r7, r5
 8009ece:	42bb      	cmp	r3, r7
 8009ed0:	460d      	mov	r5, r1
 8009ed2:	d9f4      	bls.n	8009ebe <_printf_i+0x112>
 8009ed4:	2b08      	cmp	r3, #8
 8009ed6:	d10b      	bne.n	8009ef0 <_printf_i+0x144>
 8009ed8:	6823      	ldr	r3, [r4, #0]
 8009eda:	07df      	lsls	r7, r3, #31
 8009edc:	d508      	bpl.n	8009ef0 <_printf_i+0x144>
 8009ede:	6923      	ldr	r3, [r4, #16]
 8009ee0:	6861      	ldr	r1, [r4, #4]
 8009ee2:	4299      	cmp	r1, r3
 8009ee4:	bfde      	ittt	le
 8009ee6:	2330      	movle	r3, #48	@ 0x30
 8009ee8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009eec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ef0:	1b92      	subs	r2, r2, r6
 8009ef2:	6122      	str	r2, [r4, #16]
 8009ef4:	f8cd a000 	str.w	sl, [sp]
 8009ef8:	464b      	mov	r3, r9
 8009efa:	aa03      	add	r2, sp, #12
 8009efc:	4621      	mov	r1, r4
 8009efe:	4640      	mov	r0, r8
 8009f00:	f7ff fee6 	bl	8009cd0 <_printf_common>
 8009f04:	3001      	adds	r0, #1
 8009f06:	d14a      	bne.n	8009f9e <_printf_i+0x1f2>
 8009f08:	f04f 30ff 	mov.w	r0, #4294967295
 8009f0c:	b004      	add	sp, #16
 8009f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	f043 0320 	orr.w	r3, r3, #32
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	4833      	ldr	r0, [pc, #204]	@ (8009fe8 <_printf_i+0x23c>)
 8009f1c:	2778      	movs	r7, #120	@ 0x78
 8009f1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	6831      	ldr	r1, [r6, #0]
 8009f26:	061f      	lsls	r7, r3, #24
 8009f28:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f2c:	d402      	bmi.n	8009f34 <_printf_i+0x188>
 8009f2e:	065f      	lsls	r7, r3, #25
 8009f30:	bf48      	it	mi
 8009f32:	b2ad      	uxthmi	r5, r5
 8009f34:	6031      	str	r1, [r6, #0]
 8009f36:	07d9      	lsls	r1, r3, #31
 8009f38:	bf44      	itt	mi
 8009f3a:	f043 0320 	orrmi.w	r3, r3, #32
 8009f3e:	6023      	strmi	r3, [r4, #0]
 8009f40:	b11d      	cbz	r5, 8009f4a <_printf_i+0x19e>
 8009f42:	2310      	movs	r3, #16
 8009f44:	e7ac      	b.n	8009ea0 <_printf_i+0xf4>
 8009f46:	4827      	ldr	r0, [pc, #156]	@ (8009fe4 <_printf_i+0x238>)
 8009f48:	e7e9      	b.n	8009f1e <_printf_i+0x172>
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	f023 0320 	bic.w	r3, r3, #32
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	e7f6      	b.n	8009f42 <_printf_i+0x196>
 8009f54:	4616      	mov	r6, r2
 8009f56:	e7bd      	b.n	8009ed4 <_printf_i+0x128>
 8009f58:	6833      	ldr	r3, [r6, #0]
 8009f5a:	6825      	ldr	r5, [r4, #0]
 8009f5c:	6961      	ldr	r1, [r4, #20]
 8009f5e:	1d18      	adds	r0, r3, #4
 8009f60:	6030      	str	r0, [r6, #0]
 8009f62:	062e      	lsls	r6, r5, #24
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	d501      	bpl.n	8009f6c <_printf_i+0x1c0>
 8009f68:	6019      	str	r1, [r3, #0]
 8009f6a:	e002      	b.n	8009f72 <_printf_i+0x1c6>
 8009f6c:	0668      	lsls	r0, r5, #25
 8009f6e:	d5fb      	bpl.n	8009f68 <_printf_i+0x1bc>
 8009f70:	8019      	strh	r1, [r3, #0]
 8009f72:	2300      	movs	r3, #0
 8009f74:	6123      	str	r3, [r4, #16]
 8009f76:	4616      	mov	r6, r2
 8009f78:	e7bc      	b.n	8009ef4 <_printf_i+0x148>
 8009f7a:	6833      	ldr	r3, [r6, #0]
 8009f7c:	1d1a      	adds	r2, r3, #4
 8009f7e:	6032      	str	r2, [r6, #0]
 8009f80:	681e      	ldr	r6, [r3, #0]
 8009f82:	6862      	ldr	r2, [r4, #4]
 8009f84:	2100      	movs	r1, #0
 8009f86:	4630      	mov	r0, r6
 8009f88:	f7f6 f95a 	bl	8000240 <memchr>
 8009f8c:	b108      	cbz	r0, 8009f92 <_printf_i+0x1e6>
 8009f8e:	1b80      	subs	r0, r0, r6
 8009f90:	6060      	str	r0, [r4, #4]
 8009f92:	6863      	ldr	r3, [r4, #4]
 8009f94:	6123      	str	r3, [r4, #16]
 8009f96:	2300      	movs	r3, #0
 8009f98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f9c:	e7aa      	b.n	8009ef4 <_printf_i+0x148>
 8009f9e:	6923      	ldr	r3, [r4, #16]
 8009fa0:	4632      	mov	r2, r6
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	47d0      	blx	sl
 8009fa8:	3001      	adds	r0, #1
 8009faa:	d0ad      	beq.n	8009f08 <_printf_i+0x15c>
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	079b      	lsls	r3, r3, #30
 8009fb0:	d413      	bmi.n	8009fda <_printf_i+0x22e>
 8009fb2:	68e0      	ldr	r0, [r4, #12]
 8009fb4:	9b03      	ldr	r3, [sp, #12]
 8009fb6:	4298      	cmp	r0, r3
 8009fb8:	bfb8      	it	lt
 8009fba:	4618      	movlt	r0, r3
 8009fbc:	e7a6      	b.n	8009f0c <_printf_i+0x160>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	4632      	mov	r2, r6
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	4640      	mov	r0, r8
 8009fc6:	47d0      	blx	sl
 8009fc8:	3001      	adds	r0, #1
 8009fca:	d09d      	beq.n	8009f08 <_printf_i+0x15c>
 8009fcc:	3501      	adds	r5, #1
 8009fce:	68e3      	ldr	r3, [r4, #12]
 8009fd0:	9903      	ldr	r1, [sp, #12]
 8009fd2:	1a5b      	subs	r3, r3, r1
 8009fd4:	42ab      	cmp	r3, r5
 8009fd6:	dcf2      	bgt.n	8009fbe <_printf_i+0x212>
 8009fd8:	e7eb      	b.n	8009fb2 <_printf_i+0x206>
 8009fda:	2500      	movs	r5, #0
 8009fdc:	f104 0619 	add.w	r6, r4, #25
 8009fe0:	e7f5      	b.n	8009fce <_printf_i+0x222>
 8009fe2:	bf00      	nop
 8009fe4:	0800e05b 	.word	0x0800e05b
 8009fe8:	0800e06c 	.word	0x0800e06c

08009fec <_scanf_float>:
 8009fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff0:	b087      	sub	sp, #28
 8009ff2:	4617      	mov	r7, r2
 8009ff4:	9303      	str	r3, [sp, #12]
 8009ff6:	688b      	ldr	r3, [r1, #8]
 8009ff8:	1e5a      	subs	r2, r3, #1
 8009ffa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009ffe:	bf81      	itttt	hi
 800a000:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a004:	eb03 0b05 	addhi.w	fp, r3, r5
 800a008:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a00c:	608b      	strhi	r3, [r1, #8]
 800a00e:	680b      	ldr	r3, [r1, #0]
 800a010:	460a      	mov	r2, r1
 800a012:	f04f 0500 	mov.w	r5, #0
 800a016:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a01a:	f842 3b1c 	str.w	r3, [r2], #28
 800a01e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a022:	4680      	mov	r8, r0
 800a024:	460c      	mov	r4, r1
 800a026:	bf98      	it	ls
 800a028:	f04f 0b00 	movls.w	fp, #0
 800a02c:	9201      	str	r2, [sp, #4]
 800a02e:	4616      	mov	r6, r2
 800a030:	46aa      	mov	sl, r5
 800a032:	46a9      	mov	r9, r5
 800a034:	9502      	str	r5, [sp, #8]
 800a036:	68a2      	ldr	r2, [r4, #8]
 800a038:	b152      	cbz	r2, 800a050 <_scanf_float+0x64>
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2b4e      	cmp	r3, #78	@ 0x4e
 800a040:	d864      	bhi.n	800a10c <_scanf_float+0x120>
 800a042:	2b40      	cmp	r3, #64	@ 0x40
 800a044:	d83c      	bhi.n	800a0c0 <_scanf_float+0xd4>
 800a046:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a04a:	b2c8      	uxtb	r0, r1
 800a04c:	280e      	cmp	r0, #14
 800a04e:	d93a      	bls.n	800a0c6 <_scanf_float+0xda>
 800a050:	f1b9 0f00 	cmp.w	r9, #0
 800a054:	d003      	beq.n	800a05e <_scanf_float+0x72>
 800a056:	6823      	ldr	r3, [r4, #0]
 800a058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a062:	f1ba 0f01 	cmp.w	sl, #1
 800a066:	f200 8117 	bhi.w	800a298 <_scanf_float+0x2ac>
 800a06a:	9b01      	ldr	r3, [sp, #4]
 800a06c:	429e      	cmp	r6, r3
 800a06e:	f200 8108 	bhi.w	800a282 <_scanf_float+0x296>
 800a072:	2001      	movs	r0, #1
 800a074:	b007      	add	sp, #28
 800a076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a07e:	2a0d      	cmp	r2, #13
 800a080:	d8e6      	bhi.n	800a050 <_scanf_float+0x64>
 800a082:	a101      	add	r1, pc, #4	@ (adr r1, 800a088 <_scanf_float+0x9c>)
 800a084:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a088:	0800a1cf 	.word	0x0800a1cf
 800a08c:	0800a051 	.word	0x0800a051
 800a090:	0800a051 	.word	0x0800a051
 800a094:	0800a051 	.word	0x0800a051
 800a098:	0800a22f 	.word	0x0800a22f
 800a09c:	0800a207 	.word	0x0800a207
 800a0a0:	0800a051 	.word	0x0800a051
 800a0a4:	0800a051 	.word	0x0800a051
 800a0a8:	0800a1dd 	.word	0x0800a1dd
 800a0ac:	0800a051 	.word	0x0800a051
 800a0b0:	0800a051 	.word	0x0800a051
 800a0b4:	0800a051 	.word	0x0800a051
 800a0b8:	0800a051 	.word	0x0800a051
 800a0bc:	0800a195 	.word	0x0800a195
 800a0c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a0c4:	e7db      	b.n	800a07e <_scanf_float+0x92>
 800a0c6:	290e      	cmp	r1, #14
 800a0c8:	d8c2      	bhi.n	800a050 <_scanf_float+0x64>
 800a0ca:	a001      	add	r0, pc, #4	@ (adr r0, 800a0d0 <_scanf_float+0xe4>)
 800a0cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a0d0:	0800a185 	.word	0x0800a185
 800a0d4:	0800a051 	.word	0x0800a051
 800a0d8:	0800a185 	.word	0x0800a185
 800a0dc:	0800a21b 	.word	0x0800a21b
 800a0e0:	0800a051 	.word	0x0800a051
 800a0e4:	0800a12d 	.word	0x0800a12d
 800a0e8:	0800a16b 	.word	0x0800a16b
 800a0ec:	0800a16b 	.word	0x0800a16b
 800a0f0:	0800a16b 	.word	0x0800a16b
 800a0f4:	0800a16b 	.word	0x0800a16b
 800a0f8:	0800a16b 	.word	0x0800a16b
 800a0fc:	0800a16b 	.word	0x0800a16b
 800a100:	0800a16b 	.word	0x0800a16b
 800a104:	0800a16b 	.word	0x0800a16b
 800a108:	0800a16b 	.word	0x0800a16b
 800a10c:	2b6e      	cmp	r3, #110	@ 0x6e
 800a10e:	d809      	bhi.n	800a124 <_scanf_float+0x138>
 800a110:	2b60      	cmp	r3, #96	@ 0x60
 800a112:	d8b2      	bhi.n	800a07a <_scanf_float+0x8e>
 800a114:	2b54      	cmp	r3, #84	@ 0x54
 800a116:	d07b      	beq.n	800a210 <_scanf_float+0x224>
 800a118:	2b59      	cmp	r3, #89	@ 0x59
 800a11a:	d199      	bne.n	800a050 <_scanf_float+0x64>
 800a11c:	2d07      	cmp	r5, #7
 800a11e:	d197      	bne.n	800a050 <_scanf_float+0x64>
 800a120:	2508      	movs	r5, #8
 800a122:	e02c      	b.n	800a17e <_scanf_float+0x192>
 800a124:	2b74      	cmp	r3, #116	@ 0x74
 800a126:	d073      	beq.n	800a210 <_scanf_float+0x224>
 800a128:	2b79      	cmp	r3, #121	@ 0x79
 800a12a:	e7f6      	b.n	800a11a <_scanf_float+0x12e>
 800a12c:	6821      	ldr	r1, [r4, #0]
 800a12e:	05c8      	lsls	r0, r1, #23
 800a130:	d51b      	bpl.n	800a16a <_scanf_float+0x17e>
 800a132:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a136:	6021      	str	r1, [r4, #0]
 800a138:	f109 0901 	add.w	r9, r9, #1
 800a13c:	f1bb 0f00 	cmp.w	fp, #0
 800a140:	d003      	beq.n	800a14a <_scanf_float+0x15e>
 800a142:	3201      	adds	r2, #1
 800a144:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a148:	60a2      	str	r2, [r4, #8]
 800a14a:	68a3      	ldr	r3, [r4, #8]
 800a14c:	3b01      	subs	r3, #1
 800a14e:	60a3      	str	r3, [r4, #8]
 800a150:	6923      	ldr	r3, [r4, #16]
 800a152:	3301      	adds	r3, #1
 800a154:	6123      	str	r3, [r4, #16]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	3b01      	subs	r3, #1
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	607b      	str	r3, [r7, #4]
 800a15e:	f340 8087 	ble.w	800a270 <_scanf_float+0x284>
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	3301      	adds	r3, #1
 800a166:	603b      	str	r3, [r7, #0]
 800a168:	e765      	b.n	800a036 <_scanf_float+0x4a>
 800a16a:	eb1a 0105 	adds.w	r1, sl, r5
 800a16e:	f47f af6f 	bne.w	800a050 <_scanf_float+0x64>
 800a172:	6822      	ldr	r2, [r4, #0]
 800a174:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a178:	6022      	str	r2, [r4, #0]
 800a17a:	460d      	mov	r5, r1
 800a17c:	468a      	mov	sl, r1
 800a17e:	f806 3b01 	strb.w	r3, [r6], #1
 800a182:	e7e2      	b.n	800a14a <_scanf_float+0x15e>
 800a184:	6822      	ldr	r2, [r4, #0]
 800a186:	0610      	lsls	r0, r2, #24
 800a188:	f57f af62 	bpl.w	800a050 <_scanf_float+0x64>
 800a18c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a190:	6022      	str	r2, [r4, #0]
 800a192:	e7f4      	b.n	800a17e <_scanf_float+0x192>
 800a194:	f1ba 0f00 	cmp.w	sl, #0
 800a198:	d10e      	bne.n	800a1b8 <_scanf_float+0x1cc>
 800a19a:	f1b9 0f00 	cmp.w	r9, #0
 800a19e:	d10e      	bne.n	800a1be <_scanf_float+0x1d2>
 800a1a0:	6822      	ldr	r2, [r4, #0]
 800a1a2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a1a6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a1aa:	d108      	bne.n	800a1be <_scanf_float+0x1d2>
 800a1ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a1b0:	6022      	str	r2, [r4, #0]
 800a1b2:	f04f 0a01 	mov.w	sl, #1
 800a1b6:	e7e2      	b.n	800a17e <_scanf_float+0x192>
 800a1b8:	f1ba 0f02 	cmp.w	sl, #2
 800a1bc:	d055      	beq.n	800a26a <_scanf_float+0x27e>
 800a1be:	2d01      	cmp	r5, #1
 800a1c0:	d002      	beq.n	800a1c8 <_scanf_float+0x1dc>
 800a1c2:	2d04      	cmp	r5, #4
 800a1c4:	f47f af44 	bne.w	800a050 <_scanf_float+0x64>
 800a1c8:	3501      	adds	r5, #1
 800a1ca:	b2ed      	uxtb	r5, r5
 800a1cc:	e7d7      	b.n	800a17e <_scanf_float+0x192>
 800a1ce:	f1ba 0f01 	cmp.w	sl, #1
 800a1d2:	f47f af3d 	bne.w	800a050 <_scanf_float+0x64>
 800a1d6:	f04f 0a02 	mov.w	sl, #2
 800a1da:	e7d0      	b.n	800a17e <_scanf_float+0x192>
 800a1dc:	b97d      	cbnz	r5, 800a1fe <_scanf_float+0x212>
 800a1de:	f1b9 0f00 	cmp.w	r9, #0
 800a1e2:	f47f af38 	bne.w	800a056 <_scanf_float+0x6a>
 800a1e6:	6822      	ldr	r2, [r4, #0]
 800a1e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a1ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a1f0:	f040 8108 	bne.w	800a404 <_scanf_float+0x418>
 800a1f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a1f8:	6022      	str	r2, [r4, #0]
 800a1fa:	2501      	movs	r5, #1
 800a1fc:	e7bf      	b.n	800a17e <_scanf_float+0x192>
 800a1fe:	2d03      	cmp	r5, #3
 800a200:	d0e2      	beq.n	800a1c8 <_scanf_float+0x1dc>
 800a202:	2d05      	cmp	r5, #5
 800a204:	e7de      	b.n	800a1c4 <_scanf_float+0x1d8>
 800a206:	2d02      	cmp	r5, #2
 800a208:	f47f af22 	bne.w	800a050 <_scanf_float+0x64>
 800a20c:	2503      	movs	r5, #3
 800a20e:	e7b6      	b.n	800a17e <_scanf_float+0x192>
 800a210:	2d06      	cmp	r5, #6
 800a212:	f47f af1d 	bne.w	800a050 <_scanf_float+0x64>
 800a216:	2507      	movs	r5, #7
 800a218:	e7b1      	b.n	800a17e <_scanf_float+0x192>
 800a21a:	6822      	ldr	r2, [r4, #0]
 800a21c:	0591      	lsls	r1, r2, #22
 800a21e:	f57f af17 	bpl.w	800a050 <_scanf_float+0x64>
 800a222:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a226:	6022      	str	r2, [r4, #0]
 800a228:	f8cd 9008 	str.w	r9, [sp, #8]
 800a22c:	e7a7      	b.n	800a17e <_scanf_float+0x192>
 800a22e:	6822      	ldr	r2, [r4, #0]
 800a230:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a234:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a238:	d006      	beq.n	800a248 <_scanf_float+0x25c>
 800a23a:	0550      	lsls	r0, r2, #21
 800a23c:	f57f af08 	bpl.w	800a050 <_scanf_float+0x64>
 800a240:	f1b9 0f00 	cmp.w	r9, #0
 800a244:	f000 80de 	beq.w	800a404 <_scanf_float+0x418>
 800a248:	0591      	lsls	r1, r2, #22
 800a24a:	bf58      	it	pl
 800a24c:	9902      	ldrpl	r1, [sp, #8]
 800a24e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a252:	bf58      	it	pl
 800a254:	eba9 0101 	subpl.w	r1, r9, r1
 800a258:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a25c:	bf58      	it	pl
 800a25e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a262:	6022      	str	r2, [r4, #0]
 800a264:	f04f 0900 	mov.w	r9, #0
 800a268:	e789      	b.n	800a17e <_scanf_float+0x192>
 800a26a:	f04f 0a03 	mov.w	sl, #3
 800a26e:	e786      	b.n	800a17e <_scanf_float+0x192>
 800a270:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a274:	4639      	mov	r1, r7
 800a276:	4640      	mov	r0, r8
 800a278:	4798      	blx	r3
 800a27a:	2800      	cmp	r0, #0
 800a27c:	f43f aedb 	beq.w	800a036 <_scanf_float+0x4a>
 800a280:	e6e6      	b.n	800a050 <_scanf_float+0x64>
 800a282:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a286:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a28a:	463a      	mov	r2, r7
 800a28c:	4640      	mov	r0, r8
 800a28e:	4798      	blx	r3
 800a290:	6923      	ldr	r3, [r4, #16]
 800a292:	3b01      	subs	r3, #1
 800a294:	6123      	str	r3, [r4, #16]
 800a296:	e6e8      	b.n	800a06a <_scanf_float+0x7e>
 800a298:	1e6b      	subs	r3, r5, #1
 800a29a:	2b06      	cmp	r3, #6
 800a29c:	d824      	bhi.n	800a2e8 <_scanf_float+0x2fc>
 800a29e:	2d02      	cmp	r5, #2
 800a2a0:	d836      	bhi.n	800a310 <_scanf_float+0x324>
 800a2a2:	9b01      	ldr	r3, [sp, #4]
 800a2a4:	429e      	cmp	r6, r3
 800a2a6:	f67f aee4 	bls.w	800a072 <_scanf_float+0x86>
 800a2aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a2ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2b2:	463a      	mov	r2, r7
 800a2b4:	4640      	mov	r0, r8
 800a2b6:	4798      	blx	r3
 800a2b8:	6923      	ldr	r3, [r4, #16]
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	6123      	str	r3, [r4, #16]
 800a2be:	e7f0      	b.n	800a2a2 <_scanf_float+0x2b6>
 800a2c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a2c4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a2c8:	463a      	mov	r2, r7
 800a2ca:	4640      	mov	r0, r8
 800a2cc:	4798      	blx	r3
 800a2ce:	6923      	ldr	r3, [r4, #16]
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	6123      	str	r3, [r4, #16]
 800a2d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2d8:	fa5f fa8a 	uxtb.w	sl, sl
 800a2dc:	f1ba 0f02 	cmp.w	sl, #2
 800a2e0:	d1ee      	bne.n	800a2c0 <_scanf_float+0x2d4>
 800a2e2:	3d03      	subs	r5, #3
 800a2e4:	b2ed      	uxtb	r5, r5
 800a2e6:	1b76      	subs	r6, r6, r5
 800a2e8:	6823      	ldr	r3, [r4, #0]
 800a2ea:	05da      	lsls	r2, r3, #23
 800a2ec:	d530      	bpl.n	800a350 <_scanf_float+0x364>
 800a2ee:	055b      	lsls	r3, r3, #21
 800a2f0:	d511      	bpl.n	800a316 <_scanf_float+0x32a>
 800a2f2:	9b01      	ldr	r3, [sp, #4]
 800a2f4:	429e      	cmp	r6, r3
 800a2f6:	f67f aebc 	bls.w	800a072 <_scanf_float+0x86>
 800a2fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a2fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a302:	463a      	mov	r2, r7
 800a304:	4640      	mov	r0, r8
 800a306:	4798      	blx	r3
 800a308:	6923      	ldr	r3, [r4, #16]
 800a30a:	3b01      	subs	r3, #1
 800a30c:	6123      	str	r3, [r4, #16]
 800a30e:	e7f0      	b.n	800a2f2 <_scanf_float+0x306>
 800a310:	46aa      	mov	sl, r5
 800a312:	46b3      	mov	fp, r6
 800a314:	e7de      	b.n	800a2d4 <_scanf_float+0x2e8>
 800a316:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a31a:	6923      	ldr	r3, [r4, #16]
 800a31c:	2965      	cmp	r1, #101	@ 0x65
 800a31e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a322:	f106 35ff 	add.w	r5, r6, #4294967295
 800a326:	6123      	str	r3, [r4, #16]
 800a328:	d00c      	beq.n	800a344 <_scanf_float+0x358>
 800a32a:	2945      	cmp	r1, #69	@ 0x45
 800a32c:	d00a      	beq.n	800a344 <_scanf_float+0x358>
 800a32e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a332:	463a      	mov	r2, r7
 800a334:	4640      	mov	r0, r8
 800a336:	4798      	blx	r3
 800a338:	6923      	ldr	r3, [r4, #16]
 800a33a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a33e:	3b01      	subs	r3, #1
 800a340:	1eb5      	subs	r5, r6, #2
 800a342:	6123      	str	r3, [r4, #16]
 800a344:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a348:	463a      	mov	r2, r7
 800a34a:	4640      	mov	r0, r8
 800a34c:	4798      	blx	r3
 800a34e:	462e      	mov	r6, r5
 800a350:	6822      	ldr	r2, [r4, #0]
 800a352:	f012 0210 	ands.w	r2, r2, #16
 800a356:	d001      	beq.n	800a35c <_scanf_float+0x370>
 800a358:	2000      	movs	r0, #0
 800a35a:	e68b      	b.n	800a074 <_scanf_float+0x88>
 800a35c:	7032      	strb	r2, [r6, #0]
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a368:	d11c      	bne.n	800a3a4 <_scanf_float+0x3b8>
 800a36a:	9b02      	ldr	r3, [sp, #8]
 800a36c:	454b      	cmp	r3, r9
 800a36e:	eba3 0209 	sub.w	r2, r3, r9
 800a372:	d123      	bne.n	800a3bc <_scanf_float+0x3d0>
 800a374:	9901      	ldr	r1, [sp, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	4640      	mov	r0, r8
 800a37a:	f002 fca5 	bl	800ccc8 <_strtod_r>
 800a37e:	9b03      	ldr	r3, [sp, #12]
 800a380:	6821      	ldr	r1, [r4, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f011 0f02 	tst.w	r1, #2
 800a388:	ec57 6b10 	vmov	r6, r7, d0
 800a38c:	f103 0204 	add.w	r2, r3, #4
 800a390:	d01f      	beq.n	800a3d2 <_scanf_float+0x3e6>
 800a392:	9903      	ldr	r1, [sp, #12]
 800a394:	600a      	str	r2, [r1, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	e9c3 6700 	strd	r6, r7, [r3]
 800a39c:	68e3      	ldr	r3, [r4, #12]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	60e3      	str	r3, [r4, #12]
 800a3a2:	e7d9      	b.n	800a358 <_scanf_float+0x36c>
 800a3a4:	9b04      	ldr	r3, [sp, #16]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0e4      	beq.n	800a374 <_scanf_float+0x388>
 800a3aa:	9905      	ldr	r1, [sp, #20]
 800a3ac:	230a      	movs	r3, #10
 800a3ae:	3101      	adds	r1, #1
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	f7ff f9b7 	bl	8009724 <_strtol_r>
 800a3b6:	9b04      	ldr	r3, [sp, #16]
 800a3b8:	9e05      	ldr	r6, [sp, #20]
 800a3ba:	1ac2      	subs	r2, r0, r3
 800a3bc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a3c0:	429e      	cmp	r6, r3
 800a3c2:	bf28      	it	cs
 800a3c4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a3c8:	4910      	ldr	r1, [pc, #64]	@ (800a40c <_scanf_float+0x420>)
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f000 f918 	bl	800a600 <siprintf>
 800a3d0:	e7d0      	b.n	800a374 <_scanf_float+0x388>
 800a3d2:	f011 0f04 	tst.w	r1, #4
 800a3d6:	9903      	ldr	r1, [sp, #12]
 800a3d8:	600a      	str	r2, [r1, #0]
 800a3da:	d1dc      	bne.n	800a396 <_scanf_float+0x3aa>
 800a3dc:	681d      	ldr	r5, [r3, #0]
 800a3de:	4632      	mov	r2, r6
 800a3e0:	463b      	mov	r3, r7
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	4639      	mov	r1, r7
 800a3e6:	f7f6 fbd9 	bl	8000b9c <__aeabi_dcmpun>
 800a3ea:	b128      	cbz	r0, 800a3f8 <_scanf_float+0x40c>
 800a3ec:	4808      	ldr	r0, [pc, #32]	@ (800a410 <_scanf_float+0x424>)
 800a3ee:	f000 fa47 	bl	800a880 <nanf>
 800a3f2:	ed85 0a00 	vstr	s0, [r5]
 800a3f6:	e7d1      	b.n	800a39c <_scanf_float+0x3b0>
 800a3f8:	4630      	mov	r0, r6
 800a3fa:	4639      	mov	r1, r7
 800a3fc:	f7f6 fc2c 	bl	8000c58 <__aeabi_d2f>
 800a400:	6028      	str	r0, [r5, #0]
 800a402:	e7cb      	b.n	800a39c <_scanf_float+0x3b0>
 800a404:	f04f 0900 	mov.w	r9, #0
 800a408:	e629      	b.n	800a05e <_scanf_float+0x72>
 800a40a:	bf00      	nop
 800a40c:	0800e07d 	.word	0x0800e07d
 800a410:	0800e12e 	.word	0x0800e12e

0800a414 <std>:
 800a414:	2300      	movs	r3, #0
 800a416:	b510      	push	{r4, lr}
 800a418:	4604      	mov	r4, r0
 800a41a:	e9c0 3300 	strd	r3, r3, [r0]
 800a41e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a422:	6083      	str	r3, [r0, #8]
 800a424:	8181      	strh	r1, [r0, #12]
 800a426:	6643      	str	r3, [r0, #100]	@ 0x64
 800a428:	81c2      	strh	r2, [r0, #14]
 800a42a:	6183      	str	r3, [r0, #24]
 800a42c:	4619      	mov	r1, r3
 800a42e:	2208      	movs	r2, #8
 800a430:	305c      	adds	r0, #92	@ 0x5c
 800a432:	f000 f948 	bl	800a6c6 <memset>
 800a436:	4b0d      	ldr	r3, [pc, #52]	@ (800a46c <std+0x58>)
 800a438:	6263      	str	r3, [r4, #36]	@ 0x24
 800a43a:	4b0d      	ldr	r3, [pc, #52]	@ (800a470 <std+0x5c>)
 800a43c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a43e:	4b0d      	ldr	r3, [pc, #52]	@ (800a474 <std+0x60>)
 800a440:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a442:	4b0d      	ldr	r3, [pc, #52]	@ (800a478 <std+0x64>)
 800a444:	6323      	str	r3, [r4, #48]	@ 0x30
 800a446:	4b0d      	ldr	r3, [pc, #52]	@ (800a47c <std+0x68>)
 800a448:	6224      	str	r4, [r4, #32]
 800a44a:	429c      	cmp	r4, r3
 800a44c:	d006      	beq.n	800a45c <std+0x48>
 800a44e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a452:	4294      	cmp	r4, r2
 800a454:	d002      	beq.n	800a45c <std+0x48>
 800a456:	33d0      	adds	r3, #208	@ 0xd0
 800a458:	429c      	cmp	r4, r3
 800a45a:	d105      	bne.n	800a468 <std+0x54>
 800a45c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a464:	f000 ba08 	b.w	800a878 <__retarget_lock_init_recursive>
 800a468:	bd10      	pop	{r4, pc}
 800a46a:	bf00      	nop
 800a46c:	0800a641 	.word	0x0800a641
 800a470:	0800a663 	.word	0x0800a663
 800a474:	0800a69b 	.word	0x0800a69b
 800a478:	0800a6bf 	.word	0x0800a6bf
 800a47c:	200006dc 	.word	0x200006dc

0800a480 <stdio_exit_handler>:
 800a480:	4a02      	ldr	r2, [pc, #8]	@ (800a48c <stdio_exit_handler+0xc>)
 800a482:	4903      	ldr	r1, [pc, #12]	@ (800a490 <stdio_exit_handler+0x10>)
 800a484:	4803      	ldr	r0, [pc, #12]	@ (800a494 <stdio_exit_handler+0x14>)
 800a486:	f000 b869 	b.w	800a55c <_fwalk_sglue>
 800a48a:	bf00      	nop
 800a48c:	200000ec 	.word	0x200000ec
 800a490:	0800d08d 	.word	0x0800d08d
 800a494:	200000fc 	.word	0x200000fc

0800a498 <cleanup_stdio>:
 800a498:	6841      	ldr	r1, [r0, #4]
 800a49a:	4b0c      	ldr	r3, [pc, #48]	@ (800a4cc <cleanup_stdio+0x34>)
 800a49c:	4299      	cmp	r1, r3
 800a49e:	b510      	push	{r4, lr}
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	d001      	beq.n	800a4a8 <cleanup_stdio+0x10>
 800a4a4:	f002 fdf2 	bl	800d08c <_fflush_r>
 800a4a8:	68a1      	ldr	r1, [r4, #8]
 800a4aa:	4b09      	ldr	r3, [pc, #36]	@ (800a4d0 <cleanup_stdio+0x38>)
 800a4ac:	4299      	cmp	r1, r3
 800a4ae:	d002      	beq.n	800a4b6 <cleanup_stdio+0x1e>
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f002 fdeb 	bl	800d08c <_fflush_r>
 800a4b6:	68e1      	ldr	r1, [r4, #12]
 800a4b8:	4b06      	ldr	r3, [pc, #24]	@ (800a4d4 <cleanup_stdio+0x3c>)
 800a4ba:	4299      	cmp	r1, r3
 800a4bc:	d004      	beq.n	800a4c8 <cleanup_stdio+0x30>
 800a4be:	4620      	mov	r0, r4
 800a4c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4c4:	f002 bde2 	b.w	800d08c <_fflush_r>
 800a4c8:	bd10      	pop	{r4, pc}
 800a4ca:	bf00      	nop
 800a4cc:	200006dc 	.word	0x200006dc
 800a4d0:	20000744 	.word	0x20000744
 800a4d4:	200007ac 	.word	0x200007ac

0800a4d8 <global_stdio_init.part.0>:
 800a4d8:	b510      	push	{r4, lr}
 800a4da:	4b0b      	ldr	r3, [pc, #44]	@ (800a508 <global_stdio_init.part.0+0x30>)
 800a4dc:	4c0b      	ldr	r4, [pc, #44]	@ (800a50c <global_stdio_init.part.0+0x34>)
 800a4de:	4a0c      	ldr	r2, [pc, #48]	@ (800a510 <global_stdio_init.part.0+0x38>)
 800a4e0:	601a      	str	r2, [r3, #0]
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	2104      	movs	r1, #4
 800a4e8:	f7ff ff94 	bl	800a414 <std>
 800a4ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	2109      	movs	r1, #9
 800a4f4:	f7ff ff8e 	bl	800a414 <std>
 800a4f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a4fc:	2202      	movs	r2, #2
 800a4fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a502:	2112      	movs	r1, #18
 800a504:	f7ff bf86 	b.w	800a414 <std>
 800a508:	20000814 	.word	0x20000814
 800a50c:	200006dc 	.word	0x200006dc
 800a510:	0800a481 	.word	0x0800a481

0800a514 <__sfp_lock_acquire>:
 800a514:	4801      	ldr	r0, [pc, #4]	@ (800a51c <__sfp_lock_acquire+0x8>)
 800a516:	f000 b9b0 	b.w	800a87a <__retarget_lock_acquire_recursive>
 800a51a:	bf00      	nop
 800a51c:	2000081d 	.word	0x2000081d

0800a520 <__sfp_lock_release>:
 800a520:	4801      	ldr	r0, [pc, #4]	@ (800a528 <__sfp_lock_release+0x8>)
 800a522:	f000 b9ab 	b.w	800a87c <__retarget_lock_release_recursive>
 800a526:	bf00      	nop
 800a528:	2000081d 	.word	0x2000081d

0800a52c <__sinit>:
 800a52c:	b510      	push	{r4, lr}
 800a52e:	4604      	mov	r4, r0
 800a530:	f7ff fff0 	bl	800a514 <__sfp_lock_acquire>
 800a534:	6a23      	ldr	r3, [r4, #32]
 800a536:	b11b      	cbz	r3, 800a540 <__sinit+0x14>
 800a538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a53c:	f7ff bff0 	b.w	800a520 <__sfp_lock_release>
 800a540:	4b04      	ldr	r3, [pc, #16]	@ (800a554 <__sinit+0x28>)
 800a542:	6223      	str	r3, [r4, #32]
 800a544:	4b04      	ldr	r3, [pc, #16]	@ (800a558 <__sinit+0x2c>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1f5      	bne.n	800a538 <__sinit+0xc>
 800a54c:	f7ff ffc4 	bl	800a4d8 <global_stdio_init.part.0>
 800a550:	e7f2      	b.n	800a538 <__sinit+0xc>
 800a552:	bf00      	nop
 800a554:	0800a499 	.word	0x0800a499
 800a558:	20000814 	.word	0x20000814

0800a55c <_fwalk_sglue>:
 800a55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a560:	4607      	mov	r7, r0
 800a562:	4688      	mov	r8, r1
 800a564:	4614      	mov	r4, r2
 800a566:	2600      	movs	r6, #0
 800a568:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a56c:	f1b9 0901 	subs.w	r9, r9, #1
 800a570:	d505      	bpl.n	800a57e <_fwalk_sglue+0x22>
 800a572:	6824      	ldr	r4, [r4, #0]
 800a574:	2c00      	cmp	r4, #0
 800a576:	d1f7      	bne.n	800a568 <_fwalk_sglue+0xc>
 800a578:	4630      	mov	r0, r6
 800a57a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a57e:	89ab      	ldrh	r3, [r5, #12]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d907      	bls.n	800a594 <_fwalk_sglue+0x38>
 800a584:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a588:	3301      	adds	r3, #1
 800a58a:	d003      	beq.n	800a594 <_fwalk_sglue+0x38>
 800a58c:	4629      	mov	r1, r5
 800a58e:	4638      	mov	r0, r7
 800a590:	47c0      	blx	r8
 800a592:	4306      	orrs	r6, r0
 800a594:	3568      	adds	r5, #104	@ 0x68
 800a596:	e7e9      	b.n	800a56c <_fwalk_sglue+0x10>

0800a598 <sniprintf>:
 800a598:	b40c      	push	{r2, r3}
 800a59a:	b530      	push	{r4, r5, lr}
 800a59c:	4b17      	ldr	r3, [pc, #92]	@ (800a5fc <sniprintf+0x64>)
 800a59e:	1e0c      	subs	r4, r1, #0
 800a5a0:	681d      	ldr	r5, [r3, #0]
 800a5a2:	b09d      	sub	sp, #116	@ 0x74
 800a5a4:	da08      	bge.n	800a5b8 <sniprintf+0x20>
 800a5a6:	238b      	movs	r3, #139	@ 0x8b
 800a5a8:	602b      	str	r3, [r5, #0]
 800a5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ae:	b01d      	add	sp, #116	@ 0x74
 800a5b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5b4:	b002      	add	sp, #8
 800a5b6:	4770      	bx	lr
 800a5b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a5bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a5c0:	bf14      	ite	ne
 800a5c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a5c6:	4623      	moveq	r3, r4
 800a5c8:	9304      	str	r3, [sp, #16]
 800a5ca:	9307      	str	r3, [sp, #28]
 800a5cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a5d0:	9002      	str	r0, [sp, #8]
 800a5d2:	9006      	str	r0, [sp, #24]
 800a5d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a5d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a5da:	ab21      	add	r3, sp, #132	@ 0x84
 800a5dc:	a902      	add	r1, sp, #8
 800a5de:	4628      	mov	r0, r5
 800a5e0:	9301      	str	r3, [sp, #4]
 800a5e2:	f002 fbd3 	bl	800cd8c <_svfiprintf_r>
 800a5e6:	1c43      	adds	r3, r0, #1
 800a5e8:	bfbc      	itt	lt
 800a5ea:	238b      	movlt	r3, #139	@ 0x8b
 800a5ec:	602b      	strlt	r3, [r5, #0]
 800a5ee:	2c00      	cmp	r4, #0
 800a5f0:	d0dd      	beq.n	800a5ae <sniprintf+0x16>
 800a5f2:	9b02      	ldr	r3, [sp, #8]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	701a      	strb	r2, [r3, #0]
 800a5f8:	e7d9      	b.n	800a5ae <sniprintf+0x16>
 800a5fa:	bf00      	nop
 800a5fc:	200000f8 	.word	0x200000f8

0800a600 <siprintf>:
 800a600:	b40e      	push	{r1, r2, r3}
 800a602:	b500      	push	{lr}
 800a604:	b09c      	sub	sp, #112	@ 0x70
 800a606:	ab1d      	add	r3, sp, #116	@ 0x74
 800a608:	9002      	str	r0, [sp, #8]
 800a60a:	9006      	str	r0, [sp, #24]
 800a60c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a610:	4809      	ldr	r0, [pc, #36]	@ (800a638 <siprintf+0x38>)
 800a612:	9107      	str	r1, [sp, #28]
 800a614:	9104      	str	r1, [sp, #16]
 800a616:	4909      	ldr	r1, [pc, #36]	@ (800a63c <siprintf+0x3c>)
 800a618:	f853 2b04 	ldr.w	r2, [r3], #4
 800a61c:	9105      	str	r1, [sp, #20]
 800a61e:	6800      	ldr	r0, [r0, #0]
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	a902      	add	r1, sp, #8
 800a624:	f002 fbb2 	bl	800cd8c <_svfiprintf_r>
 800a628:	9b02      	ldr	r3, [sp, #8]
 800a62a:	2200      	movs	r2, #0
 800a62c:	701a      	strb	r2, [r3, #0]
 800a62e:	b01c      	add	sp, #112	@ 0x70
 800a630:	f85d eb04 	ldr.w	lr, [sp], #4
 800a634:	b003      	add	sp, #12
 800a636:	4770      	bx	lr
 800a638:	200000f8 	.word	0x200000f8
 800a63c:	ffff0208 	.word	0xffff0208

0800a640 <__sread>:
 800a640:	b510      	push	{r4, lr}
 800a642:	460c      	mov	r4, r1
 800a644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a648:	f000 f8c8 	bl	800a7dc <_read_r>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	bfab      	itete	ge
 800a650:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a652:	89a3      	ldrhlt	r3, [r4, #12]
 800a654:	181b      	addge	r3, r3, r0
 800a656:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a65a:	bfac      	ite	ge
 800a65c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a65e:	81a3      	strhlt	r3, [r4, #12]
 800a660:	bd10      	pop	{r4, pc}

0800a662 <__swrite>:
 800a662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a666:	461f      	mov	r7, r3
 800a668:	898b      	ldrh	r3, [r1, #12]
 800a66a:	05db      	lsls	r3, r3, #23
 800a66c:	4605      	mov	r5, r0
 800a66e:	460c      	mov	r4, r1
 800a670:	4616      	mov	r6, r2
 800a672:	d505      	bpl.n	800a680 <__swrite+0x1e>
 800a674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a678:	2302      	movs	r3, #2
 800a67a:	2200      	movs	r2, #0
 800a67c:	f000 f89c 	bl	800a7b8 <_lseek_r>
 800a680:	89a3      	ldrh	r3, [r4, #12]
 800a682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a686:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a68a:	81a3      	strh	r3, [r4, #12]
 800a68c:	4632      	mov	r2, r6
 800a68e:	463b      	mov	r3, r7
 800a690:	4628      	mov	r0, r5
 800a692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a696:	f000 b8b3 	b.w	800a800 <_write_r>

0800a69a <__sseek>:
 800a69a:	b510      	push	{r4, lr}
 800a69c:	460c      	mov	r4, r1
 800a69e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a2:	f000 f889 	bl	800a7b8 <_lseek_r>
 800a6a6:	1c43      	adds	r3, r0, #1
 800a6a8:	89a3      	ldrh	r3, [r4, #12]
 800a6aa:	bf15      	itete	ne
 800a6ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a6ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a6b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a6b6:	81a3      	strheq	r3, [r4, #12]
 800a6b8:	bf18      	it	ne
 800a6ba:	81a3      	strhne	r3, [r4, #12]
 800a6bc:	bd10      	pop	{r4, pc}

0800a6be <__sclose>:
 800a6be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6c2:	f000 b869 	b.w	800a798 <_close_r>

0800a6c6 <memset>:
 800a6c6:	4402      	add	r2, r0
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d100      	bne.n	800a6d0 <memset+0xa>
 800a6ce:	4770      	bx	lr
 800a6d0:	f803 1b01 	strb.w	r1, [r3], #1
 800a6d4:	e7f9      	b.n	800a6ca <memset+0x4>
	...

0800a6d8 <strtok>:
 800a6d8:	4b16      	ldr	r3, [pc, #88]	@ (800a734 <strtok+0x5c>)
 800a6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6de:	681f      	ldr	r7, [r3, #0]
 800a6e0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a6e2:	4605      	mov	r5, r0
 800a6e4:	460e      	mov	r6, r1
 800a6e6:	b9ec      	cbnz	r4, 800a724 <strtok+0x4c>
 800a6e8:	2050      	movs	r0, #80	@ 0x50
 800a6ea:	f000 ff83 	bl	800b5f4 <malloc>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	6478      	str	r0, [r7, #68]	@ 0x44
 800a6f2:	b920      	cbnz	r0, 800a6fe <strtok+0x26>
 800a6f4:	4b10      	ldr	r3, [pc, #64]	@ (800a738 <strtok+0x60>)
 800a6f6:	4811      	ldr	r0, [pc, #68]	@ (800a73c <strtok+0x64>)
 800a6f8:	215b      	movs	r1, #91	@ 0x5b
 800a6fa:	f000 f8c7 	bl	800a88c <__assert_func>
 800a6fe:	e9c0 4400 	strd	r4, r4, [r0]
 800a702:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a706:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a70a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a70e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a712:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a716:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a71a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a71e:	6184      	str	r4, [r0, #24]
 800a720:	7704      	strb	r4, [r0, #28]
 800a722:	6244      	str	r4, [r0, #36]	@ 0x24
 800a724:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a726:	4631      	mov	r1, r6
 800a728:	4628      	mov	r0, r5
 800a72a:	2301      	movs	r3, #1
 800a72c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a730:	f000 b806 	b.w	800a740 <__strtok_r>
 800a734:	200000f8 	.word	0x200000f8
 800a738:	0800e082 	.word	0x0800e082
 800a73c:	0800e099 	.word	0x0800e099

0800a740 <__strtok_r>:
 800a740:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a742:	4604      	mov	r4, r0
 800a744:	b908      	cbnz	r0, 800a74a <__strtok_r+0xa>
 800a746:	6814      	ldr	r4, [r2, #0]
 800a748:	b144      	cbz	r4, 800a75c <__strtok_r+0x1c>
 800a74a:	4620      	mov	r0, r4
 800a74c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a750:	460f      	mov	r7, r1
 800a752:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a756:	b91e      	cbnz	r6, 800a760 <__strtok_r+0x20>
 800a758:	b965      	cbnz	r5, 800a774 <__strtok_r+0x34>
 800a75a:	6015      	str	r5, [r2, #0]
 800a75c:	2000      	movs	r0, #0
 800a75e:	e005      	b.n	800a76c <__strtok_r+0x2c>
 800a760:	42b5      	cmp	r5, r6
 800a762:	d1f6      	bne.n	800a752 <__strtok_r+0x12>
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1f0      	bne.n	800a74a <__strtok_r+0xa>
 800a768:	6014      	str	r4, [r2, #0]
 800a76a:	7003      	strb	r3, [r0, #0]
 800a76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a76e:	461c      	mov	r4, r3
 800a770:	e00c      	b.n	800a78c <__strtok_r+0x4c>
 800a772:	b915      	cbnz	r5, 800a77a <__strtok_r+0x3a>
 800a774:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a778:	460e      	mov	r6, r1
 800a77a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a77e:	42ab      	cmp	r3, r5
 800a780:	d1f7      	bne.n	800a772 <__strtok_r+0x32>
 800a782:	2b00      	cmp	r3, #0
 800a784:	d0f3      	beq.n	800a76e <__strtok_r+0x2e>
 800a786:	2300      	movs	r3, #0
 800a788:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a78c:	6014      	str	r4, [r2, #0]
 800a78e:	e7ed      	b.n	800a76c <__strtok_r+0x2c>

0800a790 <_localeconv_r>:
 800a790:	4800      	ldr	r0, [pc, #0]	@ (800a794 <_localeconv_r+0x4>)
 800a792:	4770      	bx	lr
 800a794:	20000238 	.word	0x20000238

0800a798 <_close_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4d06      	ldr	r5, [pc, #24]	@ (800a7b4 <_close_r+0x1c>)
 800a79c:	2300      	movs	r3, #0
 800a79e:	4604      	mov	r4, r0
 800a7a0:	4608      	mov	r0, r1
 800a7a2:	602b      	str	r3, [r5, #0]
 800a7a4:	f7f7 f8fe 	bl	80019a4 <_close>
 800a7a8:	1c43      	adds	r3, r0, #1
 800a7aa:	d102      	bne.n	800a7b2 <_close_r+0x1a>
 800a7ac:	682b      	ldr	r3, [r5, #0]
 800a7ae:	b103      	cbz	r3, 800a7b2 <_close_r+0x1a>
 800a7b0:	6023      	str	r3, [r4, #0]
 800a7b2:	bd38      	pop	{r3, r4, r5, pc}
 800a7b4:	20000818 	.word	0x20000818

0800a7b8 <_lseek_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	4d07      	ldr	r5, [pc, #28]	@ (800a7d8 <_lseek_r+0x20>)
 800a7bc:	4604      	mov	r4, r0
 800a7be:	4608      	mov	r0, r1
 800a7c0:	4611      	mov	r1, r2
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	602a      	str	r2, [r5, #0]
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	f7f7 f913 	bl	80019f2 <_lseek>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d102      	bne.n	800a7d6 <_lseek_r+0x1e>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	b103      	cbz	r3, 800a7d6 <_lseek_r+0x1e>
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	20000818 	.word	0x20000818

0800a7dc <_read_r>:
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	4d07      	ldr	r5, [pc, #28]	@ (800a7fc <_read_r+0x20>)
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	4608      	mov	r0, r1
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	602a      	str	r2, [r5, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	f7f7 f8a1 	bl	8001932 <_read>
 800a7f0:	1c43      	adds	r3, r0, #1
 800a7f2:	d102      	bne.n	800a7fa <_read_r+0x1e>
 800a7f4:	682b      	ldr	r3, [r5, #0]
 800a7f6:	b103      	cbz	r3, 800a7fa <_read_r+0x1e>
 800a7f8:	6023      	str	r3, [r4, #0]
 800a7fa:	bd38      	pop	{r3, r4, r5, pc}
 800a7fc:	20000818 	.word	0x20000818

0800a800 <_write_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4d07      	ldr	r5, [pc, #28]	@ (800a820 <_write_r+0x20>)
 800a804:	4604      	mov	r4, r0
 800a806:	4608      	mov	r0, r1
 800a808:	4611      	mov	r1, r2
 800a80a:	2200      	movs	r2, #0
 800a80c:	602a      	str	r2, [r5, #0]
 800a80e:	461a      	mov	r2, r3
 800a810:	f7f7 f8ac 	bl	800196c <_write>
 800a814:	1c43      	adds	r3, r0, #1
 800a816:	d102      	bne.n	800a81e <_write_r+0x1e>
 800a818:	682b      	ldr	r3, [r5, #0]
 800a81a:	b103      	cbz	r3, 800a81e <_write_r+0x1e>
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	bd38      	pop	{r3, r4, r5, pc}
 800a820:	20000818 	.word	0x20000818

0800a824 <__errno>:
 800a824:	4b01      	ldr	r3, [pc, #4]	@ (800a82c <__errno+0x8>)
 800a826:	6818      	ldr	r0, [r3, #0]
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	200000f8 	.word	0x200000f8

0800a830 <__libc_init_array>:
 800a830:	b570      	push	{r4, r5, r6, lr}
 800a832:	4d0d      	ldr	r5, [pc, #52]	@ (800a868 <__libc_init_array+0x38>)
 800a834:	4c0d      	ldr	r4, [pc, #52]	@ (800a86c <__libc_init_array+0x3c>)
 800a836:	1b64      	subs	r4, r4, r5
 800a838:	10a4      	asrs	r4, r4, #2
 800a83a:	2600      	movs	r6, #0
 800a83c:	42a6      	cmp	r6, r4
 800a83e:	d109      	bne.n	800a854 <__libc_init_array+0x24>
 800a840:	4d0b      	ldr	r5, [pc, #44]	@ (800a870 <__libc_init_array+0x40>)
 800a842:	4c0c      	ldr	r4, [pc, #48]	@ (800a874 <__libc_init_array+0x44>)
 800a844:	f003 faf6 	bl	800de34 <_init>
 800a848:	1b64      	subs	r4, r4, r5
 800a84a:	10a4      	asrs	r4, r4, #2
 800a84c:	2600      	movs	r6, #0
 800a84e:	42a6      	cmp	r6, r4
 800a850:	d105      	bne.n	800a85e <__libc_init_array+0x2e>
 800a852:	bd70      	pop	{r4, r5, r6, pc}
 800a854:	f855 3b04 	ldr.w	r3, [r5], #4
 800a858:	4798      	blx	r3
 800a85a:	3601      	adds	r6, #1
 800a85c:	e7ee      	b.n	800a83c <__libc_init_array+0xc>
 800a85e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a862:	4798      	blx	r3
 800a864:	3601      	adds	r6, #1
 800a866:	e7f2      	b.n	800a84e <__libc_init_array+0x1e>
 800a868:	0800e3dc 	.word	0x0800e3dc
 800a86c:	0800e3dc 	.word	0x0800e3dc
 800a870:	0800e3dc 	.word	0x0800e3dc
 800a874:	0800e3e0 	.word	0x0800e3e0

0800a878 <__retarget_lock_init_recursive>:
 800a878:	4770      	bx	lr

0800a87a <__retarget_lock_acquire_recursive>:
 800a87a:	4770      	bx	lr

0800a87c <__retarget_lock_release_recursive>:
 800a87c:	4770      	bx	lr
	...

0800a880 <nanf>:
 800a880:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a888 <nanf+0x8>
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	7fc00000 	.word	0x7fc00000

0800a88c <__assert_func>:
 800a88c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a88e:	4614      	mov	r4, r2
 800a890:	461a      	mov	r2, r3
 800a892:	4b09      	ldr	r3, [pc, #36]	@ (800a8b8 <__assert_func+0x2c>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4605      	mov	r5, r0
 800a898:	68d8      	ldr	r0, [r3, #12]
 800a89a:	b954      	cbnz	r4, 800a8b2 <__assert_func+0x26>
 800a89c:	4b07      	ldr	r3, [pc, #28]	@ (800a8bc <__assert_func+0x30>)
 800a89e:	461c      	mov	r4, r3
 800a8a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8a4:	9100      	str	r1, [sp, #0]
 800a8a6:	462b      	mov	r3, r5
 800a8a8:	4905      	ldr	r1, [pc, #20]	@ (800a8c0 <__assert_func+0x34>)
 800a8aa:	f002 fc17 	bl	800d0dc <fiprintf>
 800a8ae:	f002 fc7b 	bl	800d1a8 <abort>
 800a8b2:	4b04      	ldr	r3, [pc, #16]	@ (800a8c4 <__assert_func+0x38>)
 800a8b4:	e7f4      	b.n	800a8a0 <__assert_func+0x14>
 800a8b6:	bf00      	nop
 800a8b8:	200000f8 	.word	0x200000f8
 800a8bc:	0800e12e 	.word	0x0800e12e
 800a8c0:	0800e100 	.word	0x0800e100
 800a8c4:	0800e0f3 	.word	0x0800e0f3

0800a8c8 <quorem>:
 800a8c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8cc:	6903      	ldr	r3, [r0, #16]
 800a8ce:	690c      	ldr	r4, [r1, #16]
 800a8d0:	42a3      	cmp	r3, r4
 800a8d2:	4607      	mov	r7, r0
 800a8d4:	db7e      	blt.n	800a9d4 <quorem+0x10c>
 800a8d6:	3c01      	subs	r4, #1
 800a8d8:	f101 0814 	add.w	r8, r1, #20
 800a8dc:	00a3      	lsls	r3, r4, #2
 800a8de:	f100 0514 	add.w	r5, r0, #20
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8e8:	9301      	str	r3, [sp, #4]
 800a8ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a8ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a8fa:	fbb2 f6f3 	udiv	r6, r2, r3
 800a8fe:	d32e      	bcc.n	800a95e <quorem+0x96>
 800a900:	f04f 0a00 	mov.w	sl, #0
 800a904:	46c4      	mov	ip, r8
 800a906:	46ae      	mov	lr, r5
 800a908:	46d3      	mov	fp, sl
 800a90a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a90e:	b298      	uxth	r0, r3
 800a910:	fb06 a000 	mla	r0, r6, r0, sl
 800a914:	0c02      	lsrs	r2, r0, #16
 800a916:	0c1b      	lsrs	r3, r3, #16
 800a918:	fb06 2303 	mla	r3, r6, r3, r2
 800a91c:	f8de 2000 	ldr.w	r2, [lr]
 800a920:	b280      	uxth	r0, r0
 800a922:	b292      	uxth	r2, r2
 800a924:	1a12      	subs	r2, r2, r0
 800a926:	445a      	add	r2, fp
 800a928:	f8de 0000 	ldr.w	r0, [lr]
 800a92c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a930:	b29b      	uxth	r3, r3
 800a932:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a936:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a93a:	b292      	uxth	r2, r2
 800a93c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a940:	45e1      	cmp	r9, ip
 800a942:	f84e 2b04 	str.w	r2, [lr], #4
 800a946:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a94a:	d2de      	bcs.n	800a90a <quorem+0x42>
 800a94c:	9b00      	ldr	r3, [sp, #0]
 800a94e:	58eb      	ldr	r3, [r5, r3]
 800a950:	b92b      	cbnz	r3, 800a95e <quorem+0x96>
 800a952:	9b01      	ldr	r3, [sp, #4]
 800a954:	3b04      	subs	r3, #4
 800a956:	429d      	cmp	r5, r3
 800a958:	461a      	mov	r2, r3
 800a95a:	d32f      	bcc.n	800a9bc <quorem+0xf4>
 800a95c:	613c      	str	r4, [r7, #16]
 800a95e:	4638      	mov	r0, r7
 800a960:	f001 f9c2 	bl	800bce8 <__mcmp>
 800a964:	2800      	cmp	r0, #0
 800a966:	db25      	blt.n	800a9b4 <quorem+0xec>
 800a968:	4629      	mov	r1, r5
 800a96a:	2000      	movs	r0, #0
 800a96c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a970:	f8d1 c000 	ldr.w	ip, [r1]
 800a974:	fa1f fe82 	uxth.w	lr, r2
 800a978:	fa1f f38c 	uxth.w	r3, ip
 800a97c:	eba3 030e 	sub.w	r3, r3, lr
 800a980:	4403      	add	r3, r0
 800a982:	0c12      	lsrs	r2, r2, #16
 800a984:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a988:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a992:	45c1      	cmp	r9, r8
 800a994:	f841 3b04 	str.w	r3, [r1], #4
 800a998:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a99c:	d2e6      	bcs.n	800a96c <quorem+0xa4>
 800a99e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9a6:	b922      	cbnz	r2, 800a9b2 <quorem+0xea>
 800a9a8:	3b04      	subs	r3, #4
 800a9aa:	429d      	cmp	r5, r3
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	d30b      	bcc.n	800a9c8 <quorem+0x100>
 800a9b0:	613c      	str	r4, [r7, #16]
 800a9b2:	3601      	adds	r6, #1
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	b003      	add	sp, #12
 800a9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9bc:	6812      	ldr	r2, [r2, #0]
 800a9be:	3b04      	subs	r3, #4
 800a9c0:	2a00      	cmp	r2, #0
 800a9c2:	d1cb      	bne.n	800a95c <quorem+0x94>
 800a9c4:	3c01      	subs	r4, #1
 800a9c6:	e7c6      	b.n	800a956 <quorem+0x8e>
 800a9c8:	6812      	ldr	r2, [r2, #0]
 800a9ca:	3b04      	subs	r3, #4
 800a9cc:	2a00      	cmp	r2, #0
 800a9ce:	d1ef      	bne.n	800a9b0 <quorem+0xe8>
 800a9d0:	3c01      	subs	r4, #1
 800a9d2:	e7ea      	b.n	800a9aa <quorem+0xe2>
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	e7ee      	b.n	800a9b6 <quorem+0xee>

0800a9d8 <_dtoa_r>:
 800a9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9dc:	69c7      	ldr	r7, [r0, #28]
 800a9de:	b099      	sub	sp, #100	@ 0x64
 800a9e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a9e4:	ec55 4b10 	vmov	r4, r5, d0
 800a9e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a9ea:	9109      	str	r1, [sp, #36]	@ 0x24
 800a9ec:	4683      	mov	fp, r0
 800a9ee:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a9f2:	b97f      	cbnz	r7, 800aa14 <_dtoa_r+0x3c>
 800a9f4:	2010      	movs	r0, #16
 800a9f6:	f000 fdfd 	bl	800b5f4 <malloc>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	f8cb 001c 	str.w	r0, [fp, #28]
 800aa00:	b920      	cbnz	r0, 800aa0c <_dtoa_r+0x34>
 800aa02:	4ba7      	ldr	r3, [pc, #668]	@ (800aca0 <_dtoa_r+0x2c8>)
 800aa04:	21ef      	movs	r1, #239	@ 0xef
 800aa06:	48a7      	ldr	r0, [pc, #668]	@ (800aca4 <_dtoa_r+0x2cc>)
 800aa08:	f7ff ff40 	bl	800a88c <__assert_func>
 800aa0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aa10:	6007      	str	r7, [r0, #0]
 800aa12:	60c7      	str	r7, [r0, #12]
 800aa14:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa18:	6819      	ldr	r1, [r3, #0]
 800aa1a:	b159      	cbz	r1, 800aa34 <_dtoa_r+0x5c>
 800aa1c:	685a      	ldr	r2, [r3, #4]
 800aa1e:	604a      	str	r2, [r1, #4]
 800aa20:	2301      	movs	r3, #1
 800aa22:	4093      	lsls	r3, r2
 800aa24:	608b      	str	r3, [r1, #8]
 800aa26:	4658      	mov	r0, fp
 800aa28:	f000 feda 	bl	800b7e0 <_Bfree>
 800aa2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa30:	2200      	movs	r2, #0
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	1e2b      	subs	r3, r5, #0
 800aa36:	bfb9      	ittee	lt
 800aa38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aa3c:	9303      	strlt	r3, [sp, #12]
 800aa3e:	2300      	movge	r3, #0
 800aa40:	6033      	strge	r3, [r6, #0]
 800aa42:	9f03      	ldr	r7, [sp, #12]
 800aa44:	4b98      	ldr	r3, [pc, #608]	@ (800aca8 <_dtoa_r+0x2d0>)
 800aa46:	bfbc      	itt	lt
 800aa48:	2201      	movlt	r2, #1
 800aa4a:	6032      	strlt	r2, [r6, #0]
 800aa4c:	43bb      	bics	r3, r7
 800aa4e:	d112      	bne.n	800aa76 <_dtoa_r+0x9e>
 800aa50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa52:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aa56:	6013      	str	r3, [r2, #0]
 800aa58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa5c:	4323      	orrs	r3, r4
 800aa5e:	f000 854d 	beq.w	800b4fc <_dtoa_r+0xb24>
 800aa62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800acbc <_dtoa_r+0x2e4>
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f000 854f 	beq.w	800b50c <_dtoa_r+0xb34>
 800aa6e:	f10a 0303 	add.w	r3, sl, #3
 800aa72:	f000 bd49 	b.w	800b508 <_dtoa_r+0xb30>
 800aa76:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	ec51 0b17 	vmov	r0, r1, d7
 800aa80:	2300      	movs	r3, #0
 800aa82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800aa86:	f7f6 f857 	bl	8000b38 <__aeabi_dcmpeq>
 800aa8a:	4680      	mov	r8, r0
 800aa8c:	b158      	cbz	r0, 800aaa6 <_dtoa_r+0xce>
 800aa8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa90:	2301      	movs	r3, #1
 800aa92:	6013      	str	r3, [r2, #0]
 800aa94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa96:	b113      	cbz	r3, 800aa9e <_dtoa_r+0xc6>
 800aa98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aa9a:	4b84      	ldr	r3, [pc, #528]	@ (800acac <_dtoa_r+0x2d4>)
 800aa9c:	6013      	str	r3, [r2, #0]
 800aa9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800acc0 <_dtoa_r+0x2e8>
 800aaa2:	f000 bd33 	b.w	800b50c <_dtoa_r+0xb34>
 800aaa6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aaaa:	aa16      	add	r2, sp, #88	@ 0x58
 800aaac:	a917      	add	r1, sp, #92	@ 0x5c
 800aaae:	4658      	mov	r0, fp
 800aab0:	f001 fa3a 	bl	800bf28 <__d2b>
 800aab4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aab8:	4681      	mov	r9, r0
 800aaba:	2e00      	cmp	r6, #0
 800aabc:	d077      	beq.n	800abae <_dtoa_r+0x1d6>
 800aabe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aac0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aacc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aad0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aad4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aad8:	4619      	mov	r1, r3
 800aada:	2200      	movs	r2, #0
 800aadc:	4b74      	ldr	r3, [pc, #464]	@ (800acb0 <_dtoa_r+0x2d8>)
 800aade:	f7f5 fc0b 	bl	80002f8 <__aeabi_dsub>
 800aae2:	a369      	add	r3, pc, #420	@ (adr r3, 800ac88 <_dtoa_r+0x2b0>)
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	f7f5 fdbe 	bl	8000668 <__aeabi_dmul>
 800aaec:	a368      	add	r3, pc, #416	@ (adr r3, 800ac90 <_dtoa_r+0x2b8>)
 800aaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf2:	f7f5 fc03 	bl	80002fc <__adddf3>
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	4630      	mov	r0, r6
 800aafa:	460d      	mov	r5, r1
 800aafc:	f7f5 fd4a 	bl	8000594 <__aeabi_i2d>
 800ab00:	a365      	add	r3, pc, #404	@ (adr r3, 800ac98 <_dtoa_r+0x2c0>)
 800ab02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab06:	f7f5 fdaf 	bl	8000668 <__aeabi_dmul>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	4620      	mov	r0, r4
 800ab10:	4629      	mov	r1, r5
 800ab12:	f7f5 fbf3 	bl	80002fc <__adddf3>
 800ab16:	4604      	mov	r4, r0
 800ab18:	460d      	mov	r5, r1
 800ab1a:	f7f6 f855 	bl	8000bc8 <__aeabi_d2iz>
 800ab1e:	2200      	movs	r2, #0
 800ab20:	4607      	mov	r7, r0
 800ab22:	2300      	movs	r3, #0
 800ab24:	4620      	mov	r0, r4
 800ab26:	4629      	mov	r1, r5
 800ab28:	f7f6 f810 	bl	8000b4c <__aeabi_dcmplt>
 800ab2c:	b140      	cbz	r0, 800ab40 <_dtoa_r+0x168>
 800ab2e:	4638      	mov	r0, r7
 800ab30:	f7f5 fd30 	bl	8000594 <__aeabi_i2d>
 800ab34:	4622      	mov	r2, r4
 800ab36:	462b      	mov	r3, r5
 800ab38:	f7f5 fffe 	bl	8000b38 <__aeabi_dcmpeq>
 800ab3c:	b900      	cbnz	r0, 800ab40 <_dtoa_r+0x168>
 800ab3e:	3f01      	subs	r7, #1
 800ab40:	2f16      	cmp	r7, #22
 800ab42:	d851      	bhi.n	800abe8 <_dtoa_r+0x210>
 800ab44:	4b5b      	ldr	r3, [pc, #364]	@ (800acb4 <_dtoa_r+0x2dc>)
 800ab46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab52:	f7f5 fffb 	bl	8000b4c <__aeabi_dcmplt>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	d048      	beq.n	800abec <_dtoa_r+0x214>
 800ab5a:	3f01      	subs	r7, #1
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	9312      	str	r3, [sp, #72]	@ 0x48
 800ab60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ab62:	1b9b      	subs	r3, r3, r6
 800ab64:	1e5a      	subs	r2, r3, #1
 800ab66:	bf44      	itt	mi
 800ab68:	f1c3 0801 	rsbmi	r8, r3, #1
 800ab6c:	2300      	movmi	r3, #0
 800ab6e:	9208      	str	r2, [sp, #32]
 800ab70:	bf54      	ite	pl
 800ab72:	f04f 0800 	movpl.w	r8, #0
 800ab76:	9308      	strmi	r3, [sp, #32]
 800ab78:	2f00      	cmp	r7, #0
 800ab7a:	db39      	blt.n	800abf0 <_dtoa_r+0x218>
 800ab7c:	9b08      	ldr	r3, [sp, #32]
 800ab7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ab80:	443b      	add	r3, r7
 800ab82:	9308      	str	r3, [sp, #32]
 800ab84:	2300      	movs	r3, #0
 800ab86:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab8a:	2b09      	cmp	r3, #9
 800ab8c:	d864      	bhi.n	800ac58 <_dtoa_r+0x280>
 800ab8e:	2b05      	cmp	r3, #5
 800ab90:	bfc4      	itt	gt
 800ab92:	3b04      	subgt	r3, #4
 800ab94:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ab96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab98:	f1a3 0302 	sub.w	r3, r3, #2
 800ab9c:	bfcc      	ite	gt
 800ab9e:	2400      	movgt	r4, #0
 800aba0:	2401      	movle	r4, #1
 800aba2:	2b03      	cmp	r3, #3
 800aba4:	d863      	bhi.n	800ac6e <_dtoa_r+0x296>
 800aba6:	e8df f003 	tbb	[pc, r3]
 800abaa:	372a      	.short	0x372a
 800abac:	5535      	.short	0x5535
 800abae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800abb2:	441e      	add	r6, r3
 800abb4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800abb8:	2b20      	cmp	r3, #32
 800abba:	bfc1      	itttt	gt
 800abbc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800abc0:	409f      	lslgt	r7, r3
 800abc2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800abc6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800abca:	bfd6      	itet	le
 800abcc:	f1c3 0320 	rsble	r3, r3, #32
 800abd0:	ea47 0003 	orrgt.w	r0, r7, r3
 800abd4:	fa04 f003 	lslle.w	r0, r4, r3
 800abd8:	f7f5 fccc 	bl	8000574 <__aeabi_ui2d>
 800abdc:	2201      	movs	r2, #1
 800abde:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800abe2:	3e01      	subs	r6, #1
 800abe4:	9214      	str	r2, [sp, #80]	@ 0x50
 800abe6:	e777      	b.n	800aad8 <_dtoa_r+0x100>
 800abe8:	2301      	movs	r3, #1
 800abea:	e7b8      	b.n	800ab5e <_dtoa_r+0x186>
 800abec:	9012      	str	r0, [sp, #72]	@ 0x48
 800abee:	e7b7      	b.n	800ab60 <_dtoa_r+0x188>
 800abf0:	427b      	negs	r3, r7
 800abf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800abf4:	2300      	movs	r3, #0
 800abf6:	eba8 0807 	sub.w	r8, r8, r7
 800abfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800abfc:	e7c4      	b.n	800ab88 <_dtoa_r+0x1b0>
 800abfe:	2300      	movs	r3, #0
 800ac00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	dc35      	bgt.n	800ac74 <_dtoa_r+0x29c>
 800ac08:	2301      	movs	r3, #1
 800ac0a:	9300      	str	r3, [sp, #0]
 800ac0c:	9307      	str	r3, [sp, #28]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac12:	e00b      	b.n	800ac2c <_dtoa_r+0x254>
 800ac14:	2301      	movs	r3, #1
 800ac16:	e7f3      	b.n	800ac00 <_dtoa_r+0x228>
 800ac18:	2300      	movs	r3, #0
 800ac1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac1e:	18fb      	adds	r3, r7, r3
 800ac20:	9300      	str	r3, [sp, #0]
 800ac22:	3301      	adds	r3, #1
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	9307      	str	r3, [sp, #28]
 800ac28:	bfb8      	it	lt
 800ac2a:	2301      	movlt	r3, #1
 800ac2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ac30:	2100      	movs	r1, #0
 800ac32:	2204      	movs	r2, #4
 800ac34:	f102 0514 	add.w	r5, r2, #20
 800ac38:	429d      	cmp	r5, r3
 800ac3a:	d91f      	bls.n	800ac7c <_dtoa_r+0x2a4>
 800ac3c:	6041      	str	r1, [r0, #4]
 800ac3e:	4658      	mov	r0, fp
 800ac40:	f000 fd8e 	bl	800b760 <_Balloc>
 800ac44:	4682      	mov	sl, r0
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d13c      	bne.n	800acc4 <_dtoa_r+0x2ec>
 800ac4a:	4b1b      	ldr	r3, [pc, #108]	@ (800acb8 <_dtoa_r+0x2e0>)
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ac52:	e6d8      	b.n	800aa06 <_dtoa_r+0x2e>
 800ac54:	2301      	movs	r3, #1
 800ac56:	e7e0      	b.n	800ac1a <_dtoa_r+0x242>
 800ac58:	2401      	movs	r4, #1
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ac60:	f04f 33ff 	mov.w	r3, #4294967295
 800ac64:	9300      	str	r3, [sp, #0]
 800ac66:	9307      	str	r3, [sp, #28]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	2312      	movs	r3, #18
 800ac6c:	e7d0      	b.n	800ac10 <_dtoa_r+0x238>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac72:	e7f5      	b.n	800ac60 <_dtoa_r+0x288>
 800ac74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	9307      	str	r3, [sp, #28]
 800ac7a:	e7d7      	b.n	800ac2c <_dtoa_r+0x254>
 800ac7c:	3101      	adds	r1, #1
 800ac7e:	0052      	lsls	r2, r2, #1
 800ac80:	e7d8      	b.n	800ac34 <_dtoa_r+0x25c>
 800ac82:	bf00      	nop
 800ac84:	f3af 8000 	nop.w
 800ac88:	636f4361 	.word	0x636f4361
 800ac8c:	3fd287a7 	.word	0x3fd287a7
 800ac90:	8b60c8b3 	.word	0x8b60c8b3
 800ac94:	3fc68a28 	.word	0x3fc68a28
 800ac98:	509f79fb 	.word	0x509f79fb
 800ac9c:	3fd34413 	.word	0x3fd34413
 800aca0:	0800e082 	.word	0x0800e082
 800aca4:	0800e13c 	.word	0x0800e13c
 800aca8:	7ff00000 	.word	0x7ff00000
 800acac:	0800e05a 	.word	0x0800e05a
 800acb0:	3ff80000 	.word	0x3ff80000
 800acb4:	0800e238 	.word	0x0800e238
 800acb8:	0800e194 	.word	0x0800e194
 800acbc:	0800e138 	.word	0x0800e138
 800acc0:	0800e059 	.word	0x0800e059
 800acc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800acc8:	6018      	str	r0, [r3, #0]
 800acca:	9b07      	ldr	r3, [sp, #28]
 800accc:	2b0e      	cmp	r3, #14
 800acce:	f200 80a4 	bhi.w	800ae1a <_dtoa_r+0x442>
 800acd2:	2c00      	cmp	r4, #0
 800acd4:	f000 80a1 	beq.w	800ae1a <_dtoa_r+0x442>
 800acd8:	2f00      	cmp	r7, #0
 800acda:	dd33      	ble.n	800ad44 <_dtoa_r+0x36c>
 800acdc:	4bad      	ldr	r3, [pc, #692]	@ (800af94 <_dtoa_r+0x5bc>)
 800acde:	f007 020f 	and.w	r2, r7, #15
 800ace2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ace6:	ed93 7b00 	vldr	d7, [r3]
 800acea:	05f8      	lsls	r0, r7, #23
 800acec:	ed8d 7b04 	vstr	d7, [sp, #16]
 800acf0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800acf4:	d516      	bpl.n	800ad24 <_dtoa_r+0x34c>
 800acf6:	4ba8      	ldr	r3, [pc, #672]	@ (800af98 <_dtoa_r+0x5c0>)
 800acf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad00:	f7f5 fddc 	bl	80008bc <__aeabi_ddiv>
 800ad04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad08:	f004 040f 	and.w	r4, r4, #15
 800ad0c:	2603      	movs	r6, #3
 800ad0e:	4da2      	ldr	r5, [pc, #648]	@ (800af98 <_dtoa_r+0x5c0>)
 800ad10:	b954      	cbnz	r4, 800ad28 <_dtoa_r+0x350>
 800ad12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad1a:	f7f5 fdcf 	bl	80008bc <__aeabi_ddiv>
 800ad1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad22:	e028      	b.n	800ad76 <_dtoa_r+0x39e>
 800ad24:	2602      	movs	r6, #2
 800ad26:	e7f2      	b.n	800ad0e <_dtoa_r+0x336>
 800ad28:	07e1      	lsls	r1, r4, #31
 800ad2a:	d508      	bpl.n	800ad3e <_dtoa_r+0x366>
 800ad2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad30:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad34:	f7f5 fc98 	bl	8000668 <__aeabi_dmul>
 800ad38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad3c:	3601      	adds	r6, #1
 800ad3e:	1064      	asrs	r4, r4, #1
 800ad40:	3508      	adds	r5, #8
 800ad42:	e7e5      	b.n	800ad10 <_dtoa_r+0x338>
 800ad44:	f000 80d2 	beq.w	800aeec <_dtoa_r+0x514>
 800ad48:	427c      	negs	r4, r7
 800ad4a:	4b92      	ldr	r3, [pc, #584]	@ (800af94 <_dtoa_r+0x5bc>)
 800ad4c:	4d92      	ldr	r5, [pc, #584]	@ (800af98 <_dtoa_r+0x5c0>)
 800ad4e:	f004 020f 	and.w	r2, r4, #15
 800ad52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad5e:	f7f5 fc83 	bl	8000668 <__aeabi_dmul>
 800ad62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad66:	1124      	asrs	r4, r4, #4
 800ad68:	2300      	movs	r3, #0
 800ad6a:	2602      	movs	r6, #2
 800ad6c:	2c00      	cmp	r4, #0
 800ad6e:	f040 80b2 	bne.w	800aed6 <_dtoa_r+0x4fe>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1d3      	bne.n	800ad1e <_dtoa_r+0x346>
 800ad76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad78:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f000 80b7 	beq.w	800aef0 <_dtoa_r+0x518>
 800ad82:	4b86      	ldr	r3, [pc, #536]	@ (800af9c <_dtoa_r+0x5c4>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	4620      	mov	r0, r4
 800ad88:	4629      	mov	r1, r5
 800ad8a:	f7f5 fedf 	bl	8000b4c <__aeabi_dcmplt>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	f000 80ae 	beq.w	800aef0 <_dtoa_r+0x518>
 800ad94:	9b07      	ldr	r3, [sp, #28]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f000 80aa 	beq.w	800aef0 <_dtoa_r+0x518>
 800ad9c:	9b00      	ldr	r3, [sp, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	dd37      	ble.n	800ae12 <_dtoa_r+0x43a>
 800ada2:	1e7b      	subs	r3, r7, #1
 800ada4:	9304      	str	r3, [sp, #16]
 800ada6:	4620      	mov	r0, r4
 800ada8:	4b7d      	ldr	r3, [pc, #500]	@ (800afa0 <_dtoa_r+0x5c8>)
 800adaa:	2200      	movs	r2, #0
 800adac:	4629      	mov	r1, r5
 800adae:	f7f5 fc5b 	bl	8000668 <__aeabi_dmul>
 800adb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adb6:	9c00      	ldr	r4, [sp, #0]
 800adb8:	3601      	adds	r6, #1
 800adba:	4630      	mov	r0, r6
 800adbc:	f7f5 fbea 	bl	8000594 <__aeabi_i2d>
 800adc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adc4:	f7f5 fc50 	bl	8000668 <__aeabi_dmul>
 800adc8:	4b76      	ldr	r3, [pc, #472]	@ (800afa4 <_dtoa_r+0x5cc>)
 800adca:	2200      	movs	r2, #0
 800adcc:	f7f5 fa96 	bl	80002fc <__adddf3>
 800add0:	4605      	mov	r5, r0
 800add2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800add6:	2c00      	cmp	r4, #0
 800add8:	f040 808d 	bne.w	800aef6 <_dtoa_r+0x51e>
 800addc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ade0:	4b71      	ldr	r3, [pc, #452]	@ (800afa8 <_dtoa_r+0x5d0>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	f7f5 fa88 	bl	80002f8 <__aeabi_dsub>
 800ade8:	4602      	mov	r2, r0
 800adea:	460b      	mov	r3, r1
 800adec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800adf0:	462a      	mov	r2, r5
 800adf2:	4633      	mov	r3, r6
 800adf4:	f7f5 fec8 	bl	8000b88 <__aeabi_dcmpgt>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	f040 828b 	bne.w	800b314 <_dtoa_r+0x93c>
 800adfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae02:	462a      	mov	r2, r5
 800ae04:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ae08:	f7f5 fea0 	bl	8000b4c <__aeabi_dcmplt>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	f040 8128 	bne.w	800b062 <_dtoa_r+0x68a>
 800ae12:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ae16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ae1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f2c0 815a 	blt.w	800b0d6 <_dtoa_r+0x6fe>
 800ae22:	2f0e      	cmp	r7, #14
 800ae24:	f300 8157 	bgt.w	800b0d6 <_dtoa_r+0x6fe>
 800ae28:	4b5a      	ldr	r3, [pc, #360]	@ (800af94 <_dtoa_r+0x5bc>)
 800ae2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae2e:	ed93 7b00 	vldr	d7, [r3]
 800ae32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	ed8d 7b00 	vstr	d7, [sp]
 800ae3a:	da03      	bge.n	800ae44 <_dtoa_r+0x46c>
 800ae3c:	9b07      	ldr	r3, [sp, #28]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f340 8101 	ble.w	800b046 <_dtoa_r+0x66e>
 800ae44:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ae48:	4656      	mov	r6, sl
 800ae4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae4e:	4620      	mov	r0, r4
 800ae50:	4629      	mov	r1, r5
 800ae52:	f7f5 fd33 	bl	80008bc <__aeabi_ddiv>
 800ae56:	f7f5 feb7 	bl	8000bc8 <__aeabi_d2iz>
 800ae5a:	4680      	mov	r8, r0
 800ae5c:	f7f5 fb9a 	bl	8000594 <__aeabi_i2d>
 800ae60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae64:	f7f5 fc00 	bl	8000668 <__aeabi_dmul>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	4629      	mov	r1, r5
 800ae70:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ae74:	f7f5 fa40 	bl	80002f8 <__aeabi_dsub>
 800ae78:	f806 4b01 	strb.w	r4, [r6], #1
 800ae7c:	9d07      	ldr	r5, [sp, #28]
 800ae7e:	eba6 040a 	sub.w	r4, r6, sl
 800ae82:	42a5      	cmp	r5, r4
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	f040 8117 	bne.w	800b0ba <_dtoa_r+0x6e2>
 800ae8c:	f7f5 fa36 	bl	80002fc <__adddf3>
 800ae90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae94:	4604      	mov	r4, r0
 800ae96:	460d      	mov	r5, r1
 800ae98:	f7f5 fe76 	bl	8000b88 <__aeabi_dcmpgt>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	f040 80f9 	bne.w	800b094 <_dtoa_r+0x6bc>
 800aea2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aea6:	4620      	mov	r0, r4
 800aea8:	4629      	mov	r1, r5
 800aeaa:	f7f5 fe45 	bl	8000b38 <__aeabi_dcmpeq>
 800aeae:	b118      	cbz	r0, 800aeb8 <_dtoa_r+0x4e0>
 800aeb0:	f018 0f01 	tst.w	r8, #1
 800aeb4:	f040 80ee 	bne.w	800b094 <_dtoa_r+0x6bc>
 800aeb8:	4649      	mov	r1, r9
 800aeba:	4658      	mov	r0, fp
 800aebc:	f000 fc90 	bl	800b7e0 <_Bfree>
 800aec0:	2300      	movs	r3, #0
 800aec2:	7033      	strb	r3, [r6, #0]
 800aec4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aec6:	3701      	adds	r7, #1
 800aec8:	601f      	str	r7, [r3, #0]
 800aeca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f000 831d 	beq.w	800b50c <_dtoa_r+0xb34>
 800aed2:	601e      	str	r6, [r3, #0]
 800aed4:	e31a      	b.n	800b50c <_dtoa_r+0xb34>
 800aed6:	07e2      	lsls	r2, r4, #31
 800aed8:	d505      	bpl.n	800aee6 <_dtoa_r+0x50e>
 800aeda:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aede:	f7f5 fbc3 	bl	8000668 <__aeabi_dmul>
 800aee2:	3601      	adds	r6, #1
 800aee4:	2301      	movs	r3, #1
 800aee6:	1064      	asrs	r4, r4, #1
 800aee8:	3508      	adds	r5, #8
 800aeea:	e73f      	b.n	800ad6c <_dtoa_r+0x394>
 800aeec:	2602      	movs	r6, #2
 800aeee:	e742      	b.n	800ad76 <_dtoa_r+0x39e>
 800aef0:	9c07      	ldr	r4, [sp, #28]
 800aef2:	9704      	str	r7, [sp, #16]
 800aef4:	e761      	b.n	800adba <_dtoa_r+0x3e2>
 800aef6:	4b27      	ldr	r3, [pc, #156]	@ (800af94 <_dtoa_r+0x5bc>)
 800aef8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aefa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aefe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af02:	4454      	add	r4, sl
 800af04:	2900      	cmp	r1, #0
 800af06:	d053      	beq.n	800afb0 <_dtoa_r+0x5d8>
 800af08:	4928      	ldr	r1, [pc, #160]	@ (800afac <_dtoa_r+0x5d4>)
 800af0a:	2000      	movs	r0, #0
 800af0c:	f7f5 fcd6 	bl	80008bc <__aeabi_ddiv>
 800af10:	4633      	mov	r3, r6
 800af12:	462a      	mov	r2, r5
 800af14:	f7f5 f9f0 	bl	80002f8 <__aeabi_dsub>
 800af18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af1c:	4656      	mov	r6, sl
 800af1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af22:	f7f5 fe51 	bl	8000bc8 <__aeabi_d2iz>
 800af26:	4605      	mov	r5, r0
 800af28:	f7f5 fb34 	bl	8000594 <__aeabi_i2d>
 800af2c:	4602      	mov	r2, r0
 800af2e:	460b      	mov	r3, r1
 800af30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af34:	f7f5 f9e0 	bl	80002f8 <__aeabi_dsub>
 800af38:	3530      	adds	r5, #48	@ 0x30
 800af3a:	4602      	mov	r2, r0
 800af3c:	460b      	mov	r3, r1
 800af3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af42:	f806 5b01 	strb.w	r5, [r6], #1
 800af46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af4a:	f7f5 fdff 	bl	8000b4c <__aeabi_dcmplt>
 800af4e:	2800      	cmp	r0, #0
 800af50:	d171      	bne.n	800b036 <_dtoa_r+0x65e>
 800af52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af56:	4911      	ldr	r1, [pc, #68]	@ (800af9c <_dtoa_r+0x5c4>)
 800af58:	2000      	movs	r0, #0
 800af5a:	f7f5 f9cd 	bl	80002f8 <__aeabi_dsub>
 800af5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af62:	f7f5 fdf3 	bl	8000b4c <__aeabi_dcmplt>
 800af66:	2800      	cmp	r0, #0
 800af68:	f040 8095 	bne.w	800b096 <_dtoa_r+0x6be>
 800af6c:	42a6      	cmp	r6, r4
 800af6e:	f43f af50 	beq.w	800ae12 <_dtoa_r+0x43a>
 800af72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af76:	4b0a      	ldr	r3, [pc, #40]	@ (800afa0 <_dtoa_r+0x5c8>)
 800af78:	2200      	movs	r2, #0
 800af7a:	f7f5 fb75 	bl	8000668 <__aeabi_dmul>
 800af7e:	4b08      	ldr	r3, [pc, #32]	@ (800afa0 <_dtoa_r+0x5c8>)
 800af80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af84:	2200      	movs	r2, #0
 800af86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af8a:	f7f5 fb6d 	bl	8000668 <__aeabi_dmul>
 800af8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af92:	e7c4      	b.n	800af1e <_dtoa_r+0x546>
 800af94:	0800e238 	.word	0x0800e238
 800af98:	0800e210 	.word	0x0800e210
 800af9c:	3ff00000 	.word	0x3ff00000
 800afa0:	40240000 	.word	0x40240000
 800afa4:	401c0000 	.word	0x401c0000
 800afa8:	40140000 	.word	0x40140000
 800afac:	3fe00000 	.word	0x3fe00000
 800afb0:	4631      	mov	r1, r6
 800afb2:	4628      	mov	r0, r5
 800afb4:	f7f5 fb58 	bl	8000668 <__aeabi_dmul>
 800afb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800afbc:	9415      	str	r4, [sp, #84]	@ 0x54
 800afbe:	4656      	mov	r6, sl
 800afc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afc4:	f7f5 fe00 	bl	8000bc8 <__aeabi_d2iz>
 800afc8:	4605      	mov	r5, r0
 800afca:	f7f5 fae3 	bl	8000594 <__aeabi_i2d>
 800afce:	4602      	mov	r2, r0
 800afd0:	460b      	mov	r3, r1
 800afd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afd6:	f7f5 f98f 	bl	80002f8 <__aeabi_dsub>
 800afda:	3530      	adds	r5, #48	@ 0x30
 800afdc:	f806 5b01 	strb.w	r5, [r6], #1
 800afe0:	4602      	mov	r2, r0
 800afe2:	460b      	mov	r3, r1
 800afe4:	42a6      	cmp	r6, r4
 800afe6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800afea:	f04f 0200 	mov.w	r2, #0
 800afee:	d124      	bne.n	800b03a <_dtoa_r+0x662>
 800aff0:	4bac      	ldr	r3, [pc, #688]	@ (800b2a4 <_dtoa_r+0x8cc>)
 800aff2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aff6:	f7f5 f981 	bl	80002fc <__adddf3>
 800affa:	4602      	mov	r2, r0
 800affc:	460b      	mov	r3, r1
 800affe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b002:	f7f5 fdc1 	bl	8000b88 <__aeabi_dcmpgt>
 800b006:	2800      	cmp	r0, #0
 800b008:	d145      	bne.n	800b096 <_dtoa_r+0x6be>
 800b00a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b00e:	49a5      	ldr	r1, [pc, #660]	@ (800b2a4 <_dtoa_r+0x8cc>)
 800b010:	2000      	movs	r0, #0
 800b012:	f7f5 f971 	bl	80002f8 <__aeabi_dsub>
 800b016:	4602      	mov	r2, r0
 800b018:	460b      	mov	r3, r1
 800b01a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b01e:	f7f5 fd95 	bl	8000b4c <__aeabi_dcmplt>
 800b022:	2800      	cmp	r0, #0
 800b024:	f43f aef5 	beq.w	800ae12 <_dtoa_r+0x43a>
 800b028:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b02a:	1e73      	subs	r3, r6, #1
 800b02c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b02e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b032:	2b30      	cmp	r3, #48	@ 0x30
 800b034:	d0f8      	beq.n	800b028 <_dtoa_r+0x650>
 800b036:	9f04      	ldr	r7, [sp, #16]
 800b038:	e73e      	b.n	800aeb8 <_dtoa_r+0x4e0>
 800b03a:	4b9b      	ldr	r3, [pc, #620]	@ (800b2a8 <_dtoa_r+0x8d0>)
 800b03c:	f7f5 fb14 	bl	8000668 <__aeabi_dmul>
 800b040:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b044:	e7bc      	b.n	800afc0 <_dtoa_r+0x5e8>
 800b046:	d10c      	bne.n	800b062 <_dtoa_r+0x68a>
 800b048:	4b98      	ldr	r3, [pc, #608]	@ (800b2ac <_dtoa_r+0x8d4>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b050:	f7f5 fb0a 	bl	8000668 <__aeabi_dmul>
 800b054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b058:	f7f5 fd8c 	bl	8000b74 <__aeabi_dcmpge>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	f000 8157 	beq.w	800b310 <_dtoa_r+0x938>
 800b062:	2400      	movs	r4, #0
 800b064:	4625      	mov	r5, r4
 800b066:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b068:	43db      	mvns	r3, r3
 800b06a:	9304      	str	r3, [sp, #16]
 800b06c:	4656      	mov	r6, sl
 800b06e:	2700      	movs	r7, #0
 800b070:	4621      	mov	r1, r4
 800b072:	4658      	mov	r0, fp
 800b074:	f000 fbb4 	bl	800b7e0 <_Bfree>
 800b078:	2d00      	cmp	r5, #0
 800b07a:	d0dc      	beq.n	800b036 <_dtoa_r+0x65e>
 800b07c:	b12f      	cbz	r7, 800b08a <_dtoa_r+0x6b2>
 800b07e:	42af      	cmp	r7, r5
 800b080:	d003      	beq.n	800b08a <_dtoa_r+0x6b2>
 800b082:	4639      	mov	r1, r7
 800b084:	4658      	mov	r0, fp
 800b086:	f000 fbab 	bl	800b7e0 <_Bfree>
 800b08a:	4629      	mov	r1, r5
 800b08c:	4658      	mov	r0, fp
 800b08e:	f000 fba7 	bl	800b7e0 <_Bfree>
 800b092:	e7d0      	b.n	800b036 <_dtoa_r+0x65e>
 800b094:	9704      	str	r7, [sp, #16]
 800b096:	4633      	mov	r3, r6
 800b098:	461e      	mov	r6, r3
 800b09a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b09e:	2a39      	cmp	r2, #57	@ 0x39
 800b0a0:	d107      	bne.n	800b0b2 <_dtoa_r+0x6da>
 800b0a2:	459a      	cmp	sl, r3
 800b0a4:	d1f8      	bne.n	800b098 <_dtoa_r+0x6c0>
 800b0a6:	9a04      	ldr	r2, [sp, #16]
 800b0a8:	3201      	adds	r2, #1
 800b0aa:	9204      	str	r2, [sp, #16]
 800b0ac:	2230      	movs	r2, #48	@ 0x30
 800b0ae:	f88a 2000 	strb.w	r2, [sl]
 800b0b2:	781a      	ldrb	r2, [r3, #0]
 800b0b4:	3201      	adds	r2, #1
 800b0b6:	701a      	strb	r2, [r3, #0]
 800b0b8:	e7bd      	b.n	800b036 <_dtoa_r+0x65e>
 800b0ba:	4b7b      	ldr	r3, [pc, #492]	@ (800b2a8 <_dtoa_r+0x8d0>)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f7f5 fad3 	bl	8000668 <__aeabi_dmul>
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	460d      	mov	r5, r1
 800b0ca:	f7f5 fd35 	bl	8000b38 <__aeabi_dcmpeq>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	f43f aebb 	beq.w	800ae4a <_dtoa_r+0x472>
 800b0d4:	e6f0      	b.n	800aeb8 <_dtoa_r+0x4e0>
 800b0d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b0d8:	2a00      	cmp	r2, #0
 800b0da:	f000 80db 	beq.w	800b294 <_dtoa_r+0x8bc>
 800b0de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0e0:	2a01      	cmp	r2, #1
 800b0e2:	f300 80bf 	bgt.w	800b264 <_dtoa_r+0x88c>
 800b0e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b0e8:	2a00      	cmp	r2, #0
 800b0ea:	f000 80b7 	beq.w	800b25c <_dtoa_r+0x884>
 800b0ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b0f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b0f4:	4646      	mov	r6, r8
 800b0f6:	9a08      	ldr	r2, [sp, #32]
 800b0f8:	2101      	movs	r1, #1
 800b0fa:	441a      	add	r2, r3
 800b0fc:	4658      	mov	r0, fp
 800b0fe:	4498      	add	r8, r3
 800b100:	9208      	str	r2, [sp, #32]
 800b102:	f000 fc6b 	bl	800b9dc <__i2b>
 800b106:	4605      	mov	r5, r0
 800b108:	b15e      	cbz	r6, 800b122 <_dtoa_r+0x74a>
 800b10a:	9b08      	ldr	r3, [sp, #32]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	dd08      	ble.n	800b122 <_dtoa_r+0x74a>
 800b110:	42b3      	cmp	r3, r6
 800b112:	9a08      	ldr	r2, [sp, #32]
 800b114:	bfa8      	it	ge
 800b116:	4633      	movge	r3, r6
 800b118:	eba8 0803 	sub.w	r8, r8, r3
 800b11c:	1af6      	subs	r6, r6, r3
 800b11e:	1ad3      	subs	r3, r2, r3
 800b120:	9308      	str	r3, [sp, #32]
 800b122:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b124:	b1f3      	cbz	r3, 800b164 <_dtoa_r+0x78c>
 800b126:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f000 80b7 	beq.w	800b29c <_dtoa_r+0x8c4>
 800b12e:	b18c      	cbz	r4, 800b154 <_dtoa_r+0x77c>
 800b130:	4629      	mov	r1, r5
 800b132:	4622      	mov	r2, r4
 800b134:	4658      	mov	r0, fp
 800b136:	f000 fd11 	bl	800bb5c <__pow5mult>
 800b13a:	464a      	mov	r2, r9
 800b13c:	4601      	mov	r1, r0
 800b13e:	4605      	mov	r5, r0
 800b140:	4658      	mov	r0, fp
 800b142:	f000 fc61 	bl	800ba08 <__multiply>
 800b146:	4649      	mov	r1, r9
 800b148:	9004      	str	r0, [sp, #16]
 800b14a:	4658      	mov	r0, fp
 800b14c:	f000 fb48 	bl	800b7e0 <_Bfree>
 800b150:	9b04      	ldr	r3, [sp, #16]
 800b152:	4699      	mov	r9, r3
 800b154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b156:	1b1a      	subs	r2, r3, r4
 800b158:	d004      	beq.n	800b164 <_dtoa_r+0x78c>
 800b15a:	4649      	mov	r1, r9
 800b15c:	4658      	mov	r0, fp
 800b15e:	f000 fcfd 	bl	800bb5c <__pow5mult>
 800b162:	4681      	mov	r9, r0
 800b164:	2101      	movs	r1, #1
 800b166:	4658      	mov	r0, fp
 800b168:	f000 fc38 	bl	800b9dc <__i2b>
 800b16c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b16e:	4604      	mov	r4, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	f000 81cf 	beq.w	800b514 <_dtoa_r+0xb3c>
 800b176:	461a      	mov	r2, r3
 800b178:	4601      	mov	r1, r0
 800b17a:	4658      	mov	r0, fp
 800b17c:	f000 fcee 	bl	800bb5c <__pow5mult>
 800b180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b182:	2b01      	cmp	r3, #1
 800b184:	4604      	mov	r4, r0
 800b186:	f300 8095 	bgt.w	800b2b4 <_dtoa_r+0x8dc>
 800b18a:	9b02      	ldr	r3, [sp, #8]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f040 8087 	bne.w	800b2a0 <_dtoa_r+0x8c8>
 800b192:	9b03      	ldr	r3, [sp, #12]
 800b194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f040 8089 	bne.w	800b2b0 <_dtoa_r+0x8d8>
 800b19e:	9b03      	ldr	r3, [sp, #12]
 800b1a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1a4:	0d1b      	lsrs	r3, r3, #20
 800b1a6:	051b      	lsls	r3, r3, #20
 800b1a8:	b12b      	cbz	r3, 800b1b6 <_dtoa_r+0x7de>
 800b1aa:	9b08      	ldr	r3, [sp, #32]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	9308      	str	r3, [sp, #32]
 800b1b0:	f108 0801 	add.w	r8, r8, #1
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	f000 81b0 	beq.w	800b520 <_dtoa_r+0xb48>
 800b1c0:	6923      	ldr	r3, [r4, #16]
 800b1c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b1c6:	6918      	ldr	r0, [r3, #16]
 800b1c8:	f000 fbbc 	bl	800b944 <__hi0bits>
 800b1cc:	f1c0 0020 	rsb	r0, r0, #32
 800b1d0:	9b08      	ldr	r3, [sp, #32]
 800b1d2:	4418      	add	r0, r3
 800b1d4:	f010 001f 	ands.w	r0, r0, #31
 800b1d8:	d077      	beq.n	800b2ca <_dtoa_r+0x8f2>
 800b1da:	f1c0 0320 	rsb	r3, r0, #32
 800b1de:	2b04      	cmp	r3, #4
 800b1e0:	dd6b      	ble.n	800b2ba <_dtoa_r+0x8e2>
 800b1e2:	9b08      	ldr	r3, [sp, #32]
 800b1e4:	f1c0 001c 	rsb	r0, r0, #28
 800b1e8:	4403      	add	r3, r0
 800b1ea:	4480      	add	r8, r0
 800b1ec:	4406      	add	r6, r0
 800b1ee:	9308      	str	r3, [sp, #32]
 800b1f0:	f1b8 0f00 	cmp.w	r8, #0
 800b1f4:	dd05      	ble.n	800b202 <_dtoa_r+0x82a>
 800b1f6:	4649      	mov	r1, r9
 800b1f8:	4642      	mov	r2, r8
 800b1fa:	4658      	mov	r0, fp
 800b1fc:	f000 fd08 	bl	800bc10 <__lshift>
 800b200:	4681      	mov	r9, r0
 800b202:	9b08      	ldr	r3, [sp, #32]
 800b204:	2b00      	cmp	r3, #0
 800b206:	dd05      	ble.n	800b214 <_dtoa_r+0x83c>
 800b208:	4621      	mov	r1, r4
 800b20a:	461a      	mov	r2, r3
 800b20c:	4658      	mov	r0, fp
 800b20e:	f000 fcff 	bl	800bc10 <__lshift>
 800b212:	4604      	mov	r4, r0
 800b214:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b216:	2b00      	cmp	r3, #0
 800b218:	d059      	beq.n	800b2ce <_dtoa_r+0x8f6>
 800b21a:	4621      	mov	r1, r4
 800b21c:	4648      	mov	r0, r9
 800b21e:	f000 fd63 	bl	800bce8 <__mcmp>
 800b222:	2800      	cmp	r0, #0
 800b224:	da53      	bge.n	800b2ce <_dtoa_r+0x8f6>
 800b226:	1e7b      	subs	r3, r7, #1
 800b228:	9304      	str	r3, [sp, #16]
 800b22a:	4649      	mov	r1, r9
 800b22c:	2300      	movs	r3, #0
 800b22e:	220a      	movs	r2, #10
 800b230:	4658      	mov	r0, fp
 800b232:	f000 faf7 	bl	800b824 <__multadd>
 800b236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b238:	4681      	mov	r9, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	f000 8172 	beq.w	800b524 <_dtoa_r+0xb4c>
 800b240:	2300      	movs	r3, #0
 800b242:	4629      	mov	r1, r5
 800b244:	220a      	movs	r2, #10
 800b246:	4658      	mov	r0, fp
 800b248:	f000 faec 	bl	800b824 <__multadd>
 800b24c:	9b00      	ldr	r3, [sp, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	4605      	mov	r5, r0
 800b252:	dc67      	bgt.n	800b324 <_dtoa_r+0x94c>
 800b254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b256:	2b02      	cmp	r3, #2
 800b258:	dc41      	bgt.n	800b2de <_dtoa_r+0x906>
 800b25a:	e063      	b.n	800b324 <_dtoa_r+0x94c>
 800b25c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b25e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b262:	e746      	b.n	800b0f2 <_dtoa_r+0x71a>
 800b264:	9b07      	ldr	r3, [sp, #28]
 800b266:	1e5c      	subs	r4, r3, #1
 800b268:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b26a:	42a3      	cmp	r3, r4
 800b26c:	bfbf      	itttt	lt
 800b26e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b270:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b272:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b274:	1ae3      	sublt	r3, r4, r3
 800b276:	bfb4      	ite	lt
 800b278:	18d2      	addlt	r2, r2, r3
 800b27a:	1b1c      	subge	r4, r3, r4
 800b27c:	9b07      	ldr	r3, [sp, #28]
 800b27e:	bfbc      	itt	lt
 800b280:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b282:	2400      	movlt	r4, #0
 800b284:	2b00      	cmp	r3, #0
 800b286:	bfb5      	itete	lt
 800b288:	eba8 0603 	sublt.w	r6, r8, r3
 800b28c:	9b07      	ldrge	r3, [sp, #28]
 800b28e:	2300      	movlt	r3, #0
 800b290:	4646      	movge	r6, r8
 800b292:	e730      	b.n	800b0f6 <_dtoa_r+0x71e>
 800b294:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b296:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b298:	4646      	mov	r6, r8
 800b29a:	e735      	b.n	800b108 <_dtoa_r+0x730>
 800b29c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b29e:	e75c      	b.n	800b15a <_dtoa_r+0x782>
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	e788      	b.n	800b1b6 <_dtoa_r+0x7de>
 800b2a4:	3fe00000 	.word	0x3fe00000
 800b2a8:	40240000 	.word	0x40240000
 800b2ac:	40140000 	.word	0x40140000
 800b2b0:	9b02      	ldr	r3, [sp, #8]
 800b2b2:	e780      	b.n	800b1b6 <_dtoa_r+0x7de>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2b8:	e782      	b.n	800b1c0 <_dtoa_r+0x7e8>
 800b2ba:	d099      	beq.n	800b1f0 <_dtoa_r+0x818>
 800b2bc:	9a08      	ldr	r2, [sp, #32]
 800b2be:	331c      	adds	r3, #28
 800b2c0:	441a      	add	r2, r3
 800b2c2:	4498      	add	r8, r3
 800b2c4:	441e      	add	r6, r3
 800b2c6:	9208      	str	r2, [sp, #32]
 800b2c8:	e792      	b.n	800b1f0 <_dtoa_r+0x818>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	e7f6      	b.n	800b2bc <_dtoa_r+0x8e4>
 800b2ce:	9b07      	ldr	r3, [sp, #28]
 800b2d0:	9704      	str	r7, [sp, #16]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	dc20      	bgt.n	800b318 <_dtoa_r+0x940>
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	dd1e      	ble.n	800b31c <_dtoa_r+0x944>
 800b2de:	9b00      	ldr	r3, [sp, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f47f aec0 	bne.w	800b066 <_dtoa_r+0x68e>
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	2205      	movs	r2, #5
 800b2ea:	4658      	mov	r0, fp
 800b2ec:	f000 fa9a 	bl	800b824 <__multadd>
 800b2f0:	4601      	mov	r1, r0
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	4648      	mov	r0, r9
 800b2f6:	f000 fcf7 	bl	800bce8 <__mcmp>
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	f77f aeb3 	ble.w	800b066 <_dtoa_r+0x68e>
 800b300:	4656      	mov	r6, sl
 800b302:	2331      	movs	r3, #49	@ 0x31
 800b304:	f806 3b01 	strb.w	r3, [r6], #1
 800b308:	9b04      	ldr	r3, [sp, #16]
 800b30a:	3301      	adds	r3, #1
 800b30c:	9304      	str	r3, [sp, #16]
 800b30e:	e6ae      	b.n	800b06e <_dtoa_r+0x696>
 800b310:	9c07      	ldr	r4, [sp, #28]
 800b312:	9704      	str	r7, [sp, #16]
 800b314:	4625      	mov	r5, r4
 800b316:	e7f3      	b.n	800b300 <_dtoa_r+0x928>
 800b318:	9b07      	ldr	r3, [sp, #28]
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f000 8104 	beq.w	800b52c <_dtoa_r+0xb54>
 800b324:	2e00      	cmp	r6, #0
 800b326:	dd05      	ble.n	800b334 <_dtoa_r+0x95c>
 800b328:	4629      	mov	r1, r5
 800b32a:	4632      	mov	r2, r6
 800b32c:	4658      	mov	r0, fp
 800b32e:	f000 fc6f 	bl	800bc10 <__lshift>
 800b332:	4605      	mov	r5, r0
 800b334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b336:	2b00      	cmp	r3, #0
 800b338:	d05a      	beq.n	800b3f0 <_dtoa_r+0xa18>
 800b33a:	6869      	ldr	r1, [r5, #4]
 800b33c:	4658      	mov	r0, fp
 800b33e:	f000 fa0f 	bl	800b760 <_Balloc>
 800b342:	4606      	mov	r6, r0
 800b344:	b928      	cbnz	r0, 800b352 <_dtoa_r+0x97a>
 800b346:	4b84      	ldr	r3, [pc, #528]	@ (800b558 <_dtoa_r+0xb80>)
 800b348:	4602      	mov	r2, r0
 800b34a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b34e:	f7ff bb5a 	b.w	800aa06 <_dtoa_r+0x2e>
 800b352:	692a      	ldr	r2, [r5, #16]
 800b354:	3202      	adds	r2, #2
 800b356:	0092      	lsls	r2, r2, #2
 800b358:	f105 010c 	add.w	r1, r5, #12
 800b35c:	300c      	adds	r0, #12
 800b35e:	f001 ff0b 	bl	800d178 <memcpy>
 800b362:	2201      	movs	r2, #1
 800b364:	4631      	mov	r1, r6
 800b366:	4658      	mov	r0, fp
 800b368:	f000 fc52 	bl	800bc10 <__lshift>
 800b36c:	f10a 0301 	add.w	r3, sl, #1
 800b370:	9307      	str	r3, [sp, #28]
 800b372:	9b00      	ldr	r3, [sp, #0]
 800b374:	4453      	add	r3, sl
 800b376:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b378:	9b02      	ldr	r3, [sp, #8]
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	462f      	mov	r7, r5
 800b380:	930a      	str	r3, [sp, #40]	@ 0x28
 800b382:	4605      	mov	r5, r0
 800b384:	9b07      	ldr	r3, [sp, #28]
 800b386:	4621      	mov	r1, r4
 800b388:	3b01      	subs	r3, #1
 800b38a:	4648      	mov	r0, r9
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	f7ff fa9b 	bl	800a8c8 <quorem>
 800b392:	4639      	mov	r1, r7
 800b394:	9002      	str	r0, [sp, #8]
 800b396:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b39a:	4648      	mov	r0, r9
 800b39c:	f000 fca4 	bl	800bce8 <__mcmp>
 800b3a0:	462a      	mov	r2, r5
 800b3a2:	9008      	str	r0, [sp, #32]
 800b3a4:	4621      	mov	r1, r4
 800b3a6:	4658      	mov	r0, fp
 800b3a8:	f000 fcba 	bl	800bd20 <__mdiff>
 800b3ac:	68c2      	ldr	r2, [r0, #12]
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	bb02      	cbnz	r2, 800b3f4 <_dtoa_r+0xa1c>
 800b3b2:	4601      	mov	r1, r0
 800b3b4:	4648      	mov	r0, r9
 800b3b6:	f000 fc97 	bl	800bce8 <__mcmp>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	4631      	mov	r1, r6
 800b3be:	4658      	mov	r0, fp
 800b3c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3c2:	f000 fa0d 	bl	800b7e0 <_Bfree>
 800b3c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3ca:	9e07      	ldr	r6, [sp, #28]
 800b3cc:	ea43 0102 	orr.w	r1, r3, r2
 800b3d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3d2:	4319      	orrs	r1, r3
 800b3d4:	d110      	bne.n	800b3f8 <_dtoa_r+0xa20>
 800b3d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b3da:	d029      	beq.n	800b430 <_dtoa_r+0xa58>
 800b3dc:	9b08      	ldr	r3, [sp, #32]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	dd02      	ble.n	800b3e8 <_dtoa_r+0xa10>
 800b3e2:	9b02      	ldr	r3, [sp, #8]
 800b3e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b3e8:	9b00      	ldr	r3, [sp, #0]
 800b3ea:	f883 8000 	strb.w	r8, [r3]
 800b3ee:	e63f      	b.n	800b070 <_dtoa_r+0x698>
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	e7bb      	b.n	800b36c <_dtoa_r+0x994>
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	e7e1      	b.n	800b3bc <_dtoa_r+0x9e4>
 800b3f8:	9b08      	ldr	r3, [sp, #32]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	db04      	blt.n	800b408 <_dtoa_r+0xa30>
 800b3fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b400:	430b      	orrs	r3, r1
 800b402:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b404:	430b      	orrs	r3, r1
 800b406:	d120      	bne.n	800b44a <_dtoa_r+0xa72>
 800b408:	2a00      	cmp	r2, #0
 800b40a:	dded      	ble.n	800b3e8 <_dtoa_r+0xa10>
 800b40c:	4649      	mov	r1, r9
 800b40e:	2201      	movs	r2, #1
 800b410:	4658      	mov	r0, fp
 800b412:	f000 fbfd 	bl	800bc10 <__lshift>
 800b416:	4621      	mov	r1, r4
 800b418:	4681      	mov	r9, r0
 800b41a:	f000 fc65 	bl	800bce8 <__mcmp>
 800b41e:	2800      	cmp	r0, #0
 800b420:	dc03      	bgt.n	800b42a <_dtoa_r+0xa52>
 800b422:	d1e1      	bne.n	800b3e8 <_dtoa_r+0xa10>
 800b424:	f018 0f01 	tst.w	r8, #1
 800b428:	d0de      	beq.n	800b3e8 <_dtoa_r+0xa10>
 800b42a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b42e:	d1d8      	bne.n	800b3e2 <_dtoa_r+0xa0a>
 800b430:	9a00      	ldr	r2, [sp, #0]
 800b432:	2339      	movs	r3, #57	@ 0x39
 800b434:	7013      	strb	r3, [r2, #0]
 800b436:	4633      	mov	r3, r6
 800b438:	461e      	mov	r6, r3
 800b43a:	3b01      	subs	r3, #1
 800b43c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b440:	2a39      	cmp	r2, #57	@ 0x39
 800b442:	d052      	beq.n	800b4ea <_dtoa_r+0xb12>
 800b444:	3201      	adds	r2, #1
 800b446:	701a      	strb	r2, [r3, #0]
 800b448:	e612      	b.n	800b070 <_dtoa_r+0x698>
 800b44a:	2a00      	cmp	r2, #0
 800b44c:	dd07      	ble.n	800b45e <_dtoa_r+0xa86>
 800b44e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b452:	d0ed      	beq.n	800b430 <_dtoa_r+0xa58>
 800b454:	9a00      	ldr	r2, [sp, #0]
 800b456:	f108 0301 	add.w	r3, r8, #1
 800b45a:	7013      	strb	r3, [r2, #0]
 800b45c:	e608      	b.n	800b070 <_dtoa_r+0x698>
 800b45e:	9b07      	ldr	r3, [sp, #28]
 800b460:	9a07      	ldr	r2, [sp, #28]
 800b462:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b468:	4293      	cmp	r3, r2
 800b46a:	d028      	beq.n	800b4be <_dtoa_r+0xae6>
 800b46c:	4649      	mov	r1, r9
 800b46e:	2300      	movs	r3, #0
 800b470:	220a      	movs	r2, #10
 800b472:	4658      	mov	r0, fp
 800b474:	f000 f9d6 	bl	800b824 <__multadd>
 800b478:	42af      	cmp	r7, r5
 800b47a:	4681      	mov	r9, r0
 800b47c:	f04f 0300 	mov.w	r3, #0
 800b480:	f04f 020a 	mov.w	r2, #10
 800b484:	4639      	mov	r1, r7
 800b486:	4658      	mov	r0, fp
 800b488:	d107      	bne.n	800b49a <_dtoa_r+0xac2>
 800b48a:	f000 f9cb 	bl	800b824 <__multadd>
 800b48e:	4607      	mov	r7, r0
 800b490:	4605      	mov	r5, r0
 800b492:	9b07      	ldr	r3, [sp, #28]
 800b494:	3301      	adds	r3, #1
 800b496:	9307      	str	r3, [sp, #28]
 800b498:	e774      	b.n	800b384 <_dtoa_r+0x9ac>
 800b49a:	f000 f9c3 	bl	800b824 <__multadd>
 800b49e:	4629      	mov	r1, r5
 800b4a0:	4607      	mov	r7, r0
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	220a      	movs	r2, #10
 800b4a6:	4658      	mov	r0, fp
 800b4a8:	f000 f9bc 	bl	800b824 <__multadd>
 800b4ac:	4605      	mov	r5, r0
 800b4ae:	e7f0      	b.n	800b492 <_dtoa_r+0xaba>
 800b4b0:	9b00      	ldr	r3, [sp, #0]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	bfcc      	ite	gt
 800b4b6:	461e      	movgt	r6, r3
 800b4b8:	2601      	movle	r6, #1
 800b4ba:	4456      	add	r6, sl
 800b4bc:	2700      	movs	r7, #0
 800b4be:	4649      	mov	r1, r9
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	4658      	mov	r0, fp
 800b4c4:	f000 fba4 	bl	800bc10 <__lshift>
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	4681      	mov	r9, r0
 800b4cc:	f000 fc0c 	bl	800bce8 <__mcmp>
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	dcb0      	bgt.n	800b436 <_dtoa_r+0xa5e>
 800b4d4:	d102      	bne.n	800b4dc <_dtoa_r+0xb04>
 800b4d6:	f018 0f01 	tst.w	r8, #1
 800b4da:	d1ac      	bne.n	800b436 <_dtoa_r+0xa5e>
 800b4dc:	4633      	mov	r3, r6
 800b4de:	461e      	mov	r6, r3
 800b4e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4e4:	2a30      	cmp	r2, #48	@ 0x30
 800b4e6:	d0fa      	beq.n	800b4de <_dtoa_r+0xb06>
 800b4e8:	e5c2      	b.n	800b070 <_dtoa_r+0x698>
 800b4ea:	459a      	cmp	sl, r3
 800b4ec:	d1a4      	bne.n	800b438 <_dtoa_r+0xa60>
 800b4ee:	9b04      	ldr	r3, [sp, #16]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	9304      	str	r3, [sp, #16]
 800b4f4:	2331      	movs	r3, #49	@ 0x31
 800b4f6:	f88a 3000 	strb.w	r3, [sl]
 800b4fa:	e5b9      	b.n	800b070 <_dtoa_r+0x698>
 800b4fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b4fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b55c <_dtoa_r+0xb84>
 800b502:	b11b      	cbz	r3, 800b50c <_dtoa_r+0xb34>
 800b504:	f10a 0308 	add.w	r3, sl, #8
 800b508:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b50a:	6013      	str	r3, [r2, #0]
 800b50c:	4650      	mov	r0, sl
 800b50e:	b019      	add	sp, #100	@ 0x64
 800b510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b516:	2b01      	cmp	r3, #1
 800b518:	f77f ae37 	ble.w	800b18a <_dtoa_r+0x7b2>
 800b51c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b51e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b520:	2001      	movs	r0, #1
 800b522:	e655      	b.n	800b1d0 <_dtoa_r+0x7f8>
 800b524:	9b00      	ldr	r3, [sp, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	f77f aed6 	ble.w	800b2d8 <_dtoa_r+0x900>
 800b52c:	4656      	mov	r6, sl
 800b52e:	4621      	mov	r1, r4
 800b530:	4648      	mov	r0, r9
 800b532:	f7ff f9c9 	bl	800a8c8 <quorem>
 800b536:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b53a:	f806 8b01 	strb.w	r8, [r6], #1
 800b53e:	9b00      	ldr	r3, [sp, #0]
 800b540:	eba6 020a 	sub.w	r2, r6, sl
 800b544:	4293      	cmp	r3, r2
 800b546:	ddb3      	ble.n	800b4b0 <_dtoa_r+0xad8>
 800b548:	4649      	mov	r1, r9
 800b54a:	2300      	movs	r3, #0
 800b54c:	220a      	movs	r2, #10
 800b54e:	4658      	mov	r0, fp
 800b550:	f000 f968 	bl	800b824 <__multadd>
 800b554:	4681      	mov	r9, r0
 800b556:	e7ea      	b.n	800b52e <_dtoa_r+0xb56>
 800b558:	0800e194 	.word	0x0800e194
 800b55c:	0800e12f 	.word	0x0800e12f

0800b560 <_free_r>:
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	4605      	mov	r5, r0
 800b564:	2900      	cmp	r1, #0
 800b566:	d041      	beq.n	800b5ec <_free_r+0x8c>
 800b568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b56c:	1f0c      	subs	r4, r1, #4
 800b56e:	2b00      	cmp	r3, #0
 800b570:	bfb8      	it	lt
 800b572:	18e4      	addlt	r4, r4, r3
 800b574:	f000 f8e8 	bl	800b748 <__malloc_lock>
 800b578:	4a1d      	ldr	r2, [pc, #116]	@ (800b5f0 <_free_r+0x90>)
 800b57a:	6813      	ldr	r3, [r2, #0]
 800b57c:	b933      	cbnz	r3, 800b58c <_free_r+0x2c>
 800b57e:	6063      	str	r3, [r4, #4]
 800b580:	6014      	str	r4, [r2, #0]
 800b582:	4628      	mov	r0, r5
 800b584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b588:	f000 b8e4 	b.w	800b754 <__malloc_unlock>
 800b58c:	42a3      	cmp	r3, r4
 800b58e:	d908      	bls.n	800b5a2 <_free_r+0x42>
 800b590:	6820      	ldr	r0, [r4, #0]
 800b592:	1821      	adds	r1, r4, r0
 800b594:	428b      	cmp	r3, r1
 800b596:	bf01      	itttt	eq
 800b598:	6819      	ldreq	r1, [r3, #0]
 800b59a:	685b      	ldreq	r3, [r3, #4]
 800b59c:	1809      	addeq	r1, r1, r0
 800b59e:	6021      	streq	r1, [r4, #0]
 800b5a0:	e7ed      	b.n	800b57e <_free_r+0x1e>
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	b10b      	cbz	r3, 800b5ac <_free_r+0x4c>
 800b5a8:	42a3      	cmp	r3, r4
 800b5aa:	d9fa      	bls.n	800b5a2 <_free_r+0x42>
 800b5ac:	6811      	ldr	r1, [r2, #0]
 800b5ae:	1850      	adds	r0, r2, r1
 800b5b0:	42a0      	cmp	r0, r4
 800b5b2:	d10b      	bne.n	800b5cc <_free_r+0x6c>
 800b5b4:	6820      	ldr	r0, [r4, #0]
 800b5b6:	4401      	add	r1, r0
 800b5b8:	1850      	adds	r0, r2, r1
 800b5ba:	4283      	cmp	r3, r0
 800b5bc:	6011      	str	r1, [r2, #0]
 800b5be:	d1e0      	bne.n	800b582 <_free_r+0x22>
 800b5c0:	6818      	ldr	r0, [r3, #0]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	6053      	str	r3, [r2, #4]
 800b5c6:	4408      	add	r0, r1
 800b5c8:	6010      	str	r0, [r2, #0]
 800b5ca:	e7da      	b.n	800b582 <_free_r+0x22>
 800b5cc:	d902      	bls.n	800b5d4 <_free_r+0x74>
 800b5ce:	230c      	movs	r3, #12
 800b5d0:	602b      	str	r3, [r5, #0]
 800b5d2:	e7d6      	b.n	800b582 <_free_r+0x22>
 800b5d4:	6820      	ldr	r0, [r4, #0]
 800b5d6:	1821      	adds	r1, r4, r0
 800b5d8:	428b      	cmp	r3, r1
 800b5da:	bf04      	itt	eq
 800b5dc:	6819      	ldreq	r1, [r3, #0]
 800b5de:	685b      	ldreq	r3, [r3, #4]
 800b5e0:	6063      	str	r3, [r4, #4]
 800b5e2:	bf04      	itt	eq
 800b5e4:	1809      	addeq	r1, r1, r0
 800b5e6:	6021      	streq	r1, [r4, #0]
 800b5e8:	6054      	str	r4, [r2, #4]
 800b5ea:	e7ca      	b.n	800b582 <_free_r+0x22>
 800b5ec:	bd38      	pop	{r3, r4, r5, pc}
 800b5ee:	bf00      	nop
 800b5f0:	20000824 	.word	0x20000824

0800b5f4 <malloc>:
 800b5f4:	4b02      	ldr	r3, [pc, #8]	@ (800b600 <malloc+0xc>)
 800b5f6:	4601      	mov	r1, r0
 800b5f8:	6818      	ldr	r0, [r3, #0]
 800b5fa:	f000 b825 	b.w	800b648 <_malloc_r>
 800b5fe:	bf00      	nop
 800b600:	200000f8 	.word	0x200000f8

0800b604 <sbrk_aligned>:
 800b604:	b570      	push	{r4, r5, r6, lr}
 800b606:	4e0f      	ldr	r6, [pc, #60]	@ (800b644 <sbrk_aligned+0x40>)
 800b608:	460c      	mov	r4, r1
 800b60a:	6831      	ldr	r1, [r6, #0]
 800b60c:	4605      	mov	r5, r0
 800b60e:	b911      	cbnz	r1, 800b616 <sbrk_aligned+0x12>
 800b610:	f001 fda2 	bl	800d158 <_sbrk_r>
 800b614:	6030      	str	r0, [r6, #0]
 800b616:	4621      	mov	r1, r4
 800b618:	4628      	mov	r0, r5
 800b61a:	f001 fd9d 	bl	800d158 <_sbrk_r>
 800b61e:	1c43      	adds	r3, r0, #1
 800b620:	d103      	bne.n	800b62a <sbrk_aligned+0x26>
 800b622:	f04f 34ff 	mov.w	r4, #4294967295
 800b626:	4620      	mov	r0, r4
 800b628:	bd70      	pop	{r4, r5, r6, pc}
 800b62a:	1cc4      	adds	r4, r0, #3
 800b62c:	f024 0403 	bic.w	r4, r4, #3
 800b630:	42a0      	cmp	r0, r4
 800b632:	d0f8      	beq.n	800b626 <sbrk_aligned+0x22>
 800b634:	1a21      	subs	r1, r4, r0
 800b636:	4628      	mov	r0, r5
 800b638:	f001 fd8e 	bl	800d158 <_sbrk_r>
 800b63c:	3001      	adds	r0, #1
 800b63e:	d1f2      	bne.n	800b626 <sbrk_aligned+0x22>
 800b640:	e7ef      	b.n	800b622 <sbrk_aligned+0x1e>
 800b642:	bf00      	nop
 800b644:	20000820 	.word	0x20000820

0800b648 <_malloc_r>:
 800b648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b64c:	1ccd      	adds	r5, r1, #3
 800b64e:	f025 0503 	bic.w	r5, r5, #3
 800b652:	3508      	adds	r5, #8
 800b654:	2d0c      	cmp	r5, #12
 800b656:	bf38      	it	cc
 800b658:	250c      	movcc	r5, #12
 800b65a:	2d00      	cmp	r5, #0
 800b65c:	4606      	mov	r6, r0
 800b65e:	db01      	blt.n	800b664 <_malloc_r+0x1c>
 800b660:	42a9      	cmp	r1, r5
 800b662:	d904      	bls.n	800b66e <_malloc_r+0x26>
 800b664:	230c      	movs	r3, #12
 800b666:	6033      	str	r3, [r6, #0]
 800b668:	2000      	movs	r0, #0
 800b66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b66e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b744 <_malloc_r+0xfc>
 800b672:	f000 f869 	bl	800b748 <__malloc_lock>
 800b676:	f8d8 3000 	ldr.w	r3, [r8]
 800b67a:	461c      	mov	r4, r3
 800b67c:	bb44      	cbnz	r4, 800b6d0 <_malloc_r+0x88>
 800b67e:	4629      	mov	r1, r5
 800b680:	4630      	mov	r0, r6
 800b682:	f7ff ffbf 	bl	800b604 <sbrk_aligned>
 800b686:	1c43      	adds	r3, r0, #1
 800b688:	4604      	mov	r4, r0
 800b68a:	d158      	bne.n	800b73e <_malloc_r+0xf6>
 800b68c:	f8d8 4000 	ldr.w	r4, [r8]
 800b690:	4627      	mov	r7, r4
 800b692:	2f00      	cmp	r7, #0
 800b694:	d143      	bne.n	800b71e <_malloc_r+0xd6>
 800b696:	2c00      	cmp	r4, #0
 800b698:	d04b      	beq.n	800b732 <_malloc_r+0xea>
 800b69a:	6823      	ldr	r3, [r4, #0]
 800b69c:	4639      	mov	r1, r7
 800b69e:	4630      	mov	r0, r6
 800b6a0:	eb04 0903 	add.w	r9, r4, r3
 800b6a4:	f001 fd58 	bl	800d158 <_sbrk_r>
 800b6a8:	4581      	cmp	r9, r0
 800b6aa:	d142      	bne.n	800b732 <_malloc_r+0xea>
 800b6ac:	6821      	ldr	r1, [r4, #0]
 800b6ae:	1a6d      	subs	r5, r5, r1
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	f7ff ffa6 	bl	800b604 <sbrk_aligned>
 800b6b8:	3001      	adds	r0, #1
 800b6ba:	d03a      	beq.n	800b732 <_malloc_r+0xea>
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	442b      	add	r3, r5
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	f8d8 3000 	ldr.w	r3, [r8]
 800b6c6:	685a      	ldr	r2, [r3, #4]
 800b6c8:	bb62      	cbnz	r2, 800b724 <_malloc_r+0xdc>
 800b6ca:	f8c8 7000 	str.w	r7, [r8]
 800b6ce:	e00f      	b.n	800b6f0 <_malloc_r+0xa8>
 800b6d0:	6822      	ldr	r2, [r4, #0]
 800b6d2:	1b52      	subs	r2, r2, r5
 800b6d4:	d420      	bmi.n	800b718 <_malloc_r+0xd0>
 800b6d6:	2a0b      	cmp	r2, #11
 800b6d8:	d917      	bls.n	800b70a <_malloc_r+0xc2>
 800b6da:	1961      	adds	r1, r4, r5
 800b6dc:	42a3      	cmp	r3, r4
 800b6de:	6025      	str	r5, [r4, #0]
 800b6e0:	bf18      	it	ne
 800b6e2:	6059      	strne	r1, [r3, #4]
 800b6e4:	6863      	ldr	r3, [r4, #4]
 800b6e6:	bf08      	it	eq
 800b6e8:	f8c8 1000 	streq.w	r1, [r8]
 800b6ec:	5162      	str	r2, [r4, r5]
 800b6ee:	604b      	str	r3, [r1, #4]
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	f000 f82f 	bl	800b754 <__malloc_unlock>
 800b6f6:	f104 000b 	add.w	r0, r4, #11
 800b6fa:	1d23      	adds	r3, r4, #4
 800b6fc:	f020 0007 	bic.w	r0, r0, #7
 800b700:	1ac2      	subs	r2, r0, r3
 800b702:	bf1c      	itt	ne
 800b704:	1a1b      	subne	r3, r3, r0
 800b706:	50a3      	strne	r3, [r4, r2]
 800b708:	e7af      	b.n	800b66a <_malloc_r+0x22>
 800b70a:	6862      	ldr	r2, [r4, #4]
 800b70c:	42a3      	cmp	r3, r4
 800b70e:	bf0c      	ite	eq
 800b710:	f8c8 2000 	streq.w	r2, [r8]
 800b714:	605a      	strne	r2, [r3, #4]
 800b716:	e7eb      	b.n	800b6f0 <_malloc_r+0xa8>
 800b718:	4623      	mov	r3, r4
 800b71a:	6864      	ldr	r4, [r4, #4]
 800b71c:	e7ae      	b.n	800b67c <_malloc_r+0x34>
 800b71e:	463c      	mov	r4, r7
 800b720:	687f      	ldr	r7, [r7, #4]
 800b722:	e7b6      	b.n	800b692 <_malloc_r+0x4a>
 800b724:	461a      	mov	r2, r3
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	42a3      	cmp	r3, r4
 800b72a:	d1fb      	bne.n	800b724 <_malloc_r+0xdc>
 800b72c:	2300      	movs	r3, #0
 800b72e:	6053      	str	r3, [r2, #4]
 800b730:	e7de      	b.n	800b6f0 <_malloc_r+0xa8>
 800b732:	230c      	movs	r3, #12
 800b734:	6033      	str	r3, [r6, #0]
 800b736:	4630      	mov	r0, r6
 800b738:	f000 f80c 	bl	800b754 <__malloc_unlock>
 800b73c:	e794      	b.n	800b668 <_malloc_r+0x20>
 800b73e:	6005      	str	r5, [r0, #0]
 800b740:	e7d6      	b.n	800b6f0 <_malloc_r+0xa8>
 800b742:	bf00      	nop
 800b744:	20000824 	.word	0x20000824

0800b748 <__malloc_lock>:
 800b748:	4801      	ldr	r0, [pc, #4]	@ (800b750 <__malloc_lock+0x8>)
 800b74a:	f7ff b896 	b.w	800a87a <__retarget_lock_acquire_recursive>
 800b74e:	bf00      	nop
 800b750:	2000081c 	.word	0x2000081c

0800b754 <__malloc_unlock>:
 800b754:	4801      	ldr	r0, [pc, #4]	@ (800b75c <__malloc_unlock+0x8>)
 800b756:	f7ff b891 	b.w	800a87c <__retarget_lock_release_recursive>
 800b75a:	bf00      	nop
 800b75c:	2000081c 	.word	0x2000081c

0800b760 <_Balloc>:
 800b760:	b570      	push	{r4, r5, r6, lr}
 800b762:	69c6      	ldr	r6, [r0, #28]
 800b764:	4604      	mov	r4, r0
 800b766:	460d      	mov	r5, r1
 800b768:	b976      	cbnz	r6, 800b788 <_Balloc+0x28>
 800b76a:	2010      	movs	r0, #16
 800b76c:	f7ff ff42 	bl	800b5f4 <malloc>
 800b770:	4602      	mov	r2, r0
 800b772:	61e0      	str	r0, [r4, #28]
 800b774:	b920      	cbnz	r0, 800b780 <_Balloc+0x20>
 800b776:	4b18      	ldr	r3, [pc, #96]	@ (800b7d8 <_Balloc+0x78>)
 800b778:	4818      	ldr	r0, [pc, #96]	@ (800b7dc <_Balloc+0x7c>)
 800b77a:	216b      	movs	r1, #107	@ 0x6b
 800b77c:	f7ff f886 	bl	800a88c <__assert_func>
 800b780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b784:	6006      	str	r6, [r0, #0]
 800b786:	60c6      	str	r6, [r0, #12]
 800b788:	69e6      	ldr	r6, [r4, #28]
 800b78a:	68f3      	ldr	r3, [r6, #12]
 800b78c:	b183      	cbz	r3, 800b7b0 <_Balloc+0x50>
 800b78e:	69e3      	ldr	r3, [r4, #28]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b796:	b9b8      	cbnz	r0, 800b7c8 <_Balloc+0x68>
 800b798:	2101      	movs	r1, #1
 800b79a:	fa01 f605 	lsl.w	r6, r1, r5
 800b79e:	1d72      	adds	r2, r6, #5
 800b7a0:	0092      	lsls	r2, r2, #2
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f001 fd07 	bl	800d1b6 <_calloc_r>
 800b7a8:	b160      	cbz	r0, 800b7c4 <_Balloc+0x64>
 800b7aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7ae:	e00e      	b.n	800b7ce <_Balloc+0x6e>
 800b7b0:	2221      	movs	r2, #33	@ 0x21
 800b7b2:	2104      	movs	r1, #4
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f001 fcfe 	bl	800d1b6 <_calloc_r>
 800b7ba:	69e3      	ldr	r3, [r4, #28]
 800b7bc:	60f0      	str	r0, [r6, #12]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1e4      	bne.n	800b78e <_Balloc+0x2e>
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	bd70      	pop	{r4, r5, r6, pc}
 800b7c8:	6802      	ldr	r2, [r0, #0]
 800b7ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7d4:	e7f7      	b.n	800b7c6 <_Balloc+0x66>
 800b7d6:	bf00      	nop
 800b7d8:	0800e082 	.word	0x0800e082
 800b7dc:	0800e1a5 	.word	0x0800e1a5

0800b7e0 <_Bfree>:
 800b7e0:	b570      	push	{r4, r5, r6, lr}
 800b7e2:	69c6      	ldr	r6, [r0, #28]
 800b7e4:	4605      	mov	r5, r0
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	b976      	cbnz	r6, 800b808 <_Bfree+0x28>
 800b7ea:	2010      	movs	r0, #16
 800b7ec:	f7ff ff02 	bl	800b5f4 <malloc>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	61e8      	str	r0, [r5, #28]
 800b7f4:	b920      	cbnz	r0, 800b800 <_Bfree+0x20>
 800b7f6:	4b09      	ldr	r3, [pc, #36]	@ (800b81c <_Bfree+0x3c>)
 800b7f8:	4809      	ldr	r0, [pc, #36]	@ (800b820 <_Bfree+0x40>)
 800b7fa:	218f      	movs	r1, #143	@ 0x8f
 800b7fc:	f7ff f846 	bl	800a88c <__assert_func>
 800b800:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b804:	6006      	str	r6, [r0, #0]
 800b806:	60c6      	str	r6, [r0, #12]
 800b808:	b13c      	cbz	r4, 800b81a <_Bfree+0x3a>
 800b80a:	69eb      	ldr	r3, [r5, #28]
 800b80c:	6862      	ldr	r2, [r4, #4]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b814:	6021      	str	r1, [r4, #0]
 800b816:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b81a:	bd70      	pop	{r4, r5, r6, pc}
 800b81c:	0800e082 	.word	0x0800e082
 800b820:	0800e1a5 	.word	0x0800e1a5

0800b824 <__multadd>:
 800b824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b828:	690d      	ldr	r5, [r1, #16]
 800b82a:	4607      	mov	r7, r0
 800b82c:	460c      	mov	r4, r1
 800b82e:	461e      	mov	r6, r3
 800b830:	f101 0c14 	add.w	ip, r1, #20
 800b834:	2000      	movs	r0, #0
 800b836:	f8dc 3000 	ldr.w	r3, [ip]
 800b83a:	b299      	uxth	r1, r3
 800b83c:	fb02 6101 	mla	r1, r2, r1, r6
 800b840:	0c1e      	lsrs	r6, r3, #16
 800b842:	0c0b      	lsrs	r3, r1, #16
 800b844:	fb02 3306 	mla	r3, r2, r6, r3
 800b848:	b289      	uxth	r1, r1
 800b84a:	3001      	adds	r0, #1
 800b84c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b850:	4285      	cmp	r5, r0
 800b852:	f84c 1b04 	str.w	r1, [ip], #4
 800b856:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b85a:	dcec      	bgt.n	800b836 <__multadd+0x12>
 800b85c:	b30e      	cbz	r6, 800b8a2 <__multadd+0x7e>
 800b85e:	68a3      	ldr	r3, [r4, #8]
 800b860:	42ab      	cmp	r3, r5
 800b862:	dc19      	bgt.n	800b898 <__multadd+0x74>
 800b864:	6861      	ldr	r1, [r4, #4]
 800b866:	4638      	mov	r0, r7
 800b868:	3101      	adds	r1, #1
 800b86a:	f7ff ff79 	bl	800b760 <_Balloc>
 800b86e:	4680      	mov	r8, r0
 800b870:	b928      	cbnz	r0, 800b87e <__multadd+0x5a>
 800b872:	4602      	mov	r2, r0
 800b874:	4b0c      	ldr	r3, [pc, #48]	@ (800b8a8 <__multadd+0x84>)
 800b876:	480d      	ldr	r0, [pc, #52]	@ (800b8ac <__multadd+0x88>)
 800b878:	21ba      	movs	r1, #186	@ 0xba
 800b87a:	f7ff f807 	bl	800a88c <__assert_func>
 800b87e:	6922      	ldr	r2, [r4, #16]
 800b880:	3202      	adds	r2, #2
 800b882:	f104 010c 	add.w	r1, r4, #12
 800b886:	0092      	lsls	r2, r2, #2
 800b888:	300c      	adds	r0, #12
 800b88a:	f001 fc75 	bl	800d178 <memcpy>
 800b88e:	4621      	mov	r1, r4
 800b890:	4638      	mov	r0, r7
 800b892:	f7ff ffa5 	bl	800b7e0 <_Bfree>
 800b896:	4644      	mov	r4, r8
 800b898:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b89c:	3501      	adds	r5, #1
 800b89e:	615e      	str	r6, [r3, #20]
 800b8a0:	6125      	str	r5, [r4, #16]
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a8:	0800e194 	.word	0x0800e194
 800b8ac:	0800e1a5 	.word	0x0800e1a5

0800b8b0 <__s2b>:
 800b8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8b4:	460c      	mov	r4, r1
 800b8b6:	4615      	mov	r5, r2
 800b8b8:	461f      	mov	r7, r3
 800b8ba:	2209      	movs	r2, #9
 800b8bc:	3308      	adds	r3, #8
 800b8be:	4606      	mov	r6, r0
 800b8c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	db09      	blt.n	800b8e0 <__s2b+0x30>
 800b8cc:	4630      	mov	r0, r6
 800b8ce:	f7ff ff47 	bl	800b760 <_Balloc>
 800b8d2:	b940      	cbnz	r0, 800b8e6 <__s2b+0x36>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	4b19      	ldr	r3, [pc, #100]	@ (800b93c <__s2b+0x8c>)
 800b8d8:	4819      	ldr	r0, [pc, #100]	@ (800b940 <__s2b+0x90>)
 800b8da:	21d3      	movs	r1, #211	@ 0xd3
 800b8dc:	f7fe ffd6 	bl	800a88c <__assert_func>
 800b8e0:	0052      	lsls	r2, r2, #1
 800b8e2:	3101      	adds	r1, #1
 800b8e4:	e7f0      	b.n	800b8c8 <__s2b+0x18>
 800b8e6:	9b08      	ldr	r3, [sp, #32]
 800b8e8:	6143      	str	r3, [r0, #20]
 800b8ea:	2d09      	cmp	r5, #9
 800b8ec:	f04f 0301 	mov.w	r3, #1
 800b8f0:	6103      	str	r3, [r0, #16]
 800b8f2:	dd16      	ble.n	800b922 <__s2b+0x72>
 800b8f4:	f104 0909 	add.w	r9, r4, #9
 800b8f8:	46c8      	mov	r8, r9
 800b8fa:	442c      	add	r4, r5
 800b8fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b900:	4601      	mov	r1, r0
 800b902:	3b30      	subs	r3, #48	@ 0x30
 800b904:	220a      	movs	r2, #10
 800b906:	4630      	mov	r0, r6
 800b908:	f7ff ff8c 	bl	800b824 <__multadd>
 800b90c:	45a0      	cmp	r8, r4
 800b90e:	d1f5      	bne.n	800b8fc <__s2b+0x4c>
 800b910:	f1a5 0408 	sub.w	r4, r5, #8
 800b914:	444c      	add	r4, r9
 800b916:	1b2d      	subs	r5, r5, r4
 800b918:	1963      	adds	r3, r4, r5
 800b91a:	42bb      	cmp	r3, r7
 800b91c:	db04      	blt.n	800b928 <__s2b+0x78>
 800b91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b922:	340a      	adds	r4, #10
 800b924:	2509      	movs	r5, #9
 800b926:	e7f6      	b.n	800b916 <__s2b+0x66>
 800b928:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b92c:	4601      	mov	r1, r0
 800b92e:	3b30      	subs	r3, #48	@ 0x30
 800b930:	220a      	movs	r2, #10
 800b932:	4630      	mov	r0, r6
 800b934:	f7ff ff76 	bl	800b824 <__multadd>
 800b938:	e7ee      	b.n	800b918 <__s2b+0x68>
 800b93a:	bf00      	nop
 800b93c:	0800e194 	.word	0x0800e194
 800b940:	0800e1a5 	.word	0x0800e1a5

0800b944 <__hi0bits>:
 800b944:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b948:	4603      	mov	r3, r0
 800b94a:	bf36      	itet	cc
 800b94c:	0403      	lslcc	r3, r0, #16
 800b94e:	2000      	movcs	r0, #0
 800b950:	2010      	movcc	r0, #16
 800b952:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b956:	bf3c      	itt	cc
 800b958:	021b      	lslcc	r3, r3, #8
 800b95a:	3008      	addcc	r0, #8
 800b95c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b960:	bf3c      	itt	cc
 800b962:	011b      	lslcc	r3, r3, #4
 800b964:	3004      	addcc	r0, #4
 800b966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b96a:	bf3c      	itt	cc
 800b96c:	009b      	lslcc	r3, r3, #2
 800b96e:	3002      	addcc	r0, #2
 800b970:	2b00      	cmp	r3, #0
 800b972:	db05      	blt.n	800b980 <__hi0bits+0x3c>
 800b974:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b978:	f100 0001 	add.w	r0, r0, #1
 800b97c:	bf08      	it	eq
 800b97e:	2020      	moveq	r0, #32
 800b980:	4770      	bx	lr

0800b982 <__lo0bits>:
 800b982:	6803      	ldr	r3, [r0, #0]
 800b984:	4602      	mov	r2, r0
 800b986:	f013 0007 	ands.w	r0, r3, #7
 800b98a:	d00b      	beq.n	800b9a4 <__lo0bits+0x22>
 800b98c:	07d9      	lsls	r1, r3, #31
 800b98e:	d421      	bmi.n	800b9d4 <__lo0bits+0x52>
 800b990:	0798      	lsls	r0, r3, #30
 800b992:	bf49      	itett	mi
 800b994:	085b      	lsrmi	r3, r3, #1
 800b996:	089b      	lsrpl	r3, r3, #2
 800b998:	2001      	movmi	r0, #1
 800b99a:	6013      	strmi	r3, [r2, #0]
 800b99c:	bf5c      	itt	pl
 800b99e:	6013      	strpl	r3, [r2, #0]
 800b9a0:	2002      	movpl	r0, #2
 800b9a2:	4770      	bx	lr
 800b9a4:	b299      	uxth	r1, r3
 800b9a6:	b909      	cbnz	r1, 800b9ac <__lo0bits+0x2a>
 800b9a8:	0c1b      	lsrs	r3, r3, #16
 800b9aa:	2010      	movs	r0, #16
 800b9ac:	b2d9      	uxtb	r1, r3
 800b9ae:	b909      	cbnz	r1, 800b9b4 <__lo0bits+0x32>
 800b9b0:	3008      	adds	r0, #8
 800b9b2:	0a1b      	lsrs	r3, r3, #8
 800b9b4:	0719      	lsls	r1, r3, #28
 800b9b6:	bf04      	itt	eq
 800b9b8:	091b      	lsreq	r3, r3, #4
 800b9ba:	3004      	addeq	r0, #4
 800b9bc:	0799      	lsls	r1, r3, #30
 800b9be:	bf04      	itt	eq
 800b9c0:	089b      	lsreq	r3, r3, #2
 800b9c2:	3002      	addeq	r0, #2
 800b9c4:	07d9      	lsls	r1, r3, #31
 800b9c6:	d403      	bmi.n	800b9d0 <__lo0bits+0x4e>
 800b9c8:	085b      	lsrs	r3, r3, #1
 800b9ca:	f100 0001 	add.w	r0, r0, #1
 800b9ce:	d003      	beq.n	800b9d8 <__lo0bits+0x56>
 800b9d0:	6013      	str	r3, [r2, #0]
 800b9d2:	4770      	bx	lr
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	4770      	bx	lr
 800b9d8:	2020      	movs	r0, #32
 800b9da:	4770      	bx	lr

0800b9dc <__i2b>:
 800b9dc:	b510      	push	{r4, lr}
 800b9de:	460c      	mov	r4, r1
 800b9e0:	2101      	movs	r1, #1
 800b9e2:	f7ff febd 	bl	800b760 <_Balloc>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	b928      	cbnz	r0, 800b9f6 <__i2b+0x1a>
 800b9ea:	4b05      	ldr	r3, [pc, #20]	@ (800ba00 <__i2b+0x24>)
 800b9ec:	4805      	ldr	r0, [pc, #20]	@ (800ba04 <__i2b+0x28>)
 800b9ee:	f240 1145 	movw	r1, #325	@ 0x145
 800b9f2:	f7fe ff4b 	bl	800a88c <__assert_func>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	6144      	str	r4, [r0, #20]
 800b9fa:	6103      	str	r3, [r0, #16]
 800b9fc:	bd10      	pop	{r4, pc}
 800b9fe:	bf00      	nop
 800ba00:	0800e194 	.word	0x0800e194
 800ba04:	0800e1a5 	.word	0x0800e1a5

0800ba08 <__multiply>:
 800ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	4614      	mov	r4, r2
 800ba0e:	690a      	ldr	r2, [r1, #16]
 800ba10:	6923      	ldr	r3, [r4, #16]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	bfa8      	it	ge
 800ba16:	4623      	movge	r3, r4
 800ba18:	460f      	mov	r7, r1
 800ba1a:	bfa4      	itt	ge
 800ba1c:	460c      	movge	r4, r1
 800ba1e:	461f      	movge	r7, r3
 800ba20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ba24:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ba28:	68a3      	ldr	r3, [r4, #8]
 800ba2a:	6861      	ldr	r1, [r4, #4]
 800ba2c:	eb0a 0609 	add.w	r6, sl, r9
 800ba30:	42b3      	cmp	r3, r6
 800ba32:	b085      	sub	sp, #20
 800ba34:	bfb8      	it	lt
 800ba36:	3101      	addlt	r1, #1
 800ba38:	f7ff fe92 	bl	800b760 <_Balloc>
 800ba3c:	b930      	cbnz	r0, 800ba4c <__multiply+0x44>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	4b44      	ldr	r3, [pc, #272]	@ (800bb54 <__multiply+0x14c>)
 800ba42:	4845      	ldr	r0, [pc, #276]	@ (800bb58 <__multiply+0x150>)
 800ba44:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ba48:	f7fe ff20 	bl	800a88c <__assert_func>
 800ba4c:	f100 0514 	add.w	r5, r0, #20
 800ba50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba54:	462b      	mov	r3, r5
 800ba56:	2200      	movs	r2, #0
 800ba58:	4543      	cmp	r3, r8
 800ba5a:	d321      	bcc.n	800baa0 <__multiply+0x98>
 800ba5c:	f107 0114 	add.w	r1, r7, #20
 800ba60:	f104 0214 	add.w	r2, r4, #20
 800ba64:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ba68:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ba6c:	9302      	str	r3, [sp, #8]
 800ba6e:	1b13      	subs	r3, r2, r4
 800ba70:	3b15      	subs	r3, #21
 800ba72:	f023 0303 	bic.w	r3, r3, #3
 800ba76:	3304      	adds	r3, #4
 800ba78:	f104 0715 	add.w	r7, r4, #21
 800ba7c:	42ba      	cmp	r2, r7
 800ba7e:	bf38      	it	cc
 800ba80:	2304      	movcc	r3, #4
 800ba82:	9301      	str	r3, [sp, #4]
 800ba84:	9b02      	ldr	r3, [sp, #8]
 800ba86:	9103      	str	r1, [sp, #12]
 800ba88:	428b      	cmp	r3, r1
 800ba8a:	d80c      	bhi.n	800baa6 <__multiply+0x9e>
 800ba8c:	2e00      	cmp	r6, #0
 800ba8e:	dd03      	ble.n	800ba98 <__multiply+0x90>
 800ba90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d05b      	beq.n	800bb50 <__multiply+0x148>
 800ba98:	6106      	str	r6, [r0, #16]
 800ba9a:	b005      	add	sp, #20
 800ba9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa0:	f843 2b04 	str.w	r2, [r3], #4
 800baa4:	e7d8      	b.n	800ba58 <__multiply+0x50>
 800baa6:	f8b1 a000 	ldrh.w	sl, [r1]
 800baaa:	f1ba 0f00 	cmp.w	sl, #0
 800baae:	d024      	beq.n	800bafa <__multiply+0xf2>
 800bab0:	f104 0e14 	add.w	lr, r4, #20
 800bab4:	46a9      	mov	r9, r5
 800bab6:	f04f 0c00 	mov.w	ip, #0
 800baba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800babe:	f8d9 3000 	ldr.w	r3, [r9]
 800bac2:	fa1f fb87 	uxth.w	fp, r7
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	fb0a 330b 	mla	r3, sl, fp, r3
 800bacc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bad0:	f8d9 7000 	ldr.w	r7, [r9]
 800bad4:	4463      	add	r3, ip
 800bad6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bada:	fb0a c70b 	mla	r7, sl, fp, ip
 800bade:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bae8:	4572      	cmp	r2, lr
 800baea:	f849 3b04 	str.w	r3, [r9], #4
 800baee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800baf2:	d8e2      	bhi.n	800baba <__multiply+0xb2>
 800baf4:	9b01      	ldr	r3, [sp, #4]
 800baf6:	f845 c003 	str.w	ip, [r5, r3]
 800bafa:	9b03      	ldr	r3, [sp, #12]
 800bafc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb00:	3104      	adds	r1, #4
 800bb02:	f1b9 0f00 	cmp.w	r9, #0
 800bb06:	d021      	beq.n	800bb4c <__multiply+0x144>
 800bb08:	682b      	ldr	r3, [r5, #0]
 800bb0a:	f104 0c14 	add.w	ip, r4, #20
 800bb0e:	46ae      	mov	lr, r5
 800bb10:	f04f 0a00 	mov.w	sl, #0
 800bb14:	f8bc b000 	ldrh.w	fp, [ip]
 800bb18:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bb1c:	fb09 770b 	mla	r7, r9, fp, r7
 800bb20:	4457      	add	r7, sl
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb28:	f84e 3b04 	str.w	r3, [lr], #4
 800bb2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb34:	f8be 3000 	ldrh.w	r3, [lr]
 800bb38:	fb09 330a 	mla	r3, r9, sl, r3
 800bb3c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bb40:	4562      	cmp	r2, ip
 800bb42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb46:	d8e5      	bhi.n	800bb14 <__multiply+0x10c>
 800bb48:	9f01      	ldr	r7, [sp, #4]
 800bb4a:	51eb      	str	r3, [r5, r7]
 800bb4c:	3504      	adds	r5, #4
 800bb4e:	e799      	b.n	800ba84 <__multiply+0x7c>
 800bb50:	3e01      	subs	r6, #1
 800bb52:	e79b      	b.n	800ba8c <__multiply+0x84>
 800bb54:	0800e194 	.word	0x0800e194
 800bb58:	0800e1a5 	.word	0x0800e1a5

0800bb5c <__pow5mult>:
 800bb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb60:	4615      	mov	r5, r2
 800bb62:	f012 0203 	ands.w	r2, r2, #3
 800bb66:	4607      	mov	r7, r0
 800bb68:	460e      	mov	r6, r1
 800bb6a:	d007      	beq.n	800bb7c <__pow5mult+0x20>
 800bb6c:	4c25      	ldr	r4, [pc, #148]	@ (800bc04 <__pow5mult+0xa8>)
 800bb6e:	3a01      	subs	r2, #1
 800bb70:	2300      	movs	r3, #0
 800bb72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb76:	f7ff fe55 	bl	800b824 <__multadd>
 800bb7a:	4606      	mov	r6, r0
 800bb7c:	10ad      	asrs	r5, r5, #2
 800bb7e:	d03d      	beq.n	800bbfc <__pow5mult+0xa0>
 800bb80:	69fc      	ldr	r4, [r7, #28]
 800bb82:	b97c      	cbnz	r4, 800bba4 <__pow5mult+0x48>
 800bb84:	2010      	movs	r0, #16
 800bb86:	f7ff fd35 	bl	800b5f4 <malloc>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	61f8      	str	r0, [r7, #28]
 800bb8e:	b928      	cbnz	r0, 800bb9c <__pow5mult+0x40>
 800bb90:	4b1d      	ldr	r3, [pc, #116]	@ (800bc08 <__pow5mult+0xac>)
 800bb92:	481e      	ldr	r0, [pc, #120]	@ (800bc0c <__pow5mult+0xb0>)
 800bb94:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bb98:	f7fe fe78 	bl	800a88c <__assert_func>
 800bb9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bba0:	6004      	str	r4, [r0, #0]
 800bba2:	60c4      	str	r4, [r0, #12]
 800bba4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bba8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbac:	b94c      	cbnz	r4, 800bbc2 <__pow5mult+0x66>
 800bbae:	f240 2171 	movw	r1, #625	@ 0x271
 800bbb2:	4638      	mov	r0, r7
 800bbb4:	f7ff ff12 	bl	800b9dc <__i2b>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	6003      	str	r3, [r0, #0]
 800bbc2:	f04f 0900 	mov.w	r9, #0
 800bbc6:	07eb      	lsls	r3, r5, #31
 800bbc8:	d50a      	bpl.n	800bbe0 <__pow5mult+0x84>
 800bbca:	4631      	mov	r1, r6
 800bbcc:	4622      	mov	r2, r4
 800bbce:	4638      	mov	r0, r7
 800bbd0:	f7ff ff1a 	bl	800ba08 <__multiply>
 800bbd4:	4631      	mov	r1, r6
 800bbd6:	4680      	mov	r8, r0
 800bbd8:	4638      	mov	r0, r7
 800bbda:	f7ff fe01 	bl	800b7e0 <_Bfree>
 800bbde:	4646      	mov	r6, r8
 800bbe0:	106d      	asrs	r5, r5, #1
 800bbe2:	d00b      	beq.n	800bbfc <__pow5mult+0xa0>
 800bbe4:	6820      	ldr	r0, [r4, #0]
 800bbe6:	b938      	cbnz	r0, 800bbf8 <__pow5mult+0x9c>
 800bbe8:	4622      	mov	r2, r4
 800bbea:	4621      	mov	r1, r4
 800bbec:	4638      	mov	r0, r7
 800bbee:	f7ff ff0b 	bl	800ba08 <__multiply>
 800bbf2:	6020      	str	r0, [r4, #0]
 800bbf4:	f8c0 9000 	str.w	r9, [r0]
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	e7e4      	b.n	800bbc6 <__pow5mult+0x6a>
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc02:	bf00      	nop
 800bc04:	0800e200 	.word	0x0800e200
 800bc08:	0800e082 	.word	0x0800e082
 800bc0c:	0800e1a5 	.word	0x0800e1a5

0800bc10 <__lshift>:
 800bc10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc14:	460c      	mov	r4, r1
 800bc16:	6849      	ldr	r1, [r1, #4]
 800bc18:	6923      	ldr	r3, [r4, #16]
 800bc1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc1e:	68a3      	ldr	r3, [r4, #8]
 800bc20:	4607      	mov	r7, r0
 800bc22:	4691      	mov	r9, r2
 800bc24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc28:	f108 0601 	add.w	r6, r8, #1
 800bc2c:	42b3      	cmp	r3, r6
 800bc2e:	db0b      	blt.n	800bc48 <__lshift+0x38>
 800bc30:	4638      	mov	r0, r7
 800bc32:	f7ff fd95 	bl	800b760 <_Balloc>
 800bc36:	4605      	mov	r5, r0
 800bc38:	b948      	cbnz	r0, 800bc4e <__lshift+0x3e>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	4b28      	ldr	r3, [pc, #160]	@ (800bce0 <__lshift+0xd0>)
 800bc3e:	4829      	ldr	r0, [pc, #164]	@ (800bce4 <__lshift+0xd4>)
 800bc40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bc44:	f7fe fe22 	bl	800a88c <__assert_func>
 800bc48:	3101      	adds	r1, #1
 800bc4a:	005b      	lsls	r3, r3, #1
 800bc4c:	e7ee      	b.n	800bc2c <__lshift+0x1c>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	f100 0114 	add.w	r1, r0, #20
 800bc54:	f100 0210 	add.w	r2, r0, #16
 800bc58:	4618      	mov	r0, r3
 800bc5a:	4553      	cmp	r3, sl
 800bc5c:	db33      	blt.n	800bcc6 <__lshift+0xb6>
 800bc5e:	6920      	ldr	r0, [r4, #16]
 800bc60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc64:	f104 0314 	add.w	r3, r4, #20
 800bc68:	f019 091f 	ands.w	r9, r9, #31
 800bc6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc74:	d02b      	beq.n	800bcce <__lshift+0xbe>
 800bc76:	f1c9 0e20 	rsb	lr, r9, #32
 800bc7a:	468a      	mov	sl, r1
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	6818      	ldr	r0, [r3, #0]
 800bc80:	fa00 f009 	lsl.w	r0, r0, r9
 800bc84:	4310      	orrs	r0, r2
 800bc86:	f84a 0b04 	str.w	r0, [sl], #4
 800bc8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc8e:	459c      	cmp	ip, r3
 800bc90:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc94:	d8f3      	bhi.n	800bc7e <__lshift+0x6e>
 800bc96:	ebac 0304 	sub.w	r3, ip, r4
 800bc9a:	3b15      	subs	r3, #21
 800bc9c:	f023 0303 	bic.w	r3, r3, #3
 800bca0:	3304      	adds	r3, #4
 800bca2:	f104 0015 	add.w	r0, r4, #21
 800bca6:	4584      	cmp	ip, r0
 800bca8:	bf38      	it	cc
 800bcaa:	2304      	movcc	r3, #4
 800bcac:	50ca      	str	r2, [r1, r3]
 800bcae:	b10a      	cbz	r2, 800bcb4 <__lshift+0xa4>
 800bcb0:	f108 0602 	add.w	r6, r8, #2
 800bcb4:	3e01      	subs	r6, #1
 800bcb6:	4638      	mov	r0, r7
 800bcb8:	612e      	str	r6, [r5, #16]
 800bcba:	4621      	mov	r1, r4
 800bcbc:	f7ff fd90 	bl	800b7e0 <_Bfree>
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcc6:	f842 0f04 	str.w	r0, [r2, #4]!
 800bcca:	3301      	adds	r3, #1
 800bccc:	e7c5      	b.n	800bc5a <__lshift+0x4a>
 800bcce:	3904      	subs	r1, #4
 800bcd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcd4:	f841 2f04 	str.w	r2, [r1, #4]!
 800bcd8:	459c      	cmp	ip, r3
 800bcda:	d8f9      	bhi.n	800bcd0 <__lshift+0xc0>
 800bcdc:	e7ea      	b.n	800bcb4 <__lshift+0xa4>
 800bcde:	bf00      	nop
 800bce0:	0800e194 	.word	0x0800e194
 800bce4:	0800e1a5 	.word	0x0800e1a5

0800bce8 <__mcmp>:
 800bce8:	690a      	ldr	r2, [r1, #16]
 800bcea:	4603      	mov	r3, r0
 800bcec:	6900      	ldr	r0, [r0, #16]
 800bcee:	1a80      	subs	r0, r0, r2
 800bcf0:	b530      	push	{r4, r5, lr}
 800bcf2:	d10e      	bne.n	800bd12 <__mcmp+0x2a>
 800bcf4:	3314      	adds	r3, #20
 800bcf6:	3114      	adds	r1, #20
 800bcf8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bcfc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd08:	4295      	cmp	r5, r2
 800bd0a:	d003      	beq.n	800bd14 <__mcmp+0x2c>
 800bd0c:	d205      	bcs.n	800bd1a <__mcmp+0x32>
 800bd0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd12:	bd30      	pop	{r4, r5, pc}
 800bd14:	42a3      	cmp	r3, r4
 800bd16:	d3f3      	bcc.n	800bd00 <__mcmp+0x18>
 800bd18:	e7fb      	b.n	800bd12 <__mcmp+0x2a>
 800bd1a:	2001      	movs	r0, #1
 800bd1c:	e7f9      	b.n	800bd12 <__mcmp+0x2a>
	...

0800bd20 <__mdiff>:
 800bd20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd24:	4689      	mov	r9, r1
 800bd26:	4606      	mov	r6, r0
 800bd28:	4611      	mov	r1, r2
 800bd2a:	4648      	mov	r0, r9
 800bd2c:	4614      	mov	r4, r2
 800bd2e:	f7ff ffdb 	bl	800bce8 <__mcmp>
 800bd32:	1e05      	subs	r5, r0, #0
 800bd34:	d112      	bne.n	800bd5c <__mdiff+0x3c>
 800bd36:	4629      	mov	r1, r5
 800bd38:	4630      	mov	r0, r6
 800bd3a:	f7ff fd11 	bl	800b760 <_Balloc>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	b928      	cbnz	r0, 800bd4e <__mdiff+0x2e>
 800bd42:	4b3f      	ldr	r3, [pc, #252]	@ (800be40 <__mdiff+0x120>)
 800bd44:	f240 2137 	movw	r1, #567	@ 0x237
 800bd48:	483e      	ldr	r0, [pc, #248]	@ (800be44 <__mdiff+0x124>)
 800bd4a:	f7fe fd9f 	bl	800a88c <__assert_func>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd54:	4610      	mov	r0, r2
 800bd56:	b003      	add	sp, #12
 800bd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd5c:	bfbc      	itt	lt
 800bd5e:	464b      	movlt	r3, r9
 800bd60:	46a1      	movlt	r9, r4
 800bd62:	4630      	mov	r0, r6
 800bd64:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bd68:	bfba      	itte	lt
 800bd6a:	461c      	movlt	r4, r3
 800bd6c:	2501      	movlt	r5, #1
 800bd6e:	2500      	movge	r5, #0
 800bd70:	f7ff fcf6 	bl	800b760 <_Balloc>
 800bd74:	4602      	mov	r2, r0
 800bd76:	b918      	cbnz	r0, 800bd80 <__mdiff+0x60>
 800bd78:	4b31      	ldr	r3, [pc, #196]	@ (800be40 <__mdiff+0x120>)
 800bd7a:	f240 2145 	movw	r1, #581	@ 0x245
 800bd7e:	e7e3      	b.n	800bd48 <__mdiff+0x28>
 800bd80:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bd84:	6926      	ldr	r6, [r4, #16]
 800bd86:	60c5      	str	r5, [r0, #12]
 800bd88:	f109 0310 	add.w	r3, r9, #16
 800bd8c:	f109 0514 	add.w	r5, r9, #20
 800bd90:	f104 0e14 	add.w	lr, r4, #20
 800bd94:	f100 0b14 	add.w	fp, r0, #20
 800bd98:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bd9c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bda0:	9301      	str	r3, [sp, #4]
 800bda2:	46d9      	mov	r9, fp
 800bda4:	f04f 0c00 	mov.w	ip, #0
 800bda8:	9b01      	ldr	r3, [sp, #4]
 800bdaa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bdae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bdb2:	9301      	str	r3, [sp, #4]
 800bdb4:	fa1f f38a 	uxth.w	r3, sl
 800bdb8:	4619      	mov	r1, r3
 800bdba:	b283      	uxth	r3, r0
 800bdbc:	1acb      	subs	r3, r1, r3
 800bdbe:	0c00      	lsrs	r0, r0, #16
 800bdc0:	4463      	add	r3, ip
 800bdc2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bdc6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bdd0:	4576      	cmp	r6, lr
 800bdd2:	f849 3b04 	str.w	r3, [r9], #4
 800bdd6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bdda:	d8e5      	bhi.n	800bda8 <__mdiff+0x88>
 800bddc:	1b33      	subs	r3, r6, r4
 800bdde:	3b15      	subs	r3, #21
 800bde0:	f023 0303 	bic.w	r3, r3, #3
 800bde4:	3415      	adds	r4, #21
 800bde6:	3304      	adds	r3, #4
 800bde8:	42a6      	cmp	r6, r4
 800bdea:	bf38      	it	cc
 800bdec:	2304      	movcc	r3, #4
 800bdee:	441d      	add	r5, r3
 800bdf0:	445b      	add	r3, fp
 800bdf2:	461e      	mov	r6, r3
 800bdf4:	462c      	mov	r4, r5
 800bdf6:	4544      	cmp	r4, r8
 800bdf8:	d30e      	bcc.n	800be18 <__mdiff+0xf8>
 800bdfa:	f108 0103 	add.w	r1, r8, #3
 800bdfe:	1b49      	subs	r1, r1, r5
 800be00:	f021 0103 	bic.w	r1, r1, #3
 800be04:	3d03      	subs	r5, #3
 800be06:	45a8      	cmp	r8, r5
 800be08:	bf38      	it	cc
 800be0a:	2100      	movcc	r1, #0
 800be0c:	440b      	add	r3, r1
 800be0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be12:	b191      	cbz	r1, 800be3a <__mdiff+0x11a>
 800be14:	6117      	str	r7, [r2, #16]
 800be16:	e79d      	b.n	800bd54 <__mdiff+0x34>
 800be18:	f854 1b04 	ldr.w	r1, [r4], #4
 800be1c:	46e6      	mov	lr, ip
 800be1e:	0c08      	lsrs	r0, r1, #16
 800be20:	fa1c fc81 	uxtah	ip, ip, r1
 800be24:	4471      	add	r1, lr
 800be26:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be2a:	b289      	uxth	r1, r1
 800be2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be30:	f846 1b04 	str.w	r1, [r6], #4
 800be34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be38:	e7dd      	b.n	800bdf6 <__mdiff+0xd6>
 800be3a:	3f01      	subs	r7, #1
 800be3c:	e7e7      	b.n	800be0e <__mdiff+0xee>
 800be3e:	bf00      	nop
 800be40:	0800e194 	.word	0x0800e194
 800be44:	0800e1a5 	.word	0x0800e1a5

0800be48 <__ulp>:
 800be48:	b082      	sub	sp, #8
 800be4a:	ed8d 0b00 	vstr	d0, [sp]
 800be4e:	9a01      	ldr	r2, [sp, #4]
 800be50:	4b0f      	ldr	r3, [pc, #60]	@ (800be90 <__ulp+0x48>)
 800be52:	4013      	ands	r3, r2
 800be54:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800be58:	2b00      	cmp	r3, #0
 800be5a:	dc08      	bgt.n	800be6e <__ulp+0x26>
 800be5c:	425b      	negs	r3, r3
 800be5e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800be62:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be66:	da04      	bge.n	800be72 <__ulp+0x2a>
 800be68:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800be6c:	4113      	asrs	r3, r2
 800be6e:	2200      	movs	r2, #0
 800be70:	e008      	b.n	800be84 <__ulp+0x3c>
 800be72:	f1a2 0314 	sub.w	r3, r2, #20
 800be76:	2b1e      	cmp	r3, #30
 800be78:	bfda      	itte	le
 800be7a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800be7e:	40da      	lsrle	r2, r3
 800be80:	2201      	movgt	r2, #1
 800be82:	2300      	movs	r3, #0
 800be84:	4619      	mov	r1, r3
 800be86:	4610      	mov	r0, r2
 800be88:	ec41 0b10 	vmov	d0, r0, r1
 800be8c:	b002      	add	sp, #8
 800be8e:	4770      	bx	lr
 800be90:	7ff00000 	.word	0x7ff00000

0800be94 <__b2d>:
 800be94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be98:	6906      	ldr	r6, [r0, #16]
 800be9a:	f100 0814 	add.w	r8, r0, #20
 800be9e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bea2:	1f37      	subs	r7, r6, #4
 800bea4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bea8:	4610      	mov	r0, r2
 800beaa:	f7ff fd4b 	bl	800b944 <__hi0bits>
 800beae:	f1c0 0320 	rsb	r3, r0, #32
 800beb2:	280a      	cmp	r0, #10
 800beb4:	600b      	str	r3, [r1, #0]
 800beb6:	491b      	ldr	r1, [pc, #108]	@ (800bf24 <__b2d+0x90>)
 800beb8:	dc15      	bgt.n	800bee6 <__b2d+0x52>
 800beba:	f1c0 0c0b 	rsb	ip, r0, #11
 800bebe:	fa22 f30c 	lsr.w	r3, r2, ip
 800bec2:	45b8      	cmp	r8, r7
 800bec4:	ea43 0501 	orr.w	r5, r3, r1
 800bec8:	bf34      	ite	cc
 800beca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bece:	2300      	movcs	r3, #0
 800bed0:	3015      	adds	r0, #21
 800bed2:	fa02 f000 	lsl.w	r0, r2, r0
 800bed6:	fa23 f30c 	lsr.w	r3, r3, ip
 800beda:	4303      	orrs	r3, r0
 800bedc:	461c      	mov	r4, r3
 800bede:	ec45 4b10 	vmov	d0, r4, r5
 800bee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bee6:	45b8      	cmp	r8, r7
 800bee8:	bf3a      	itte	cc
 800beea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800beee:	f1a6 0708 	subcc.w	r7, r6, #8
 800bef2:	2300      	movcs	r3, #0
 800bef4:	380b      	subs	r0, #11
 800bef6:	d012      	beq.n	800bf1e <__b2d+0x8a>
 800bef8:	f1c0 0120 	rsb	r1, r0, #32
 800befc:	fa23 f401 	lsr.w	r4, r3, r1
 800bf00:	4082      	lsls	r2, r0
 800bf02:	4322      	orrs	r2, r4
 800bf04:	4547      	cmp	r7, r8
 800bf06:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bf0a:	bf8c      	ite	hi
 800bf0c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bf10:	2200      	movls	r2, #0
 800bf12:	4083      	lsls	r3, r0
 800bf14:	40ca      	lsrs	r2, r1
 800bf16:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	e7de      	b.n	800bedc <__b2d+0x48>
 800bf1e:	ea42 0501 	orr.w	r5, r2, r1
 800bf22:	e7db      	b.n	800bedc <__b2d+0x48>
 800bf24:	3ff00000 	.word	0x3ff00000

0800bf28 <__d2b>:
 800bf28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf2c:	460f      	mov	r7, r1
 800bf2e:	2101      	movs	r1, #1
 800bf30:	ec59 8b10 	vmov	r8, r9, d0
 800bf34:	4616      	mov	r6, r2
 800bf36:	f7ff fc13 	bl	800b760 <_Balloc>
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	b930      	cbnz	r0, 800bf4c <__d2b+0x24>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	4b23      	ldr	r3, [pc, #140]	@ (800bfd0 <__d2b+0xa8>)
 800bf42:	4824      	ldr	r0, [pc, #144]	@ (800bfd4 <__d2b+0xac>)
 800bf44:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf48:	f7fe fca0 	bl	800a88c <__assert_func>
 800bf4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf54:	b10d      	cbz	r5, 800bf5a <__d2b+0x32>
 800bf56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf5a:	9301      	str	r3, [sp, #4]
 800bf5c:	f1b8 0300 	subs.w	r3, r8, #0
 800bf60:	d023      	beq.n	800bfaa <__d2b+0x82>
 800bf62:	4668      	mov	r0, sp
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	f7ff fd0c 	bl	800b982 <__lo0bits>
 800bf6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf6e:	b1d0      	cbz	r0, 800bfa6 <__d2b+0x7e>
 800bf70:	f1c0 0320 	rsb	r3, r0, #32
 800bf74:	fa02 f303 	lsl.w	r3, r2, r3
 800bf78:	430b      	orrs	r3, r1
 800bf7a:	40c2      	lsrs	r2, r0
 800bf7c:	6163      	str	r3, [r4, #20]
 800bf7e:	9201      	str	r2, [sp, #4]
 800bf80:	9b01      	ldr	r3, [sp, #4]
 800bf82:	61a3      	str	r3, [r4, #24]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	bf0c      	ite	eq
 800bf88:	2201      	moveq	r2, #1
 800bf8a:	2202      	movne	r2, #2
 800bf8c:	6122      	str	r2, [r4, #16]
 800bf8e:	b1a5      	cbz	r5, 800bfba <__d2b+0x92>
 800bf90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf94:	4405      	add	r5, r0
 800bf96:	603d      	str	r5, [r7, #0]
 800bf98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf9c:	6030      	str	r0, [r6, #0]
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	b003      	add	sp, #12
 800bfa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfa6:	6161      	str	r1, [r4, #20]
 800bfa8:	e7ea      	b.n	800bf80 <__d2b+0x58>
 800bfaa:	a801      	add	r0, sp, #4
 800bfac:	f7ff fce9 	bl	800b982 <__lo0bits>
 800bfb0:	9b01      	ldr	r3, [sp, #4]
 800bfb2:	6163      	str	r3, [r4, #20]
 800bfb4:	3020      	adds	r0, #32
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	e7e8      	b.n	800bf8c <__d2b+0x64>
 800bfba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bfbe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bfc2:	6038      	str	r0, [r7, #0]
 800bfc4:	6918      	ldr	r0, [r3, #16]
 800bfc6:	f7ff fcbd 	bl	800b944 <__hi0bits>
 800bfca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bfce:	e7e5      	b.n	800bf9c <__d2b+0x74>
 800bfd0:	0800e194 	.word	0x0800e194
 800bfd4:	0800e1a5 	.word	0x0800e1a5

0800bfd8 <__ratio>:
 800bfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfdc:	b085      	sub	sp, #20
 800bfde:	e9cd 1000 	strd	r1, r0, [sp]
 800bfe2:	a902      	add	r1, sp, #8
 800bfe4:	f7ff ff56 	bl	800be94 <__b2d>
 800bfe8:	9800      	ldr	r0, [sp, #0]
 800bfea:	a903      	add	r1, sp, #12
 800bfec:	ec55 4b10 	vmov	r4, r5, d0
 800bff0:	f7ff ff50 	bl	800be94 <__b2d>
 800bff4:	9b01      	ldr	r3, [sp, #4]
 800bff6:	6919      	ldr	r1, [r3, #16]
 800bff8:	9b00      	ldr	r3, [sp, #0]
 800bffa:	691b      	ldr	r3, [r3, #16]
 800bffc:	1ac9      	subs	r1, r1, r3
 800bffe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c002:	1a9b      	subs	r3, r3, r2
 800c004:	ec5b ab10 	vmov	sl, fp, d0
 800c008:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	bfce      	itee	gt
 800c010:	462a      	movgt	r2, r5
 800c012:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c016:	465a      	movle	r2, fp
 800c018:	462f      	mov	r7, r5
 800c01a:	46d9      	mov	r9, fp
 800c01c:	bfcc      	ite	gt
 800c01e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c022:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c026:	464b      	mov	r3, r9
 800c028:	4652      	mov	r2, sl
 800c02a:	4620      	mov	r0, r4
 800c02c:	4639      	mov	r1, r7
 800c02e:	f7f4 fc45 	bl	80008bc <__aeabi_ddiv>
 800c032:	ec41 0b10 	vmov	d0, r0, r1
 800c036:	b005      	add	sp, #20
 800c038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c03c <__copybits>:
 800c03c:	3901      	subs	r1, #1
 800c03e:	b570      	push	{r4, r5, r6, lr}
 800c040:	1149      	asrs	r1, r1, #5
 800c042:	6914      	ldr	r4, [r2, #16]
 800c044:	3101      	adds	r1, #1
 800c046:	f102 0314 	add.w	r3, r2, #20
 800c04a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c04e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c052:	1f05      	subs	r5, r0, #4
 800c054:	42a3      	cmp	r3, r4
 800c056:	d30c      	bcc.n	800c072 <__copybits+0x36>
 800c058:	1aa3      	subs	r3, r4, r2
 800c05a:	3b11      	subs	r3, #17
 800c05c:	f023 0303 	bic.w	r3, r3, #3
 800c060:	3211      	adds	r2, #17
 800c062:	42a2      	cmp	r2, r4
 800c064:	bf88      	it	hi
 800c066:	2300      	movhi	r3, #0
 800c068:	4418      	add	r0, r3
 800c06a:	2300      	movs	r3, #0
 800c06c:	4288      	cmp	r0, r1
 800c06e:	d305      	bcc.n	800c07c <__copybits+0x40>
 800c070:	bd70      	pop	{r4, r5, r6, pc}
 800c072:	f853 6b04 	ldr.w	r6, [r3], #4
 800c076:	f845 6f04 	str.w	r6, [r5, #4]!
 800c07a:	e7eb      	b.n	800c054 <__copybits+0x18>
 800c07c:	f840 3b04 	str.w	r3, [r0], #4
 800c080:	e7f4      	b.n	800c06c <__copybits+0x30>

0800c082 <__any_on>:
 800c082:	f100 0214 	add.w	r2, r0, #20
 800c086:	6900      	ldr	r0, [r0, #16]
 800c088:	114b      	asrs	r3, r1, #5
 800c08a:	4298      	cmp	r0, r3
 800c08c:	b510      	push	{r4, lr}
 800c08e:	db11      	blt.n	800c0b4 <__any_on+0x32>
 800c090:	dd0a      	ble.n	800c0a8 <__any_on+0x26>
 800c092:	f011 011f 	ands.w	r1, r1, #31
 800c096:	d007      	beq.n	800c0a8 <__any_on+0x26>
 800c098:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c09c:	fa24 f001 	lsr.w	r0, r4, r1
 800c0a0:	fa00 f101 	lsl.w	r1, r0, r1
 800c0a4:	428c      	cmp	r4, r1
 800c0a6:	d10b      	bne.n	800c0c0 <__any_on+0x3e>
 800c0a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d803      	bhi.n	800c0b8 <__any_on+0x36>
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	bd10      	pop	{r4, pc}
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	e7f7      	b.n	800c0a8 <__any_on+0x26>
 800c0b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0bc:	2900      	cmp	r1, #0
 800c0be:	d0f5      	beq.n	800c0ac <__any_on+0x2a>
 800c0c0:	2001      	movs	r0, #1
 800c0c2:	e7f6      	b.n	800c0b2 <__any_on+0x30>

0800c0c4 <sulp>:
 800c0c4:	b570      	push	{r4, r5, r6, lr}
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	460d      	mov	r5, r1
 800c0ca:	ec45 4b10 	vmov	d0, r4, r5
 800c0ce:	4616      	mov	r6, r2
 800c0d0:	f7ff feba 	bl	800be48 <__ulp>
 800c0d4:	ec51 0b10 	vmov	r0, r1, d0
 800c0d8:	b17e      	cbz	r6, 800c0fa <sulp+0x36>
 800c0da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c0de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	dd09      	ble.n	800c0fa <sulp+0x36>
 800c0e6:	051b      	lsls	r3, r3, #20
 800c0e8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c0ec:	2400      	movs	r4, #0
 800c0ee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c0f2:	4622      	mov	r2, r4
 800c0f4:	462b      	mov	r3, r5
 800c0f6:	f7f4 fab7 	bl	8000668 <__aeabi_dmul>
 800c0fa:	ec41 0b10 	vmov	d0, r0, r1
 800c0fe:	bd70      	pop	{r4, r5, r6, pc}

0800c100 <_strtod_l>:
 800c100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c104:	b09f      	sub	sp, #124	@ 0x7c
 800c106:	460c      	mov	r4, r1
 800c108:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c10a:	2200      	movs	r2, #0
 800c10c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c10e:	9005      	str	r0, [sp, #20]
 800c110:	f04f 0a00 	mov.w	sl, #0
 800c114:	f04f 0b00 	mov.w	fp, #0
 800c118:	460a      	mov	r2, r1
 800c11a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c11c:	7811      	ldrb	r1, [r2, #0]
 800c11e:	292b      	cmp	r1, #43	@ 0x2b
 800c120:	d04a      	beq.n	800c1b8 <_strtod_l+0xb8>
 800c122:	d838      	bhi.n	800c196 <_strtod_l+0x96>
 800c124:	290d      	cmp	r1, #13
 800c126:	d832      	bhi.n	800c18e <_strtod_l+0x8e>
 800c128:	2908      	cmp	r1, #8
 800c12a:	d832      	bhi.n	800c192 <_strtod_l+0x92>
 800c12c:	2900      	cmp	r1, #0
 800c12e:	d03b      	beq.n	800c1a8 <_strtod_l+0xa8>
 800c130:	2200      	movs	r2, #0
 800c132:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c134:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c136:	782a      	ldrb	r2, [r5, #0]
 800c138:	2a30      	cmp	r2, #48	@ 0x30
 800c13a:	f040 80b3 	bne.w	800c2a4 <_strtod_l+0x1a4>
 800c13e:	786a      	ldrb	r2, [r5, #1]
 800c140:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c144:	2a58      	cmp	r2, #88	@ 0x58
 800c146:	d16e      	bne.n	800c226 <_strtod_l+0x126>
 800c148:	9302      	str	r3, [sp, #8]
 800c14a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c14c:	9301      	str	r3, [sp, #4]
 800c14e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c150:	9300      	str	r3, [sp, #0]
 800c152:	4a8e      	ldr	r2, [pc, #568]	@ (800c38c <_strtod_l+0x28c>)
 800c154:	9805      	ldr	r0, [sp, #20]
 800c156:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c158:	a919      	add	r1, sp, #100	@ 0x64
 800c15a:	f001 f8a7 	bl	800d2ac <__gethex>
 800c15e:	f010 060f 	ands.w	r6, r0, #15
 800c162:	4604      	mov	r4, r0
 800c164:	d005      	beq.n	800c172 <_strtod_l+0x72>
 800c166:	2e06      	cmp	r6, #6
 800c168:	d128      	bne.n	800c1bc <_strtod_l+0xbc>
 800c16a:	3501      	adds	r5, #1
 800c16c:	2300      	movs	r3, #0
 800c16e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c170:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c172:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c174:	2b00      	cmp	r3, #0
 800c176:	f040 858e 	bne.w	800cc96 <_strtod_l+0xb96>
 800c17a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c17c:	b1cb      	cbz	r3, 800c1b2 <_strtod_l+0xb2>
 800c17e:	4652      	mov	r2, sl
 800c180:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c184:	ec43 2b10 	vmov	d0, r2, r3
 800c188:	b01f      	add	sp, #124	@ 0x7c
 800c18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c18e:	2920      	cmp	r1, #32
 800c190:	d1ce      	bne.n	800c130 <_strtod_l+0x30>
 800c192:	3201      	adds	r2, #1
 800c194:	e7c1      	b.n	800c11a <_strtod_l+0x1a>
 800c196:	292d      	cmp	r1, #45	@ 0x2d
 800c198:	d1ca      	bne.n	800c130 <_strtod_l+0x30>
 800c19a:	2101      	movs	r1, #1
 800c19c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c19e:	1c51      	adds	r1, r2, #1
 800c1a0:	9119      	str	r1, [sp, #100]	@ 0x64
 800c1a2:	7852      	ldrb	r2, [r2, #1]
 800c1a4:	2a00      	cmp	r2, #0
 800c1a6:	d1c5      	bne.n	800c134 <_strtod_l+0x34>
 800c1a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c1aa:	9419      	str	r4, [sp, #100]	@ 0x64
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f040 8570 	bne.w	800cc92 <_strtod_l+0xb92>
 800c1b2:	4652      	mov	r2, sl
 800c1b4:	465b      	mov	r3, fp
 800c1b6:	e7e5      	b.n	800c184 <_strtod_l+0x84>
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	e7ef      	b.n	800c19c <_strtod_l+0x9c>
 800c1bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c1be:	b13a      	cbz	r2, 800c1d0 <_strtod_l+0xd0>
 800c1c0:	2135      	movs	r1, #53	@ 0x35
 800c1c2:	a81c      	add	r0, sp, #112	@ 0x70
 800c1c4:	f7ff ff3a 	bl	800c03c <__copybits>
 800c1c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c1ca:	9805      	ldr	r0, [sp, #20]
 800c1cc:	f7ff fb08 	bl	800b7e0 <_Bfree>
 800c1d0:	3e01      	subs	r6, #1
 800c1d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c1d4:	2e04      	cmp	r6, #4
 800c1d6:	d806      	bhi.n	800c1e6 <_strtod_l+0xe6>
 800c1d8:	e8df f006 	tbb	[pc, r6]
 800c1dc:	201d0314 	.word	0x201d0314
 800c1e0:	14          	.byte	0x14
 800c1e1:	00          	.byte	0x00
 800c1e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c1e6:	05e1      	lsls	r1, r4, #23
 800c1e8:	bf48      	it	mi
 800c1ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c1ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c1f2:	0d1b      	lsrs	r3, r3, #20
 800c1f4:	051b      	lsls	r3, r3, #20
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1bb      	bne.n	800c172 <_strtod_l+0x72>
 800c1fa:	f7fe fb13 	bl	800a824 <__errno>
 800c1fe:	2322      	movs	r3, #34	@ 0x22
 800c200:	6003      	str	r3, [r0, #0]
 800c202:	e7b6      	b.n	800c172 <_strtod_l+0x72>
 800c204:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c208:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c20c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c210:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c214:	e7e7      	b.n	800c1e6 <_strtod_l+0xe6>
 800c216:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c394 <_strtod_l+0x294>
 800c21a:	e7e4      	b.n	800c1e6 <_strtod_l+0xe6>
 800c21c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c220:	f04f 3aff 	mov.w	sl, #4294967295
 800c224:	e7df      	b.n	800c1e6 <_strtod_l+0xe6>
 800c226:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c228:	1c5a      	adds	r2, r3, #1
 800c22a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c22c:	785b      	ldrb	r3, [r3, #1]
 800c22e:	2b30      	cmp	r3, #48	@ 0x30
 800c230:	d0f9      	beq.n	800c226 <_strtod_l+0x126>
 800c232:	2b00      	cmp	r3, #0
 800c234:	d09d      	beq.n	800c172 <_strtod_l+0x72>
 800c236:	2301      	movs	r3, #1
 800c238:	9309      	str	r3, [sp, #36]	@ 0x24
 800c23a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c23c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c23e:	2300      	movs	r3, #0
 800c240:	9308      	str	r3, [sp, #32]
 800c242:	930a      	str	r3, [sp, #40]	@ 0x28
 800c244:	461f      	mov	r7, r3
 800c246:	220a      	movs	r2, #10
 800c248:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c24a:	7805      	ldrb	r5, [r0, #0]
 800c24c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c250:	b2d9      	uxtb	r1, r3
 800c252:	2909      	cmp	r1, #9
 800c254:	d928      	bls.n	800c2a8 <_strtod_l+0x1a8>
 800c256:	494e      	ldr	r1, [pc, #312]	@ (800c390 <_strtod_l+0x290>)
 800c258:	2201      	movs	r2, #1
 800c25a:	f000 ff6b 	bl	800d134 <strncmp>
 800c25e:	2800      	cmp	r0, #0
 800c260:	d032      	beq.n	800c2c8 <_strtod_l+0x1c8>
 800c262:	2000      	movs	r0, #0
 800c264:	462a      	mov	r2, r5
 800c266:	4681      	mov	r9, r0
 800c268:	463d      	mov	r5, r7
 800c26a:	4603      	mov	r3, r0
 800c26c:	2a65      	cmp	r2, #101	@ 0x65
 800c26e:	d001      	beq.n	800c274 <_strtod_l+0x174>
 800c270:	2a45      	cmp	r2, #69	@ 0x45
 800c272:	d114      	bne.n	800c29e <_strtod_l+0x19e>
 800c274:	b91d      	cbnz	r5, 800c27e <_strtod_l+0x17e>
 800c276:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c278:	4302      	orrs	r2, r0
 800c27a:	d095      	beq.n	800c1a8 <_strtod_l+0xa8>
 800c27c:	2500      	movs	r5, #0
 800c27e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c280:	1c62      	adds	r2, r4, #1
 800c282:	9219      	str	r2, [sp, #100]	@ 0x64
 800c284:	7862      	ldrb	r2, [r4, #1]
 800c286:	2a2b      	cmp	r2, #43	@ 0x2b
 800c288:	d077      	beq.n	800c37a <_strtod_l+0x27a>
 800c28a:	2a2d      	cmp	r2, #45	@ 0x2d
 800c28c:	d07b      	beq.n	800c386 <_strtod_l+0x286>
 800c28e:	f04f 0c00 	mov.w	ip, #0
 800c292:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c296:	2909      	cmp	r1, #9
 800c298:	f240 8082 	bls.w	800c3a0 <_strtod_l+0x2a0>
 800c29c:	9419      	str	r4, [sp, #100]	@ 0x64
 800c29e:	f04f 0800 	mov.w	r8, #0
 800c2a2:	e0a2      	b.n	800c3ea <_strtod_l+0x2ea>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	e7c7      	b.n	800c238 <_strtod_l+0x138>
 800c2a8:	2f08      	cmp	r7, #8
 800c2aa:	bfd5      	itete	le
 800c2ac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c2ae:	9908      	ldrgt	r1, [sp, #32]
 800c2b0:	fb02 3301 	mlale	r3, r2, r1, r3
 800c2b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c2b8:	f100 0001 	add.w	r0, r0, #1
 800c2bc:	bfd4      	ite	le
 800c2be:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c2c0:	9308      	strgt	r3, [sp, #32]
 800c2c2:	3701      	adds	r7, #1
 800c2c4:	9019      	str	r0, [sp, #100]	@ 0x64
 800c2c6:	e7bf      	b.n	800c248 <_strtod_l+0x148>
 800c2c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2ca:	1c5a      	adds	r2, r3, #1
 800c2cc:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2ce:	785a      	ldrb	r2, [r3, #1]
 800c2d0:	b37f      	cbz	r7, 800c332 <_strtod_l+0x232>
 800c2d2:	4681      	mov	r9, r0
 800c2d4:	463d      	mov	r5, r7
 800c2d6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c2da:	2b09      	cmp	r3, #9
 800c2dc:	d912      	bls.n	800c304 <_strtod_l+0x204>
 800c2de:	2301      	movs	r3, #1
 800c2e0:	e7c4      	b.n	800c26c <_strtod_l+0x16c>
 800c2e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2e4:	1c5a      	adds	r2, r3, #1
 800c2e6:	9219      	str	r2, [sp, #100]	@ 0x64
 800c2e8:	785a      	ldrb	r2, [r3, #1]
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	2a30      	cmp	r2, #48	@ 0x30
 800c2ee:	d0f8      	beq.n	800c2e2 <_strtod_l+0x1e2>
 800c2f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c2f4:	2b08      	cmp	r3, #8
 800c2f6:	f200 84d3 	bhi.w	800cca0 <_strtod_l+0xba0>
 800c2fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2fc:	930c      	str	r3, [sp, #48]	@ 0x30
 800c2fe:	4681      	mov	r9, r0
 800c300:	2000      	movs	r0, #0
 800c302:	4605      	mov	r5, r0
 800c304:	3a30      	subs	r2, #48	@ 0x30
 800c306:	f100 0301 	add.w	r3, r0, #1
 800c30a:	d02a      	beq.n	800c362 <_strtod_l+0x262>
 800c30c:	4499      	add	r9, r3
 800c30e:	eb00 0c05 	add.w	ip, r0, r5
 800c312:	462b      	mov	r3, r5
 800c314:	210a      	movs	r1, #10
 800c316:	4563      	cmp	r3, ip
 800c318:	d10d      	bne.n	800c336 <_strtod_l+0x236>
 800c31a:	1c69      	adds	r1, r5, #1
 800c31c:	4401      	add	r1, r0
 800c31e:	4428      	add	r0, r5
 800c320:	2808      	cmp	r0, #8
 800c322:	dc16      	bgt.n	800c352 <_strtod_l+0x252>
 800c324:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c326:	230a      	movs	r3, #10
 800c328:	fb03 2300 	mla	r3, r3, r0, r2
 800c32c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c32e:	2300      	movs	r3, #0
 800c330:	e018      	b.n	800c364 <_strtod_l+0x264>
 800c332:	4638      	mov	r0, r7
 800c334:	e7da      	b.n	800c2ec <_strtod_l+0x1ec>
 800c336:	2b08      	cmp	r3, #8
 800c338:	f103 0301 	add.w	r3, r3, #1
 800c33c:	dc03      	bgt.n	800c346 <_strtod_l+0x246>
 800c33e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c340:	434e      	muls	r6, r1
 800c342:	960a      	str	r6, [sp, #40]	@ 0x28
 800c344:	e7e7      	b.n	800c316 <_strtod_l+0x216>
 800c346:	2b10      	cmp	r3, #16
 800c348:	bfde      	ittt	le
 800c34a:	9e08      	ldrle	r6, [sp, #32]
 800c34c:	434e      	mulle	r6, r1
 800c34e:	9608      	strle	r6, [sp, #32]
 800c350:	e7e1      	b.n	800c316 <_strtod_l+0x216>
 800c352:	280f      	cmp	r0, #15
 800c354:	dceb      	bgt.n	800c32e <_strtod_l+0x22e>
 800c356:	9808      	ldr	r0, [sp, #32]
 800c358:	230a      	movs	r3, #10
 800c35a:	fb03 2300 	mla	r3, r3, r0, r2
 800c35e:	9308      	str	r3, [sp, #32]
 800c360:	e7e5      	b.n	800c32e <_strtod_l+0x22e>
 800c362:	4629      	mov	r1, r5
 800c364:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c366:	1c50      	adds	r0, r2, #1
 800c368:	9019      	str	r0, [sp, #100]	@ 0x64
 800c36a:	7852      	ldrb	r2, [r2, #1]
 800c36c:	4618      	mov	r0, r3
 800c36e:	460d      	mov	r5, r1
 800c370:	e7b1      	b.n	800c2d6 <_strtod_l+0x1d6>
 800c372:	f04f 0900 	mov.w	r9, #0
 800c376:	2301      	movs	r3, #1
 800c378:	e77d      	b.n	800c276 <_strtod_l+0x176>
 800c37a:	f04f 0c00 	mov.w	ip, #0
 800c37e:	1ca2      	adds	r2, r4, #2
 800c380:	9219      	str	r2, [sp, #100]	@ 0x64
 800c382:	78a2      	ldrb	r2, [r4, #2]
 800c384:	e785      	b.n	800c292 <_strtod_l+0x192>
 800c386:	f04f 0c01 	mov.w	ip, #1
 800c38a:	e7f8      	b.n	800c37e <_strtod_l+0x27e>
 800c38c:	0800e318 	.word	0x0800e318
 800c390:	0800e300 	.word	0x0800e300
 800c394:	7ff00000 	.word	0x7ff00000
 800c398:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c39a:	1c51      	adds	r1, r2, #1
 800c39c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c39e:	7852      	ldrb	r2, [r2, #1]
 800c3a0:	2a30      	cmp	r2, #48	@ 0x30
 800c3a2:	d0f9      	beq.n	800c398 <_strtod_l+0x298>
 800c3a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c3a8:	2908      	cmp	r1, #8
 800c3aa:	f63f af78 	bhi.w	800c29e <_strtod_l+0x19e>
 800c3ae:	3a30      	subs	r2, #48	@ 0x30
 800c3b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c3b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c3b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c3b6:	f04f 080a 	mov.w	r8, #10
 800c3ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c3bc:	1c56      	adds	r6, r2, #1
 800c3be:	9619      	str	r6, [sp, #100]	@ 0x64
 800c3c0:	7852      	ldrb	r2, [r2, #1]
 800c3c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c3c6:	f1be 0f09 	cmp.w	lr, #9
 800c3ca:	d939      	bls.n	800c440 <_strtod_l+0x340>
 800c3cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c3ce:	1a76      	subs	r6, r6, r1
 800c3d0:	2e08      	cmp	r6, #8
 800c3d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c3d6:	dc03      	bgt.n	800c3e0 <_strtod_l+0x2e0>
 800c3d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c3da:	4588      	cmp	r8, r1
 800c3dc:	bfa8      	it	ge
 800c3de:	4688      	movge	r8, r1
 800c3e0:	f1bc 0f00 	cmp.w	ip, #0
 800c3e4:	d001      	beq.n	800c3ea <_strtod_l+0x2ea>
 800c3e6:	f1c8 0800 	rsb	r8, r8, #0
 800c3ea:	2d00      	cmp	r5, #0
 800c3ec:	d14e      	bne.n	800c48c <_strtod_l+0x38c>
 800c3ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c3f0:	4308      	orrs	r0, r1
 800c3f2:	f47f aebe 	bne.w	800c172 <_strtod_l+0x72>
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f47f aed6 	bne.w	800c1a8 <_strtod_l+0xa8>
 800c3fc:	2a69      	cmp	r2, #105	@ 0x69
 800c3fe:	d028      	beq.n	800c452 <_strtod_l+0x352>
 800c400:	dc25      	bgt.n	800c44e <_strtod_l+0x34e>
 800c402:	2a49      	cmp	r2, #73	@ 0x49
 800c404:	d025      	beq.n	800c452 <_strtod_l+0x352>
 800c406:	2a4e      	cmp	r2, #78	@ 0x4e
 800c408:	f47f aece 	bne.w	800c1a8 <_strtod_l+0xa8>
 800c40c:	499b      	ldr	r1, [pc, #620]	@ (800c67c <_strtod_l+0x57c>)
 800c40e:	a819      	add	r0, sp, #100	@ 0x64
 800c410:	f001 f96e 	bl	800d6f0 <__match>
 800c414:	2800      	cmp	r0, #0
 800c416:	f43f aec7 	beq.w	800c1a8 <_strtod_l+0xa8>
 800c41a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	2b28      	cmp	r3, #40	@ 0x28
 800c420:	d12e      	bne.n	800c480 <_strtod_l+0x380>
 800c422:	4997      	ldr	r1, [pc, #604]	@ (800c680 <_strtod_l+0x580>)
 800c424:	aa1c      	add	r2, sp, #112	@ 0x70
 800c426:	a819      	add	r0, sp, #100	@ 0x64
 800c428:	f001 f976 	bl	800d718 <__hexnan>
 800c42c:	2805      	cmp	r0, #5
 800c42e:	d127      	bne.n	800c480 <_strtod_l+0x380>
 800c430:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c432:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c436:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c43a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c43e:	e698      	b.n	800c172 <_strtod_l+0x72>
 800c440:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c442:	fb08 2101 	mla	r1, r8, r1, r2
 800c446:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c44a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c44c:	e7b5      	b.n	800c3ba <_strtod_l+0x2ba>
 800c44e:	2a6e      	cmp	r2, #110	@ 0x6e
 800c450:	e7da      	b.n	800c408 <_strtod_l+0x308>
 800c452:	498c      	ldr	r1, [pc, #560]	@ (800c684 <_strtod_l+0x584>)
 800c454:	a819      	add	r0, sp, #100	@ 0x64
 800c456:	f001 f94b 	bl	800d6f0 <__match>
 800c45a:	2800      	cmp	r0, #0
 800c45c:	f43f aea4 	beq.w	800c1a8 <_strtod_l+0xa8>
 800c460:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c462:	4989      	ldr	r1, [pc, #548]	@ (800c688 <_strtod_l+0x588>)
 800c464:	3b01      	subs	r3, #1
 800c466:	a819      	add	r0, sp, #100	@ 0x64
 800c468:	9319      	str	r3, [sp, #100]	@ 0x64
 800c46a:	f001 f941 	bl	800d6f0 <__match>
 800c46e:	b910      	cbnz	r0, 800c476 <_strtod_l+0x376>
 800c470:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c472:	3301      	adds	r3, #1
 800c474:	9319      	str	r3, [sp, #100]	@ 0x64
 800c476:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c698 <_strtod_l+0x598>
 800c47a:	f04f 0a00 	mov.w	sl, #0
 800c47e:	e678      	b.n	800c172 <_strtod_l+0x72>
 800c480:	4882      	ldr	r0, [pc, #520]	@ (800c68c <_strtod_l+0x58c>)
 800c482:	f000 fe89 	bl	800d198 <nan>
 800c486:	ec5b ab10 	vmov	sl, fp, d0
 800c48a:	e672      	b.n	800c172 <_strtod_l+0x72>
 800c48c:	eba8 0309 	sub.w	r3, r8, r9
 800c490:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c492:	9309      	str	r3, [sp, #36]	@ 0x24
 800c494:	2f00      	cmp	r7, #0
 800c496:	bf08      	it	eq
 800c498:	462f      	moveq	r7, r5
 800c49a:	2d10      	cmp	r5, #16
 800c49c:	462c      	mov	r4, r5
 800c49e:	bfa8      	it	ge
 800c4a0:	2410      	movge	r4, #16
 800c4a2:	f7f4 f867 	bl	8000574 <__aeabi_ui2d>
 800c4a6:	2d09      	cmp	r5, #9
 800c4a8:	4682      	mov	sl, r0
 800c4aa:	468b      	mov	fp, r1
 800c4ac:	dc13      	bgt.n	800c4d6 <_strtod_l+0x3d6>
 800c4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f43f ae5e 	beq.w	800c172 <_strtod_l+0x72>
 800c4b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4b8:	dd78      	ble.n	800c5ac <_strtod_l+0x4ac>
 800c4ba:	2b16      	cmp	r3, #22
 800c4bc:	dc5f      	bgt.n	800c57e <_strtod_l+0x47e>
 800c4be:	4974      	ldr	r1, [pc, #464]	@ (800c690 <_strtod_l+0x590>)
 800c4c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c4c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4c8:	4652      	mov	r2, sl
 800c4ca:	465b      	mov	r3, fp
 800c4cc:	f7f4 f8cc 	bl	8000668 <__aeabi_dmul>
 800c4d0:	4682      	mov	sl, r0
 800c4d2:	468b      	mov	fp, r1
 800c4d4:	e64d      	b.n	800c172 <_strtod_l+0x72>
 800c4d6:	4b6e      	ldr	r3, [pc, #440]	@ (800c690 <_strtod_l+0x590>)
 800c4d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c4dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c4e0:	f7f4 f8c2 	bl	8000668 <__aeabi_dmul>
 800c4e4:	4682      	mov	sl, r0
 800c4e6:	9808      	ldr	r0, [sp, #32]
 800c4e8:	468b      	mov	fp, r1
 800c4ea:	f7f4 f843 	bl	8000574 <__aeabi_ui2d>
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	4650      	mov	r0, sl
 800c4f4:	4659      	mov	r1, fp
 800c4f6:	f7f3 ff01 	bl	80002fc <__adddf3>
 800c4fa:	2d0f      	cmp	r5, #15
 800c4fc:	4682      	mov	sl, r0
 800c4fe:	468b      	mov	fp, r1
 800c500:	ddd5      	ble.n	800c4ae <_strtod_l+0x3ae>
 800c502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c504:	1b2c      	subs	r4, r5, r4
 800c506:	441c      	add	r4, r3
 800c508:	2c00      	cmp	r4, #0
 800c50a:	f340 8096 	ble.w	800c63a <_strtod_l+0x53a>
 800c50e:	f014 030f 	ands.w	r3, r4, #15
 800c512:	d00a      	beq.n	800c52a <_strtod_l+0x42a>
 800c514:	495e      	ldr	r1, [pc, #376]	@ (800c690 <_strtod_l+0x590>)
 800c516:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c51a:	4652      	mov	r2, sl
 800c51c:	465b      	mov	r3, fp
 800c51e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c522:	f7f4 f8a1 	bl	8000668 <__aeabi_dmul>
 800c526:	4682      	mov	sl, r0
 800c528:	468b      	mov	fp, r1
 800c52a:	f034 040f 	bics.w	r4, r4, #15
 800c52e:	d073      	beq.n	800c618 <_strtod_l+0x518>
 800c530:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c534:	dd48      	ble.n	800c5c8 <_strtod_l+0x4c8>
 800c536:	2400      	movs	r4, #0
 800c538:	46a0      	mov	r8, r4
 800c53a:	940a      	str	r4, [sp, #40]	@ 0x28
 800c53c:	46a1      	mov	r9, r4
 800c53e:	9a05      	ldr	r2, [sp, #20]
 800c540:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c698 <_strtod_l+0x598>
 800c544:	2322      	movs	r3, #34	@ 0x22
 800c546:	6013      	str	r3, [r2, #0]
 800c548:	f04f 0a00 	mov.w	sl, #0
 800c54c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c54e:	2b00      	cmp	r3, #0
 800c550:	f43f ae0f 	beq.w	800c172 <_strtod_l+0x72>
 800c554:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c556:	9805      	ldr	r0, [sp, #20]
 800c558:	f7ff f942 	bl	800b7e0 <_Bfree>
 800c55c:	9805      	ldr	r0, [sp, #20]
 800c55e:	4649      	mov	r1, r9
 800c560:	f7ff f93e 	bl	800b7e0 <_Bfree>
 800c564:	9805      	ldr	r0, [sp, #20]
 800c566:	4641      	mov	r1, r8
 800c568:	f7ff f93a 	bl	800b7e0 <_Bfree>
 800c56c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c56e:	9805      	ldr	r0, [sp, #20]
 800c570:	f7ff f936 	bl	800b7e0 <_Bfree>
 800c574:	9805      	ldr	r0, [sp, #20]
 800c576:	4621      	mov	r1, r4
 800c578:	f7ff f932 	bl	800b7e0 <_Bfree>
 800c57c:	e5f9      	b.n	800c172 <_strtod_l+0x72>
 800c57e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c580:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c584:	4293      	cmp	r3, r2
 800c586:	dbbc      	blt.n	800c502 <_strtod_l+0x402>
 800c588:	4c41      	ldr	r4, [pc, #260]	@ (800c690 <_strtod_l+0x590>)
 800c58a:	f1c5 050f 	rsb	r5, r5, #15
 800c58e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c592:	4652      	mov	r2, sl
 800c594:	465b      	mov	r3, fp
 800c596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c59a:	f7f4 f865 	bl	8000668 <__aeabi_dmul>
 800c59e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5a0:	1b5d      	subs	r5, r3, r5
 800c5a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c5a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c5aa:	e78f      	b.n	800c4cc <_strtod_l+0x3cc>
 800c5ac:	3316      	adds	r3, #22
 800c5ae:	dba8      	blt.n	800c502 <_strtod_l+0x402>
 800c5b0:	4b37      	ldr	r3, [pc, #220]	@ (800c690 <_strtod_l+0x590>)
 800c5b2:	eba9 0808 	sub.w	r8, r9, r8
 800c5b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c5ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c5be:	4650      	mov	r0, sl
 800c5c0:	4659      	mov	r1, fp
 800c5c2:	f7f4 f97b 	bl	80008bc <__aeabi_ddiv>
 800c5c6:	e783      	b.n	800c4d0 <_strtod_l+0x3d0>
 800c5c8:	4b32      	ldr	r3, [pc, #200]	@ (800c694 <_strtod_l+0x594>)
 800c5ca:	9308      	str	r3, [sp, #32]
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	1124      	asrs	r4, r4, #4
 800c5d0:	4650      	mov	r0, sl
 800c5d2:	4659      	mov	r1, fp
 800c5d4:	461e      	mov	r6, r3
 800c5d6:	2c01      	cmp	r4, #1
 800c5d8:	dc21      	bgt.n	800c61e <_strtod_l+0x51e>
 800c5da:	b10b      	cbz	r3, 800c5e0 <_strtod_l+0x4e0>
 800c5dc:	4682      	mov	sl, r0
 800c5de:	468b      	mov	fp, r1
 800c5e0:	492c      	ldr	r1, [pc, #176]	@ (800c694 <_strtod_l+0x594>)
 800c5e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c5e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c5ea:	4652      	mov	r2, sl
 800c5ec:	465b      	mov	r3, fp
 800c5ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5f2:	f7f4 f839 	bl	8000668 <__aeabi_dmul>
 800c5f6:	4b28      	ldr	r3, [pc, #160]	@ (800c698 <_strtod_l+0x598>)
 800c5f8:	460a      	mov	r2, r1
 800c5fa:	400b      	ands	r3, r1
 800c5fc:	4927      	ldr	r1, [pc, #156]	@ (800c69c <_strtod_l+0x59c>)
 800c5fe:	428b      	cmp	r3, r1
 800c600:	4682      	mov	sl, r0
 800c602:	d898      	bhi.n	800c536 <_strtod_l+0x436>
 800c604:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c608:	428b      	cmp	r3, r1
 800c60a:	bf86      	itte	hi
 800c60c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c6a0 <_strtod_l+0x5a0>
 800c610:	f04f 3aff 	movhi.w	sl, #4294967295
 800c614:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c618:	2300      	movs	r3, #0
 800c61a:	9308      	str	r3, [sp, #32]
 800c61c:	e07a      	b.n	800c714 <_strtod_l+0x614>
 800c61e:	07e2      	lsls	r2, r4, #31
 800c620:	d505      	bpl.n	800c62e <_strtod_l+0x52e>
 800c622:	9b08      	ldr	r3, [sp, #32]
 800c624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c628:	f7f4 f81e 	bl	8000668 <__aeabi_dmul>
 800c62c:	2301      	movs	r3, #1
 800c62e:	9a08      	ldr	r2, [sp, #32]
 800c630:	3208      	adds	r2, #8
 800c632:	3601      	adds	r6, #1
 800c634:	1064      	asrs	r4, r4, #1
 800c636:	9208      	str	r2, [sp, #32]
 800c638:	e7cd      	b.n	800c5d6 <_strtod_l+0x4d6>
 800c63a:	d0ed      	beq.n	800c618 <_strtod_l+0x518>
 800c63c:	4264      	negs	r4, r4
 800c63e:	f014 020f 	ands.w	r2, r4, #15
 800c642:	d00a      	beq.n	800c65a <_strtod_l+0x55a>
 800c644:	4b12      	ldr	r3, [pc, #72]	@ (800c690 <_strtod_l+0x590>)
 800c646:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c64a:	4650      	mov	r0, sl
 800c64c:	4659      	mov	r1, fp
 800c64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c652:	f7f4 f933 	bl	80008bc <__aeabi_ddiv>
 800c656:	4682      	mov	sl, r0
 800c658:	468b      	mov	fp, r1
 800c65a:	1124      	asrs	r4, r4, #4
 800c65c:	d0dc      	beq.n	800c618 <_strtod_l+0x518>
 800c65e:	2c1f      	cmp	r4, #31
 800c660:	dd20      	ble.n	800c6a4 <_strtod_l+0x5a4>
 800c662:	2400      	movs	r4, #0
 800c664:	46a0      	mov	r8, r4
 800c666:	940a      	str	r4, [sp, #40]	@ 0x28
 800c668:	46a1      	mov	r9, r4
 800c66a:	9a05      	ldr	r2, [sp, #20]
 800c66c:	2322      	movs	r3, #34	@ 0x22
 800c66e:	f04f 0a00 	mov.w	sl, #0
 800c672:	f04f 0b00 	mov.w	fp, #0
 800c676:	6013      	str	r3, [r2, #0]
 800c678:	e768      	b.n	800c54c <_strtod_l+0x44c>
 800c67a:	bf00      	nop
 800c67c:	0800e056 	.word	0x0800e056
 800c680:	0800e304 	.word	0x0800e304
 800c684:	0800e04e 	.word	0x0800e04e
 800c688:	0800e132 	.word	0x0800e132
 800c68c:	0800e12e 	.word	0x0800e12e
 800c690:	0800e238 	.word	0x0800e238
 800c694:	0800e210 	.word	0x0800e210
 800c698:	7ff00000 	.word	0x7ff00000
 800c69c:	7ca00000 	.word	0x7ca00000
 800c6a0:	7fefffff 	.word	0x7fefffff
 800c6a4:	f014 0310 	ands.w	r3, r4, #16
 800c6a8:	bf18      	it	ne
 800c6aa:	236a      	movne	r3, #106	@ 0x6a
 800c6ac:	4ea9      	ldr	r6, [pc, #676]	@ (800c954 <_strtod_l+0x854>)
 800c6ae:	9308      	str	r3, [sp, #32]
 800c6b0:	4650      	mov	r0, sl
 800c6b2:	4659      	mov	r1, fp
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	07e2      	lsls	r2, r4, #31
 800c6b8:	d504      	bpl.n	800c6c4 <_strtod_l+0x5c4>
 800c6ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c6be:	f7f3 ffd3 	bl	8000668 <__aeabi_dmul>
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	1064      	asrs	r4, r4, #1
 800c6c6:	f106 0608 	add.w	r6, r6, #8
 800c6ca:	d1f4      	bne.n	800c6b6 <_strtod_l+0x5b6>
 800c6cc:	b10b      	cbz	r3, 800c6d2 <_strtod_l+0x5d2>
 800c6ce:	4682      	mov	sl, r0
 800c6d0:	468b      	mov	fp, r1
 800c6d2:	9b08      	ldr	r3, [sp, #32]
 800c6d4:	b1b3      	cbz	r3, 800c704 <_strtod_l+0x604>
 800c6d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c6da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	4659      	mov	r1, fp
 800c6e2:	dd0f      	ble.n	800c704 <_strtod_l+0x604>
 800c6e4:	2b1f      	cmp	r3, #31
 800c6e6:	dd55      	ble.n	800c794 <_strtod_l+0x694>
 800c6e8:	2b34      	cmp	r3, #52	@ 0x34
 800c6ea:	bfde      	ittt	le
 800c6ec:	f04f 33ff 	movle.w	r3, #4294967295
 800c6f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c6f4:	4093      	lslle	r3, r2
 800c6f6:	f04f 0a00 	mov.w	sl, #0
 800c6fa:	bfcc      	ite	gt
 800c6fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c700:	ea03 0b01 	andle.w	fp, r3, r1
 800c704:	2200      	movs	r2, #0
 800c706:	2300      	movs	r3, #0
 800c708:	4650      	mov	r0, sl
 800c70a:	4659      	mov	r1, fp
 800c70c:	f7f4 fa14 	bl	8000b38 <__aeabi_dcmpeq>
 800c710:	2800      	cmp	r0, #0
 800c712:	d1a6      	bne.n	800c662 <_strtod_l+0x562>
 800c714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c71a:	9805      	ldr	r0, [sp, #20]
 800c71c:	462b      	mov	r3, r5
 800c71e:	463a      	mov	r2, r7
 800c720:	f7ff f8c6 	bl	800b8b0 <__s2b>
 800c724:	900a      	str	r0, [sp, #40]	@ 0x28
 800c726:	2800      	cmp	r0, #0
 800c728:	f43f af05 	beq.w	800c536 <_strtod_l+0x436>
 800c72c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c72e:	2a00      	cmp	r2, #0
 800c730:	eba9 0308 	sub.w	r3, r9, r8
 800c734:	bfa8      	it	ge
 800c736:	2300      	movge	r3, #0
 800c738:	9312      	str	r3, [sp, #72]	@ 0x48
 800c73a:	2400      	movs	r4, #0
 800c73c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c740:	9316      	str	r3, [sp, #88]	@ 0x58
 800c742:	46a0      	mov	r8, r4
 800c744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c746:	9805      	ldr	r0, [sp, #20]
 800c748:	6859      	ldr	r1, [r3, #4]
 800c74a:	f7ff f809 	bl	800b760 <_Balloc>
 800c74e:	4681      	mov	r9, r0
 800c750:	2800      	cmp	r0, #0
 800c752:	f43f aef4 	beq.w	800c53e <_strtod_l+0x43e>
 800c756:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c758:	691a      	ldr	r2, [r3, #16]
 800c75a:	3202      	adds	r2, #2
 800c75c:	f103 010c 	add.w	r1, r3, #12
 800c760:	0092      	lsls	r2, r2, #2
 800c762:	300c      	adds	r0, #12
 800c764:	f000 fd08 	bl	800d178 <memcpy>
 800c768:	ec4b ab10 	vmov	d0, sl, fp
 800c76c:	9805      	ldr	r0, [sp, #20]
 800c76e:	aa1c      	add	r2, sp, #112	@ 0x70
 800c770:	a91b      	add	r1, sp, #108	@ 0x6c
 800c772:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c776:	f7ff fbd7 	bl	800bf28 <__d2b>
 800c77a:	901a      	str	r0, [sp, #104]	@ 0x68
 800c77c:	2800      	cmp	r0, #0
 800c77e:	f43f aede 	beq.w	800c53e <_strtod_l+0x43e>
 800c782:	9805      	ldr	r0, [sp, #20]
 800c784:	2101      	movs	r1, #1
 800c786:	f7ff f929 	bl	800b9dc <__i2b>
 800c78a:	4680      	mov	r8, r0
 800c78c:	b948      	cbnz	r0, 800c7a2 <_strtod_l+0x6a2>
 800c78e:	f04f 0800 	mov.w	r8, #0
 800c792:	e6d4      	b.n	800c53e <_strtod_l+0x43e>
 800c794:	f04f 32ff 	mov.w	r2, #4294967295
 800c798:	fa02 f303 	lsl.w	r3, r2, r3
 800c79c:	ea03 0a0a 	and.w	sl, r3, sl
 800c7a0:	e7b0      	b.n	800c704 <_strtod_l+0x604>
 800c7a2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c7a4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c7a6:	2d00      	cmp	r5, #0
 800c7a8:	bfab      	itete	ge
 800c7aa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c7ac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c7ae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c7b0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c7b2:	bfac      	ite	ge
 800c7b4:	18ef      	addge	r7, r5, r3
 800c7b6:	1b5e      	sublt	r6, r3, r5
 800c7b8:	9b08      	ldr	r3, [sp, #32]
 800c7ba:	1aed      	subs	r5, r5, r3
 800c7bc:	4415      	add	r5, r2
 800c7be:	4b66      	ldr	r3, [pc, #408]	@ (800c958 <_strtod_l+0x858>)
 800c7c0:	3d01      	subs	r5, #1
 800c7c2:	429d      	cmp	r5, r3
 800c7c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c7c8:	da50      	bge.n	800c86c <_strtod_l+0x76c>
 800c7ca:	1b5b      	subs	r3, r3, r5
 800c7cc:	2b1f      	cmp	r3, #31
 800c7ce:	eba2 0203 	sub.w	r2, r2, r3
 800c7d2:	f04f 0101 	mov.w	r1, #1
 800c7d6:	dc3d      	bgt.n	800c854 <_strtod_l+0x754>
 800c7d8:	fa01 f303 	lsl.w	r3, r1, r3
 800c7dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c7de:	2300      	movs	r3, #0
 800c7e0:	9310      	str	r3, [sp, #64]	@ 0x40
 800c7e2:	18bd      	adds	r5, r7, r2
 800c7e4:	9b08      	ldr	r3, [sp, #32]
 800c7e6:	42af      	cmp	r7, r5
 800c7e8:	4416      	add	r6, r2
 800c7ea:	441e      	add	r6, r3
 800c7ec:	463b      	mov	r3, r7
 800c7ee:	bfa8      	it	ge
 800c7f0:	462b      	movge	r3, r5
 800c7f2:	42b3      	cmp	r3, r6
 800c7f4:	bfa8      	it	ge
 800c7f6:	4633      	movge	r3, r6
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	bfc2      	ittt	gt
 800c7fc:	1aed      	subgt	r5, r5, r3
 800c7fe:	1af6      	subgt	r6, r6, r3
 800c800:	1aff      	subgt	r7, r7, r3
 800c802:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c804:	2b00      	cmp	r3, #0
 800c806:	dd16      	ble.n	800c836 <_strtod_l+0x736>
 800c808:	4641      	mov	r1, r8
 800c80a:	9805      	ldr	r0, [sp, #20]
 800c80c:	461a      	mov	r2, r3
 800c80e:	f7ff f9a5 	bl	800bb5c <__pow5mult>
 800c812:	4680      	mov	r8, r0
 800c814:	2800      	cmp	r0, #0
 800c816:	d0ba      	beq.n	800c78e <_strtod_l+0x68e>
 800c818:	4601      	mov	r1, r0
 800c81a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c81c:	9805      	ldr	r0, [sp, #20]
 800c81e:	f7ff f8f3 	bl	800ba08 <__multiply>
 800c822:	900e      	str	r0, [sp, #56]	@ 0x38
 800c824:	2800      	cmp	r0, #0
 800c826:	f43f ae8a 	beq.w	800c53e <_strtod_l+0x43e>
 800c82a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c82c:	9805      	ldr	r0, [sp, #20]
 800c82e:	f7fe ffd7 	bl	800b7e0 <_Bfree>
 800c832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c834:	931a      	str	r3, [sp, #104]	@ 0x68
 800c836:	2d00      	cmp	r5, #0
 800c838:	dc1d      	bgt.n	800c876 <_strtod_l+0x776>
 800c83a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	dd23      	ble.n	800c888 <_strtod_l+0x788>
 800c840:	4649      	mov	r1, r9
 800c842:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c844:	9805      	ldr	r0, [sp, #20]
 800c846:	f7ff f989 	bl	800bb5c <__pow5mult>
 800c84a:	4681      	mov	r9, r0
 800c84c:	b9e0      	cbnz	r0, 800c888 <_strtod_l+0x788>
 800c84e:	f04f 0900 	mov.w	r9, #0
 800c852:	e674      	b.n	800c53e <_strtod_l+0x43e>
 800c854:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c858:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c85c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c860:	35e2      	adds	r5, #226	@ 0xe2
 800c862:	fa01 f305 	lsl.w	r3, r1, r5
 800c866:	9310      	str	r3, [sp, #64]	@ 0x40
 800c868:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c86a:	e7ba      	b.n	800c7e2 <_strtod_l+0x6e2>
 800c86c:	2300      	movs	r3, #0
 800c86e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c870:	2301      	movs	r3, #1
 800c872:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c874:	e7b5      	b.n	800c7e2 <_strtod_l+0x6e2>
 800c876:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c878:	9805      	ldr	r0, [sp, #20]
 800c87a:	462a      	mov	r2, r5
 800c87c:	f7ff f9c8 	bl	800bc10 <__lshift>
 800c880:	901a      	str	r0, [sp, #104]	@ 0x68
 800c882:	2800      	cmp	r0, #0
 800c884:	d1d9      	bne.n	800c83a <_strtod_l+0x73a>
 800c886:	e65a      	b.n	800c53e <_strtod_l+0x43e>
 800c888:	2e00      	cmp	r6, #0
 800c88a:	dd07      	ble.n	800c89c <_strtod_l+0x79c>
 800c88c:	4649      	mov	r1, r9
 800c88e:	9805      	ldr	r0, [sp, #20]
 800c890:	4632      	mov	r2, r6
 800c892:	f7ff f9bd 	bl	800bc10 <__lshift>
 800c896:	4681      	mov	r9, r0
 800c898:	2800      	cmp	r0, #0
 800c89a:	d0d8      	beq.n	800c84e <_strtod_l+0x74e>
 800c89c:	2f00      	cmp	r7, #0
 800c89e:	dd08      	ble.n	800c8b2 <_strtod_l+0x7b2>
 800c8a0:	4641      	mov	r1, r8
 800c8a2:	9805      	ldr	r0, [sp, #20]
 800c8a4:	463a      	mov	r2, r7
 800c8a6:	f7ff f9b3 	bl	800bc10 <__lshift>
 800c8aa:	4680      	mov	r8, r0
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	f43f ae46 	beq.w	800c53e <_strtod_l+0x43e>
 800c8b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c8b4:	9805      	ldr	r0, [sp, #20]
 800c8b6:	464a      	mov	r2, r9
 800c8b8:	f7ff fa32 	bl	800bd20 <__mdiff>
 800c8bc:	4604      	mov	r4, r0
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	f43f ae3d 	beq.w	800c53e <_strtod_l+0x43e>
 800c8c4:	68c3      	ldr	r3, [r0, #12]
 800c8c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	60c3      	str	r3, [r0, #12]
 800c8cc:	4641      	mov	r1, r8
 800c8ce:	f7ff fa0b 	bl	800bce8 <__mcmp>
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	da46      	bge.n	800c964 <_strtod_l+0x864>
 800c8d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8d8:	ea53 030a 	orrs.w	r3, r3, sl
 800c8dc:	d16c      	bne.n	800c9b8 <_strtod_l+0x8b8>
 800c8de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d168      	bne.n	800c9b8 <_strtod_l+0x8b8>
 800c8e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c8ea:	0d1b      	lsrs	r3, r3, #20
 800c8ec:	051b      	lsls	r3, r3, #20
 800c8ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c8f2:	d961      	bls.n	800c9b8 <_strtod_l+0x8b8>
 800c8f4:	6963      	ldr	r3, [r4, #20]
 800c8f6:	b913      	cbnz	r3, 800c8fe <_strtod_l+0x7fe>
 800c8f8:	6923      	ldr	r3, [r4, #16]
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	dd5c      	ble.n	800c9b8 <_strtod_l+0x8b8>
 800c8fe:	4621      	mov	r1, r4
 800c900:	2201      	movs	r2, #1
 800c902:	9805      	ldr	r0, [sp, #20]
 800c904:	f7ff f984 	bl	800bc10 <__lshift>
 800c908:	4641      	mov	r1, r8
 800c90a:	4604      	mov	r4, r0
 800c90c:	f7ff f9ec 	bl	800bce8 <__mcmp>
 800c910:	2800      	cmp	r0, #0
 800c912:	dd51      	ble.n	800c9b8 <_strtod_l+0x8b8>
 800c914:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c918:	9a08      	ldr	r2, [sp, #32]
 800c91a:	0d1b      	lsrs	r3, r3, #20
 800c91c:	051b      	lsls	r3, r3, #20
 800c91e:	2a00      	cmp	r2, #0
 800c920:	d06b      	beq.n	800c9fa <_strtod_l+0x8fa>
 800c922:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c926:	d868      	bhi.n	800c9fa <_strtod_l+0x8fa>
 800c928:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c92c:	f67f ae9d 	bls.w	800c66a <_strtod_l+0x56a>
 800c930:	4b0a      	ldr	r3, [pc, #40]	@ (800c95c <_strtod_l+0x85c>)
 800c932:	4650      	mov	r0, sl
 800c934:	4659      	mov	r1, fp
 800c936:	2200      	movs	r2, #0
 800c938:	f7f3 fe96 	bl	8000668 <__aeabi_dmul>
 800c93c:	4b08      	ldr	r3, [pc, #32]	@ (800c960 <_strtod_l+0x860>)
 800c93e:	400b      	ands	r3, r1
 800c940:	4682      	mov	sl, r0
 800c942:	468b      	mov	fp, r1
 800c944:	2b00      	cmp	r3, #0
 800c946:	f47f ae05 	bne.w	800c554 <_strtod_l+0x454>
 800c94a:	9a05      	ldr	r2, [sp, #20]
 800c94c:	2322      	movs	r3, #34	@ 0x22
 800c94e:	6013      	str	r3, [r2, #0]
 800c950:	e600      	b.n	800c554 <_strtod_l+0x454>
 800c952:	bf00      	nop
 800c954:	0800e330 	.word	0x0800e330
 800c958:	fffffc02 	.word	0xfffffc02
 800c95c:	39500000 	.word	0x39500000
 800c960:	7ff00000 	.word	0x7ff00000
 800c964:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c968:	d165      	bne.n	800ca36 <_strtod_l+0x936>
 800c96a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c96c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c970:	b35a      	cbz	r2, 800c9ca <_strtod_l+0x8ca>
 800c972:	4a9f      	ldr	r2, [pc, #636]	@ (800cbf0 <_strtod_l+0xaf0>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d12b      	bne.n	800c9d0 <_strtod_l+0x8d0>
 800c978:	9b08      	ldr	r3, [sp, #32]
 800c97a:	4651      	mov	r1, sl
 800c97c:	b303      	cbz	r3, 800c9c0 <_strtod_l+0x8c0>
 800c97e:	4b9d      	ldr	r3, [pc, #628]	@ (800cbf4 <_strtod_l+0xaf4>)
 800c980:	465a      	mov	r2, fp
 800c982:	4013      	ands	r3, r2
 800c984:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c988:	f04f 32ff 	mov.w	r2, #4294967295
 800c98c:	d81b      	bhi.n	800c9c6 <_strtod_l+0x8c6>
 800c98e:	0d1b      	lsrs	r3, r3, #20
 800c990:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c994:	fa02 f303 	lsl.w	r3, r2, r3
 800c998:	4299      	cmp	r1, r3
 800c99a:	d119      	bne.n	800c9d0 <_strtod_l+0x8d0>
 800c99c:	4b96      	ldr	r3, [pc, #600]	@ (800cbf8 <_strtod_l+0xaf8>)
 800c99e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d102      	bne.n	800c9aa <_strtod_l+0x8aa>
 800c9a4:	3101      	adds	r1, #1
 800c9a6:	f43f adca 	beq.w	800c53e <_strtod_l+0x43e>
 800c9aa:	4b92      	ldr	r3, [pc, #584]	@ (800cbf4 <_strtod_l+0xaf4>)
 800c9ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9ae:	401a      	ands	r2, r3
 800c9b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c9b4:	f04f 0a00 	mov.w	sl, #0
 800c9b8:	9b08      	ldr	r3, [sp, #32]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d1b8      	bne.n	800c930 <_strtod_l+0x830>
 800c9be:	e5c9      	b.n	800c554 <_strtod_l+0x454>
 800c9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9c4:	e7e8      	b.n	800c998 <_strtod_l+0x898>
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	e7e6      	b.n	800c998 <_strtod_l+0x898>
 800c9ca:	ea53 030a 	orrs.w	r3, r3, sl
 800c9ce:	d0a1      	beq.n	800c914 <_strtod_l+0x814>
 800c9d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c9d2:	b1db      	cbz	r3, 800ca0c <_strtod_l+0x90c>
 800c9d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9d6:	4213      	tst	r3, r2
 800c9d8:	d0ee      	beq.n	800c9b8 <_strtod_l+0x8b8>
 800c9da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9dc:	9a08      	ldr	r2, [sp, #32]
 800c9de:	4650      	mov	r0, sl
 800c9e0:	4659      	mov	r1, fp
 800c9e2:	b1bb      	cbz	r3, 800ca14 <_strtod_l+0x914>
 800c9e4:	f7ff fb6e 	bl	800c0c4 <sulp>
 800c9e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c9ec:	ec53 2b10 	vmov	r2, r3, d0
 800c9f0:	f7f3 fc84 	bl	80002fc <__adddf3>
 800c9f4:	4682      	mov	sl, r0
 800c9f6:	468b      	mov	fp, r1
 800c9f8:	e7de      	b.n	800c9b8 <_strtod_l+0x8b8>
 800c9fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c9fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ca02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ca06:	f04f 3aff 	mov.w	sl, #4294967295
 800ca0a:	e7d5      	b.n	800c9b8 <_strtod_l+0x8b8>
 800ca0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ca0e:	ea13 0f0a 	tst.w	r3, sl
 800ca12:	e7e1      	b.n	800c9d8 <_strtod_l+0x8d8>
 800ca14:	f7ff fb56 	bl	800c0c4 <sulp>
 800ca18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca1c:	ec53 2b10 	vmov	r2, r3, d0
 800ca20:	f7f3 fc6a 	bl	80002f8 <__aeabi_dsub>
 800ca24:	2200      	movs	r2, #0
 800ca26:	2300      	movs	r3, #0
 800ca28:	4682      	mov	sl, r0
 800ca2a:	468b      	mov	fp, r1
 800ca2c:	f7f4 f884 	bl	8000b38 <__aeabi_dcmpeq>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	d0c1      	beq.n	800c9b8 <_strtod_l+0x8b8>
 800ca34:	e619      	b.n	800c66a <_strtod_l+0x56a>
 800ca36:	4641      	mov	r1, r8
 800ca38:	4620      	mov	r0, r4
 800ca3a:	f7ff facd 	bl	800bfd8 <__ratio>
 800ca3e:	ec57 6b10 	vmov	r6, r7, d0
 800ca42:	2200      	movs	r2, #0
 800ca44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ca48:	4630      	mov	r0, r6
 800ca4a:	4639      	mov	r1, r7
 800ca4c:	f7f4 f888 	bl	8000b60 <__aeabi_dcmple>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d06f      	beq.n	800cb34 <_strtod_l+0xa34>
 800ca54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d17a      	bne.n	800cb50 <_strtod_l+0xa50>
 800ca5a:	f1ba 0f00 	cmp.w	sl, #0
 800ca5e:	d158      	bne.n	800cb12 <_strtod_l+0xa12>
 800ca60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d15a      	bne.n	800cb20 <_strtod_l+0xa20>
 800ca6a:	4b64      	ldr	r3, [pc, #400]	@ (800cbfc <_strtod_l+0xafc>)
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	4630      	mov	r0, r6
 800ca70:	4639      	mov	r1, r7
 800ca72:	f7f4 f86b 	bl	8000b4c <__aeabi_dcmplt>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	d159      	bne.n	800cb2e <_strtod_l+0xa2e>
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	4639      	mov	r1, r7
 800ca7e:	4b60      	ldr	r3, [pc, #384]	@ (800cc00 <_strtod_l+0xb00>)
 800ca80:	2200      	movs	r2, #0
 800ca82:	f7f3 fdf1 	bl	8000668 <__aeabi_dmul>
 800ca86:	4606      	mov	r6, r0
 800ca88:	460f      	mov	r7, r1
 800ca8a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ca8e:	9606      	str	r6, [sp, #24]
 800ca90:	9307      	str	r3, [sp, #28]
 800ca92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca96:	4d57      	ldr	r5, [pc, #348]	@ (800cbf4 <_strtod_l+0xaf4>)
 800ca98:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ca9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca9e:	401d      	ands	r5, r3
 800caa0:	4b58      	ldr	r3, [pc, #352]	@ (800cc04 <_strtod_l+0xb04>)
 800caa2:	429d      	cmp	r5, r3
 800caa4:	f040 80b2 	bne.w	800cc0c <_strtod_l+0xb0c>
 800caa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800caaa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800caae:	ec4b ab10 	vmov	d0, sl, fp
 800cab2:	f7ff f9c9 	bl	800be48 <__ulp>
 800cab6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800caba:	ec51 0b10 	vmov	r0, r1, d0
 800cabe:	f7f3 fdd3 	bl	8000668 <__aeabi_dmul>
 800cac2:	4652      	mov	r2, sl
 800cac4:	465b      	mov	r3, fp
 800cac6:	f7f3 fc19 	bl	80002fc <__adddf3>
 800caca:	460b      	mov	r3, r1
 800cacc:	4949      	ldr	r1, [pc, #292]	@ (800cbf4 <_strtod_l+0xaf4>)
 800cace:	4a4e      	ldr	r2, [pc, #312]	@ (800cc08 <_strtod_l+0xb08>)
 800cad0:	4019      	ands	r1, r3
 800cad2:	4291      	cmp	r1, r2
 800cad4:	4682      	mov	sl, r0
 800cad6:	d942      	bls.n	800cb5e <_strtod_l+0xa5e>
 800cad8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cada:	4b47      	ldr	r3, [pc, #284]	@ (800cbf8 <_strtod_l+0xaf8>)
 800cadc:	429a      	cmp	r2, r3
 800cade:	d103      	bne.n	800cae8 <_strtod_l+0x9e8>
 800cae0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cae2:	3301      	adds	r3, #1
 800cae4:	f43f ad2b 	beq.w	800c53e <_strtod_l+0x43e>
 800cae8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cbf8 <_strtod_l+0xaf8>
 800caec:	f04f 3aff 	mov.w	sl, #4294967295
 800caf0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800caf2:	9805      	ldr	r0, [sp, #20]
 800caf4:	f7fe fe74 	bl	800b7e0 <_Bfree>
 800caf8:	9805      	ldr	r0, [sp, #20]
 800cafa:	4649      	mov	r1, r9
 800cafc:	f7fe fe70 	bl	800b7e0 <_Bfree>
 800cb00:	9805      	ldr	r0, [sp, #20]
 800cb02:	4641      	mov	r1, r8
 800cb04:	f7fe fe6c 	bl	800b7e0 <_Bfree>
 800cb08:	9805      	ldr	r0, [sp, #20]
 800cb0a:	4621      	mov	r1, r4
 800cb0c:	f7fe fe68 	bl	800b7e0 <_Bfree>
 800cb10:	e618      	b.n	800c744 <_strtod_l+0x644>
 800cb12:	f1ba 0f01 	cmp.w	sl, #1
 800cb16:	d103      	bne.n	800cb20 <_strtod_l+0xa20>
 800cb18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	f43f ada5 	beq.w	800c66a <_strtod_l+0x56a>
 800cb20:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cbd0 <_strtod_l+0xad0>
 800cb24:	4f35      	ldr	r7, [pc, #212]	@ (800cbfc <_strtod_l+0xafc>)
 800cb26:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cb2a:	2600      	movs	r6, #0
 800cb2c:	e7b1      	b.n	800ca92 <_strtod_l+0x992>
 800cb2e:	4f34      	ldr	r7, [pc, #208]	@ (800cc00 <_strtod_l+0xb00>)
 800cb30:	2600      	movs	r6, #0
 800cb32:	e7aa      	b.n	800ca8a <_strtod_l+0x98a>
 800cb34:	4b32      	ldr	r3, [pc, #200]	@ (800cc00 <_strtod_l+0xb00>)
 800cb36:	4630      	mov	r0, r6
 800cb38:	4639      	mov	r1, r7
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f7f3 fd94 	bl	8000668 <__aeabi_dmul>
 800cb40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb42:	4606      	mov	r6, r0
 800cb44:	460f      	mov	r7, r1
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d09f      	beq.n	800ca8a <_strtod_l+0x98a>
 800cb4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cb4e:	e7a0      	b.n	800ca92 <_strtod_l+0x992>
 800cb50:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cbd8 <_strtod_l+0xad8>
 800cb54:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cb58:	ec57 6b17 	vmov	r6, r7, d7
 800cb5c:	e799      	b.n	800ca92 <_strtod_l+0x992>
 800cb5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cb62:	9b08      	ldr	r3, [sp, #32]
 800cb64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d1c1      	bne.n	800caf0 <_strtod_l+0x9f0>
 800cb6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb70:	0d1b      	lsrs	r3, r3, #20
 800cb72:	051b      	lsls	r3, r3, #20
 800cb74:	429d      	cmp	r5, r3
 800cb76:	d1bb      	bne.n	800caf0 <_strtod_l+0x9f0>
 800cb78:	4630      	mov	r0, r6
 800cb7a:	4639      	mov	r1, r7
 800cb7c:	f7f4 f8d4 	bl	8000d28 <__aeabi_d2lz>
 800cb80:	f7f3 fd44 	bl	800060c <__aeabi_l2d>
 800cb84:	4602      	mov	r2, r0
 800cb86:	460b      	mov	r3, r1
 800cb88:	4630      	mov	r0, r6
 800cb8a:	4639      	mov	r1, r7
 800cb8c:	f7f3 fbb4 	bl	80002f8 <__aeabi_dsub>
 800cb90:	460b      	mov	r3, r1
 800cb92:	4602      	mov	r2, r0
 800cb94:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cb98:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800cb9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb9e:	ea46 060a 	orr.w	r6, r6, sl
 800cba2:	431e      	orrs	r6, r3
 800cba4:	d06f      	beq.n	800cc86 <_strtod_l+0xb86>
 800cba6:	a30e      	add	r3, pc, #56	@ (adr r3, 800cbe0 <_strtod_l+0xae0>)
 800cba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbac:	f7f3 ffce 	bl	8000b4c <__aeabi_dcmplt>
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	f47f accf 	bne.w	800c554 <_strtod_l+0x454>
 800cbb6:	a30c      	add	r3, pc, #48	@ (adr r3, 800cbe8 <_strtod_l+0xae8>)
 800cbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbc0:	f7f3 ffe2 	bl	8000b88 <__aeabi_dcmpgt>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d093      	beq.n	800caf0 <_strtod_l+0x9f0>
 800cbc8:	e4c4      	b.n	800c554 <_strtod_l+0x454>
 800cbca:	bf00      	nop
 800cbcc:	f3af 8000 	nop.w
 800cbd0:	00000000 	.word	0x00000000
 800cbd4:	bff00000 	.word	0xbff00000
 800cbd8:	00000000 	.word	0x00000000
 800cbdc:	3ff00000 	.word	0x3ff00000
 800cbe0:	94a03595 	.word	0x94a03595
 800cbe4:	3fdfffff 	.word	0x3fdfffff
 800cbe8:	35afe535 	.word	0x35afe535
 800cbec:	3fe00000 	.word	0x3fe00000
 800cbf0:	000fffff 	.word	0x000fffff
 800cbf4:	7ff00000 	.word	0x7ff00000
 800cbf8:	7fefffff 	.word	0x7fefffff
 800cbfc:	3ff00000 	.word	0x3ff00000
 800cc00:	3fe00000 	.word	0x3fe00000
 800cc04:	7fe00000 	.word	0x7fe00000
 800cc08:	7c9fffff 	.word	0x7c9fffff
 800cc0c:	9b08      	ldr	r3, [sp, #32]
 800cc0e:	b323      	cbz	r3, 800cc5a <_strtod_l+0xb5a>
 800cc10:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cc14:	d821      	bhi.n	800cc5a <_strtod_l+0xb5a>
 800cc16:	a328      	add	r3, pc, #160	@ (adr r3, 800ccb8 <_strtod_l+0xbb8>)
 800cc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	4639      	mov	r1, r7
 800cc20:	f7f3 ff9e 	bl	8000b60 <__aeabi_dcmple>
 800cc24:	b1a0      	cbz	r0, 800cc50 <_strtod_l+0xb50>
 800cc26:	4639      	mov	r1, r7
 800cc28:	4630      	mov	r0, r6
 800cc2a:	f7f3 fff5 	bl	8000c18 <__aeabi_d2uiz>
 800cc2e:	2801      	cmp	r0, #1
 800cc30:	bf38      	it	cc
 800cc32:	2001      	movcc	r0, #1
 800cc34:	f7f3 fc9e 	bl	8000574 <__aeabi_ui2d>
 800cc38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc3a:	4606      	mov	r6, r0
 800cc3c:	460f      	mov	r7, r1
 800cc3e:	b9fb      	cbnz	r3, 800cc80 <_strtod_l+0xb80>
 800cc40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc44:	9014      	str	r0, [sp, #80]	@ 0x50
 800cc46:	9315      	str	r3, [sp, #84]	@ 0x54
 800cc48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cc4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cc50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cc52:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cc56:	1b5b      	subs	r3, r3, r5
 800cc58:	9311      	str	r3, [sp, #68]	@ 0x44
 800cc5a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cc5e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cc62:	f7ff f8f1 	bl	800be48 <__ulp>
 800cc66:	4650      	mov	r0, sl
 800cc68:	ec53 2b10 	vmov	r2, r3, d0
 800cc6c:	4659      	mov	r1, fp
 800cc6e:	f7f3 fcfb 	bl	8000668 <__aeabi_dmul>
 800cc72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cc76:	f7f3 fb41 	bl	80002fc <__adddf3>
 800cc7a:	4682      	mov	sl, r0
 800cc7c:	468b      	mov	fp, r1
 800cc7e:	e770      	b.n	800cb62 <_strtod_l+0xa62>
 800cc80:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cc84:	e7e0      	b.n	800cc48 <_strtod_l+0xb48>
 800cc86:	a30e      	add	r3, pc, #56	@ (adr r3, 800ccc0 <_strtod_l+0xbc0>)
 800cc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8c:	f7f3 ff5e 	bl	8000b4c <__aeabi_dcmplt>
 800cc90:	e798      	b.n	800cbc4 <_strtod_l+0xac4>
 800cc92:	2300      	movs	r3, #0
 800cc94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc96:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cc98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc9a:	6013      	str	r3, [r2, #0]
 800cc9c:	f7ff ba6d 	b.w	800c17a <_strtod_l+0x7a>
 800cca0:	2a65      	cmp	r2, #101	@ 0x65
 800cca2:	f43f ab66 	beq.w	800c372 <_strtod_l+0x272>
 800cca6:	2a45      	cmp	r2, #69	@ 0x45
 800cca8:	f43f ab63 	beq.w	800c372 <_strtod_l+0x272>
 800ccac:	2301      	movs	r3, #1
 800ccae:	f7ff bb9e 	b.w	800c3ee <_strtod_l+0x2ee>
 800ccb2:	bf00      	nop
 800ccb4:	f3af 8000 	nop.w
 800ccb8:	ffc00000 	.word	0xffc00000
 800ccbc:	41dfffff 	.word	0x41dfffff
 800ccc0:	94a03595 	.word	0x94a03595
 800ccc4:	3fcfffff 	.word	0x3fcfffff

0800ccc8 <_strtod_r>:
 800ccc8:	4b01      	ldr	r3, [pc, #4]	@ (800ccd0 <_strtod_r+0x8>)
 800ccca:	f7ff ba19 	b.w	800c100 <_strtod_l>
 800ccce:	bf00      	nop
 800ccd0:	20000148 	.word	0x20000148

0800ccd4 <__ssputs_r>:
 800ccd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccd8:	688e      	ldr	r6, [r1, #8]
 800ccda:	461f      	mov	r7, r3
 800ccdc:	42be      	cmp	r6, r7
 800ccde:	680b      	ldr	r3, [r1, #0]
 800cce0:	4682      	mov	sl, r0
 800cce2:	460c      	mov	r4, r1
 800cce4:	4690      	mov	r8, r2
 800cce6:	d82d      	bhi.n	800cd44 <__ssputs_r+0x70>
 800cce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ccec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ccf0:	d026      	beq.n	800cd40 <__ssputs_r+0x6c>
 800ccf2:	6965      	ldr	r5, [r4, #20]
 800ccf4:	6909      	ldr	r1, [r1, #16]
 800ccf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ccfa:	eba3 0901 	sub.w	r9, r3, r1
 800ccfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd02:	1c7b      	adds	r3, r7, #1
 800cd04:	444b      	add	r3, r9
 800cd06:	106d      	asrs	r5, r5, #1
 800cd08:	429d      	cmp	r5, r3
 800cd0a:	bf38      	it	cc
 800cd0c:	461d      	movcc	r5, r3
 800cd0e:	0553      	lsls	r3, r2, #21
 800cd10:	d527      	bpl.n	800cd62 <__ssputs_r+0x8e>
 800cd12:	4629      	mov	r1, r5
 800cd14:	f7fe fc98 	bl	800b648 <_malloc_r>
 800cd18:	4606      	mov	r6, r0
 800cd1a:	b360      	cbz	r0, 800cd76 <__ssputs_r+0xa2>
 800cd1c:	6921      	ldr	r1, [r4, #16]
 800cd1e:	464a      	mov	r2, r9
 800cd20:	f000 fa2a 	bl	800d178 <memcpy>
 800cd24:	89a3      	ldrh	r3, [r4, #12]
 800cd26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cd2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd2e:	81a3      	strh	r3, [r4, #12]
 800cd30:	6126      	str	r6, [r4, #16]
 800cd32:	6165      	str	r5, [r4, #20]
 800cd34:	444e      	add	r6, r9
 800cd36:	eba5 0509 	sub.w	r5, r5, r9
 800cd3a:	6026      	str	r6, [r4, #0]
 800cd3c:	60a5      	str	r5, [r4, #8]
 800cd3e:	463e      	mov	r6, r7
 800cd40:	42be      	cmp	r6, r7
 800cd42:	d900      	bls.n	800cd46 <__ssputs_r+0x72>
 800cd44:	463e      	mov	r6, r7
 800cd46:	6820      	ldr	r0, [r4, #0]
 800cd48:	4632      	mov	r2, r6
 800cd4a:	4641      	mov	r1, r8
 800cd4c:	f000 f9d8 	bl	800d100 <memmove>
 800cd50:	68a3      	ldr	r3, [r4, #8]
 800cd52:	1b9b      	subs	r3, r3, r6
 800cd54:	60a3      	str	r3, [r4, #8]
 800cd56:	6823      	ldr	r3, [r4, #0]
 800cd58:	4433      	add	r3, r6
 800cd5a:	6023      	str	r3, [r4, #0]
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd62:	462a      	mov	r2, r5
 800cd64:	f000 fd85 	bl	800d872 <_realloc_r>
 800cd68:	4606      	mov	r6, r0
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	d1e0      	bne.n	800cd30 <__ssputs_r+0x5c>
 800cd6e:	6921      	ldr	r1, [r4, #16]
 800cd70:	4650      	mov	r0, sl
 800cd72:	f7fe fbf5 	bl	800b560 <_free_r>
 800cd76:	230c      	movs	r3, #12
 800cd78:	f8ca 3000 	str.w	r3, [sl]
 800cd7c:	89a3      	ldrh	r3, [r4, #12]
 800cd7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd82:	81a3      	strh	r3, [r4, #12]
 800cd84:	f04f 30ff 	mov.w	r0, #4294967295
 800cd88:	e7e9      	b.n	800cd5e <__ssputs_r+0x8a>
	...

0800cd8c <_svfiprintf_r>:
 800cd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd90:	4698      	mov	r8, r3
 800cd92:	898b      	ldrh	r3, [r1, #12]
 800cd94:	061b      	lsls	r3, r3, #24
 800cd96:	b09d      	sub	sp, #116	@ 0x74
 800cd98:	4607      	mov	r7, r0
 800cd9a:	460d      	mov	r5, r1
 800cd9c:	4614      	mov	r4, r2
 800cd9e:	d510      	bpl.n	800cdc2 <_svfiprintf_r+0x36>
 800cda0:	690b      	ldr	r3, [r1, #16]
 800cda2:	b973      	cbnz	r3, 800cdc2 <_svfiprintf_r+0x36>
 800cda4:	2140      	movs	r1, #64	@ 0x40
 800cda6:	f7fe fc4f 	bl	800b648 <_malloc_r>
 800cdaa:	6028      	str	r0, [r5, #0]
 800cdac:	6128      	str	r0, [r5, #16]
 800cdae:	b930      	cbnz	r0, 800cdbe <_svfiprintf_r+0x32>
 800cdb0:	230c      	movs	r3, #12
 800cdb2:	603b      	str	r3, [r7, #0]
 800cdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb8:	b01d      	add	sp, #116	@ 0x74
 800cdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdbe:	2340      	movs	r3, #64	@ 0x40
 800cdc0:	616b      	str	r3, [r5, #20]
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdc6:	2320      	movs	r3, #32
 800cdc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cdcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdd0:	2330      	movs	r3, #48	@ 0x30
 800cdd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cf70 <_svfiprintf_r+0x1e4>
 800cdd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cdda:	f04f 0901 	mov.w	r9, #1
 800cdde:	4623      	mov	r3, r4
 800cde0:	469a      	mov	sl, r3
 800cde2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cde6:	b10a      	cbz	r2, 800cdec <_svfiprintf_r+0x60>
 800cde8:	2a25      	cmp	r2, #37	@ 0x25
 800cdea:	d1f9      	bne.n	800cde0 <_svfiprintf_r+0x54>
 800cdec:	ebba 0b04 	subs.w	fp, sl, r4
 800cdf0:	d00b      	beq.n	800ce0a <_svfiprintf_r+0x7e>
 800cdf2:	465b      	mov	r3, fp
 800cdf4:	4622      	mov	r2, r4
 800cdf6:	4629      	mov	r1, r5
 800cdf8:	4638      	mov	r0, r7
 800cdfa:	f7ff ff6b 	bl	800ccd4 <__ssputs_r>
 800cdfe:	3001      	adds	r0, #1
 800ce00:	f000 80a7 	beq.w	800cf52 <_svfiprintf_r+0x1c6>
 800ce04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce06:	445a      	add	r2, fp
 800ce08:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	f000 809f 	beq.w	800cf52 <_svfiprintf_r+0x1c6>
 800ce14:	2300      	movs	r3, #0
 800ce16:	f04f 32ff 	mov.w	r2, #4294967295
 800ce1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce1e:	f10a 0a01 	add.w	sl, sl, #1
 800ce22:	9304      	str	r3, [sp, #16]
 800ce24:	9307      	str	r3, [sp, #28]
 800ce26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce2a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce2c:	4654      	mov	r4, sl
 800ce2e:	2205      	movs	r2, #5
 800ce30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce34:	484e      	ldr	r0, [pc, #312]	@ (800cf70 <_svfiprintf_r+0x1e4>)
 800ce36:	f7f3 fa03 	bl	8000240 <memchr>
 800ce3a:	9a04      	ldr	r2, [sp, #16]
 800ce3c:	b9d8      	cbnz	r0, 800ce76 <_svfiprintf_r+0xea>
 800ce3e:	06d0      	lsls	r0, r2, #27
 800ce40:	bf44      	itt	mi
 800ce42:	2320      	movmi	r3, #32
 800ce44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce48:	0711      	lsls	r1, r2, #28
 800ce4a:	bf44      	itt	mi
 800ce4c:	232b      	movmi	r3, #43	@ 0x2b
 800ce4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce52:	f89a 3000 	ldrb.w	r3, [sl]
 800ce56:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce58:	d015      	beq.n	800ce86 <_svfiprintf_r+0xfa>
 800ce5a:	9a07      	ldr	r2, [sp, #28]
 800ce5c:	4654      	mov	r4, sl
 800ce5e:	2000      	movs	r0, #0
 800ce60:	f04f 0c0a 	mov.w	ip, #10
 800ce64:	4621      	mov	r1, r4
 800ce66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce6a:	3b30      	subs	r3, #48	@ 0x30
 800ce6c:	2b09      	cmp	r3, #9
 800ce6e:	d94b      	bls.n	800cf08 <_svfiprintf_r+0x17c>
 800ce70:	b1b0      	cbz	r0, 800cea0 <_svfiprintf_r+0x114>
 800ce72:	9207      	str	r2, [sp, #28]
 800ce74:	e014      	b.n	800cea0 <_svfiprintf_r+0x114>
 800ce76:	eba0 0308 	sub.w	r3, r0, r8
 800ce7a:	fa09 f303 	lsl.w	r3, r9, r3
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	9304      	str	r3, [sp, #16]
 800ce82:	46a2      	mov	sl, r4
 800ce84:	e7d2      	b.n	800ce2c <_svfiprintf_r+0xa0>
 800ce86:	9b03      	ldr	r3, [sp, #12]
 800ce88:	1d19      	adds	r1, r3, #4
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	9103      	str	r1, [sp, #12]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	bfbb      	ittet	lt
 800ce92:	425b      	neglt	r3, r3
 800ce94:	f042 0202 	orrlt.w	r2, r2, #2
 800ce98:	9307      	strge	r3, [sp, #28]
 800ce9a:	9307      	strlt	r3, [sp, #28]
 800ce9c:	bfb8      	it	lt
 800ce9e:	9204      	strlt	r2, [sp, #16]
 800cea0:	7823      	ldrb	r3, [r4, #0]
 800cea2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cea4:	d10a      	bne.n	800cebc <_svfiprintf_r+0x130>
 800cea6:	7863      	ldrb	r3, [r4, #1]
 800cea8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ceaa:	d132      	bne.n	800cf12 <_svfiprintf_r+0x186>
 800ceac:	9b03      	ldr	r3, [sp, #12]
 800ceae:	1d1a      	adds	r2, r3, #4
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	9203      	str	r2, [sp, #12]
 800ceb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ceb8:	3402      	adds	r4, #2
 800ceba:	9305      	str	r3, [sp, #20]
 800cebc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cf80 <_svfiprintf_r+0x1f4>
 800cec0:	7821      	ldrb	r1, [r4, #0]
 800cec2:	2203      	movs	r2, #3
 800cec4:	4650      	mov	r0, sl
 800cec6:	f7f3 f9bb 	bl	8000240 <memchr>
 800ceca:	b138      	cbz	r0, 800cedc <_svfiprintf_r+0x150>
 800cecc:	9b04      	ldr	r3, [sp, #16]
 800cece:	eba0 000a 	sub.w	r0, r0, sl
 800ced2:	2240      	movs	r2, #64	@ 0x40
 800ced4:	4082      	lsls	r2, r0
 800ced6:	4313      	orrs	r3, r2
 800ced8:	3401      	adds	r4, #1
 800ceda:	9304      	str	r3, [sp, #16]
 800cedc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cee0:	4824      	ldr	r0, [pc, #144]	@ (800cf74 <_svfiprintf_r+0x1e8>)
 800cee2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cee6:	2206      	movs	r2, #6
 800cee8:	f7f3 f9aa 	bl	8000240 <memchr>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d036      	beq.n	800cf5e <_svfiprintf_r+0x1d2>
 800cef0:	4b21      	ldr	r3, [pc, #132]	@ (800cf78 <_svfiprintf_r+0x1ec>)
 800cef2:	bb1b      	cbnz	r3, 800cf3c <_svfiprintf_r+0x1b0>
 800cef4:	9b03      	ldr	r3, [sp, #12]
 800cef6:	3307      	adds	r3, #7
 800cef8:	f023 0307 	bic.w	r3, r3, #7
 800cefc:	3308      	adds	r3, #8
 800cefe:	9303      	str	r3, [sp, #12]
 800cf00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf02:	4433      	add	r3, r6
 800cf04:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf06:	e76a      	b.n	800cdde <_svfiprintf_r+0x52>
 800cf08:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf0c:	460c      	mov	r4, r1
 800cf0e:	2001      	movs	r0, #1
 800cf10:	e7a8      	b.n	800ce64 <_svfiprintf_r+0xd8>
 800cf12:	2300      	movs	r3, #0
 800cf14:	3401      	adds	r4, #1
 800cf16:	9305      	str	r3, [sp, #20]
 800cf18:	4619      	mov	r1, r3
 800cf1a:	f04f 0c0a 	mov.w	ip, #10
 800cf1e:	4620      	mov	r0, r4
 800cf20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf24:	3a30      	subs	r2, #48	@ 0x30
 800cf26:	2a09      	cmp	r2, #9
 800cf28:	d903      	bls.n	800cf32 <_svfiprintf_r+0x1a6>
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d0c6      	beq.n	800cebc <_svfiprintf_r+0x130>
 800cf2e:	9105      	str	r1, [sp, #20]
 800cf30:	e7c4      	b.n	800cebc <_svfiprintf_r+0x130>
 800cf32:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf36:	4604      	mov	r4, r0
 800cf38:	2301      	movs	r3, #1
 800cf3a:	e7f0      	b.n	800cf1e <_svfiprintf_r+0x192>
 800cf3c:	ab03      	add	r3, sp, #12
 800cf3e:	9300      	str	r3, [sp, #0]
 800cf40:	462a      	mov	r2, r5
 800cf42:	4b0e      	ldr	r3, [pc, #56]	@ (800cf7c <_svfiprintf_r+0x1f0>)
 800cf44:	a904      	add	r1, sp, #16
 800cf46:	4638      	mov	r0, r7
 800cf48:	f7fc fc98 	bl	800987c <_printf_float>
 800cf4c:	1c42      	adds	r2, r0, #1
 800cf4e:	4606      	mov	r6, r0
 800cf50:	d1d6      	bne.n	800cf00 <_svfiprintf_r+0x174>
 800cf52:	89ab      	ldrh	r3, [r5, #12]
 800cf54:	065b      	lsls	r3, r3, #25
 800cf56:	f53f af2d 	bmi.w	800cdb4 <_svfiprintf_r+0x28>
 800cf5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf5c:	e72c      	b.n	800cdb8 <_svfiprintf_r+0x2c>
 800cf5e:	ab03      	add	r3, sp, #12
 800cf60:	9300      	str	r3, [sp, #0]
 800cf62:	462a      	mov	r2, r5
 800cf64:	4b05      	ldr	r3, [pc, #20]	@ (800cf7c <_svfiprintf_r+0x1f0>)
 800cf66:	a904      	add	r1, sp, #16
 800cf68:	4638      	mov	r0, r7
 800cf6a:	f7fc ff1f 	bl	8009dac <_printf_i>
 800cf6e:	e7ed      	b.n	800cf4c <_svfiprintf_r+0x1c0>
 800cf70:	0800e358 	.word	0x0800e358
 800cf74:	0800e362 	.word	0x0800e362
 800cf78:	0800987d 	.word	0x0800987d
 800cf7c:	0800ccd5 	.word	0x0800ccd5
 800cf80:	0800e35e 	.word	0x0800e35e

0800cf84 <__sflush_r>:
 800cf84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf8c:	0716      	lsls	r6, r2, #28
 800cf8e:	4605      	mov	r5, r0
 800cf90:	460c      	mov	r4, r1
 800cf92:	d454      	bmi.n	800d03e <__sflush_r+0xba>
 800cf94:	684b      	ldr	r3, [r1, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	dc02      	bgt.n	800cfa0 <__sflush_r+0x1c>
 800cf9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	dd48      	ble.n	800d032 <__sflush_r+0xae>
 800cfa0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfa2:	2e00      	cmp	r6, #0
 800cfa4:	d045      	beq.n	800d032 <__sflush_r+0xae>
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cfac:	682f      	ldr	r7, [r5, #0]
 800cfae:	6a21      	ldr	r1, [r4, #32]
 800cfb0:	602b      	str	r3, [r5, #0]
 800cfb2:	d030      	beq.n	800d016 <__sflush_r+0x92>
 800cfb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cfb6:	89a3      	ldrh	r3, [r4, #12]
 800cfb8:	0759      	lsls	r1, r3, #29
 800cfba:	d505      	bpl.n	800cfc8 <__sflush_r+0x44>
 800cfbc:	6863      	ldr	r3, [r4, #4]
 800cfbe:	1ad2      	subs	r2, r2, r3
 800cfc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cfc2:	b10b      	cbz	r3, 800cfc8 <__sflush_r+0x44>
 800cfc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cfc6:	1ad2      	subs	r2, r2, r3
 800cfc8:	2300      	movs	r3, #0
 800cfca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfcc:	6a21      	ldr	r1, [r4, #32]
 800cfce:	4628      	mov	r0, r5
 800cfd0:	47b0      	blx	r6
 800cfd2:	1c43      	adds	r3, r0, #1
 800cfd4:	89a3      	ldrh	r3, [r4, #12]
 800cfd6:	d106      	bne.n	800cfe6 <__sflush_r+0x62>
 800cfd8:	6829      	ldr	r1, [r5, #0]
 800cfda:	291d      	cmp	r1, #29
 800cfdc:	d82b      	bhi.n	800d036 <__sflush_r+0xb2>
 800cfde:	4a2a      	ldr	r2, [pc, #168]	@ (800d088 <__sflush_r+0x104>)
 800cfe0:	410a      	asrs	r2, r1
 800cfe2:	07d6      	lsls	r6, r2, #31
 800cfe4:	d427      	bmi.n	800d036 <__sflush_r+0xb2>
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	6062      	str	r2, [r4, #4]
 800cfea:	04d9      	lsls	r1, r3, #19
 800cfec:	6922      	ldr	r2, [r4, #16]
 800cfee:	6022      	str	r2, [r4, #0]
 800cff0:	d504      	bpl.n	800cffc <__sflush_r+0x78>
 800cff2:	1c42      	adds	r2, r0, #1
 800cff4:	d101      	bne.n	800cffa <__sflush_r+0x76>
 800cff6:	682b      	ldr	r3, [r5, #0]
 800cff8:	b903      	cbnz	r3, 800cffc <__sflush_r+0x78>
 800cffa:	6560      	str	r0, [r4, #84]	@ 0x54
 800cffc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cffe:	602f      	str	r7, [r5, #0]
 800d000:	b1b9      	cbz	r1, 800d032 <__sflush_r+0xae>
 800d002:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d006:	4299      	cmp	r1, r3
 800d008:	d002      	beq.n	800d010 <__sflush_r+0x8c>
 800d00a:	4628      	mov	r0, r5
 800d00c:	f7fe faa8 	bl	800b560 <_free_r>
 800d010:	2300      	movs	r3, #0
 800d012:	6363      	str	r3, [r4, #52]	@ 0x34
 800d014:	e00d      	b.n	800d032 <__sflush_r+0xae>
 800d016:	2301      	movs	r3, #1
 800d018:	4628      	mov	r0, r5
 800d01a:	47b0      	blx	r6
 800d01c:	4602      	mov	r2, r0
 800d01e:	1c50      	adds	r0, r2, #1
 800d020:	d1c9      	bne.n	800cfb6 <__sflush_r+0x32>
 800d022:	682b      	ldr	r3, [r5, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d0c6      	beq.n	800cfb6 <__sflush_r+0x32>
 800d028:	2b1d      	cmp	r3, #29
 800d02a:	d001      	beq.n	800d030 <__sflush_r+0xac>
 800d02c:	2b16      	cmp	r3, #22
 800d02e:	d11e      	bne.n	800d06e <__sflush_r+0xea>
 800d030:	602f      	str	r7, [r5, #0]
 800d032:	2000      	movs	r0, #0
 800d034:	e022      	b.n	800d07c <__sflush_r+0xf8>
 800d036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d03a:	b21b      	sxth	r3, r3
 800d03c:	e01b      	b.n	800d076 <__sflush_r+0xf2>
 800d03e:	690f      	ldr	r7, [r1, #16]
 800d040:	2f00      	cmp	r7, #0
 800d042:	d0f6      	beq.n	800d032 <__sflush_r+0xae>
 800d044:	0793      	lsls	r3, r2, #30
 800d046:	680e      	ldr	r6, [r1, #0]
 800d048:	bf08      	it	eq
 800d04a:	694b      	ldreq	r3, [r1, #20]
 800d04c:	600f      	str	r7, [r1, #0]
 800d04e:	bf18      	it	ne
 800d050:	2300      	movne	r3, #0
 800d052:	eba6 0807 	sub.w	r8, r6, r7
 800d056:	608b      	str	r3, [r1, #8]
 800d058:	f1b8 0f00 	cmp.w	r8, #0
 800d05c:	dde9      	ble.n	800d032 <__sflush_r+0xae>
 800d05e:	6a21      	ldr	r1, [r4, #32]
 800d060:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d062:	4643      	mov	r3, r8
 800d064:	463a      	mov	r2, r7
 800d066:	4628      	mov	r0, r5
 800d068:	47b0      	blx	r6
 800d06a:	2800      	cmp	r0, #0
 800d06c:	dc08      	bgt.n	800d080 <__sflush_r+0xfc>
 800d06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d076:	81a3      	strh	r3, [r4, #12]
 800d078:	f04f 30ff 	mov.w	r0, #4294967295
 800d07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d080:	4407      	add	r7, r0
 800d082:	eba8 0800 	sub.w	r8, r8, r0
 800d086:	e7e7      	b.n	800d058 <__sflush_r+0xd4>
 800d088:	dfbffffe 	.word	0xdfbffffe

0800d08c <_fflush_r>:
 800d08c:	b538      	push	{r3, r4, r5, lr}
 800d08e:	690b      	ldr	r3, [r1, #16]
 800d090:	4605      	mov	r5, r0
 800d092:	460c      	mov	r4, r1
 800d094:	b913      	cbnz	r3, 800d09c <_fflush_r+0x10>
 800d096:	2500      	movs	r5, #0
 800d098:	4628      	mov	r0, r5
 800d09a:	bd38      	pop	{r3, r4, r5, pc}
 800d09c:	b118      	cbz	r0, 800d0a6 <_fflush_r+0x1a>
 800d09e:	6a03      	ldr	r3, [r0, #32]
 800d0a0:	b90b      	cbnz	r3, 800d0a6 <_fflush_r+0x1a>
 800d0a2:	f7fd fa43 	bl	800a52c <__sinit>
 800d0a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d0f3      	beq.n	800d096 <_fflush_r+0xa>
 800d0ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d0b0:	07d0      	lsls	r0, r2, #31
 800d0b2:	d404      	bmi.n	800d0be <_fflush_r+0x32>
 800d0b4:	0599      	lsls	r1, r3, #22
 800d0b6:	d402      	bmi.n	800d0be <_fflush_r+0x32>
 800d0b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0ba:	f7fd fbde 	bl	800a87a <__retarget_lock_acquire_recursive>
 800d0be:	4628      	mov	r0, r5
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	f7ff ff5f 	bl	800cf84 <__sflush_r>
 800d0c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d0c8:	07da      	lsls	r2, r3, #31
 800d0ca:	4605      	mov	r5, r0
 800d0cc:	d4e4      	bmi.n	800d098 <_fflush_r+0xc>
 800d0ce:	89a3      	ldrh	r3, [r4, #12]
 800d0d0:	059b      	lsls	r3, r3, #22
 800d0d2:	d4e1      	bmi.n	800d098 <_fflush_r+0xc>
 800d0d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0d6:	f7fd fbd1 	bl	800a87c <__retarget_lock_release_recursive>
 800d0da:	e7dd      	b.n	800d098 <_fflush_r+0xc>

0800d0dc <fiprintf>:
 800d0dc:	b40e      	push	{r1, r2, r3}
 800d0de:	b503      	push	{r0, r1, lr}
 800d0e0:	4601      	mov	r1, r0
 800d0e2:	ab03      	add	r3, sp, #12
 800d0e4:	4805      	ldr	r0, [pc, #20]	@ (800d0fc <fiprintf+0x20>)
 800d0e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0ea:	6800      	ldr	r0, [r0, #0]
 800d0ec:	9301      	str	r3, [sp, #4]
 800d0ee:	f000 fc25 	bl	800d93c <_vfiprintf_r>
 800d0f2:	b002      	add	sp, #8
 800d0f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0f8:	b003      	add	sp, #12
 800d0fa:	4770      	bx	lr
 800d0fc:	200000f8 	.word	0x200000f8

0800d100 <memmove>:
 800d100:	4288      	cmp	r0, r1
 800d102:	b510      	push	{r4, lr}
 800d104:	eb01 0402 	add.w	r4, r1, r2
 800d108:	d902      	bls.n	800d110 <memmove+0x10>
 800d10a:	4284      	cmp	r4, r0
 800d10c:	4623      	mov	r3, r4
 800d10e:	d807      	bhi.n	800d120 <memmove+0x20>
 800d110:	1e43      	subs	r3, r0, #1
 800d112:	42a1      	cmp	r1, r4
 800d114:	d008      	beq.n	800d128 <memmove+0x28>
 800d116:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d11a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d11e:	e7f8      	b.n	800d112 <memmove+0x12>
 800d120:	4402      	add	r2, r0
 800d122:	4601      	mov	r1, r0
 800d124:	428a      	cmp	r2, r1
 800d126:	d100      	bne.n	800d12a <memmove+0x2a>
 800d128:	bd10      	pop	{r4, pc}
 800d12a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d12e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d132:	e7f7      	b.n	800d124 <memmove+0x24>

0800d134 <strncmp>:
 800d134:	b510      	push	{r4, lr}
 800d136:	b16a      	cbz	r2, 800d154 <strncmp+0x20>
 800d138:	3901      	subs	r1, #1
 800d13a:	1884      	adds	r4, r0, r2
 800d13c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d140:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d144:	429a      	cmp	r2, r3
 800d146:	d103      	bne.n	800d150 <strncmp+0x1c>
 800d148:	42a0      	cmp	r0, r4
 800d14a:	d001      	beq.n	800d150 <strncmp+0x1c>
 800d14c:	2a00      	cmp	r2, #0
 800d14e:	d1f5      	bne.n	800d13c <strncmp+0x8>
 800d150:	1ad0      	subs	r0, r2, r3
 800d152:	bd10      	pop	{r4, pc}
 800d154:	4610      	mov	r0, r2
 800d156:	e7fc      	b.n	800d152 <strncmp+0x1e>

0800d158 <_sbrk_r>:
 800d158:	b538      	push	{r3, r4, r5, lr}
 800d15a:	4d06      	ldr	r5, [pc, #24]	@ (800d174 <_sbrk_r+0x1c>)
 800d15c:	2300      	movs	r3, #0
 800d15e:	4604      	mov	r4, r0
 800d160:	4608      	mov	r0, r1
 800d162:	602b      	str	r3, [r5, #0]
 800d164:	f7f4 fc52 	bl	8001a0c <_sbrk>
 800d168:	1c43      	adds	r3, r0, #1
 800d16a:	d102      	bne.n	800d172 <_sbrk_r+0x1a>
 800d16c:	682b      	ldr	r3, [r5, #0]
 800d16e:	b103      	cbz	r3, 800d172 <_sbrk_r+0x1a>
 800d170:	6023      	str	r3, [r4, #0]
 800d172:	bd38      	pop	{r3, r4, r5, pc}
 800d174:	20000818 	.word	0x20000818

0800d178 <memcpy>:
 800d178:	440a      	add	r2, r1
 800d17a:	4291      	cmp	r1, r2
 800d17c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d180:	d100      	bne.n	800d184 <memcpy+0xc>
 800d182:	4770      	bx	lr
 800d184:	b510      	push	{r4, lr}
 800d186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d18a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d18e:	4291      	cmp	r1, r2
 800d190:	d1f9      	bne.n	800d186 <memcpy+0xe>
 800d192:	bd10      	pop	{r4, pc}
 800d194:	0000      	movs	r0, r0
	...

0800d198 <nan>:
 800d198:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d1a0 <nan+0x8>
 800d19c:	4770      	bx	lr
 800d19e:	bf00      	nop
 800d1a0:	00000000 	.word	0x00000000
 800d1a4:	7ff80000 	.word	0x7ff80000

0800d1a8 <abort>:
 800d1a8:	b508      	push	{r3, lr}
 800d1aa:	2006      	movs	r0, #6
 800d1ac:	f000 fd9a 	bl	800dce4 <raise>
 800d1b0:	2001      	movs	r0, #1
 800d1b2:	f7f4 fbb3 	bl	800191c <_exit>

0800d1b6 <_calloc_r>:
 800d1b6:	b570      	push	{r4, r5, r6, lr}
 800d1b8:	fba1 5402 	umull	r5, r4, r1, r2
 800d1bc:	b93c      	cbnz	r4, 800d1ce <_calloc_r+0x18>
 800d1be:	4629      	mov	r1, r5
 800d1c0:	f7fe fa42 	bl	800b648 <_malloc_r>
 800d1c4:	4606      	mov	r6, r0
 800d1c6:	b928      	cbnz	r0, 800d1d4 <_calloc_r+0x1e>
 800d1c8:	2600      	movs	r6, #0
 800d1ca:	4630      	mov	r0, r6
 800d1cc:	bd70      	pop	{r4, r5, r6, pc}
 800d1ce:	220c      	movs	r2, #12
 800d1d0:	6002      	str	r2, [r0, #0]
 800d1d2:	e7f9      	b.n	800d1c8 <_calloc_r+0x12>
 800d1d4:	462a      	mov	r2, r5
 800d1d6:	4621      	mov	r1, r4
 800d1d8:	f7fd fa75 	bl	800a6c6 <memset>
 800d1dc:	e7f5      	b.n	800d1ca <_calloc_r+0x14>

0800d1de <rshift>:
 800d1de:	6903      	ldr	r3, [r0, #16]
 800d1e0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d1e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1e8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d1ec:	f100 0414 	add.w	r4, r0, #20
 800d1f0:	dd45      	ble.n	800d27e <rshift+0xa0>
 800d1f2:	f011 011f 	ands.w	r1, r1, #31
 800d1f6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d1fa:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d1fe:	d10c      	bne.n	800d21a <rshift+0x3c>
 800d200:	f100 0710 	add.w	r7, r0, #16
 800d204:	4629      	mov	r1, r5
 800d206:	42b1      	cmp	r1, r6
 800d208:	d334      	bcc.n	800d274 <rshift+0x96>
 800d20a:	1a9b      	subs	r3, r3, r2
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	1eea      	subs	r2, r5, #3
 800d210:	4296      	cmp	r6, r2
 800d212:	bf38      	it	cc
 800d214:	2300      	movcc	r3, #0
 800d216:	4423      	add	r3, r4
 800d218:	e015      	b.n	800d246 <rshift+0x68>
 800d21a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d21e:	f1c1 0820 	rsb	r8, r1, #32
 800d222:	40cf      	lsrs	r7, r1
 800d224:	f105 0e04 	add.w	lr, r5, #4
 800d228:	46a1      	mov	r9, r4
 800d22a:	4576      	cmp	r6, lr
 800d22c:	46f4      	mov	ip, lr
 800d22e:	d815      	bhi.n	800d25c <rshift+0x7e>
 800d230:	1a9a      	subs	r2, r3, r2
 800d232:	0092      	lsls	r2, r2, #2
 800d234:	3a04      	subs	r2, #4
 800d236:	3501      	adds	r5, #1
 800d238:	42ae      	cmp	r6, r5
 800d23a:	bf38      	it	cc
 800d23c:	2200      	movcc	r2, #0
 800d23e:	18a3      	adds	r3, r4, r2
 800d240:	50a7      	str	r7, [r4, r2]
 800d242:	b107      	cbz	r7, 800d246 <rshift+0x68>
 800d244:	3304      	adds	r3, #4
 800d246:	1b1a      	subs	r2, r3, r4
 800d248:	42a3      	cmp	r3, r4
 800d24a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d24e:	bf08      	it	eq
 800d250:	2300      	moveq	r3, #0
 800d252:	6102      	str	r2, [r0, #16]
 800d254:	bf08      	it	eq
 800d256:	6143      	streq	r3, [r0, #20]
 800d258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d25c:	f8dc c000 	ldr.w	ip, [ip]
 800d260:	fa0c fc08 	lsl.w	ip, ip, r8
 800d264:	ea4c 0707 	orr.w	r7, ip, r7
 800d268:	f849 7b04 	str.w	r7, [r9], #4
 800d26c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d270:	40cf      	lsrs	r7, r1
 800d272:	e7da      	b.n	800d22a <rshift+0x4c>
 800d274:	f851 cb04 	ldr.w	ip, [r1], #4
 800d278:	f847 cf04 	str.w	ip, [r7, #4]!
 800d27c:	e7c3      	b.n	800d206 <rshift+0x28>
 800d27e:	4623      	mov	r3, r4
 800d280:	e7e1      	b.n	800d246 <rshift+0x68>

0800d282 <__hexdig_fun>:
 800d282:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d286:	2b09      	cmp	r3, #9
 800d288:	d802      	bhi.n	800d290 <__hexdig_fun+0xe>
 800d28a:	3820      	subs	r0, #32
 800d28c:	b2c0      	uxtb	r0, r0
 800d28e:	4770      	bx	lr
 800d290:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d294:	2b05      	cmp	r3, #5
 800d296:	d801      	bhi.n	800d29c <__hexdig_fun+0x1a>
 800d298:	3847      	subs	r0, #71	@ 0x47
 800d29a:	e7f7      	b.n	800d28c <__hexdig_fun+0xa>
 800d29c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d2a0:	2b05      	cmp	r3, #5
 800d2a2:	d801      	bhi.n	800d2a8 <__hexdig_fun+0x26>
 800d2a4:	3827      	subs	r0, #39	@ 0x27
 800d2a6:	e7f1      	b.n	800d28c <__hexdig_fun+0xa>
 800d2a8:	2000      	movs	r0, #0
 800d2aa:	4770      	bx	lr

0800d2ac <__gethex>:
 800d2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b0:	b085      	sub	sp, #20
 800d2b2:	468a      	mov	sl, r1
 800d2b4:	9302      	str	r3, [sp, #8]
 800d2b6:	680b      	ldr	r3, [r1, #0]
 800d2b8:	9001      	str	r0, [sp, #4]
 800d2ba:	4690      	mov	r8, r2
 800d2bc:	1c9c      	adds	r4, r3, #2
 800d2be:	46a1      	mov	r9, r4
 800d2c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d2c4:	2830      	cmp	r0, #48	@ 0x30
 800d2c6:	d0fa      	beq.n	800d2be <__gethex+0x12>
 800d2c8:	eba9 0303 	sub.w	r3, r9, r3
 800d2cc:	f1a3 0b02 	sub.w	fp, r3, #2
 800d2d0:	f7ff ffd7 	bl	800d282 <__hexdig_fun>
 800d2d4:	4605      	mov	r5, r0
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	d168      	bne.n	800d3ac <__gethex+0x100>
 800d2da:	49a0      	ldr	r1, [pc, #640]	@ (800d55c <__gethex+0x2b0>)
 800d2dc:	2201      	movs	r2, #1
 800d2de:	4648      	mov	r0, r9
 800d2e0:	f7ff ff28 	bl	800d134 <strncmp>
 800d2e4:	4607      	mov	r7, r0
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	d167      	bne.n	800d3ba <__gethex+0x10e>
 800d2ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d2ee:	4626      	mov	r6, r4
 800d2f0:	f7ff ffc7 	bl	800d282 <__hexdig_fun>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	d062      	beq.n	800d3be <__gethex+0x112>
 800d2f8:	4623      	mov	r3, r4
 800d2fa:	7818      	ldrb	r0, [r3, #0]
 800d2fc:	2830      	cmp	r0, #48	@ 0x30
 800d2fe:	4699      	mov	r9, r3
 800d300:	f103 0301 	add.w	r3, r3, #1
 800d304:	d0f9      	beq.n	800d2fa <__gethex+0x4e>
 800d306:	f7ff ffbc 	bl	800d282 <__hexdig_fun>
 800d30a:	fab0 f580 	clz	r5, r0
 800d30e:	096d      	lsrs	r5, r5, #5
 800d310:	f04f 0b01 	mov.w	fp, #1
 800d314:	464a      	mov	r2, r9
 800d316:	4616      	mov	r6, r2
 800d318:	3201      	adds	r2, #1
 800d31a:	7830      	ldrb	r0, [r6, #0]
 800d31c:	f7ff ffb1 	bl	800d282 <__hexdig_fun>
 800d320:	2800      	cmp	r0, #0
 800d322:	d1f8      	bne.n	800d316 <__gethex+0x6a>
 800d324:	498d      	ldr	r1, [pc, #564]	@ (800d55c <__gethex+0x2b0>)
 800d326:	2201      	movs	r2, #1
 800d328:	4630      	mov	r0, r6
 800d32a:	f7ff ff03 	bl	800d134 <strncmp>
 800d32e:	2800      	cmp	r0, #0
 800d330:	d13f      	bne.n	800d3b2 <__gethex+0x106>
 800d332:	b944      	cbnz	r4, 800d346 <__gethex+0x9a>
 800d334:	1c74      	adds	r4, r6, #1
 800d336:	4622      	mov	r2, r4
 800d338:	4616      	mov	r6, r2
 800d33a:	3201      	adds	r2, #1
 800d33c:	7830      	ldrb	r0, [r6, #0]
 800d33e:	f7ff ffa0 	bl	800d282 <__hexdig_fun>
 800d342:	2800      	cmp	r0, #0
 800d344:	d1f8      	bne.n	800d338 <__gethex+0x8c>
 800d346:	1ba4      	subs	r4, r4, r6
 800d348:	00a7      	lsls	r7, r4, #2
 800d34a:	7833      	ldrb	r3, [r6, #0]
 800d34c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d350:	2b50      	cmp	r3, #80	@ 0x50
 800d352:	d13e      	bne.n	800d3d2 <__gethex+0x126>
 800d354:	7873      	ldrb	r3, [r6, #1]
 800d356:	2b2b      	cmp	r3, #43	@ 0x2b
 800d358:	d033      	beq.n	800d3c2 <__gethex+0x116>
 800d35a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d35c:	d034      	beq.n	800d3c8 <__gethex+0x11c>
 800d35e:	1c71      	adds	r1, r6, #1
 800d360:	2400      	movs	r4, #0
 800d362:	7808      	ldrb	r0, [r1, #0]
 800d364:	f7ff ff8d 	bl	800d282 <__hexdig_fun>
 800d368:	1e43      	subs	r3, r0, #1
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	2b18      	cmp	r3, #24
 800d36e:	d830      	bhi.n	800d3d2 <__gethex+0x126>
 800d370:	f1a0 0210 	sub.w	r2, r0, #16
 800d374:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d378:	f7ff ff83 	bl	800d282 <__hexdig_fun>
 800d37c:	f100 3cff 	add.w	ip, r0, #4294967295
 800d380:	fa5f fc8c 	uxtb.w	ip, ip
 800d384:	f1bc 0f18 	cmp.w	ip, #24
 800d388:	f04f 030a 	mov.w	r3, #10
 800d38c:	d91e      	bls.n	800d3cc <__gethex+0x120>
 800d38e:	b104      	cbz	r4, 800d392 <__gethex+0xe6>
 800d390:	4252      	negs	r2, r2
 800d392:	4417      	add	r7, r2
 800d394:	f8ca 1000 	str.w	r1, [sl]
 800d398:	b1ed      	cbz	r5, 800d3d6 <__gethex+0x12a>
 800d39a:	f1bb 0f00 	cmp.w	fp, #0
 800d39e:	bf0c      	ite	eq
 800d3a0:	2506      	moveq	r5, #6
 800d3a2:	2500      	movne	r5, #0
 800d3a4:	4628      	mov	r0, r5
 800d3a6:	b005      	add	sp, #20
 800d3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ac:	2500      	movs	r5, #0
 800d3ae:	462c      	mov	r4, r5
 800d3b0:	e7b0      	b.n	800d314 <__gethex+0x68>
 800d3b2:	2c00      	cmp	r4, #0
 800d3b4:	d1c7      	bne.n	800d346 <__gethex+0x9a>
 800d3b6:	4627      	mov	r7, r4
 800d3b8:	e7c7      	b.n	800d34a <__gethex+0x9e>
 800d3ba:	464e      	mov	r6, r9
 800d3bc:	462f      	mov	r7, r5
 800d3be:	2501      	movs	r5, #1
 800d3c0:	e7c3      	b.n	800d34a <__gethex+0x9e>
 800d3c2:	2400      	movs	r4, #0
 800d3c4:	1cb1      	adds	r1, r6, #2
 800d3c6:	e7cc      	b.n	800d362 <__gethex+0xb6>
 800d3c8:	2401      	movs	r4, #1
 800d3ca:	e7fb      	b.n	800d3c4 <__gethex+0x118>
 800d3cc:	fb03 0002 	mla	r0, r3, r2, r0
 800d3d0:	e7ce      	b.n	800d370 <__gethex+0xc4>
 800d3d2:	4631      	mov	r1, r6
 800d3d4:	e7de      	b.n	800d394 <__gethex+0xe8>
 800d3d6:	eba6 0309 	sub.w	r3, r6, r9
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	4629      	mov	r1, r5
 800d3de:	2b07      	cmp	r3, #7
 800d3e0:	dc0a      	bgt.n	800d3f8 <__gethex+0x14c>
 800d3e2:	9801      	ldr	r0, [sp, #4]
 800d3e4:	f7fe f9bc 	bl	800b760 <_Balloc>
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	b940      	cbnz	r0, 800d3fe <__gethex+0x152>
 800d3ec:	4b5c      	ldr	r3, [pc, #368]	@ (800d560 <__gethex+0x2b4>)
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	21e4      	movs	r1, #228	@ 0xe4
 800d3f2:	485c      	ldr	r0, [pc, #368]	@ (800d564 <__gethex+0x2b8>)
 800d3f4:	f7fd fa4a 	bl	800a88c <__assert_func>
 800d3f8:	3101      	adds	r1, #1
 800d3fa:	105b      	asrs	r3, r3, #1
 800d3fc:	e7ef      	b.n	800d3de <__gethex+0x132>
 800d3fe:	f100 0a14 	add.w	sl, r0, #20
 800d402:	2300      	movs	r3, #0
 800d404:	4655      	mov	r5, sl
 800d406:	469b      	mov	fp, r3
 800d408:	45b1      	cmp	r9, r6
 800d40a:	d337      	bcc.n	800d47c <__gethex+0x1d0>
 800d40c:	f845 bb04 	str.w	fp, [r5], #4
 800d410:	eba5 050a 	sub.w	r5, r5, sl
 800d414:	10ad      	asrs	r5, r5, #2
 800d416:	6125      	str	r5, [r4, #16]
 800d418:	4658      	mov	r0, fp
 800d41a:	f7fe fa93 	bl	800b944 <__hi0bits>
 800d41e:	016d      	lsls	r5, r5, #5
 800d420:	f8d8 6000 	ldr.w	r6, [r8]
 800d424:	1a2d      	subs	r5, r5, r0
 800d426:	42b5      	cmp	r5, r6
 800d428:	dd54      	ble.n	800d4d4 <__gethex+0x228>
 800d42a:	1bad      	subs	r5, r5, r6
 800d42c:	4629      	mov	r1, r5
 800d42e:	4620      	mov	r0, r4
 800d430:	f7fe fe27 	bl	800c082 <__any_on>
 800d434:	4681      	mov	r9, r0
 800d436:	b178      	cbz	r0, 800d458 <__gethex+0x1ac>
 800d438:	1e6b      	subs	r3, r5, #1
 800d43a:	1159      	asrs	r1, r3, #5
 800d43c:	f003 021f 	and.w	r2, r3, #31
 800d440:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d444:	f04f 0901 	mov.w	r9, #1
 800d448:	fa09 f202 	lsl.w	r2, r9, r2
 800d44c:	420a      	tst	r2, r1
 800d44e:	d003      	beq.n	800d458 <__gethex+0x1ac>
 800d450:	454b      	cmp	r3, r9
 800d452:	dc36      	bgt.n	800d4c2 <__gethex+0x216>
 800d454:	f04f 0902 	mov.w	r9, #2
 800d458:	4629      	mov	r1, r5
 800d45a:	4620      	mov	r0, r4
 800d45c:	f7ff febf 	bl	800d1de <rshift>
 800d460:	442f      	add	r7, r5
 800d462:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d466:	42bb      	cmp	r3, r7
 800d468:	da42      	bge.n	800d4f0 <__gethex+0x244>
 800d46a:	9801      	ldr	r0, [sp, #4]
 800d46c:	4621      	mov	r1, r4
 800d46e:	f7fe f9b7 	bl	800b7e0 <_Bfree>
 800d472:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d474:	2300      	movs	r3, #0
 800d476:	6013      	str	r3, [r2, #0]
 800d478:	25a3      	movs	r5, #163	@ 0xa3
 800d47a:	e793      	b.n	800d3a4 <__gethex+0xf8>
 800d47c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d480:	2a2e      	cmp	r2, #46	@ 0x2e
 800d482:	d012      	beq.n	800d4aa <__gethex+0x1fe>
 800d484:	2b20      	cmp	r3, #32
 800d486:	d104      	bne.n	800d492 <__gethex+0x1e6>
 800d488:	f845 bb04 	str.w	fp, [r5], #4
 800d48c:	f04f 0b00 	mov.w	fp, #0
 800d490:	465b      	mov	r3, fp
 800d492:	7830      	ldrb	r0, [r6, #0]
 800d494:	9303      	str	r3, [sp, #12]
 800d496:	f7ff fef4 	bl	800d282 <__hexdig_fun>
 800d49a:	9b03      	ldr	r3, [sp, #12]
 800d49c:	f000 000f 	and.w	r0, r0, #15
 800d4a0:	4098      	lsls	r0, r3
 800d4a2:	ea4b 0b00 	orr.w	fp, fp, r0
 800d4a6:	3304      	adds	r3, #4
 800d4a8:	e7ae      	b.n	800d408 <__gethex+0x15c>
 800d4aa:	45b1      	cmp	r9, r6
 800d4ac:	d8ea      	bhi.n	800d484 <__gethex+0x1d8>
 800d4ae:	492b      	ldr	r1, [pc, #172]	@ (800d55c <__gethex+0x2b0>)
 800d4b0:	9303      	str	r3, [sp, #12]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	4630      	mov	r0, r6
 800d4b6:	f7ff fe3d 	bl	800d134 <strncmp>
 800d4ba:	9b03      	ldr	r3, [sp, #12]
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	d1e1      	bne.n	800d484 <__gethex+0x1d8>
 800d4c0:	e7a2      	b.n	800d408 <__gethex+0x15c>
 800d4c2:	1ea9      	subs	r1, r5, #2
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f7fe fddc 	bl	800c082 <__any_on>
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d0c2      	beq.n	800d454 <__gethex+0x1a8>
 800d4ce:	f04f 0903 	mov.w	r9, #3
 800d4d2:	e7c1      	b.n	800d458 <__gethex+0x1ac>
 800d4d4:	da09      	bge.n	800d4ea <__gethex+0x23e>
 800d4d6:	1b75      	subs	r5, r6, r5
 800d4d8:	4621      	mov	r1, r4
 800d4da:	9801      	ldr	r0, [sp, #4]
 800d4dc:	462a      	mov	r2, r5
 800d4de:	f7fe fb97 	bl	800bc10 <__lshift>
 800d4e2:	1b7f      	subs	r7, r7, r5
 800d4e4:	4604      	mov	r4, r0
 800d4e6:	f100 0a14 	add.w	sl, r0, #20
 800d4ea:	f04f 0900 	mov.w	r9, #0
 800d4ee:	e7b8      	b.n	800d462 <__gethex+0x1b6>
 800d4f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d4f4:	42bd      	cmp	r5, r7
 800d4f6:	dd6f      	ble.n	800d5d8 <__gethex+0x32c>
 800d4f8:	1bed      	subs	r5, r5, r7
 800d4fa:	42ae      	cmp	r6, r5
 800d4fc:	dc34      	bgt.n	800d568 <__gethex+0x2bc>
 800d4fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d502:	2b02      	cmp	r3, #2
 800d504:	d022      	beq.n	800d54c <__gethex+0x2a0>
 800d506:	2b03      	cmp	r3, #3
 800d508:	d024      	beq.n	800d554 <__gethex+0x2a8>
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	d115      	bne.n	800d53a <__gethex+0x28e>
 800d50e:	42ae      	cmp	r6, r5
 800d510:	d113      	bne.n	800d53a <__gethex+0x28e>
 800d512:	2e01      	cmp	r6, #1
 800d514:	d10b      	bne.n	800d52e <__gethex+0x282>
 800d516:	9a02      	ldr	r2, [sp, #8]
 800d518:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d51c:	6013      	str	r3, [r2, #0]
 800d51e:	2301      	movs	r3, #1
 800d520:	6123      	str	r3, [r4, #16]
 800d522:	f8ca 3000 	str.w	r3, [sl]
 800d526:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d528:	2562      	movs	r5, #98	@ 0x62
 800d52a:	601c      	str	r4, [r3, #0]
 800d52c:	e73a      	b.n	800d3a4 <__gethex+0xf8>
 800d52e:	1e71      	subs	r1, r6, #1
 800d530:	4620      	mov	r0, r4
 800d532:	f7fe fda6 	bl	800c082 <__any_on>
 800d536:	2800      	cmp	r0, #0
 800d538:	d1ed      	bne.n	800d516 <__gethex+0x26a>
 800d53a:	9801      	ldr	r0, [sp, #4]
 800d53c:	4621      	mov	r1, r4
 800d53e:	f7fe f94f 	bl	800b7e0 <_Bfree>
 800d542:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d544:	2300      	movs	r3, #0
 800d546:	6013      	str	r3, [r2, #0]
 800d548:	2550      	movs	r5, #80	@ 0x50
 800d54a:	e72b      	b.n	800d3a4 <__gethex+0xf8>
 800d54c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d1f3      	bne.n	800d53a <__gethex+0x28e>
 800d552:	e7e0      	b.n	800d516 <__gethex+0x26a>
 800d554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1dd      	bne.n	800d516 <__gethex+0x26a>
 800d55a:	e7ee      	b.n	800d53a <__gethex+0x28e>
 800d55c:	0800e300 	.word	0x0800e300
 800d560:	0800e194 	.word	0x0800e194
 800d564:	0800e371 	.word	0x0800e371
 800d568:	1e6f      	subs	r7, r5, #1
 800d56a:	f1b9 0f00 	cmp.w	r9, #0
 800d56e:	d130      	bne.n	800d5d2 <__gethex+0x326>
 800d570:	b127      	cbz	r7, 800d57c <__gethex+0x2d0>
 800d572:	4639      	mov	r1, r7
 800d574:	4620      	mov	r0, r4
 800d576:	f7fe fd84 	bl	800c082 <__any_on>
 800d57a:	4681      	mov	r9, r0
 800d57c:	117a      	asrs	r2, r7, #5
 800d57e:	2301      	movs	r3, #1
 800d580:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d584:	f007 071f 	and.w	r7, r7, #31
 800d588:	40bb      	lsls	r3, r7
 800d58a:	4213      	tst	r3, r2
 800d58c:	4629      	mov	r1, r5
 800d58e:	4620      	mov	r0, r4
 800d590:	bf18      	it	ne
 800d592:	f049 0902 	orrne.w	r9, r9, #2
 800d596:	f7ff fe22 	bl	800d1de <rshift>
 800d59a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d59e:	1b76      	subs	r6, r6, r5
 800d5a0:	2502      	movs	r5, #2
 800d5a2:	f1b9 0f00 	cmp.w	r9, #0
 800d5a6:	d047      	beq.n	800d638 <__gethex+0x38c>
 800d5a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d5ac:	2b02      	cmp	r3, #2
 800d5ae:	d015      	beq.n	800d5dc <__gethex+0x330>
 800d5b0:	2b03      	cmp	r3, #3
 800d5b2:	d017      	beq.n	800d5e4 <__gethex+0x338>
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d109      	bne.n	800d5cc <__gethex+0x320>
 800d5b8:	f019 0f02 	tst.w	r9, #2
 800d5bc:	d006      	beq.n	800d5cc <__gethex+0x320>
 800d5be:	f8da 3000 	ldr.w	r3, [sl]
 800d5c2:	ea49 0903 	orr.w	r9, r9, r3
 800d5c6:	f019 0f01 	tst.w	r9, #1
 800d5ca:	d10e      	bne.n	800d5ea <__gethex+0x33e>
 800d5cc:	f045 0510 	orr.w	r5, r5, #16
 800d5d0:	e032      	b.n	800d638 <__gethex+0x38c>
 800d5d2:	f04f 0901 	mov.w	r9, #1
 800d5d6:	e7d1      	b.n	800d57c <__gethex+0x2d0>
 800d5d8:	2501      	movs	r5, #1
 800d5da:	e7e2      	b.n	800d5a2 <__gethex+0x2f6>
 800d5dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5de:	f1c3 0301 	rsb	r3, r3, #1
 800d5e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d5e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d0f0      	beq.n	800d5cc <__gethex+0x320>
 800d5ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d5ee:	f104 0314 	add.w	r3, r4, #20
 800d5f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d5f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d5fa:	f04f 0c00 	mov.w	ip, #0
 800d5fe:	4618      	mov	r0, r3
 800d600:	f853 2b04 	ldr.w	r2, [r3], #4
 800d604:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d608:	d01b      	beq.n	800d642 <__gethex+0x396>
 800d60a:	3201      	adds	r2, #1
 800d60c:	6002      	str	r2, [r0, #0]
 800d60e:	2d02      	cmp	r5, #2
 800d610:	f104 0314 	add.w	r3, r4, #20
 800d614:	d13c      	bne.n	800d690 <__gethex+0x3e4>
 800d616:	f8d8 2000 	ldr.w	r2, [r8]
 800d61a:	3a01      	subs	r2, #1
 800d61c:	42b2      	cmp	r2, r6
 800d61e:	d109      	bne.n	800d634 <__gethex+0x388>
 800d620:	1171      	asrs	r1, r6, #5
 800d622:	2201      	movs	r2, #1
 800d624:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d628:	f006 061f 	and.w	r6, r6, #31
 800d62c:	fa02 f606 	lsl.w	r6, r2, r6
 800d630:	421e      	tst	r6, r3
 800d632:	d13a      	bne.n	800d6aa <__gethex+0x3fe>
 800d634:	f045 0520 	orr.w	r5, r5, #32
 800d638:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d63a:	601c      	str	r4, [r3, #0]
 800d63c:	9b02      	ldr	r3, [sp, #8]
 800d63e:	601f      	str	r7, [r3, #0]
 800d640:	e6b0      	b.n	800d3a4 <__gethex+0xf8>
 800d642:	4299      	cmp	r1, r3
 800d644:	f843 cc04 	str.w	ip, [r3, #-4]
 800d648:	d8d9      	bhi.n	800d5fe <__gethex+0x352>
 800d64a:	68a3      	ldr	r3, [r4, #8]
 800d64c:	459b      	cmp	fp, r3
 800d64e:	db17      	blt.n	800d680 <__gethex+0x3d4>
 800d650:	6861      	ldr	r1, [r4, #4]
 800d652:	9801      	ldr	r0, [sp, #4]
 800d654:	3101      	adds	r1, #1
 800d656:	f7fe f883 	bl	800b760 <_Balloc>
 800d65a:	4681      	mov	r9, r0
 800d65c:	b918      	cbnz	r0, 800d666 <__gethex+0x3ba>
 800d65e:	4b1a      	ldr	r3, [pc, #104]	@ (800d6c8 <__gethex+0x41c>)
 800d660:	4602      	mov	r2, r0
 800d662:	2184      	movs	r1, #132	@ 0x84
 800d664:	e6c5      	b.n	800d3f2 <__gethex+0x146>
 800d666:	6922      	ldr	r2, [r4, #16]
 800d668:	3202      	adds	r2, #2
 800d66a:	f104 010c 	add.w	r1, r4, #12
 800d66e:	0092      	lsls	r2, r2, #2
 800d670:	300c      	adds	r0, #12
 800d672:	f7ff fd81 	bl	800d178 <memcpy>
 800d676:	4621      	mov	r1, r4
 800d678:	9801      	ldr	r0, [sp, #4]
 800d67a:	f7fe f8b1 	bl	800b7e0 <_Bfree>
 800d67e:	464c      	mov	r4, r9
 800d680:	6923      	ldr	r3, [r4, #16]
 800d682:	1c5a      	adds	r2, r3, #1
 800d684:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d688:	6122      	str	r2, [r4, #16]
 800d68a:	2201      	movs	r2, #1
 800d68c:	615a      	str	r2, [r3, #20]
 800d68e:	e7be      	b.n	800d60e <__gethex+0x362>
 800d690:	6922      	ldr	r2, [r4, #16]
 800d692:	455a      	cmp	r2, fp
 800d694:	dd0b      	ble.n	800d6ae <__gethex+0x402>
 800d696:	2101      	movs	r1, #1
 800d698:	4620      	mov	r0, r4
 800d69a:	f7ff fda0 	bl	800d1de <rshift>
 800d69e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d6a2:	3701      	adds	r7, #1
 800d6a4:	42bb      	cmp	r3, r7
 800d6a6:	f6ff aee0 	blt.w	800d46a <__gethex+0x1be>
 800d6aa:	2501      	movs	r5, #1
 800d6ac:	e7c2      	b.n	800d634 <__gethex+0x388>
 800d6ae:	f016 061f 	ands.w	r6, r6, #31
 800d6b2:	d0fa      	beq.n	800d6aa <__gethex+0x3fe>
 800d6b4:	4453      	add	r3, sl
 800d6b6:	f1c6 0620 	rsb	r6, r6, #32
 800d6ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d6be:	f7fe f941 	bl	800b944 <__hi0bits>
 800d6c2:	42b0      	cmp	r0, r6
 800d6c4:	dbe7      	blt.n	800d696 <__gethex+0x3ea>
 800d6c6:	e7f0      	b.n	800d6aa <__gethex+0x3fe>
 800d6c8:	0800e194 	.word	0x0800e194

0800d6cc <L_shift>:
 800d6cc:	f1c2 0208 	rsb	r2, r2, #8
 800d6d0:	0092      	lsls	r2, r2, #2
 800d6d2:	b570      	push	{r4, r5, r6, lr}
 800d6d4:	f1c2 0620 	rsb	r6, r2, #32
 800d6d8:	6843      	ldr	r3, [r0, #4]
 800d6da:	6804      	ldr	r4, [r0, #0]
 800d6dc:	fa03 f506 	lsl.w	r5, r3, r6
 800d6e0:	432c      	orrs	r4, r5
 800d6e2:	40d3      	lsrs	r3, r2
 800d6e4:	6004      	str	r4, [r0, #0]
 800d6e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d6ea:	4288      	cmp	r0, r1
 800d6ec:	d3f4      	bcc.n	800d6d8 <L_shift+0xc>
 800d6ee:	bd70      	pop	{r4, r5, r6, pc}

0800d6f0 <__match>:
 800d6f0:	b530      	push	{r4, r5, lr}
 800d6f2:	6803      	ldr	r3, [r0, #0]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6fa:	b914      	cbnz	r4, 800d702 <__match+0x12>
 800d6fc:	6003      	str	r3, [r0, #0]
 800d6fe:	2001      	movs	r0, #1
 800d700:	bd30      	pop	{r4, r5, pc}
 800d702:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d706:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d70a:	2d19      	cmp	r5, #25
 800d70c:	bf98      	it	ls
 800d70e:	3220      	addls	r2, #32
 800d710:	42a2      	cmp	r2, r4
 800d712:	d0f0      	beq.n	800d6f6 <__match+0x6>
 800d714:	2000      	movs	r0, #0
 800d716:	e7f3      	b.n	800d700 <__match+0x10>

0800d718 <__hexnan>:
 800d718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d71c:	680b      	ldr	r3, [r1, #0]
 800d71e:	6801      	ldr	r1, [r0, #0]
 800d720:	115e      	asrs	r6, r3, #5
 800d722:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d726:	f013 031f 	ands.w	r3, r3, #31
 800d72a:	b087      	sub	sp, #28
 800d72c:	bf18      	it	ne
 800d72e:	3604      	addne	r6, #4
 800d730:	2500      	movs	r5, #0
 800d732:	1f37      	subs	r7, r6, #4
 800d734:	4682      	mov	sl, r0
 800d736:	4690      	mov	r8, r2
 800d738:	9301      	str	r3, [sp, #4]
 800d73a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d73e:	46b9      	mov	r9, r7
 800d740:	463c      	mov	r4, r7
 800d742:	9502      	str	r5, [sp, #8]
 800d744:	46ab      	mov	fp, r5
 800d746:	784a      	ldrb	r2, [r1, #1]
 800d748:	1c4b      	adds	r3, r1, #1
 800d74a:	9303      	str	r3, [sp, #12]
 800d74c:	b342      	cbz	r2, 800d7a0 <__hexnan+0x88>
 800d74e:	4610      	mov	r0, r2
 800d750:	9105      	str	r1, [sp, #20]
 800d752:	9204      	str	r2, [sp, #16]
 800d754:	f7ff fd95 	bl	800d282 <__hexdig_fun>
 800d758:	2800      	cmp	r0, #0
 800d75a:	d151      	bne.n	800d800 <__hexnan+0xe8>
 800d75c:	9a04      	ldr	r2, [sp, #16]
 800d75e:	9905      	ldr	r1, [sp, #20]
 800d760:	2a20      	cmp	r2, #32
 800d762:	d818      	bhi.n	800d796 <__hexnan+0x7e>
 800d764:	9b02      	ldr	r3, [sp, #8]
 800d766:	459b      	cmp	fp, r3
 800d768:	dd13      	ble.n	800d792 <__hexnan+0x7a>
 800d76a:	454c      	cmp	r4, r9
 800d76c:	d206      	bcs.n	800d77c <__hexnan+0x64>
 800d76e:	2d07      	cmp	r5, #7
 800d770:	dc04      	bgt.n	800d77c <__hexnan+0x64>
 800d772:	462a      	mov	r2, r5
 800d774:	4649      	mov	r1, r9
 800d776:	4620      	mov	r0, r4
 800d778:	f7ff ffa8 	bl	800d6cc <L_shift>
 800d77c:	4544      	cmp	r4, r8
 800d77e:	d952      	bls.n	800d826 <__hexnan+0x10e>
 800d780:	2300      	movs	r3, #0
 800d782:	f1a4 0904 	sub.w	r9, r4, #4
 800d786:	f844 3c04 	str.w	r3, [r4, #-4]
 800d78a:	f8cd b008 	str.w	fp, [sp, #8]
 800d78e:	464c      	mov	r4, r9
 800d790:	461d      	mov	r5, r3
 800d792:	9903      	ldr	r1, [sp, #12]
 800d794:	e7d7      	b.n	800d746 <__hexnan+0x2e>
 800d796:	2a29      	cmp	r2, #41	@ 0x29
 800d798:	d157      	bne.n	800d84a <__hexnan+0x132>
 800d79a:	3102      	adds	r1, #2
 800d79c:	f8ca 1000 	str.w	r1, [sl]
 800d7a0:	f1bb 0f00 	cmp.w	fp, #0
 800d7a4:	d051      	beq.n	800d84a <__hexnan+0x132>
 800d7a6:	454c      	cmp	r4, r9
 800d7a8:	d206      	bcs.n	800d7b8 <__hexnan+0xa0>
 800d7aa:	2d07      	cmp	r5, #7
 800d7ac:	dc04      	bgt.n	800d7b8 <__hexnan+0xa0>
 800d7ae:	462a      	mov	r2, r5
 800d7b0:	4649      	mov	r1, r9
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	f7ff ff8a 	bl	800d6cc <L_shift>
 800d7b8:	4544      	cmp	r4, r8
 800d7ba:	d936      	bls.n	800d82a <__hexnan+0x112>
 800d7bc:	f1a8 0204 	sub.w	r2, r8, #4
 800d7c0:	4623      	mov	r3, r4
 800d7c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800d7c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800d7ca:	429f      	cmp	r7, r3
 800d7cc:	d2f9      	bcs.n	800d7c2 <__hexnan+0xaa>
 800d7ce:	1b3b      	subs	r3, r7, r4
 800d7d0:	f023 0303 	bic.w	r3, r3, #3
 800d7d4:	3304      	adds	r3, #4
 800d7d6:	3401      	adds	r4, #1
 800d7d8:	3e03      	subs	r6, #3
 800d7da:	42b4      	cmp	r4, r6
 800d7dc:	bf88      	it	hi
 800d7de:	2304      	movhi	r3, #4
 800d7e0:	4443      	add	r3, r8
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f843 2b04 	str.w	r2, [r3], #4
 800d7e8:	429f      	cmp	r7, r3
 800d7ea:	d2fb      	bcs.n	800d7e4 <__hexnan+0xcc>
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	b91b      	cbnz	r3, 800d7f8 <__hexnan+0xe0>
 800d7f0:	4547      	cmp	r7, r8
 800d7f2:	d128      	bne.n	800d846 <__hexnan+0x12e>
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	603b      	str	r3, [r7, #0]
 800d7f8:	2005      	movs	r0, #5
 800d7fa:	b007      	add	sp, #28
 800d7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d800:	3501      	adds	r5, #1
 800d802:	2d08      	cmp	r5, #8
 800d804:	f10b 0b01 	add.w	fp, fp, #1
 800d808:	dd06      	ble.n	800d818 <__hexnan+0x100>
 800d80a:	4544      	cmp	r4, r8
 800d80c:	d9c1      	bls.n	800d792 <__hexnan+0x7a>
 800d80e:	2300      	movs	r3, #0
 800d810:	f844 3c04 	str.w	r3, [r4, #-4]
 800d814:	2501      	movs	r5, #1
 800d816:	3c04      	subs	r4, #4
 800d818:	6822      	ldr	r2, [r4, #0]
 800d81a:	f000 000f 	and.w	r0, r0, #15
 800d81e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d822:	6020      	str	r0, [r4, #0]
 800d824:	e7b5      	b.n	800d792 <__hexnan+0x7a>
 800d826:	2508      	movs	r5, #8
 800d828:	e7b3      	b.n	800d792 <__hexnan+0x7a>
 800d82a:	9b01      	ldr	r3, [sp, #4]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d0dd      	beq.n	800d7ec <__hexnan+0xd4>
 800d830:	f1c3 0320 	rsb	r3, r3, #32
 800d834:	f04f 32ff 	mov.w	r2, #4294967295
 800d838:	40da      	lsrs	r2, r3
 800d83a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d83e:	4013      	ands	r3, r2
 800d840:	f846 3c04 	str.w	r3, [r6, #-4]
 800d844:	e7d2      	b.n	800d7ec <__hexnan+0xd4>
 800d846:	3f04      	subs	r7, #4
 800d848:	e7d0      	b.n	800d7ec <__hexnan+0xd4>
 800d84a:	2004      	movs	r0, #4
 800d84c:	e7d5      	b.n	800d7fa <__hexnan+0xe2>

0800d84e <__ascii_mbtowc>:
 800d84e:	b082      	sub	sp, #8
 800d850:	b901      	cbnz	r1, 800d854 <__ascii_mbtowc+0x6>
 800d852:	a901      	add	r1, sp, #4
 800d854:	b142      	cbz	r2, 800d868 <__ascii_mbtowc+0x1a>
 800d856:	b14b      	cbz	r3, 800d86c <__ascii_mbtowc+0x1e>
 800d858:	7813      	ldrb	r3, [r2, #0]
 800d85a:	600b      	str	r3, [r1, #0]
 800d85c:	7812      	ldrb	r2, [r2, #0]
 800d85e:	1e10      	subs	r0, r2, #0
 800d860:	bf18      	it	ne
 800d862:	2001      	movne	r0, #1
 800d864:	b002      	add	sp, #8
 800d866:	4770      	bx	lr
 800d868:	4610      	mov	r0, r2
 800d86a:	e7fb      	b.n	800d864 <__ascii_mbtowc+0x16>
 800d86c:	f06f 0001 	mvn.w	r0, #1
 800d870:	e7f8      	b.n	800d864 <__ascii_mbtowc+0x16>

0800d872 <_realloc_r>:
 800d872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d876:	4680      	mov	r8, r0
 800d878:	4615      	mov	r5, r2
 800d87a:	460c      	mov	r4, r1
 800d87c:	b921      	cbnz	r1, 800d888 <_realloc_r+0x16>
 800d87e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d882:	4611      	mov	r1, r2
 800d884:	f7fd bee0 	b.w	800b648 <_malloc_r>
 800d888:	b92a      	cbnz	r2, 800d896 <_realloc_r+0x24>
 800d88a:	f7fd fe69 	bl	800b560 <_free_r>
 800d88e:	2400      	movs	r4, #0
 800d890:	4620      	mov	r0, r4
 800d892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d896:	f000 fa41 	bl	800dd1c <_malloc_usable_size_r>
 800d89a:	4285      	cmp	r5, r0
 800d89c:	4606      	mov	r6, r0
 800d89e:	d802      	bhi.n	800d8a6 <_realloc_r+0x34>
 800d8a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d8a4:	d8f4      	bhi.n	800d890 <_realloc_r+0x1e>
 800d8a6:	4629      	mov	r1, r5
 800d8a8:	4640      	mov	r0, r8
 800d8aa:	f7fd fecd 	bl	800b648 <_malloc_r>
 800d8ae:	4607      	mov	r7, r0
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	d0ec      	beq.n	800d88e <_realloc_r+0x1c>
 800d8b4:	42b5      	cmp	r5, r6
 800d8b6:	462a      	mov	r2, r5
 800d8b8:	4621      	mov	r1, r4
 800d8ba:	bf28      	it	cs
 800d8bc:	4632      	movcs	r2, r6
 800d8be:	f7ff fc5b 	bl	800d178 <memcpy>
 800d8c2:	4621      	mov	r1, r4
 800d8c4:	4640      	mov	r0, r8
 800d8c6:	f7fd fe4b 	bl	800b560 <_free_r>
 800d8ca:	463c      	mov	r4, r7
 800d8cc:	e7e0      	b.n	800d890 <_realloc_r+0x1e>

0800d8ce <__ascii_wctomb>:
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	4608      	mov	r0, r1
 800d8d2:	b141      	cbz	r1, 800d8e6 <__ascii_wctomb+0x18>
 800d8d4:	2aff      	cmp	r2, #255	@ 0xff
 800d8d6:	d904      	bls.n	800d8e2 <__ascii_wctomb+0x14>
 800d8d8:	228a      	movs	r2, #138	@ 0x8a
 800d8da:	601a      	str	r2, [r3, #0]
 800d8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e0:	4770      	bx	lr
 800d8e2:	700a      	strb	r2, [r1, #0]
 800d8e4:	2001      	movs	r0, #1
 800d8e6:	4770      	bx	lr

0800d8e8 <__sfputc_r>:
 800d8e8:	6893      	ldr	r3, [r2, #8]
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	b410      	push	{r4}
 800d8f0:	6093      	str	r3, [r2, #8]
 800d8f2:	da08      	bge.n	800d906 <__sfputc_r+0x1e>
 800d8f4:	6994      	ldr	r4, [r2, #24]
 800d8f6:	42a3      	cmp	r3, r4
 800d8f8:	db01      	blt.n	800d8fe <__sfputc_r+0x16>
 800d8fa:	290a      	cmp	r1, #10
 800d8fc:	d103      	bne.n	800d906 <__sfputc_r+0x1e>
 800d8fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d902:	f000 b933 	b.w	800db6c <__swbuf_r>
 800d906:	6813      	ldr	r3, [r2, #0]
 800d908:	1c58      	adds	r0, r3, #1
 800d90a:	6010      	str	r0, [r2, #0]
 800d90c:	7019      	strb	r1, [r3, #0]
 800d90e:	4608      	mov	r0, r1
 800d910:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d914:	4770      	bx	lr

0800d916 <__sfputs_r>:
 800d916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d918:	4606      	mov	r6, r0
 800d91a:	460f      	mov	r7, r1
 800d91c:	4614      	mov	r4, r2
 800d91e:	18d5      	adds	r5, r2, r3
 800d920:	42ac      	cmp	r4, r5
 800d922:	d101      	bne.n	800d928 <__sfputs_r+0x12>
 800d924:	2000      	movs	r0, #0
 800d926:	e007      	b.n	800d938 <__sfputs_r+0x22>
 800d928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d92c:	463a      	mov	r2, r7
 800d92e:	4630      	mov	r0, r6
 800d930:	f7ff ffda 	bl	800d8e8 <__sfputc_r>
 800d934:	1c43      	adds	r3, r0, #1
 800d936:	d1f3      	bne.n	800d920 <__sfputs_r+0xa>
 800d938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d93c <_vfiprintf_r>:
 800d93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d940:	460d      	mov	r5, r1
 800d942:	b09d      	sub	sp, #116	@ 0x74
 800d944:	4614      	mov	r4, r2
 800d946:	4698      	mov	r8, r3
 800d948:	4606      	mov	r6, r0
 800d94a:	b118      	cbz	r0, 800d954 <_vfiprintf_r+0x18>
 800d94c:	6a03      	ldr	r3, [r0, #32]
 800d94e:	b90b      	cbnz	r3, 800d954 <_vfiprintf_r+0x18>
 800d950:	f7fc fdec 	bl	800a52c <__sinit>
 800d954:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d956:	07d9      	lsls	r1, r3, #31
 800d958:	d405      	bmi.n	800d966 <_vfiprintf_r+0x2a>
 800d95a:	89ab      	ldrh	r3, [r5, #12]
 800d95c:	059a      	lsls	r2, r3, #22
 800d95e:	d402      	bmi.n	800d966 <_vfiprintf_r+0x2a>
 800d960:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d962:	f7fc ff8a 	bl	800a87a <__retarget_lock_acquire_recursive>
 800d966:	89ab      	ldrh	r3, [r5, #12]
 800d968:	071b      	lsls	r3, r3, #28
 800d96a:	d501      	bpl.n	800d970 <_vfiprintf_r+0x34>
 800d96c:	692b      	ldr	r3, [r5, #16]
 800d96e:	b99b      	cbnz	r3, 800d998 <_vfiprintf_r+0x5c>
 800d970:	4629      	mov	r1, r5
 800d972:	4630      	mov	r0, r6
 800d974:	f000 f938 	bl	800dbe8 <__swsetup_r>
 800d978:	b170      	cbz	r0, 800d998 <_vfiprintf_r+0x5c>
 800d97a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d97c:	07dc      	lsls	r4, r3, #31
 800d97e:	d504      	bpl.n	800d98a <_vfiprintf_r+0x4e>
 800d980:	f04f 30ff 	mov.w	r0, #4294967295
 800d984:	b01d      	add	sp, #116	@ 0x74
 800d986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98a:	89ab      	ldrh	r3, [r5, #12]
 800d98c:	0598      	lsls	r0, r3, #22
 800d98e:	d4f7      	bmi.n	800d980 <_vfiprintf_r+0x44>
 800d990:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d992:	f7fc ff73 	bl	800a87c <__retarget_lock_release_recursive>
 800d996:	e7f3      	b.n	800d980 <_vfiprintf_r+0x44>
 800d998:	2300      	movs	r3, #0
 800d99a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d99c:	2320      	movs	r3, #32
 800d99e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d9a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9a6:	2330      	movs	r3, #48	@ 0x30
 800d9a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800db58 <_vfiprintf_r+0x21c>
 800d9ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d9b0:	f04f 0901 	mov.w	r9, #1
 800d9b4:	4623      	mov	r3, r4
 800d9b6:	469a      	mov	sl, r3
 800d9b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9bc:	b10a      	cbz	r2, 800d9c2 <_vfiprintf_r+0x86>
 800d9be:	2a25      	cmp	r2, #37	@ 0x25
 800d9c0:	d1f9      	bne.n	800d9b6 <_vfiprintf_r+0x7a>
 800d9c2:	ebba 0b04 	subs.w	fp, sl, r4
 800d9c6:	d00b      	beq.n	800d9e0 <_vfiprintf_r+0xa4>
 800d9c8:	465b      	mov	r3, fp
 800d9ca:	4622      	mov	r2, r4
 800d9cc:	4629      	mov	r1, r5
 800d9ce:	4630      	mov	r0, r6
 800d9d0:	f7ff ffa1 	bl	800d916 <__sfputs_r>
 800d9d4:	3001      	adds	r0, #1
 800d9d6:	f000 80a7 	beq.w	800db28 <_vfiprintf_r+0x1ec>
 800d9da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9dc:	445a      	add	r2, fp
 800d9de:	9209      	str	r2, [sp, #36]	@ 0x24
 800d9e0:	f89a 3000 	ldrb.w	r3, [sl]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	f000 809f 	beq.w	800db28 <_vfiprintf_r+0x1ec>
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d9f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9f4:	f10a 0a01 	add.w	sl, sl, #1
 800d9f8:	9304      	str	r3, [sp, #16]
 800d9fa:	9307      	str	r3, [sp, #28]
 800d9fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da00:	931a      	str	r3, [sp, #104]	@ 0x68
 800da02:	4654      	mov	r4, sl
 800da04:	2205      	movs	r2, #5
 800da06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da0a:	4853      	ldr	r0, [pc, #332]	@ (800db58 <_vfiprintf_r+0x21c>)
 800da0c:	f7f2 fc18 	bl	8000240 <memchr>
 800da10:	9a04      	ldr	r2, [sp, #16]
 800da12:	b9d8      	cbnz	r0, 800da4c <_vfiprintf_r+0x110>
 800da14:	06d1      	lsls	r1, r2, #27
 800da16:	bf44      	itt	mi
 800da18:	2320      	movmi	r3, #32
 800da1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da1e:	0713      	lsls	r3, r2, #28
 800da20:	bf44      	itt	mi
 800da22:	232b      	movmi	r3, #43	@ 0x2b
 800da24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da28:	f89a 3000 	ldrb.w	r3, [sl]
 800da2c:	2b2a      	cmp	r3, #42	@ 0x2a
 800da2e:	d015      	beq.n	800da5c <_vfiprintf_r+0x120>
 800da30:	9a07      	ldr	r2, [sp, #28]
 800da32:	4654      	mov	r4, sl
 800da34:	2000      	movs	r0, #0
 800da36:	f04f 0c0a 	mov.w	ip, #10
 800da3a:	4621      	mov	r1, r4
 800da3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da40:	3b30      	subs	r3, #48	@ 0x30
 800da42:	2b09      	cmp	r3, #9
 800da44:	d94b      	bls.n	800dade <_vfiprintf_r+0x1a2>
 800da46:	b1b0      	cbz	r0, 800da76 <_vfiprintf_r+0x13a>
 800da48:	9207      	str	r2, [sp, #28]
 800da4a:	e014      	b.n	800da76 <_vfiprintf_r+0x13a>
 800da4c:	eba0 0308 	sub.w	r3, r0, r8
 800da50:	fa09 f303 	lsl.w	r3, r9, r3
 800da54:	4313      	orrs	r3, r2
 800da56:	9304      	str	r3, [sp, #16]
 800da58:	46a2      	mov	sl, r4
 800da5a:	e7d2      	b.n	800da02 <_vfiprintf_r+0xc6>
 800da5c:	9b03      	ldr	r3, [sp, #12]
 800da5e:	1d19      	adds	r1, r3, #4
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	9103      	str	r1, [sp, #12]
 800da64:	2b00      	cmp	r3, #0
 800da66:	bfbb      	ittet	lt
 800da68:	425b      	neglt	r3, r3
 800da6a:	f042 0202 	orrlt.w	r2, r2, #2
 800da6e:	9307      	strge	r3, [sp, #28]
 800da70:	9307      	strlt	r3, [sp, #28]
 800da72:	bfb8      	it	lt
 800da74:	9204      	strlt	r2, [sp, #16]
 800da76:	7823      	ldrb	r3, [r4, #0]
 800da78:	2b2e      	cmp	r3, #46	@ 0x2e
 800da7a:	d10a      	bne.n	800da92 <_vfiprintf_r+0x156>
 800da7c:	7863      	ldrb	r3, [r4, #1]
 800da7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800da80:	d132      	bne.n	800dae8 <_vfiprintf_r+0x1ac>
 800da82:	9b03      	ldr	r3, [sp, #12]
 800da84:	1d1a      	adds	r2, r3, #4
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	9203      	str	r2, [sp, #12]
 800da8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da8e:	3402      	adds	r4, #2
 800da90:	9305      	str	r3, [sp, #20]
 800da92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800db68 <_vfiprintf_r+0x22c>
 800da96:	7821      	ldrb	r1, [r4, #0]
 800da98:	2203      	movs	r2, #3
 800da9a:	4650      	mov	r0, sl
 800da9c:	f7f2 fbd0 	bl	8000240 <memchr>
 800daa0:	b138      	cbz	r0, 800dab2 <_vfiprintf_r+0x176>
 800daa2:	9b04      	ldr	r3, [sp, #16]
 800daa4:	eba0 000a 	sub.w	r0, r0, sl
 800daa8:	2240      	movs	r2, #64	@ 0x40
 800daaa:	4082      	lsls	r2, r0
 800daac:	4313      	orrs	r3, r2
 800daae:	3401      	adds	r4, #1
 800dab0:	9304      	str	r3, [sp, #16]
 800dab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dab6:	4829      	ldr	r0, [pc, #164]	@ (800db5c <_vfiprintf_r+0x220>)
 800dab8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dabc:	2206      	movs	r2, #6
 800dabe:	f7f2 fbbf 	bl	8000240 <memchr>
 800dac2:	2800      	cmp	r0, #0
 800dac4:	d03f      	beq.n	800db46 <_vfiprintf_r+0x20a>
 800dac6:	4b26      	ldr	r3, [pc, #152]	@ (800db60 <_vfiprintf_r+0x224>)
 800dac8:	bb1b      	cbnz	r3, 800db12 <_vfiprintf_r+0x1d6>
 800daca:	9b03      	ldr	r3, [sp, #12]
 800dacc:	3307      	adds	r3, #7
 800dace:	f023 0307 	bic.w	r3, r3, #7
 800dad2:	3308      	adds	r3, #8
 800dad4:	9303      	str	r3, [sp, #12]
 800dad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dad8:	443b      	add	r3, r7
 800dada:	9309      	str	r3, [sp, #36]	@ 0x24
 800dadc:	e76a      	b.n	800d9b4 <_vfiprintf_r+0x78>
 800dade:	fb0c 3202 	mla	r2, ip, r2, r3
 800dae2:	460c      	mov	r4, r1
 800dae4:	2001      	movs	r0, #1
 800dae6:	e7a8      	b.n	800da3a <_vfiprintf_r+0xfe>
 800dae8:	2300      	movs	r3, #0
 800daea:	3401      	adds	r4, #1
 800daec:	9305      	str	r3, [sp, #20]
 800daee:	4619      	mov	r1, r3
 800daf0:	f04f 0c0a 	mov.w	ip, #10
 800daf4:	4620      	mov	r0, r4
 800daf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dafa:	3a30      	subs	r2, #48	@ 0x30
 800dafc:	2a09      	cmp	r2, #9
 800dafe:	d903      	bls.n	800db08 <_vfiprintf_r+0x1cc>
 800db00:	2b00      	cmp	r3, #0
 800db02:	d0c6      	beq.n	800da92 <_vfiprintf_r+0x156>
 800db04:	9105      	str	r1, [sp, #20]
 800db06:	e7c4      	b.n	800da92 <_vfiprintf_r+0x156>
 800db08:	fb0c 2101 	mla	r1, ip, r1, r2
 800db0c:	4604      	mov	r4, r0
 800db0e:	2301      	movs	r3, #1
 800db10:	e7f0      	b.n	800daf4 <_vfiprintf_r+0x1b8>
 800db12:	ab03      	add	r3, sp, #12
 800db14:	9300      	str	r3, [sp, #0]
 800db16:	462a      	mov	r2, r5
 800db18:	4b12      	ldr	r3, [pc, #72]	@ (800db64 <_vfiprintf_r+0x228>)
 800db1a:	a904      	add	r1, sp, #16
 800db1c:	4630      	mov	r0, r6
 800db1e:	f7fb fead 	bl	800987c <_printf_float>
 800db22:	4607      	mov	r7, r0
 800db24:	1c78      	adds	r0, r7, #1
 800db26:	d1d6      	bne.n	800dad6 <_vfiprintf_r+0x19a>
 800db28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db2a:	07d9      	lsls	r1, r3, #31
 800db2c:	d405      	bmi.n	800db3a <_vfiprintf_r+0x1fe>
 800db2e:	89ab      	ldrh	r3, [r5, #12]
 800db30:	059a      	lsls	r2, r3, #22
 800db32:	d402      	bmi.n	800db3a <_vfiprintf_r+0x1fe>
 800db34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800db36:	f7fc fea1 	bl	800a87c <__retarget_lock_release_recursive>
 800db3a:	89ab      	ldrh	r3, [r5, #12]
 800db3c:	065b      	lsls	r3, r3, #25
 800db3e:	f53f af1f 	bmi.w	800d980 <_vfiprintf_r+0x44>
 800db42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800db44:	e71e      	b.n	800d984 <_vfiprintf_r+0x48>
 800db46:	ab03      	add	r3, sp, #12
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	462a      	mov	r2, r5
 800db4c:	4b05      	ldr	r3, [pc, #20]	@ (800db64 <_vfiprintf_r+0x228>)
 800db4e:	a904      	add	r1, sp, #16
 800db50:	4630      	mov	r0, r6
 800db52:	f7fc f92b 	bl	8009dac <_printf_i>
 800db56:	e7e4      	b.n	800db22 <_vfiprintf_r+0x1e6>
 800db58:	0800e358 	.word	0x0800e358
 800db5c:	0800e362 	.word	0x0800e362
 800db60:	0800987d 	.word	0x0800987d
 800db64:	0800d917 	.word	0x0800d917
 800db68:	0800e35e 	.word	0x0800e35e

0800db6c <__swbuf_r>:
 800db6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db6e:	460e      	mov	r6, r1
 800db70:	4614      	mov	r4, r2
 800db72:	4605      	mov	r5, r0
 800db74:	b118      	cbz	r0, 800db7e <__swbuf_r+0x12>
 800db76:	6a03      	ldr	r3, [r0, #32]
 800db78:	b90b      	cbnz	r3, 800db7e <__swbuf_r+0x12>
 800db7a:	f7fc fcd7 	bl	800a52c <__sinit>
 800db7e:	69a3      	ldr	r3, [r4, #24]
 800db80:	60a3      	str	r3, [r4, #8]
 800db82:	89a3      	ldrh	r3, [r4, #12]
 800db84:	071a      	lsls	r2, r3, #28
 800db86:	d501      	bpl.n	800db8c <__swbuf_r+0x20>
 800db88:	6923      	ldr	r3, [r4, #16]
 800db8a:	b943      	cbnz	r3, 800db9e <__swbuf_r+0x32>
 800db8c:	4621      	mov	r1, r4
 800db8e:	4628      	mov	r0, r5
 800db90:	f000 f82a 	bl	800dbe8 <__swsetup_r>
 800db94:	b118      	cbz	r0, 800db9e <__swbuf_r+0x32>
 800db96:	f04f 37ff 	mov.w	r7, #4294967295
 800db9a:	4638      	mov	r0, r7
 800db9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db9e:	6823      	ldr	r3, [r4, #0]
 800dba0:	6922      	ldr	r2, [r4, #16]
 800dba2:	1a98      	subs	r0, r3, r2
 800dba4:	6963      	ldr	r3, [r4, #20]
 800dba6:	b2f6      	uxtb	r6, r6
 800dba8:	4283      	cmp	r3, r0
 800dbaa:	4637      	mov	r7, r6
 800dbac:	dc05      	bgt.n	800dbba <__swbuf_r+0x4e>
 800dbae:	4621      	mov	r1, r4
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	f7ff fa6b 	bl	800d08c <_fflush_r>
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	d1ed      	bne.n	800db96 <__swbuf_r+0x2a>
 800dbba:	68a3      	ldr	r3, [r4, #8]
 800dbbc:	3b01      	subs	r3, #1
 800dbbe:	60a3      	str	r3, [r4, #8]
 800dbc0:	6823      	ldr	r3, [r4, #0]
 800dbc2:	1c5a      	adds	r2, r3, #1
 800dbc4:	6022      	str	r2, [r4, #0]
 800dbc6:	701e      	strb	r6, [r3, #0]
 800dbc8:	6962      	ldr	r2, [r4, #20]
 800dbca:	1c43      	adds	r3, r0, #1
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d004      	beq.n	800dbda <__swbuf_r+0x6e>
 800dbd0:	89a3      	ldrh	r3, [r4, #12]
 800dbd2:	07db      	lsls	r3, r3, #31
 800dbd4:	d5e1      	bpl.n	800db9a <__swbuf_r+0x2e>
 800dbd6:	2e0a      	cmp	r6, #10
 800dbd8:	d1df      	bne.n	800db9a <__swbuf_r+0x2e>
 800dbda:	4621      	mov	r1, r4
 800dbdc:	4628      	mov	r0, r5
 800dbde:	f7ff fa55 	bl	800d08c <_fflush_r>
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	d0d9      	beq.n	800db9a <__swbuf_r+0x2e>
 800dbe6:	e7d6      	b.n	800db96 <__swbuf_r+0x2a>

0800dbe8 <__swsetup_r>:
 800dbe8:	b538      	push	{r3, r4, r5, lr}
 800dbea:	4b29      	ldr	r3, [pc, #164]	@ (800dc90 <__swsetup_r+0xa8>)
 800dbec:	4605      	mov	r5, r0
 800dbee:	6818      	ldr	r0, [r3, #0]
 800dbf0:	460c      	mov	r4, r1
 800dbf2:	b118      	cbz	r0, 800dbfc <__swsetup_r+0x14>
 800dbf4:	6a03      	ldr	r3, [r0, #32]
 800dbf6:	b90b      	cbnz	r3, 800dbfc <__swsetup_r+0x14>
 800dbf8:	f7fc fc98 	bl	800a52c <__sinit>
 800dbfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc00:	0719      	lsls	r1, r3, #28
 800dc02:	d422      	bmi.n	800dc4a <__swsetup_r+0x62>
 800dc04:	06da      	lsls	r2, r3, #27
 800dc06:	d407      	bmi.n	800dc18 <__swsetup_r+0x30>
 800dc08:	2209      	movs	r2, #9
 800dc0a:	602a      	str	r2, [r5, #0]
 800dc0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc10:	81a3      	strh	r3, [r4, #12]
 800dc12:	f04f 30ff 	mov.w	r0, #4294967295
 800dc16:	e033      	b.n	800dc80 <__swsetup_r+0x98>
 800dc18:	0758      	lsls	r0, r3, #29
 800dc1a:	d512      	bpl.n	800dc42 <__swsetup_r+0x5a>
 800dc1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc1e:	b141      	cbz	r1, 800dc32 <__swsetup_r+0x4a>
 800dc20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc24:	4299      	cmp	r1, r3
 800dc26:	d002      	beq.n	800dc2e <__swsetup_r+0x46>
 800dc28:	4628      	mov	r0, r5
 800dc2a:	f7fd fc99 	bl	800b560 <_free_r>
 800dc2e:	2300      	movs	r3, #0
 800dc30:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc32:	89a3      	ldrh	r3, [r4, #12]
 800dc34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dc38:	81a3      	strh	r3, [r4, #12]
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	6063      	str	r3, [r4, #4]
 800dc3e:	6923      	ldr	r3, [r4, #16]
 800dc40:	6023      	str	r3, [r4, #0]
 800dc42:	89a3      	ldrh	r3, [r4, #12]
 800dc44:	f043 0308 	orr.w	r3, r3, #8
 800dc48:	81a3      	strh	r3, [r4, #12]
 800dc4a:	6923      	ldr	r3, [r4, #16]
 800dc4c:	b94b      	cbnz	r3, 800dc62 <__swsetup_r+0x7a>
 800dc4e:	89a3      	ldrh	r3, [r4, #12]
 800dc50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dc54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc58:	d003      	beq.n	800dc62 <__swsetup_r+0x7a>
 800dc5a:	4621      	mov	r1, r4
 800dc5c:	4628      	mov	r0, r5
 800dc5e:	f000 f88b 	bl	800dd78 <__smakebuf_r>
 800dc62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc66:	f013 0201 	ands.w	r2, r3, #1
 800dc6a:	d00a      	beq.n	800dc82 <__swsetup_r+0x9a>
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	60a2      	str	r2, [r4, #8]
 800dc70:	6962      	ldr	r2, [r4, #20]
 800dc72:	4252      	negs	r2, r2
 800dc74:	61a2      	str	r2, [r4, #24]
 800dc76:	6922      	ldr	r2, [r4, #16]
 800dc78:	b942      	cbnz	r2, 800dc8c <__swsetup_r+0xa4>
 800dc7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc7e:	d1c5      	bne.n	800dc0c <__swsetup_r+0x24>
 800dc80:	bd38      	pop	{r3, r4, r5, pc}
 800dc82:	0799      	lsls	r1, r3, #30
 800dc84:	bf58      	it	pl
 800dc86:	6962      	ldrpl	r2, [r4, #20]
 800dc88:	60a2      	str	r2, [r4, #8]
 800dc8a:	e7f4      	b.n	800dc76 <__swsetup_r+0x8e>
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	e7f7      	b.n	800dc80 <__swsetup_r+0x98>
 800dc90:	200000f8 	.word	0x200000f8

0800dc94 <_raise_r>:
 800dc94:	291f      	cmp	r1, #31
 800dc96:	b538      	push	{r3, r4, r5, lr}
 800dc98:	4605      	mov	r5, r0
 800dc9a:	460c      	mov	r4, r1
 800dc9c:	d904      	bls.n	800dca8 <_raise_r+0x14>
 800dc9e:	2316      	movs	r3, #22
 800dca0:	6003      	str	r3, [r0, #0]
 800dca2:	f04f 30ff 	mov.w	r0, #4294967295
 800dca6:	bd38      	pop	{r3, r4, r5, pc}
 800dca8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dcaa:	b112      	cbz	r2, 800dcb2 <_raise_r+0x1e>
 800dcac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dcb0:	b94b      	cbnz	r3, 800dcc6 <_raise_r+0x32>
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	f000 f830 	bl	800dd18 <_getpid_r>
 800dcb8:	4622      	mov	r2, r4
 800dcba:	4601      	mov	r1, r0
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcc2:	f000 b817 	b.w	800dcf4 <_kill_r>
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d00a      	beq.n	800dce0 <_raise_r+0x4c>
 800dcca:	1c59      	adds	r1, r3, #1
 800dccc:	d103      	bne.n	800dcd6 <_raise_r+0x42>
 800dcce:	2316      	movs	r3, #22
 800dcd0:	6003      	str	r3, [r0, #0]
 800dcd2:	2001      	movs	r0, #1
 800dcd4:	e7e7      	b.n	800dca6 <_raise_r+0x12>
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dcdc:	4620      	mov	r0, r4
 800dcde:	4798      	blx	r3
 800dce0:	2000      	movs	r0, #0
 800dce2:	e7e0      	b.n	800dca6 <_raise_r+0x12>

0800dce4 <raise>:
 800dce4:	4b02      	ldr	r3, [pc, #8]	@ (800dcf0 <raise+0xc>)
 800dce6:	4601      	mov	r1, r0
 800dce8:	6818      	ldr	r0, [r3, #0]
 800dcea:	f7ff bfd3 	b.w	800dc94 <_raise_r>
 800dcee:	bf00      	nop
 800dcf0:	200000f8 	.word	0x200000f8

0800dcf4 <_kill_r>:
 800dcf4:	b538      	push	{r3, r4, r5, lr}
 800dcf6:	4d07      	ldr	r5, [pc, #28]	@ (800dd14 <_kill_r+0x20>)
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	4604      	mov	r4, r0
 800dcfc:	4608      	mov	r0, r1
 800dcfe:	4611      	mov	r1, r2
 800dd00:	602b      	str	r3, [r5, #0]
 800dd02:	f7f3 fdfb 	bl	80018fc <_kill>
 800dd06:	1c43      	adds	r3, r0, #1
 800dd08:	d102      	bne.n	800dd10 <_kill_r+0x1c>
 800dd0a:	682b      	ldr	r3, [r5, #0]
 800dd0c:	b103      	cbz	r3, 800dd10 <_kill_r+0x1c>
 800dd0e:	6023      	str	r3, [r4, #0]
 800dd10:	bd38      	pop	{r3, r4, r5, pc}
 800dd12:	bf00      	nop
 800dd14:	20000818 	.word	0x20000818

0800dd18 <_getpid_r>:
 800dd18:	f7f3 bde8 	b.w	80018ec <_getpid>

0800dd1c <_malloc_usable_size_r>:
 800dd1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd20:	1f18      	subs	r0, r3, #4
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	bfbc      	itt	lt
 800dd26:	580b      	ldrlt	r3, [r1, r0]
 800dd28:	18c0      	addlt	r0, r0, r3
 800dd2a:	4770      	bx	lr

0800dd2c <__swhatbuf_r>:
 800dd2c:	b570      	push	{r4, r5, r6, lr}
 800dd2e:	460c      	mov	r4, r1
 800dd30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd34:	2900      	cmp	r1, #0
 800dd36:	b096      	sub	sp, #88	@ 0x58
 800dd38:	4615      	mov	r5, r2
 800dd3a:	461e      	mov	r6, r3
 800dd3c:	da0d      	bge.n	800dd5a <__swhatbuf_r+0x2e>
 800dd3e:	89a3      	ldrh	r3, [r4, #12]
 800dd40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd44:	f04f 0100 	mov.w	r1, #0
 800dd48:	bf14      	ite	ne
 800dd4a:	2340      	movne	r3, #64	@ 0x40
 800dd4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd50:	2000      	movs	r0, #0
 800dd52:	6031      	str	r1, [r6, #0]
 800dd54:	602b      	str	r3, [r5, #0]
 800dd56:	b016      	add	sp, #88	@ 0x58
 800dd58:	bd70      	pop	{r4, r5, r6, pc}
 800dd5a:	466a      	mov	r2, sp
 800dd5c:	f000 f848 	bl	800ddf0 <_fstat_r>
 800dd60:	2800      	cmp	r0, #0
 800dd62:	dbec      	blt.n	800dd3e <__swhatbuf_r+0x12>
 800dd64:	9901      	ldr	r1, [sp, #4]
 800dd66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd6e:	4259      	negs	r1, r3
 800dd70:	4159      	adcs	r1, r3
 800dd72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd76:	e7eb      	b.n	800dd50 <__swhatbuf_r+0x24>

0800dd78 <__smakebuf_r>:
 800dd78:	898b      	ldrh	r3, [r1, #12]
 800dd7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd7c:	079d      	lsls	r5, r3, #30
 800dd7e:	4606      	mov	r6, r0
 800dd80:	460c      	mov	r4, r1
 800dd82:	d507      	bpl.n	800dd94 <__smakebuf_r+0x1c>
 800dd84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dd88:	6023      	str	r3, [r4, #0]
 800dd8a:	6123      	str	r3, [r4, #16]
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	6163      	str	r3, [r4, #20]
 800dd90:	b003      	add	sp, #12
 800dd92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd94:	ab01      	add	r3, sp, #4
 800dd96:	466a      	mov	r2, sp
 800dd98:	f7ff ffc8 	bl	800dd2c <__swhatbuf_r>
 800dd9c:	9f00      	ldr	r7, [sp, #0]
 800dd9e:	4605      	mov	r5, r0
 800dda0:	4639      	mov	r1, r7
 800dda2:	4630      	mov	r0, r6
 800dda4:	f7fd fc50 	bl	800b648 <_malloc_r>
 800dda8:	b948      	cbnz	r0, 800ddbe <__smakebuf_r+0x46>
 800ddaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddae:	059a      	lsls	r2, r3, #22
 800ddb0:	d4ee      	bmi.n	800dd90 <__smakebuf_r+0x18>
 800ddb2:	f023 0303 	bic.w	r3, r3, #3
 800ddb6:	f043 0302 	orr.w	r3, r3, #2
 800ddba:	81a3      	strh	r3, [r4, #12]
 800ddbc:	e7e2      	b.n	800dd84 <__smakebuf_r+0xc>
 800ddbe:	89a3      	ldrh	r3, [r4, #12]
 800ddc0:	6020      	str	r0, [r4, #0]
 800ddc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddc6:	81a3      	strh	r3, [r4, #12]
 800ddc8:	9b01      	ldr	r3, [sp, #4]
 800ddca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ddce:	b15b      	cbz	r3, 800dde8 <__smakebuf_r+0x70>
 800ddd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	f000 f81d 	bl	800de14 <_isatty_r>
 800ddda:	b128      	cbz	r0, 800dde8 <__smakebuf_r+0x70>
 800dddc:	89a3      	ldrh	r3, [r4, #12]
 800ddde:	f023 0303 	bic.w	r3, r3, #3
 800dde2:	f043 0301 	orr.w	r3, r3, #1
 800dde6:	81a3      	strh	r3, [r4, #12]
 800dde8:	89a3      	ldrh	r3, [r4, #12]
 800ddea:	431d      	orrs	r5, r3
 800ddec:	81a5      	strh	r5, [r4, #12]
 800ddee:	e7cf      	b.n	800dd90 <__smakebuf_r+0x18>

0800ddf0 <_fstat_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4d07      	ldr	r5, [pc, #28]	@ (800de10 <_fstat_r+0x20>)
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	4608      	mov	r0, r1
 800ddfa:	4611      	mov	r1, r2
 800ddfc:	602b      	str	r3, [r5, #0]
 800ddfe:	f7f3 fddd 	bl	80019bc <_fstat>
 800de02:	1c43      	adds	r3, r0, #1
 800de04:	d102      	bne.n	800de0c <_fstat_r+0x1c>
 800de06:	682b      	ldr	r3, [r5, #0]
 800de08:	b103      	cbz	r3, 800de0c <_fstat_r+0x1c>
 800de0a:	6023      	str	r3, [r4, #0]
 800de0c:	bd38      	pop	{r3, r4, r5, pc}
 800de0e:	bf00      	nop
 800de10:	20000818 	.word	0x20000818

0800de14 <_isatty_r>:
 800de14:	b538      	push	{r3, r4, r5, lr}
 800de16:	4d06      	ldr	r5, [pc, #24]	@ (800de30 <_isatty_r+0x1c>)
 800de18:	2300      	movs	r3, #0
 800de1a:	4604      	mov	r4, r0
 800de1c:	4608      	mov	r0, r1
 800de1e:	602b      	str	r3, [r5, #0]
 800de20:	f7f3 fddc 	bl	80019dc <_isatty>
 800de24:	1c43      	adds	r3, r0, #1
 800de26:	d102      	bne.n	800de2e <_isatty_r+0x1a>
 800de28:	682b      	ldr	r3, [r5, #0]
 800de2a:	b103      	cbz	r3, 800de2e <_isatty_r+0x1a>
 800de2c:	6023      	str	r3, [r4, #0]
 800de2e:	bd38      	pop	{r3, r4, r5, pc}
 800de30:	20000818 	.word	0x20000818

0800de34 <_init>:
 800de34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de36:	bf00      	nop
 800de38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de3a:	bc08      	pop	{r3}
 800de3c:	469e      	mov	lr, r3
 800de3e:	4770      	bx	lr

0800de40 <_fini>:
 800de40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de42:	bf00      	nop
 800de44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de46:	bc08      	pop	{r3}
 800de48:	469e      	mov	lr, r3
 800de4a:	4770      	bx	lr
=======
 8009db8:	e031      	b.n	8009e1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009dba:	2308      	movs	r3, #8
 8009dbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009dbe:	2308      	movs	r3, #8
 8009dc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	0e5b      	lsrs	r3, r3, #25
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	f003 0307 	and.w	r3, r3, #7
 8009dd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	0f5b      	lsrs	r3, r3, #29
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	f003 0307 	and.w	r3, r3, #7
 8009de0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
 8009de4:	7b3a      	ldrb	r2, [r7, #12]
 8009de6:	4911      	ldr	r1, [pc, #68]	@ (8009e2c <UARTEx_SetNbDataToProcess+0x94>)
 8009de8:	5c8a      	ldrb	r2, [r1, r2]
 8009dea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009dee:	7b3a      	ldrb	r2, [r7, #12]
 8009df0:	490f      	ldr	r1, [pc, #60]	@ (8009e30 <UARTEx_SetNbDataToProcess+0x98>)
 8009df2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009df4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
 8009e02:	7b7a      	ldrb	r2, [r7, #13]
 8009e04:	4909      	ldr	r1, [pc, #36]	@ (8009e2c <UARTEx_SetNbDataToProcess+0x94>)
 8009e06:	5c8a      	ldrb	r2, [r1, r2]
 8009e08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e0c:	7b7a      	ldrb	r2, [r7, #13]
 8009e0e:	4908      	ldr	r1, [pc, #32]	@ (8009e30 <UARTEx_SetNbDataToProcess+0x98>)
 8009e10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e12:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009e1e:	bf00      	nop
 8009e20:	3714      	adds	r7, #20
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	0800e76c 	.word	0x0800e76c
 8009e30:	0800e774 	.word	0x0800e774

08009e34 <atoi>:
 8009e34:	220a      	movs	r2, #10
 8009e36:	2100      	movs	r1, #0
 8009e38:	f000 b87c 	b.w	8009f34 <strtol>

08009e3c <_strtol_l.constprop.0>:
 8009e3c:	2b24      	cmp	r3, #36	@ 0x24
 8009e3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e42:	4686      	mov	lr, r0
 8009e44:	4690      	mov	r8, r2
 8009e46:	d801      	bhi.n	8009e4c <_strtol_l.constprop.0+0x10>
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d106      	bne.n	8009e5a <_strtol_l.constprop.0+0x1e>
 8009e4c:	f001 f8f0 	bl	800b030 <__errno>
 8009e50:	2316      	movs	r3, #22
 8009e52:	6003      	str	r3, [r0, #0]
 8009e54:	2000      	movs	r0, #0
 8009e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e5a:	4834      	ldr	r0, [pc, #208]	@ (8009f2c <_strtol_l.constprop.0+0xf0>)
 8009e5c:	460d      	mov	r5, r1
 8009e5e:	462a      	mov	r2, r5
 8009e60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e64:	5d06      	ldrb	r6, [r0, r4]
 8009e66:	f016 0608 	ands.w	r6, r6, #8
 8009e6a:	d1f8      	bne.n	8009e5e <_strtol_l.constprop.0+0x22>
 8009e6c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009e6e:	d12d      	bne.n	8009ecc <_strtol_l.constprop.0+0x90>
 8009e70:	782c      	ldrb	r4, [r5, #0]
 8009e72:	2601      	movs	r6, #1
 8009e74:	1c95      	adds	r5, r2, #2
 8009e76:	f033 0210 	bics.w	r2, r3, #16
 8009e7a:	d109      	bne.n	8009e90 <_strtol_l.constprop.0+0x54>
 8009e7c:	2c30      	cmp	r4, #48	@ 0x30
 8009e7e:	d12a      	bne.n	8009ed6 <_strtol_l.constprop.0+0x9a>
 8009e80:	782a      	ldrb	r2, [r5, #0]
 8009e82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e86:	2a58      	cmp	r2, #88	@ 0x58
 8009e88:	d125      	bne.n	8009ed6 <_strtol_l.constprop.0+0x9a>
 8009e8a:	786c      	ldrb	r4, [r5, #1]
 8009e8c:	2310      	movs	r3, #16
 8009e8e:	3502      	adds	r5, #2
 8009e90:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009e94:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009e98:	2200      	movs	r2, #0
 8009e9a:	fbbc f9f3 	udiv	r9, ip, r3
 8009e9e:	4610      	mov	r0, r2
 8009ea0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009ea4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009ea8:	2f09      	cmp	r7, #9
 8009eaa:	d81b      	bhi.n	8009ee4 <_strtol_l.constprop.0+0xa8>
 8009eac:	463c      	mov	r4, r7
 8009eae:	42a3      	cmp	r3, r4
 8009eb0:	dd27      	ble.n	8009f02 <_strtol_l.constprop.0+0xc6>
 8009eb2:	1c57      	adds	r7, r2, #1
 8009eb4:	d007      	beq.n	8009ec6 <_strtol_l.constprop.0+0x8a>
 8009eb6:	4581      	cmp	r9, r0
 8009eb8:	d320      	bcc.n	8009efc <_strtol_l.constprop.0+0xc0>
 8009eba:	d101      	bne.n	8009ec0 <_strtol_l.constprop.0+0x84>
 8009ebc:	45a2      	cmp	sl, r4
 8009ebe:	db1d      	blt.n	8009efc <_strtol_l.constprop.0+0xc0>
 8009ec0:	fb00 4003 	mla	r0, r0, r3, r4
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009eca:	e7eb      	b.n	8009ea4 <_strtol_l.constprop.0+0x68>
 8009ecc:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ece:	bf04      	itt	eq
 8009ed0:	782c      	ldrbeq	r4, [r5, #0]
 8009ed2:	1c95      	addeq	r5, r2, #2
 8009ed4:	e7cf      	b.n	8009e76 <_strtol_l.constprop.0+0x3a>
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1da      	bne.n	8009e90 <_strtol_l.constprop.0+0x54>
 8009eda:	2c30      	cmp	r4, #48	@ 0x30
 8009edc:	bf0c      	ite	eq
 8009ede:	2308      	moveq	r3, #8
 8009ee0:	230a      	movne	r3, #10
 8009ee2:	e7d5      	b.n	8009e90 <_strtol_l.constprop.0+0x54>
 8009ee4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ee8:	2f19      	cmp	r7, #25
 8009eea:	d801      	bhi.n	8009ef0 <_strtol_l.constprop.0+0xb4>
 8009eec:	3c37      	subs	r4, #55	@ 0x37
 8009eee:	e7de      	b.n	8009eae <_strtol_l.constprop.0+0x72>
 8009ef0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009ef4:	2f19      	cmp	r7, #25
 8009ef6:	d804      	bhi.n	8009f02 <_strtol_l.constprop.0+0xc6>
 8009ef8:	3c57      	subs	r4, #87	@ 0x57
 8009efa:	e7d8      	b.n	8009eae <_strtol_l.constprop.0+0x72>
 8009efc:	f04f 32ff 	mov.w	r2, #4294967295
 8009f00:	e7e1      	b.n	8009ec6 <_strtol_l.constprop.0+0x8a>
 8009f02:	1c53      	adds	r3, r2, #1
 8009f04:	d108      	bne.n	8009f18 <_strtol_l.constprop.0+0xdc>
 8009f06:	2322      	movs	r3, #34	@ 0x22
 8009f08:	f8ce 3000 	str.w	r3, [lr]
 8009f0c:	4660      	mov	r0, ip
 8009f0e:	f1b8 0f00 	cmp.w	r8, #0
 8009f12:	d0a0      	beq.n	8009e56 <_strtol_l.constprop.0+0x1a>
 8009f14:	1e69      	subs	r1, r5, #1
 8009f16:	e006      	b.n	8009f26 <_strtol_l.constprop.0+0xea>
 8009f18:	b106      	cbz	r6, 8009f1c <_strtol_l.constprop.0+0xe0>
 8009f1a:	4240      	negs	r0, r0
 8009f1c:	f1b8 0f00 	cmp.w	r8, #0
 8009f20:	d099      	beq.n	8009e56 <_strtol_l.constprop.0+0x1a>
 8009f22:	2a00      	cmp	r2, #0
 8009f24:	d1f6      	bne.n	8009f14 <_strtol_l.constprop.0+0xd8>
 8009f26:	f8c8 1000 	str.w	r1, [r8]
 8009f2a:	e794      	b.n	8009e56 <_strtol_l.constprop.0+0x1a>
 8009f2c:	0800e77d 	.word	0x0800e77d

08009f30 <_strtol_r>:
 8009f30:	f7ff bf84 	b.w	8009e3c <_strtol_l.constprop.0>

08009f34 <strtol>:
 8009f34:	4613      	mov	r3, r2
 8009f36:	460a      	mov	r2, r1
 8009f38:	4601      	mov	r1, r0
 8009f3a:	4802      	ldr	r0, [pc, #8]	@ (8009f44 <strtol+0x10>)
 8009f3c:	6800      	ldr	r0, [r0, #0]
 8009f3e:	f7ff bf7d 	b.w	8009e3c <_strtol_l.constprop.0>
 8009f42:	bf00      	nop
 8009f44:	200000fc 	.word	0x200000fc

08009f48 <__cvt>:
 8009f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f4c:	ec57 6b10 	vmov	r6, r7, d0
 8009f50:	2f00      	cmp	r7, #0
 8009f52:	460c      	mov	r4, r1
 8009f54:	4619      	mov	r1, r3
 8009f56:	463b      	mov	r3, r7
 8009f58:	bfbb      	ittet	lt
 8009f5a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009f5e:	461f      	movlt	r7, r3
 8009f60:	2300      	movge	r3, #0
 8009f62:	232d      	movlt	r3, #45	@ 0x2d
 8009f64:	700b      	strb	r3, [r1, #0]
 8009f66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f68:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009f6c:	4691      	mov	r9, r2
 8009f6e:	f023 0820 	bic.w	r8, r3, #32
 8009f72:	bfbc      	itt	lt
 8009f74:	4632      	movlt	r2, r6
 8009f76:	4616      	movlt	r6, r2
 8009f78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f7c:	d005      	beq.n	8009f8a <__cvt+0x42>
 8009f7e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009f82:	d100      	bne.n	8009f86 <__cvt+0x3e>
 8009f84:	3401      	adds	r4, #1
 8009f86:	2102      	movs	r1, #2
 8009f88:	e000      	b.n	8009f8c <__cvt+0x44>
 8009f8a:	2103      	movs	r1, #3
 8009f8c:	ab03      	add	r3, sp, #12
 8009f8e:	9301      	str	r3, [sp, #4]
 8009f90:	ab02      	add	r3, sp, #8
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	ec47 6b10 	vmov	d0, r6, r7
 8009f98:	4653      	mov	r3, sl
 8009f9a:	4622      	mov	r2, r4
 8009f9c:	f001 f924 	bl	800b1e8 <_dtoa_r>
 8009fa0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009fa4:	4605      	mov	r5, r0
 8009fa6:	d119      	bne.n	8009fdc <__cvt+0x94>
 8009fa8:	f019 0f01 	tst.w	r9, #1
 8009fac:	d00e      	beq.n	8009fcc <__cvt+0x84>
 8009fae:	eb00 0904 	add.w	r9, r0, r4
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	4639      	mov	r1, r7
 8009fba:	f7f6 fdbd 	bl	8000b38 <__aeabi_dcmpeq>
 8009fbe:	b108      	cbz	r0, 8009fc4 <__cvt+0x7c>
 8009fc0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009fc4:	2230      	movs	r2, #48	@ 0x30
 8009fc6:	9b03      	ldr	r3, [sp, #12]
 8009fc8:	454b      	cmp	r3, r9
 8009fca:	d31e      	bcc.n	800a00a <__cvt+0xc2>
 8009fcc:	9b03      	ldr	r3, [sp, #12]
 8009fce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fd0:	1b5b      	subs	r3, r3, r5
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	6013      	str	r3, [r2, #0]
 8009fd6:	b004      	add	sp, #16
 8009fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fdc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009fe0:	eb00 0904 	add.w	r9, r0, r4
 8009fe4:	d1e5      	bne.n	8009fb2 <__cvt+0x6a>
 8009fe6:	7803      	ldrb	r3, [r0, #0]
 8009fe8:	2b30      	cmp	r3, #48	@ 0x30
 8009fea:	d10a      	bne.n	800a002 <__cvt+0xba>
 8009fec:	2200      	movs	r2, #0
 8009fee:	2300      	movs	r3, #0
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	f7f6 fda0 	bl	8000b38 <__aeabi_dcmpeq>
 8009ff8:	b918      	cbnz	r0, 800a002 <__cvt+0xba>
 8009ffa:	f1c4 0401 	rsb	r4, r4, #1
 8009ffe:	f8ca 4000 	str.w	r4, [sl]
 800a002:	f8da 3000 	ldr.w	r3, [sl]
 800a006:	4499      	add	r9, r3
 800a008:	e7d3      	b.n	8009fb2 <__cvt+0x6a>
 800a00a:	1c59      	adds	r1, r3, #1
 800a00c:	9103      	str	r1, [sp, #12]
 800a00e:	701a      	strb	r2, [r3, #0]
 800a010:	e7d9      	b.n	8009fc6 <__cvt+0x7e>

0800a012 <__exponent>:
 800a012:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a014:	2900      	cmp	r1, #0
 800a016:	bfba      	itte	lt
 800a018:	4249      	neglt	r1, r1
 800a01a:	232d      	movlt	r3, #45	@ 0x2d
 800a01c:	232b      	movge	r3, #43	@ 0x2b
 800a01e:	2909      	cmp	r1, #9
 800a020:	7002      	strb	r2, [r0, #0]
 800a022:	7043      	strb	r3, [r0, #1]
 800a024:	dd29      	ble.n	800a07a <__exponent+0x68>
 800a026:	f10d 0307 	add.w	r3, sp, #7
 800a02a:	461d      	mov	r5, r3
 800a02c:	270a      	movs	r7, #10
 800a02e:	461a      	mov	r2, r3
 800a030:	fbb1 f6f7 	udiv	r6, r1, r7
 800a034:	fb07 1416 	mls	r4, r7, r6, r1
 800a038:	3430      	adds	r4, #48	@ 0x30
 800a03a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a03e:	460c      	mov	r4, r1
 800a040:	2c63      	cmp	r4, #99	@ 0x63
 800a042:	f103 33ff 	add.w	r3, r3, #4294967295
 800a046:	4631      	mov	r1, r6
 800a048:	dcf1      	bgt.n	800a02e <__exponent+0x1c>
 800a04a:	3130      	adds	r1, #48	@ 0x30
 800a04c:	1e94      	subs	r4, r2, #2
 800a04e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a052:	1c41      	adds	r1, r0, #1
 800a054:	4623      	mov	r3, r4
 800a056:	42ab      	cmp	r3, r5
 800a058:	d30a      	bcc.n	800a070 <__exponent+0x5e>
 800a05a:	f10d 0309 	add.w	r3, sp, #9
 800a05e:	1a9b      	subs	r3, r3, r2
 800a060:	42ac      	cmp	r4, r5
 800a062:	bf88      	it	hi
 800a064:	2300      	movhi	r3, #0
 800a066:	3302      	adds	r3, #2
 800a068:	4403      	add	r3, r0
 800a06a:	1a18      	subs	r0, r3, r0
 800a06c:	b003      	add	sp, #12
 800a06e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a070:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a074:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a078:	e7ed      	b.n	800a056 <__exponent+0x44>
 800a07a:	2330      	movs	r3, #48	@ 0x30
 800a07c:	3130      	adds	r1, #48	@ 0x30
 800a07e:	7083      	strb	r3, [r0, #2]
 800a080:	70c1      	strb	r1, [r0, #3]
 800a082:	1d03      	adds	r3, r0, #4
 800a084:	e7f1      	b.n	800a06a <__exponent+0x58>
	...

0800a088 <_printf_float>:
 800a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	b08d      	sub	sp, #52	@ 0x34
 800a08e:	460c      	mov	r4, r1
 800a090:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a094:	4616      	mov	r6, r2
 800a096:	461f      	mov	r7, r3
 800a098:	4605      	mov	r5, r0
 800a09a:	f000 ff7f 	bl	800af9c <_localeconv_r>
 800a09e:	6803      	ldr	r3, [r0, #0]
 800a0a0:	9304      	str	r3, [sp, #16]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7f6 f91c 	bl	80002e0 <strlen>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0ac:	f8d8 3000 	ldr.w	r3, [r8]
 800a0b0:	9005      	str	r0, [sp, #20]
 800a0b2:	3307      	adds	r3, #7
 800a0b4:	f023 0307 	bic.w	r3, r3, #7
 800a0b8:	f103 0208 	add.w	r2, r3, #8
 800a0bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a0c0:	f8d4 b000 	ldr.w	fp, [r4]
 800a0c4:	f8c8 2000 	str.w	r2, [r8]
 800a0c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a0d0:	9307      	str	r3, [sp, #28]
 800a0d2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a0da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0de:	4b9c      	ldr	r3, [pc, #624]	@ (800a350 <_printf_float+0x2c8>)
 800a0e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e4:	f7f6 fd5a 	bl	8000b9c <__aeabi_dcmpun>
 800a0e8:	bb70      	cbnz	r0, 800a148 <_printf_float+0xc0>
 800a0ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0ee:	4b98      	ldr	r3, [pc, #608]	@ (800a350 <_printf_float+0x2c8>)
 800a0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f4:	f7f6 fd34 	bl	8000b60 <__aeabi_dcmple>
 800a0f8:	bb30      	cbnz	r0, 800a148 <_printf_float+0xc0>
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	4640      	mov	r0, r8
 800a100:	4649      	mov	r1, r9
 800a102:	f7f6 fd23 	bl	8000b4c <__aeabi_dcmplt>
 800a106:	b110      	cbz	r0, 800a10e <_printf_float+0x86>
 800a108:	232d      	movs	r3, #45	@ 0x2d
 800a10a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a10e:	4a91      	ldr	r2, [pc, #580]	@ (800a354 <_printf_float+0x2cc>)
 800a110:	4b91      	ldr	r3, [pc, #580]	@ (800a358 <_printf_float+0x2d0>)
 800a112:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a116:	bf94      	ite	ls
 800a118:	4690      	movls	r8, r2
 800a11a:	4698      	movhi	r8, r3
 800a11c:	2303      	movs	r3, #3
 800a11e:	6123      	str	r3, [r4, #16]
 800a120:	f02b 0304 	bic.w	r3, fp, #4
 800a124:	6023      	str	r3, [r4, #0]
 800a126:	f04f 0900 	mov.w	r9, #0
 800a12a:	9700      	str	r7, [sp, #0]
 800a12c:	4633      	mov	r3, r6
 800a12e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a130:	4621      	mov	r1, r4
 800a132:	4628      	mov	r0, r5
 800a134:	f000 f9d2 	bl	800a4dc <_printf_common>
 800a138:	3001      	adds	r0, #1
 800a13a:	f040 808d 	bne.w	800a258 <_printf_float+0x1d0>
 800a13e:	f04f 30ff 	mov.w	r0, #4294967295
 800a142:	b00d      	add	sp, #52	@ 0x34
 800a144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a148:	4642      	mov	r2, r8
 800a14a:	464b      	mov	r3, r9
 800a14c:	4640      	mov	r0, r8
 800a14e:	4649      	mov	r1, r9
 800a150:	f7f6 fd24 	bl	8000b9c <__aeabi_dcmpun>
 800a154:	b140      	cbz	r0, 800a168 <_printf_float+0xe0>
 800a156:	464b      	mov	r3, r9
 800a158:	2b00      	cmp	r3, #0
 800a15a:	bfbc      	itt	lt
 800a15c:	232d      	movlt	r3, #45	@ 0x2d
 800a15e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a162:	4a7e      	ldr	r2, [pc, #504]	@ (800a35c <_printf_float+0x2d4>)
 800a164:	4b7e      	ldr	r3, [pc, #504]	@ (800a360 <_printf_float+0x2d8>)
 800a166:	e7d4      	b.n	800a112 <_printf_float+0x8a>
 800a168:	6863      	ldr	r3, [r4, #4]
 800a16a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a16e:	9206      	str	r2, [sp, #24]
 800a170:	1c5a      	adds	r2, r3, #1
 800a172:	d13b      	bne.n	800a1ec <_printf_float+0x164>
 800a174:	2306      	movs	r3, #6
 800a176:	6063      	str	r3, [r4, #4]
 800a178:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a17c:	2300      	movs	r3, #0
 800a17e:	6022      	str	r2, [r4, #0]
 800a180:	9303      	str	r3, [sp, #12]
 800a182:	ab0a      	add	r3, sp, #40	@ 0x28
 800a184:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a188:	ab09      	add	r3, sp, #36	@ 0x24
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	6861      	ldr	r1, [r4, #4]
 800a18e:	ec49 8b10 	vmov	d0, r8, r9
 800a192:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a196:	4628      	mov	r0, r5
 800a198:	f7ff fed6 	bl	8009f48 <__cvt>
 800a19c:	9b06      	ldr	r3, [sp, #24]
 800a19e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a1a0:	2b47      	cmp	r3, #71	@ 0x47
 800a1a2:	4680      	mov	r8, r0
 800a1a4:	d129      	bne.n	800a1fa <_printf_float+0x172>
 800a1a6:	1cc8      	adds	r0, r1, #3
 800a1a8:	db02      	blt.n	800a1b0 <_printf_float+0x128>
 800a1aa:	6863      	ldr	r3, [r4, #4]
 800a1ac:	4299      	cmp	r1, r3
 800a1ae:	dd41      	ble.n	800a234 <_printf_float+0x1ac>
 800a1b0:	f1aa 0a02 	sub.w	sl, sl, #2
 800a1b4:	fa5f fa8a 	uxtb.w	sl, sl
 800a1b8:	3901      	subs	r1, #1
 800a1ba:	4652      	mov	r2, sl
 800a1bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a1c0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a1c2:	f7ff ff26 	bl	800a012 <__exponent>
 800a1c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1c8:	1813      	adds	r3, r2, r0
 800a1ca:	2a01      	cmp	r2, #1
 800a1cc:	4681      	mov	r9, r0
 800a1ce:	6123      	str	r3, [r4, #16]
 800a1d0:	dc02      	bgt.n	800a1d8 <_printf_float+0x150>
 800a1d2:	6822      	ldr	r2, [r4, #0]
 800a1d4:	07d2      	lsls	r2, r2, #31
 800a1d6:	d501      	bpl.n	800a1dc <_printf_float+0x154>
 800a1d8:	3301      	adds	r3, #1
 800a1da:	6123      	str	r3, [r4, #16]
 800a1dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d0a2      	beq.n	800a12a <_printf_float+0xa2>
 800a1e4:	232d      	movs	r3, #45	@ 0x2d
 800a1e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1ea:	e79e      	b.n	800a12a <_printf_float+0xa2>
 800a1ec:	9a06      	ldr	r2, [sp, #24]
 800a1ee:	2a47      	cmp	r2, #71	@ 0x47
 800a1f0:	d1c2      	bne.n	800a178 <_printf_float+0xf0>
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d1c0      	bne.n	800a178 <_printf_float+0xf0>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e7bd      	b.n	800a176 <_printf_float+0xee>
 800a1fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1fe:	d9db      	bls.n	800a1b8 <_printf_float+0x130>
 800a200:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a204:	d118      	bne.n	800a238 <_printf_float+0x1b0>
 800a206:	2900      	cmp	r1, #0
 800a208:	6863      	ldr	r3, [r4, #4]
 800a20a:	dd0b      	ble.n	800a224 <_printf_float+0x19c>
 800a20c:	6121      	str	r1, [r4, #16]
 800a20e:	b913      	cbnz	r3, 800a216 <_printf_float+0x18e>
 800a210:	6822      	ldr	r2, [r4, #0]
 800a212:	07d0      	lsls	r0, r2, #31
 800a214:	d502      	bpl.n	800a21c <_printf_float+0x194>
 800a216:	3301      	adds	r3, #1
 800a218:	440b      	add	r3, r1
 800a21a:	6123      	str	r3, [r4, #16]
 800a21c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a21e:	f04f 0900 	mov.w	r9, #0
 800a222:	e7db      	b.n	800a1dc <_printf_float+0x154>
 800a224:	b913      	cbnz	r3, 800a22c <_printf_float+0x1a4>
 800a226:	6822      	ldr	r2, [r4, #0]
 800a228:	07d2      	lsls	r2, r2, #31
 800a22a:	d501      	bpl.n	800a230 <_printf_float+0x1a8>
 800a22c:	3302      	adds	r3, #2
 800a22e:	e7f4      	b.n	800a21a <_printf_float+0x192>
 800a230:	2301      	movs	r3, #1
 800a232:	e7f2      	b.n	800a21a <_printf_float+0x192>
 800a234:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a238:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a23a:	4299      	cmp	r1, r3
 800a23c:	db05      	blt.n	800a24a <_printf_float+0x1c2>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	6121      	str	r1, [r4, #16]
 800a242:	07d8      	lsls	r0, r3, #31
 800a244:	d5ea      	bpl.n	800a21c <_printf_float+0x194>
 800a246:	1c4b      	adds	r3, r1, #1
 800a248:	e7e7      	b.n	800a21a <_printf_float+0x192>
 800a24a:	2900      	cmp	r1, #0
 800a24c:	bfd4      	ite	le
 800a24e:	f1c1 0202 	rsble	r2, r1, #2
 800a252:	2201      	movgt	r2, #1
 800a254:	4413      	add	r3, r2
 800a256:	e7e0      	b.n	800a21a <_printf_float+0x192>
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	055a      	lsls	r2, r3, #21
 800a25c:	d407      	bmi.n	800a26e <_printf_float+0x1e6>
 800a25e:	6923      	ldr	r3, [r4, #16]
 800a260:	4642      	mov	r2, r8
 800a262:	4631      	mov	r1, r6
 800a264:	4628      	mov	r0, r5
 800a266:	47b8      	blx	r7
 800a268:	3001      	adds	r0, #1
 800a26a:	d12b      	bne.n	800a2c4 <_printf_float+0x23c>
 800a26c:	e767      	b.n	800a13e <_printf_float+0xb6>
 800a26e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a272:	f240 80dd 	bls.w	800a430 <_printf_float+0x3a8>
 800a276:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a27a:	2200      	movs	r2, #0
 800a27c:	2300      	movs	r3, #0
 800a27e:	f7f6 fc5b 	bl	8000b38 <__aeabi_dcmpeq>
 800a282:	2800      	cmp	r0, #0
 800a284:	d033      	beq.n	800a2ee <_printf_float+0x266>
 800a286:	4a37      	ldr	r2, [pc, #220]	@ (800a364 <_printf_float+0x2dc>)
 800a288:	2301      	movs	r3, #1
 800a28a:	4631      	mov	r1, r6
 800a28c:	4628      	mov	r0, r5
 800a28e:	47b8      	blx	r7
 800a290:	3001      	adds	r0, #1
 800a292:	f43f af54 	beq.w	800a13e <_printf_float+0xb6>
 800a296:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a29a:	4543      	cmp	r3, r8
 800a29c:	db02      	blt.n	800a2a4 <_printf_float+0x21c>
 800a29e:	6823      	ldr	r3, [r4, #0]
 800a2a0:	07d8      	lsls	r0, r3, #31
 800a2a2:	d50f      	bpl.n	800a2c4 <_printf_float+0x23c>
 800a2a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2a8:	4631      	mov	r1, r6
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	47b8      	blx	r7
 800a2ae:	3001      	adds	r0, #1
 800a2b0:	f43f af45 	beq.w	800a13e <_printf_float+0xb6>
 800a2b4:	f04f 0900 	mov.w	r9, #0
 800a2b8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a2bc:	f104 0a1a 	add.w	sl, r4, #26
 800a2c0:	45c8      	cmp	r8, r9
 800a2c2:	dc09      	bgt.n	800a2d8 <_printf_float+0x250>
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	079b      	lsls	r3, r3, #30
 800a2c8:	f100 8103 	bmi.w	800a4d2 <_printf_float+0x44a>
 800a2cc:	68e0      	ldr	r0, [r4, #12]
 800a2ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2d0:	4298      	cmp	r0, r3
 800a2d2:	bfb8      	it	lt
 800a2d4:	4618      	movlt	r0, r3
 800a2d6:	e734      	b.n	800a142 <_printf_float+0xba>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	4652      	mov	r2, sl
 800a2dc:	4631      	mov	r1, r6
 800a2de:	4628      	mov	r0, r5
 800a2e0:	47b8      	blx	r7
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	f43f af2b 	beq.w	800a13e <_printf_float+0xb6>
 800a2e8:	f109 0901 	add.w	r9, r9, #1
 800a2ec:	e7e8      	b.n	800a2c0 <_printf_float+0x238>
 800a2ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	dc39      	bgt.n	800a368 <_printf_float+0x2e0>
 800a2f4:	4a1b      	ldr	r2, [pc, #108]	@ (800a364 <_printf_float+0x2dc>)
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	47b8      	blx	r7
 800a2fe:	3001      	adds	r0, #1
 800a300:	f43f af1d 	beq.w	800a13e <_printf_float+0xb6>
 800a304:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a308:	ea59 0303 	orrs.w	r3, r9, r3
 800a30c:	d102      	bne.n	800a314 <_printf_float+0x28c>
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	07d9      	lsls	r1, r3, #31
 800a312:	d5d7      	bpl.n	800a2c4 <_printf_float+0x23c>
 800a314:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a318:	4631      	mov	r1, r6
 800a31a:	4628      	mov	r0, r5
 800a31c:	47b8      	blx	r7
 800a31e:	3001      	adds	r0, #1
 800a320:	f43f af0d 	beq.w	800a13e <_printf_float+0xb6>
 800a324:	f04f 0a00 	mov.w	sl, #0
 800a328:	f104 0b1a 	add.w	fp, r4, #26
 800a32c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a32e:	425b      	negs	r3, r3
 800a330:	4553      	cmp	r3, sl
 800a332:	dc01      	bgt.n	800a338 <_printf_float+0x2b0>
 800a334:	464b      	mov	r3, r9
 800a336:	e793      	b.n	800a260 <_printf_float+0x1d8>
 800a338:	2301      	movs	r3, #1
 800a33a:	465a      	mov	r2, fp
 800a33c:	4631      	mov	r1, r6
 800a33e:	4628      	mov	r0, r5
 800a340:	47b8      	blx	r7
 800a342:	3001      	adds	r0, #1
 800a344:	f43f aefb 	beq.w	800a13e <_printf_float+0xb6>
 800a348:	f10a 0a01 	add.w	sl, sl, #1
 800a34c:	e7ee      	b.n	800a32c <_printf_float+0x2a4>
 800a34e:	bf00      	nop
 800a350:	7fefffff 	.word	0x7fefffff
 800a354:	0800e87d 	.word	0x0800e87d
 800a358:	0800e881 	.word	0x0800e881
 800a35c:	0800e885 	.word	0x0800e885
 800a360:	0800e889 	.word	0x0800e889
 800a364:	0800e88d 	.word	0x0800e88d
 800a368:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a36a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a36e:	4553      	cmp	r3, sl
 800a370:	bfa8      	it	ge
 800a372:	4653      	movge	r3, sl
 800a374:	2b00      	cmp	r3, #0
 800a376:	4699      	mov	r9, r3
 800a378:	dc36      	bgt.n	800a3e8 <_printf_float+0x360>
 800a37a:	f04f 0b00 	mov.w	fp, #0
 800a37e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a382:	f104 021a 	add.w	r2, r4, #26
 800a386:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a388:	9306      	str	r3, [sp, #24]
 800a38a:	eba3 0309 	sub.w	r3, r3, r9
 800a38e:	455b      	cmp	r3, fp
 800a390:	dc31      	bgt.n	800a3f6 <_printf_float+0x36e>
 800a392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a394:	459a      	cmp	sl, r3
 800a396:	dc3a      	bgt.n	800a40e <_printf_float+0x386>
 800a398:	6823      	ldr	r3, [r4, #0]
 800a39a:	07da      	lsls	r2, r3, #31
 800a39c:	d437      	bmi.n	800a40e <_printf_float+0x386>
 800a39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a0:	ebaa 0903 	sub.w	r9, sl, r3
 800a3a4:	9b06      	ldr	r3, [sp, #24]
 800a3a6:	ebaa 0303 	sub.w	r3, sl, r3
 800a3aa:	4599      	cmp	r9, r3
 800a3ac:	bfa8      	it	ge
 800a3ae:	4699      	movge	r9, r3
 800a3b0:	f1b9 0f00 	cmp.w	r9, #0
 800a3b4:	dc33      	bgt.n	800a41e <_printf_float+0x396>
 800a3b6:	f04f 0800 	mov.w	r8, #0
 800a3ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3be:	f104 0b1a 	add.w	fp, r4, #26
 800a3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c4:	ebaa 0303 	sub.w	r3, sl, r3
 800a3c8:	eba3 0309 	sub.w	r3, r3, r9
 800a3cc:	4543      	cmp	r3, r8
 800a3ce:	f77f af79 	ble.w	800a2c4 <_printf_float+0x23c>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	465a      	mov	r2, fp
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	4628      	mov	r0, r5
 800a3da:	47b8      	blx	r7
 800a3dc:	3001      	adds	r0, #1
 800a3de:	f43f aeae 	beq.w	800a13e <_printf_float+0xb6>
 800a3e2:	f108 0801 	add.w	r8, r8, #1
 800a3e6:	e7ec      	b.n	800a3c2 <_printf_float+0x33a>
 800a3e8:	4642      	mov	r2, r8
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	47b8      	blx	r7
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d1c2      	bne.n	800a37a <_printf_float+0x2f2>
 800a3f4:	e6a3      	b.n	800a13e <_printf_float+0xb6>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	4631      	mov	r1, r6
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	9206      	str	r2, [sp, #24]
 800a3fe:	47b8      	blx	r7
 800a400:	3001      	adds	r0, #1
 800a402:	f43f ae9c 	beq.w	800a13e <_printf_float+0xb6>
 800a406:	9a06      	ldr	r2, [sp, #24]
 800a408:	f10b 0b01 	add.w	fp, fp, #1
 800a40c:	e7bb      	b.n	800a386 <_printf_float+0x2fe>
 800a40e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a412:	4631      	mov	r1, r6
 800a414:	4628      	mov	r0, r5
 800a416:	47b8      	blx	r7
 800a418:	3001      	adds	r0, #1
 800a41a:	d1c0      	bne.n	800a39e <_printf_float+0x316>
 800a41c:	e68f      	b.n	800a13e <_printf_float+0xb6>
 800a41e:	9a06      	ldr	r2, [sp, #24]
 800a420:	464b      	mov	r3, r9
 800a422:	4442      	add	r2, r8
 800a424:	4631      	mov	r1, r6
 800a426:	4628      	mov	r0, r5
 800a428:	47b8      	blx	r7
 800a42a:	3001      	adds	r0, #1
 800a42c:	d1c3      	bne.n	800a3b6 <_printf_float+0x32e>
 800a42e:	e686      	b.n	800a13e <_printf_float+0xb6>
 800a430:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a434:	f1ba 0f01 	cmp.w	sl, #1
 800a438:	dc01      	bgt.n	800a43e <_printf_float+0x3b6>
 800a43a:	07db      	lsls	r3, r3, #31
 800a43c:	d536      	bpl.n	800a4ac <_printf_float+0x424>
 800a43e:	2301      	movs	r3, #1
 800a440:	4642      	mov	r2, r8
 800a442:	4631      	mov	r1, r6
 800a444:	4628      	mov	r0, r5
 800a446:	47b8      	blx	r7
 800a448:	3001      	adds	r0, #1
 800a44a:	f43f ae78 	beq.w	800a13e <_printf_float+0xb6>
 800a44e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a452:	4631      	mov	r1, r6
 800a454:	4628      	mov	r0, r5
 800a456:	47b8      	blx	r7
 800a458:	3001      	adds	r0, #1
 800a45a:	f43f ae70 	beq.w	800a13e <_printf_float+0xb6>
 800a45e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a462:	2200      	movs	r2, #0
 800a464:	2300      	movs	r3, #0
 800a466:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a46a:	f7f6 fb65 	bl	8000b38 <__aeabi_dcmpeq>
 800a46e:	b9c0      	cbnz	r0, 800a4a2 <_printf_float+0x41a>
 800a470:	4653      	mov	r3, sl
 800a472:	f108 0201 	add.w	r2, r8, #1
 800a476:	4631      	mov	r1, r6
 800a478:	4628      	mov	r0, r5
 800a47a:	47b8      	blx	r7
 800a47c:	3001      	adds	r0, #1
 800a47e:	d10c      	bne.n	800a49a <_printf_float+0x412>
 800a480:	e65d      	b.n	800a13e <_printf_float+0xb6>
 800a482:	2301      	movs	r3, #1
 800a484:	465a      	mov	r2, fp
 800a486:	4631      	mov	r1, r6
 800a488:	4628      	mov	r0, r5
 800a48a:	47b8      	blx	r7
 800a48c:	3001      	adds	r0, #1
 800a48e:	f43f ae56 	beq.w	800a13e <_printf_float+0xb6>
 800a492:	f108 0801 	add.w	r8, r8, #1
 800a496:	45d0      	cmp	r8, sl
 800a498:	dbf3      	blt.n	800a482 <_printf_float+0x3fa>
 800a49a:	464b      	mov	r3, r9
 800a49c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a4a0:	e6df      	b.n	800a262 <_printf_float+0x1da>
 800a4a2:	f04f 0800 	mov.w	r8, #0
 800a4a6:	f104 0b1a 	add.w	fp, r4, #26
 800a4aa:	e7f4      	b.n	800a496 <_printf_float+0x40e>
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	4642      	mov	r2, r8
 800a4b0:	e7e1      	b.n	800a476 <_printf_float+0x3ee>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	464a      	mov	r2, r9
 800a4b6:	4631      	mov	r1, r6
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	47b8      	blx	r7
 800a4bc:	3001      	adds	r0, #1
 800a4be:	f43f ae3e 	beq.w	800a13e <_printf_float+0xb6>
 800a4c2:	f108 0801 	add.w	r8, r8, #1
 800a4c6:	68e3      	ldr	r3, [r4, #12]
 800a4c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a4ca:	1a5b      	subs	r3, r3, r1
 800a4cc:	4543      	cmp	r3, r8
 800a4ce:	dcf0      	bgt.n	800a4b2 <_printf_float+0x42a>
 800a4d0:	e6fc      	b.n	800a2cc <_printf_float+0x244>
 800a4d2:	f04f 0800 	mov.w	r8, #0
 800a4d6:	f104 0919 	add.w	r9, r4, #25
 800a4da:	e7f4      	b.n	800a4c6 <_printf_float+0x43e>

0800a4dc <_printf_common>:
 800a4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e0:	4616      	mov	r6, r2
 800a4e2:	4698      	mov	r8, r3
 800a4e4:	688a      	ldr	r2, [r1, #8]
 800a4e6:	690b      	ldr	r3, [r1, #16]
 800a4e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	bfb8      	it	lt
 800a4f0:	4613      	movlt	r3, r2
 800a4f2:	6033      	str	r3, [r6, #0]
 800a4f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a4f8:	4607      	mov	r7, r0
 800a4fa:	460c      	mov	r4, r1
 800a4fc:	b10a      	cbz	r2, 800a502 <_printf_common+0x26>
 800a4fe:	3301      	adds	r3, #1
 800a500:	6033      	str	r3, [r6, #0]
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	0699      	lsls	r1, r3, #26
 800a506:	bf42      	ittt	mi
 800a508:	6833      	ldrmi	r3, [r6, #0]
 800a50a:	3302      	addmi	r3, #2
 800a50c:	6033      	strmi	r3, [r6, #0]
 800a50e:	6825      	ldr	r5, [r4, #0]
 800a510:	f015 0506 	ands.w	r5, r5, #6
 800a514:	d106      	bne.n	800a524 <_printf_common+0x48>
 800a516:	f104 0a19 	add.w	sl, r4, #25
 800a51a:	68e3      	ldr	r3, [r4, #12]
 800a51c:	6832      	ldr	r2, [r6, #0]
 800a51e:	1a9b      	subs	r3, r3, r2
 800a520:	42ab      	cmp	r3, r5
 800a522:	dc26      	bgt.n	800a572 <_printf_common+0x96>
 800a524:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a528:	6822      	ldr	r2, [r4, #0]
 800a52a:	3b00      	subs	r3, #0
 800a52c:	bf18      	it	ne
 800a52e:	2301      	movne	r3, #1
 800a530:	0692      	lsls	r2, r2, #26
 800a532:	d42b      	bmi.n	800a58c <_printf_common+0xb0>
 800a534:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a538:	4641      	mov	r1, r8
 800a53a:	4638      	mov	r0, r7
 800a53c:	47c8      	blx	r9
 800a53e:	3001      	adds	r0, #1
 800a540:	d01e      	beq.n	800a580 <_printf_common+0xa4>
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	6922      	ldr	r2, [r4, #16]
 800a546:	f003 0306 	and.w	r3, r3, #6
 800a54a:	2b04      	cmp	r3, #4
 800a54c:	bf02      	ittt	eq
 800a54e:	68e5      	ldreq	r5, [r4, #12]
 800a550:	6833      	ldreq	r3, [r6, #0]
 800a552:	1aed      	subeq	r5, r5, r3
 800a554:	68a3      	ldr	r3, [r4, #8]
 800a556:	bf0c      	ite	eq
 800a558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a55c:	2500      	movne	r5, #0
 800a55e:	4293      	cmp	r3, r2
 800a560:	bfc4      	itt	gt
 800a562:	1a9b      	subgt	r3, r3, r2
 800a564:	18ed      	addgt	r5, r5, r3
 800a566:	2600      	movs	r6, #0
 800a568:	341a      	adds	r4, #26
 800a56a:	42b5      	cmp	r5, r6
 800a56c:	d11a      	bne.n	800a5a4 <_printf_common+0xc8>
 800a56e:	2000      	movs	r0, #0
 800a570:	e008      	b.n	800a584 <_printf_common+0xa8>
 800a572:	2301      	movs	r3, #1
 800a574:	4652      	mov	r2, sl
 800a576:	4641      	mov	r1, r8
 800a578:	4638      	mov	r0, r7
 800a57a:	47c8      	blx	r9
 800a57c:	3001      	adds	r0, #1
 800a57e:	d103      	bne.n	800a588 <_printf_common+0xac>
 800a580:	f04f 30ff 	mov.w	r0, #4294967295
 800a584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a588:	3501      	adds	r5, #1
 800a58a:	e7c6      	b.n	800a51a <_printf_common+0x3e>
 800a58c:	18e1      	adds	r1, r4, r3
 800a58e:	1c5a      	adds	r2, r3, #1
 800a590:	2030      	movs	r0, #48	@ 0x30
 800a592:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a596:	4422      	add	r2, r4
 800a598:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a59c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5a0:	3302      	adds	r3, #2
 800a5a2:	e7c7      	b.n	800a534 <_printf_common+0x58>
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	4622      	mov	r2, r4
 800a5a8:	4641      	mov	r1, r8
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	47c8      	blx	r9
 800a5ae:	3001      	adds	r0, #1
 800a5b0:	d0e6      	beq.n	800a580 <_printf_common+0xa4>
 800a5b2:	3601      	adds	r6, #1
 800a5b4:	e7d9      	b.n	800a56a <_printf_common+0x8e>
	...

0800a5b8 <_printf_i>:
 800a5b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5bc:	7e0f      	ldrb	r7, [r1, #24]
 800a5be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5c0:	2f78      	cmp	r7, #120	@ 0x78
 800a5c2:	4691      	mov	r9, r2
 800a5c4:	4680      	mov	r8, r0
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	469a      	mov	sl, r3
 800a5ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5ce:	d807      	bhi.n	800a5e0 <_printf_i+0x28>
 800a5d0:	2f62      	cmp	r7, #98	@ 0x62
 800a5d2:	d80a      	bhi.n	800a5ea <_printf_i+0x32>
 800a5d4:	2f00      	cmp	r7, #0
 800a5d6:	f000 80d2 	beq.w	800a77e <_printf_i+0x1c6>
 800a5da:	2f58      	cmp	r7, #88	@ 0x58
 800a5dc:	f000 80b9 	beq.w	800a752 <_printf_i+0x19a>
 800a5e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a5e8:	e03a      	b.n	800a660 <_printf_i+0xa8>
 800a5ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a5ee:	2b15      	cmp	r3, #21
 800a5f0:	d8f6      	bhi.n	800a5e0 <_printf_i+0x28>
 800a5f2:	a101      	add	r1, pc, #4	@ (adr r1, 800a5f8 <_printf_i+0x40>)
 800a5f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5f8:	0800a651 	.word	0x0800a651
 800a5fc:	0800a665 	.word	0x0800a665
 800a600:	0800a5e1 	.word	0x0800a5e1
 800a604:	0800a5e1 	.word	0x0800a5e1
 800a608:	0800a5e1 	.word	0x0800a5e1
 800a60c:	0800a5e1 	.word	0x0800a5e1
 800a610:	0800a665 	.word	0x0800a665
 800a614:	0800a5e1 	.word	0x0800a5e1
 800a618:	0800a5e1 	.word	0x0800a5e1
 800a61c:	0800a5e1 	.word	0x0800a5e1
 800a620:	0800a5e1 	.word	0x0800a5e1
 800a624:	0800a765 	.word	0x0800a765
 800a628:	0800a68f 	.word	0x0800a68f
 800a62c:	0800a71f 	.word	0x0800a71f
 800a630:	0800a5e1 	.word	0x0800a5e1
 800a634:	0800a5e1 	.word	0x0800a5e1
 800a638:	0800a787 	.word	0x0800a787
 800a63c:	0800a5e1 	.word	0x0800a5e1
 800a640:	0800a68f 	.word	0x0800a68f
 800a644:	0800a5e1 	.word	0x0800a5e1
 800a648:	0800a5e1 	.word	0x0800a5e1
 800a64c:	0800a727 	.word	0x0800a727
 800a650:	6833      	ldr	r3, [r6, #0]
 800a652:	1d1a      	adds	r2, r3, #4
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	6032      	str	r2, [r6, #0]
 800a658:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a65c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a660:	2301      	movs	r3, #1
 800a662:	e09d      	b.n	800a7a0 <_printf_i+0x1e8>
 800a664:	6833      	ldr	r3, [r6, #0]
 800a666:	6820      	ldr	r0, [r4, #0]
 800a668:	1d19      	adds	r1, r3, #4
 800a66a:	6031      	str	r1, [r6, #0]
 800a66c:	0606      	lsls	r6, r0, #24
 800a66e:	d501      	bpl.n	800a674 <_printf_i+0xbc>
 800a670:	681d      	ldr	r5, [r3, #0]
 800a672:	e003      	b.n	800a67c <_printf_i+0xc4>
 800a674:	0645      	lsls	r5, r0, #25
 800a676:	d5fb      	bpl.n	800a670 <_printf_i+0xb8>
 800a678:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a67c:	2d00      	cmp	r5, #0
 800a67e:	da03      	bge.n	800a688 <_printf_i+0xd0>
 800a680:	232d      	movs	r3, #45	@ 0x2d
 800a682:	426d      	negs	r5, r5
 800a684:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a688:	4859      	ldr	r0, [pc, #356]	@ (800a7f0 <_printf_i+0x238>)
 800a68a:	230a      	movs	r3, #10
 800a68c:	e011      	b.n	800a6b2 <_printf_i+0xfa>
 800a68e:	6821      	ldr	r1, [r4, #0]
 800a690:	6833      	ldr	r3, [r6, #0]
 800a692:	0608      	lsls	r0, r1, #24
 800a694:	f853 5b04 	ldr.w	r5, [r3], #4
 800a698:	d402      	bmi.n	800a6a0 <_printf_i+0xe8>
 800a69a:	0649      	lsls	r1, r1, #25
 800a69c:	bf48      	it	mi
 800a69e:	b2ad      	uxthmi	r5, r5
 800a6a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6a2:	4853      	ldr	r0, [pc, #332]	@ (800a7f0 <_printf_i+0x238>)
 800a6a4:	6033      	str	r3, [r6, #0]
 800a6a6:	bf14      	ite	ne
 800a6a8:	230a      	movne	r3, #10
 800a6aa:	2308      	moveq	r3, #8
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6b2:	6866      	ldr	r6, [r4, #4]
 800a6b4:	60a6      	str	r6, [r4, #8]
 800a6b6:	2e00      	cmp	r6, #0
 800a6b8:	bfa2      	ittt	ge
 800a6ba:	6821      	ldrge	r1, [r4, #0]
 800a6bc:	f021 0104 	bicge.w	r1, r1, #4
 800a6c0:	6021      	strge	r1, [r4, #0]
 800a6c2:	b90d      	cbnz	r5, 800a6c8 <_printf_i+0x110>
 800a6c4:	2e00      	cmp	r6, #0
 800a6c6:	d04b      	beq.n	800a760 <_printf_i+0x1a8>
 800a6c8:	4616      	mov	r6, r2
 800a6ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6ce:	fb03 5711 	mls	r7, r3, r1, r5
 800a6d2:	5dc7      	ldrb	r7, [r0, r7]
 800a6d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6d8:	462f      	mov	r7, r5
 800a6da:	42bb      	cmp	r3, r7
 800a6dc:	460d      	mov	r5, r1
 800a6de:	d9f4      	bls.n	800a6ca <_printf_i+0x112>
 800a6e0:	2b08      	cmp	r3, #8
 800a6e2:	d10b      	bne.n	800a6fc <_printf_i+0x144>
 800a6e4:	6823      	ldr	r3, [r4, #0]
 800a6e6:	07df      	lsls	r7, r3, #31
 800a6e8:	d508      	bpl.n	800a6fc <_printf_i+0x144>
 800a6ea:	6923      	ldr	r3, [r4, #16]
 800a6ec:	6861      	ldr	r1, [r4, #4]
 800a6ee:	4299      	cmp	r1, r3
 800a6f0:	bfde      	ittt	le
 800a6f2:	2330      	movle	r3, #48	@ 0x30
 800a6f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a6f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a6fc:	1b92      	subs	r2, r2, r6
 800a6fe:	6122      	str	r2, [r4, #16]
 800a700:	f8cd a000 	str.w	sl, [sp]
 800a704:	464b      	mov	r3, r9
 800a706:	aa03      	add	r2, sp, #12
 800a708:	4621      	mov	r1, r4
 800a70a:	4640      	mov	r0, r8
 800a70c:	f7ff fee6 	bl	800a4dc <_printf_common>
 800a710:	3001      	adds	r0, #1
 800a712:	d14a      	bne.n	800a7aa <_printf_i+0x1f2>
 800a714:	f04f 30ff 	mov.w	r0, #4294967295
 800a718:	b004      	add	sp, #16
 800a71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	f043 0320 	orr.w	r3, r3, #32
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	4833      	ldr	r0, [pc, #204]	@ (800a7f4 <_printf_i+0x23c>)
 800a728:	2778      	movs	r7, #120	@ 0x78
 800a72a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a72e:	6823      	ldr	r3, [r4, #0]
 800a730:	6831      	ldr	r1, [r6, #0]
 800a732:	061f      	lsls	r7, r3, #24
 800a734:	f851 5b04 	ldr.w	r5, [r1], #4
 800a738:	d402      	bmi.n	800a740 <_printf_i+0x188>
 800a73a:	065f      	lsls	r7, r3, #25
 800a73c:	bf48      	it	mi
 800a73e:	b2ad      	uxthmi	r5, r5
 800a740:	6031      	str	r1, [r6, #0]
 800a742:	07d9      	lsls	r1, r3, #31
 800a744:	bf44      	itt	mi
 800a746:	f043 0320 	orrmi.w	r3, r3, #32
 800a74a:	6023      	strmi	r3, [r4, #0]
 800a74c:	b11d      	cbz	r5, 800a756 <_printf_i+0x19e>
 800a74e:	2310      	movs	r3, #16
 800a750:	e7ac      	b.n	800a6ac <_printf_i+0xf4>
 800a752:	4827      	ldr	r0, [pc, #156]	@ (800a7f0 <_printf_i+0x238>)
 800a754:	e7e9      	b.n	800a72a <_printf_i+0x172>
 800a756:	6823      	ldr	r3, [r4, #0]
 800a758:	f023 0320 	bic.w	r3, r3, #32
 800a75c:	6023      	str	r3, [r4, #0]
 800a75e:	e7f6      	b.n	800a74e <_printf_i+0x196>
 800a760:	4616      	mov	r6, r2
 800a762:	e7bd      	b.n	800a6e0 <_printf_i+0x128>
 800a764:	6833      	ldr	r3, [r6, #0]
 800a766:	6825      	ldr	r5, [r4, #0]
 800a768:	6961      	ldr	r1, [r4, #20]
 800a76a:	1d18      	adds	r0, r3, #4
 800a76c:	6030      	str	r0, [r6, #0]
 800a76e:	062e      	lsls	r6, r5, #24
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	d501      	bpl.n	800a778 <_printf_i+0x1c0>
 800a774:	6019      	str	r1, [r3, #0]
 800a776:	e002      	b.n	800a77e <_printf_i+0x1c6>
 800a778:	0668      	lsls	r0, r5, #25
 800a77a:	d5fb      	bpl.n	800a774 <_printf_i+0x1bc>
 800a77c:	8019      	strh	r1, [r3, #0]
 800a77e:	2300      	movs	r3, #0
 800a780:	6123      	str	r3, [r4, #16]
 800a782:	4616      	mov	r6, r2
 800a784:	e7bc      	b.n	800a700 <_printf_i+0x148>
 800a786:	6833      	ldr	r3, [r6, #0]
 800a788:	1d1a      	adds	r2, r3, #4
 800a78a:	6032      	str	r2, [r6, #0]
 800a78c:	681e      	ldr	r6, [r3, #0]
 800a78e:	6862      	ldr	r2, [r4, #4]
 800a790:	2100      	movs	r1, #0
 800a792:	4630      	mov	r0, r6
 800a794:	f7f5 fd54 	bl	8000240 <memchr>
 800a798:	b108      	cbz	r0, 800a79e <_printf_i+0x1e6>
 800a79a:	1b80      	subs	r0, r0, r6
 800a79c:	6060      	str	r0, [r4, #4]
 800a79e:	6863      	ldr	r3, [r4, #4]
 800a7a0:	6123      	str	r3, [r4, #16]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7a8:	e7aa      	b.n	800a700 <_printf_i+0x148>
 800a7aa:	6923      	ldr	r3, [r4, #16]
 800a7ac:	4632      	mov	r2, r6
 800a7ae:	4649      	mov	r1, r9
 800a7b0:	4640      	mov	r0, r8
 800a7b2:	47d0      	blx	sl
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d0ad      	beq.n	800a714 <_printf_i+0x15c>
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	079b      	lsls	r3, r3, #30
 800a7bc:	d413      	bmi.n	800a7e6 <_printf_i+0x22e>
 800a7be:	68e0      	ldr	r0, [r4, #12]
 800a7c0:	9b03      	ldr	r3, [sp, #12]
 800a7c2:	4298      	cmp	r0, r3
 800a7c4:	bfb8      	it	lt
 800a7c6:	4618      	movlt	r0, r3
 800a7c8:	e7a6      	b.n	800a718 <_printf_i+0x160>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	4632      	mov	r2, r6
 800a7ce:	4649      	mov	r1, r9
 800a7d0:	4640      	mov	r0, r8
 800a7d2:	47d0      	blx	sl
 800a7d4:	3001      	adds	r0, #1
 800a7d6:	d09d      	beq.n	800a714 <_printf_i+0x15c>
 800a7d8:	3501      	adds	r5, #1
 800a7da:	68e3      	ldr	r3, [r4, #12]
 800a7dc:	9903      	ldr	r1, [sp, #12]
 800a7de:	1a5b      	subs	r3, r3, r1
 800a7e0:	42ab      	cmp	r3, r5
 800a7e2:	dcf2      	bgt.n	800a7ca <_printf_i+0x212>
 800a7e4:	e7eb      	b.n	800a7be <_printf_i+0x206>
 800a7e6:	2500      	movs	r5, #0
 800a7e8:	f104 0619 	add.w	r6, r4, #25
 800a7ec:	e7f5      	b.n	800a7da <_printf_i+0x222>
 800a7ee:	bf00      	nop
 800a7f0:	0800e88f 	.word	0x0800e88f
 800a7f4:	0800e8a0 	.word	0x0800e8a0

0800a7f8 <_scanf_float>:
 800a7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7fc:	b087      	sub	sp, #28
 800a7fe:	4617      	mov	r7, r2
 800a800:	9303      	str	r3, [sp, #12]
 800a802:	688b      	ldr	r3, [r1, #8]
 800a804:	1e5a      	subs	r2, r3, #1
 800a806:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a80a:	bf81      	itttt	hi
 800a80c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a810:	eb03 0b05 	addhi.w	fp, r3, r5
 800a814:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a818:	608b      	strhi	r3, [r1, #8]
 800a81a:	680b      	ldr	r3, [r1, #0]
 800a81c:	460a      	mov	r2, r1
 800a81e:	f04f 0500 	mov.w	r5, #0
 800a822:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a826:	f842 3b1c 	str.w	r3, [r2], #28
 800a82a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a82e:	4680      	mov	r8, r0
 800a830:	460c      	mov	r4, r1
 800a832:	bf98      	it	ls
 800a834:	f04f 0b00 	movls.w	fp, #0
 800a838:	9201      	str	r2, [sp, #4]
 800a83a:	4616      	mov	r6, r2
 800a83c:	46aa      	mov	sl, r5
 800a83e:	46a9      	mov	r9, r5
 800a840:	9502      	str	r5, [sp, #8]
 800a842:	68a2      	ldr	r2, [r4, #8]
 800a844:	b152      	cbz	r2, 800a85c <_scanf_float+0x64>
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	2b4e      	cmp	r3, #78	@ 0x4e
 800a84c:	d864      	bhi.n	800a918 <_scanf_float+0x120>
 800a84e:	2b40      	cmp	r3, #64	@ 0x40
 800a850:	d83c      	bhi.n	800a8cc <_scanf_float+0xd4>
 800a852:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a856:	b2c8      	uxtb	r0, r1
 800a858:	280e      	cmp	r0, #14
 800a85a:	d93a      	bls.n	800a8d2 <_scanf_float+0xda>
 800a85c:	f1b9 0f00 	cmp.w	r9, #0
 800a860:	d003      	beq.n	800a86a <_scanf_float+0x72>
 800a862:	6823      	ldr	r3, [r4, #0]
 800a864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a86e:	f1ba 0f01 	cmp.w	sl, #1
 800a872:	f200 8117 	bhi.w	800aaa4 <_scanf_float+0x2ac>
 800a876:	9b01      	ldr	r3, [sp, #4]
 800a878:	429e      	cmp	r6, r3
 800a87a:	f200 8108 	bhi.w	800aa8e <_scanf_float+0x296>
 800a87e:	2001      	movs	r0, #1
 800a880:	b007      	add	sp, #28
 800a882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a886:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a88a:	2a0d      	cmp	r2, #13
 800a88c:	d8e6      	bhi.n	800a85c <_scanf_float+0x64>
 800a88e:	a101      	add	r1, pc, #4	@ (adr r1, 800a894 <_scanf_float+0x9c>)
 800a890:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a894:	0800a9db 	.word	0x0800a9db
 800a898:	0800a85d 	.word	0x0800a85d
 800a89c:	0800a85d 	.word	0x0800a85d
 800a8a0:	0800a85d 	.word	0x0800a85d
 800a8a4:	0800aa3b 	.word	0x0800aa3b
 800a8a8:	0800aa13 	.word	0x0800aa13
 800a8ac:	0800a85d 	.word	0x0800a85d
 800a8b0:	0800a85d 	.word	0x0800a85d
 800a8b4:	0800a9e9 	.word	0x0800a9e9
 800a8b8:	0800a85d 	.word	0x0800a85d
 800a8bc:	0800a85d 	.word	0x0800a85d
 800a8c0:	0800a85d 	.word	0x0800a85d
 800a8c4:	0800a85d 	.word	0x0800a85d
 800a8c8:	0800a9a1 	.word	0x0800a9a1
 800a8cc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a8d0:	e7db      	b.n	800a88a <_scanf_float+0x92>
 800a8d2:	290e      	cmp	r1, #14
 800a8d4:	d8c2      	bhi.n	800a85c <_scanf_float+0x64>
 800a8d6:	a001      	add	r0, pc, #4	@ (adr r0, 800a8dc <_scanf_float+0xe4>)
 800a8d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a8dc:	0800a991 	.word	0x0800a991
 800a8e0:	0800a85d 	.word	0x0800a85d
 800a8e4:	0800a991 	.word	0x0800a991
 800a8e8:	0800aa27 	.word	0x0800aa27
 800a8ec:	0800a85d 	.word	0x0800a85d
 800a8f0:	0800a939 	.word	0x0800a939
 800a8f4:	0800a977 	.word	0x0800a977
 800a8f8:	0800a977 	.word	0x0800a977
 800a8fc:	0800a977 	.word	0x0800a977
 800a900:	0800a977 	.word	0x0800a977
 800a904:	0800a977 	.word	0x0800a977
 800a908:	0800a977 	.word	0x0800a977
 800a90c:	0800a977 	.word	0x0800a977
 800a910:	0800a977 	.word	0x0800a977
 800a914:	0800a977 	.word	0x0800a977
 800a918:	2b6e      	cmp	r3, #110	@ 0x6e
 800a91a:	d809      	bhi.n	800a930 <_scanf_float+0x138>
 800a91c:	2b60      	cmp	r3, #96	@ 0x60
 800a91e:	d8b2      	bhi.n	800a886 <_scanf_float+0x8e>
 800a920:	2b54      	cmp	r3, #84	@ 0x54
 800a922:	d07b      	beq.n	800aa1c <_scanf_float+0x224>
 800a924:	2b59      	cmp	r3, #89	@ 0x59
 800a926:	d199      	bne.n	800a85c <_scanf_float+0x64>
 800a928:	2d07      	cmp	r5, #7
 800a92a:	d197      	bne.n	800a85c <_scanf_float+0x64>
 800a92c:	2508      	movs	r5, #8
 800a92e:	e02c      	b.n	800a98a <_scanf_float+0x192>
 800a930:	2b74      	cmp	r3, #116	@ 0x74
 800a932:	d073      	beq.n	800aa1c <_scanf_float+0x224>
 800a934:	2b79      	cmp	r3, #121	@ 0x79
 800a936:	e7f6      	b.n	800a926 <_scanf_float+0x12e>
 800a938:	6821      	ldr	r1, [r4, #0]
 800a93a:	05c8      	lsls	r0, r1, #23
 800a93c:	d51b      	bpl.n	800a976 <_scanf_float+0x17e>
 800a93e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a942:	6021      	str	r1, [r4, #0]
 800a944:	f109 0901 	add.w	r9, r9, #1
 800a948:	f1bb 0f00 	cmp.w	fp, #0
 800a94c:	d003      	beq.n	800a956 <_scanf_float+0x15e>
 800a94e:	3201      	adds	r2, #1
 800a950:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a954:	60a2      	str	r2, [r4, #8]
 800a956:	68a3      	ldr	r3, [r4, #8]
 800a958:	3b01      	subs	r3, #1
 800a95a:	60a3      	str	r3, [r4, #8]
 800a95c:	6923      	ldr	r3, [r4, #16]
 800a95e:	3301      	adds	r3, #1
 800a960:	6123      	str	r3, [r4, #16]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	3b01      	subs	r3, #1
 800a966:	2b00      	cmp	r3, #0
 800a968:	607b      	str	r3, [r7, #4]
 800a96a:	f340 8087 	ble.w	800aa7c <_scanf_float+0x284>
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	3301      	adds	r3, #1
 800a972:	603b      	str	r3, [r7, #0]
 800a974:	e765      	b.n	800a842 <_scanf_float+0x4a>
 800a976:	eb1a 0105 	adds.w	r1, sl, r5
 800a97a:	f47f af6f 	bne.w	800a85c <_scanf_float+0x64>
 800a97e:	6822      	ldr	r2, [r4, #0]
 800a980:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a984:	6022      	str	r2, [r4, #0]
 800a986:	460d      	mov	r5, r1
 800a988:	468a      	mov	sl, r1
 800a98a:	f806 3b01 	strb.w	r3, [r6], #1
 800a98e:	e7e2      	b.n	800a956 <_scanf_float+0x15e>
 800a990:	6822      	ldr	r2, [r4, #0]
 800a992:	0610      	lsls	r0, r2, #24
 800a994:	f57f af62 	bpl.w	800a85c <_scanf_float+0x64>
 800a998:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a99c:	6022      	str	r2, [r4, #0]
 800a99e:	e7f4      	b.n	800a98a <_scanf_float+0x192>
 800a9a0:	f1ba 0f00 	cmp.w	sl, #0
 800a9a4:	d10e      	bne.n	800a9c4 <_scanf_float+0x1cc>
 800a9a6:	f1b9 0f00 	cmp.w	r9, #0
 800a9aa:	d10e      	bne.n	800a9ca <_scanf_float+0x1d2>
 800a9ac:	6822      	ldr	r2, [r4, #0]
 800a9ae:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a9b2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a9b6:	d108      	bne.n	800a9ca <_scanf_float+0x1d2>
 800a9b8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a9bc:	6022      	str	r2, [r4, #0]
 800a9be:	f04f 0a01 	mov.w	sl, #1
 800a9c2:	e7e2      	b.n	800a98a <_scanf_float+0x192>
 800a9c4:	f1ba 0f02 	cmp.w	sl, #2
 800a9c8:	d055      	beq.n	800aa76 <_scanf_float+0x27e>
 800a9ca:	2d01      	cmp	r5, #1
 800a9cc:	d002      	beq.n	800a9d4 <_scanf_float+0x1dc>
 800a9ce:	2d04      	cmp	r5, #4
 800a9d0:	f47f af44 	bne.w	800a85c <_scanf_float+0x64>
 800a9d4:	3501      	adds	r5, #1
 800a9d6:	b2ed      	uxtb	r5, r5
 800a9d8:	e7d7      	b.n	800a98a <_scanf_float+0x192>
 800a9da:	f1ba 0f01 	cmp.w	sl, #1
 800a9de:	f47f af3d 	bne.w	800a85c <_scanf_float+0x64>
 800a9e2:	f04f 0a02 	mov.w	sl, #2
 800a9e6:	e7d0      	b.n	800a98a <_scanf_float+0x192>
 800a9e8:	b97d      	cbnz	r5, 800aa0a <_scanf_float+0x212>
 800a9ea:	f1b9 0f00 	cmp.w	r9, #0
 800a9ee:	f47f af38 	bne.w	800a862 <_scanf_float+0x6a>
 800a9f2:	6822      	ldr	r2, [r4, #0]
 800a9f4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a9f8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a9fc:	f040 8108 	bne.w	800ac10 <_scanf_float+0x418>
 800aa00:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aa04:	6022      	str	r2, [r4, #0]
 800aa06:	2501      	movs	r5, #1
 800aa08:	e7bf      	b.n	800a98a <_scanf_float+0x192>
 800aa0a:	2d03      	cmp	r5, #3
 800aa0c:	d0e2      	beq.n	800a9d4 <_scanf_float+0x1dc>
 800aa0e:	2d05      	cmp	r5, #5
 800aa10:	e7de      	b.n	800a9d0 <_scanf_float+0x1d8>
 800aa12:	2d02      	cmp	r5, #2
 800aa14:	f47f af22 	bne.w	800a85c <_scanf_float+0x64>
 800aa18:	2503      	movs	r5, #3
 800aa1a:	e7b6      	b.n	800a98a <_scanf_float+0x192>
 800aa1c:	2d06      	cmp	r5, #6
 800aa1e:	f47f af1d 	bne.w	800a85c <_scanf_float+0x64>
 800aa22:	2507      	movs	r5, #7
 800aa24:	e7b1      	b.n	800a98a <_scanf_float+0x192>
 800aa26:	6822      	ldr	r2, [r4, #0]
 800aa28:	0591      	lsls	r1, r2, #22
 800aa2a:	f57f af17 	bpl.w	800a85c <_scanf_float+0x64>
 800aa2e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800aa32:	6022      	str	r2, [r4, #0]
 800aa34:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa38:	e7a7      	b.n	800a98a <_scanf_float+0x192>
 800aa3a:	6822      	ldr	r2, [r4, #0]
 800aa3c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800aa40:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800aa44:	d006      	beq.n	800aa54 <_scanf_float+0x25c>
 800aa46:	0550      	lsls	r0, r2, #21
 800aa48:	f57f af08 	bpl.w	800a85c <_scanf_float+0x64>
 800aa4c:	f1b9 0f00 	cmp.w	r9, #0
 800aa50:	f000 80de 	beq.w	800ac10 <_scanf_float+0x418>
 800aa54:	0591      	lsls	r1, r2, #22
 800aa56:	bf58      	it	pl
 800aa58:	9902      	ldrpl	r1, [sp, #8]
 800aa5a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aa5e:	bf58      	it	pl
 800aa60:	eba9 0101 	subpl.w	r1, r9, r1
 800aa64:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800aa68:	bf58      	it	pl
 800aa6a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aa6e:	6022      	str	r2, [r4, #0]
 800aa70:	f04f 0900 	mov.w	r9, #0
 800aa74:	e789      	b.n	800a98a <_scanf_float+0x192>
 800aa76:	f04f 0a03 	mov.w	sl, #3
 800aa7a:	e786      	b.n	800a98a <_scanf_float+0x192>
 800aa7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aa80:	4639      	mov	r1, r7
 800aa82:	4640      	mov	r0, r8
 800aa84:	4798      	blx	r3
 800aa86:	2800      	cmp	r0, #0
 800aa88:	f43f aedb 	beq.w	800a842 <_scanf_float+0x4a>
 800aa8c:	e6e6      	b.n	800a85c <_scanf_float+0x64>
 800aa8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa96:	463a      	mov	r2, r7
 800aa98:	4640      	mov	r0, r8
 800aa9a:	4798      	blx	r3
 800aa9c:	6923      	ldr	r3, [r4, #16]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	6123      	str	r3, [r4, #16]
 800aaa2:	e6e8      	b.n	800a876 <_scanf_float+0x7e>
 800aaa4:	1e6b      	subs	r3, r5, #1
 800aaa6:	2b06      	cmp	r3, #6
 800aaa8:	d824      	bhi.n	800aaf4 <_scanf_float+0x2fc>
 800aaaa:	2d02      	cmp	r5, #2
 800aaac:	d836      	bhi.n	800ab1c <_scanf_float+0x324>
 800aaae:	9b01      	ldr	r3, [sp, #4]
 800aab0:	429e      	cmp	r6, r3
 800aab2:	f67f aee4 	bls.w	800a87e <_scanf_float+0x86>
 800aab6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aaba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aabe:	463a      	mov	r2, r7
 800aac0:	4640      	mov	r0, r8
 800aac2:	4798      	blx	r3
 800aac4:	6923      	ldr	r3, [r4, #16]
 800aac6:	3b01      	subs	r3, #1
 800aac8:	6123      	str	r3, [r4, #16]
 800aaca:	e7f0      	b.n	800aaae <_scanf_float+0x2b6>
 800aacc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aad0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800aad4:	463a      	mov	r2, r7
 800aad6:	4640      	mov	r0, r8
 800aad8:	4798      	blx	r3
 800aada:	6923      	ldr	r3, [r4, #16]
 800aadc:	3b01      	subs	r3, #1
 800aade:	6123      	str	r3, [r4, #16]
 800aae0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aae4:	fa5f fa8a 	uxtb.w	sl, sl
 800aae8:	f1ba 0f02 	cmp.w	sl, #2
 800aaec:	d1ee      	bne.n	800aacc <_scanf_float+0x2d4>
 800aaee:	3d03      	subs	r5, #3
 800aaf0:	b2ed      	uxtb	r5, r5
 800aaf2:	1b76      	subs	r6, r6, r5
 800aaf4:	6823      	ldr	r3, [r4, #0]
 800aaf6:	05da      	lsls	r2, r3, #23
 800aaf8:	d530      	bpl.n	800ab5c <_scanf_float+0x364>
 800aafa:	055b      	lsls	r3, r3, #21
 800aafc:	d511      	bpl.n	800ab22 <_scanf_float+0x32a>
 800aafe:	9b01      	ldr	r3, [sp, #4]
 800ab00:	429e      	cmp	r6, r3
 800ab02:	f67f aebc 	bls.w	800a87e <_scanf_float+0x86>
 800ab06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab0e:	463a      	mov	r2, r7
 800ab10:	4640      	mov	r0, r8
 800ab12:	4798      	blx	r3
 800ab14:	6923      	ldr	r3, [r4, #16]
 800ab16:	3b01      	subs	r3, #1
 800ab18:	6123      	str	r3, [r4, #16]
 800ab1a:	e7f0      	b.n	800aafe <_scanf_float+0x306>
 800ab1c:	46aa      	mov	sl, r5
 800ab1e:	46b3      	mov	fp, r6
 800ab20:	e7de      	b.n	800aae0 <_scanf_float+0x2e8>
 800ab22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ab26:	6923      	ldr	r3, [r4, #16]
 800ab28:	2965      	cmp	r1, #101	@ 0x65
 800ab2a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab2e:	f106 35ff 	add.w	r5, r6, #4294967295
 800ab32:	6123      	str	r3, [r4, #16]
 800ab34:	d00c      	beq.n	800ab50 <_scanf_float+0x358>
 800ab36:	2945      	cmp	r1, #69	@ 0x45
 800ab38:	d00a      	beq.n	800ab50 <_scanf_float+0x358>
 800ab3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab3e:	463a      	mov	r2, r7
 800ab40:	4640      	mov	r0, r8
 800ab42:	4798      	blx	r3
 800ab44:	6923      	ldr	r3, [r4, #16]
 800ab46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	1eb5      	subs	r5, r6, #2
 800ab4e:	6123      	str	r3, [r4, #16]
 800ab50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab54:	463a      	mov	r2, r7
 800ab56:	4640      	mov	r0, r8
 800ab58:	4798      	blx	r3
 800ab5a:	462e      	mov	r6, r5
 800ab5c:	6822      	ldr	r2, [r4, #0]
 800ab5e:	f012 0210 	ands.w	r2, r2, #16
 800ab62:	d001      	beq.n	800ab68 <_scanf_float+0x370>
 800ab64:	2000      	movs	r0, #0
 800ab66:	e68b      	b.n	800a880 <_scanf_float+0x88>
 800ab68:	7032      	strb	r2, [r6, #0]
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ab70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab74:	d11c      	bne.n	800abb0 <_scanf_float+0x3b8>
 800ab76:	9b02      	ldr	r3, [sp, #8]
 800ab78:	454b      	cmp	r3, r9
 800ab7a:	eba3 0209 	sub.w	r2, r3, r9
 800ab7e:	d123      	bne.n	800abc8 <_scanf_float+0x3d0>
 800ab80:	9901      	ldr	r1, [sp, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	4640      	mov	r0, r8
 800ab86:	f002 fca7 	bl	800d4d8 <_strtod_r>
 800ab8a:	9b03      	ldr	r3, [sp, #12]
 800ab8c:	6821      	ldr	r1, [r4, #0]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f011 0f02 	tst.w	r1, #2
 800ab94:	ec57 6b10 	vmov	r6, r7, d0
 800ab98:	f103 0204 	add.w	r2, r3, #4
 800ab9c:	d01f      	beq.n	800abde <_scanf_float+0x3e6>
 800ab9e:	9903      	ldr	r1, [sp, #12]
 800aba0:	600a      	str	r2, [r1, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	e9c3 6700 	strd	r6, r7, [r3]
 800aba8:	68e3      	ldr	r3, [r4, #12]
 800abaa:	3301      	adds	r3, #1
 800abac:	60e3      	str	r3, [r4, #12]
 800abae:	e7d9      	b.n	800ab64 <_scanf_float+0x36c>
 800abb0:	9b04      	ldr	r3, [sp, #16]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d0e4      	beq.n	800ab80 <_scanf_float+0x388>
 800abb6:	9905      	ldr	r1, [sp, #20]
 800abb8:	230a      	movs	r3, #10
 800abba:	3101      	adds	r1, #1
 800abbc:	4640      	mov	r0, r8
 800abbe:	f7ff f9b7 	bl	8009f30 <_strtol_r>
 800abc2:	9b04      	ldr	r3, [sp, #16]
 800abc4:	9e05      	ldr	r6, [sp, #20]
 800abc6:	1ac2      	subs	r2, r0, r3
 800abc8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800abcc:	429e      	cmp	r6, r3
 800abce:	bf28      	it	cs
 800abd0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800abd4:	4910      	ldr	r1, [pc, #64]	@ (800ac18 <_scanf_float+0x420>)
 800abd6:	4630      	mov	r0, r6
 800abd8:	f000 f918 	bl	800ae0c <siprintf>
 800abdc:	e7d0      	b.n	800ab80 <_scanf_float+0x388>
 800abde:	f011 0f04 	tst.w	r1, #4
 800abe2:	9903      	ldr	r1, [sp, #12]
 800abe4:	600a      	str	r2, [r1, #0]
 800abe6:	d1dc      	bne.n	800aba2 <_scanf_float+0x3aa>
 800abe8:	681d      	ldr	r5, [r3, #0]
 800abea:	4632      	mov	r2, r6
 800abec:	463b      	mov	r3, r7
 800abee:	4630      	mov	r0, r6
 800abf0:	4639      	mov	r1, r7
 800abf2:	f7f5 ffd3 	bl	8000b9c <__aeabi_dcmpun>
 800abf6:	b128      	cbz	r0, 800ac04 <_scanf_float+0x40c>
 800abf8:	4808      	ldr	r0, [pc, #32]	@ (800ac1c <_scanf_float+0x424>)
 800abfa:	f000 fa47 	bl	800b08c <nanf>
 800abfe:	ed85 0a00 	vstr	s0, [r5]
 800ac02:	e7d1      	b.n	800aba8 <_scanf_float+0x3b0>
 800ac04:	4630      	mov	r0, r6
 800ac06:	4639      	mov	r1, r7
 800ac08:	f7f6 f826 	bl	8000c58 <__aeabi_d2f>
 800ac0c:	6028      	str	r0, [r5, #0]
 800ac0e:	e7cb      	b.n	800aba8 <_scanf_float+0x3b0>
 800ac10:	f04f 0900 	mov.w	r9, #0
 800ac14:	e629      	b.n	800a86a <_scanf_float+0x72>
 800ac16:	bf00      	nop
 800ac18:	0800e8b1 	.word	0x0800e8b1
 800ac1c:	0800e962 	.word	0x0800e962

0800ac20 <std>:
 800ac20:	2300      	movs	r3, #0
 800ac22:	b510      	push	{r4, lr}
 800ac24:	4604      	mov	r4, r0
 800ac26:	e9c0 3300 	strd	r3, r3, [r0]
 800ac2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac2e:	6083      	str	r3, [r0, #8]
 800ac30:	8181      	strh	r1, [r0, #12]
 800ac32:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac34:	81c2      	strh	r2, [r0, #14]
 800ac36:	6183      	str	r3, [r0, #24]
 800ac38:	4619      	mov	r1, r3
 800ac3a:	2208      	movs	r2, #8
 800ac3c:	305c      	adds	r0, #92	@ 0x5c
 800ac3e:	f000 f948 	bl	800aed2 <memset>
 800ac42:	4b0d      	ldr	r3, [pc, #52]	@ (800ac78 <std+0x58>)
 800ac44:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac46:	4b0d      	ldr	r3, [pc, #52]	@ (800ac7c <std+0x5c>)
 800ac48:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ac80 <std+0x60>)
 800ac4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac84 <std+0x64>)
 800ac50:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac52:	4b0d      	ldr	r3, [pc, #52]	@ (800ac88 <std+0x68>)
 800ac54:	6224      	str	r4, [r4, #32]
 800ac56:	429c      	cmp	r4, r3
 800ac58:	d006      	beq.n	800ac68 <std+0x48>
 800ac5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac5e:	4294      	cmp	r4, r2
 800ac60:	d002      	beq.n	800ac68 <std+0x48>
 800ac62:	33d0      	adds	r3, #208	@ 0xd0
 800ac64:	429c      	cmp	r4, r3
 800ac66:	d105      	bne.n	800ac74 <std+0x54>
 800ac68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac70:	f000 ba08 	b.w	800b084 <__retarget_lock_init_recursive>
 800ac74:	bd10      	pop	{r4, pc}
 800ac76:	bf00      	nop
 800ac78:	0800ae4d 	.word	0x0800ae4d
 800ac7c:	0800ae6f 	.word	0x0800ae6f
 800ac80:	0800aea7 	.word	0x0800aea7
 800ac84:	0800aecb 	.word	0x0800aecb
 800ac88:	200006dc 	.word	0x200006dc

0800ac8c <stdio_exit_handler>:
 800ac8c:	4a02      	ldr	r2, [pc, #8]	@ (800ac98 <stdio_exit_handler+0xc>)
 800ac8e:	4903      	ldr	r1, [pc, #12]	@ (800ac9c <stdio_exit_handler+0x10>)
 800ac90:	4803      	ldr	r0, [pc, #12]	@ (800aca0 <stdio_exit_handler+0x14>)
 800ac92:	f000 b869 	b.w	800ad68 <_fwalk_sglue>
 800ac96:	bf00      	nop
 800ac98:	200000f0 	.word	0x200000f0
 800ac9c:	0800d89d 	.word	0x0800d89d
 800aca0:	20000100 	.word	0x20000100

0800aca4 <cleanup_stdio>:
 800aca4:	6841      	ldr	r1, [r0, #4]
 800aca6:	4b0c      	ldr	r3, [pc, #48]	@ (800acd8 <cleanup_stdio+0x34>)
 800aca8:	4299      	cmp	r1, r3
 800acaa:	b510      	push	{r4, lr}
 800acac:	4604      	mov	r4, r0
 800acae:	d001      	beq.n	800acb4 <cleanup_stdio+0x10>
 800acb0:	f002 fdf4 	bl	800d89c <_fflush_r>
 800acb4:	68a1      	ldr	r1, [r4, #8]
 800acb6:	4b09      	ldr	r3, [pc, #36]	@ (800acdc <cleanup_stdio+0x38>)
 800acb8:	4299      	cmp	r1, r3
 800acba:	d002      	beq.n	800acc2 <cleanup_stdio+0x1e>
 800acbc:	4620      	mov	r0, r4
 800acbe:	f002 fded 	bl	800d89c <_fflush_r>
 800acc2:	68e1      	ldr	r1, [r4, #12]
 800acc4:	4b06      	ldr	r3, [pc, #24]	@ (800ace0 <cleanup_stdio+0x3c>)
 800acc6:	4299      	cmp	r1, r3
 800acc8:	d004      	beq.n	800acd4 <cleanup_stdio+0x30>
 800acca:	4620      	mov	r0, r4
 800accc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acd0:	f002 bde4 	b.w	800d89c <_fflush_r>
 800acd4:	bd10      	pop	{r4, pc}
 800acd6:	bf00      	nop
 800acd8:	200006dc 	.word	0x200006dc
 800acdc:	20000744 	.word	0x20000744
 800ace0:	200007ac 	.word	0x200007ac

0800ace4 <global_stdio_init.part.0>:
 800ace4:	b510      	push	{r4, lr}
 800ace6:	4b0b      	ldr	r3, [pc, #44]	@ (800ad14 <global_stdio_init.part.0+0x30>)
 800ace8:	4c0b      	ldr	r4, [pc, #44]	@ (800ad18 <global_stdio_init.part.0+0x34>)
 800acea:	4a0c      	ldr	r2, [pc, #48]	@ (800ad1c <global_stdio_init.part.0+0x38>)
 800acec:	601a      	str	r2, [r3, #0]
 800acee:	4620      	mov	r0, r4
 800acf0:	2200      	movs	r2, #0
 800acf2:	2104      	movs	r1, #4
 800acf4:	f7ff ff94 	bl	800ac20 <std>
 800acf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800acfc:	2201      	movs	r2, #1
 800acfe:	2109      	movs	r1, #9
 800ad00:	f7ff ff8e 	bl	800ac20 <std>
 800ad04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad08:	2202      	movs	r2, #2
 800ad0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad0e:	2112      	movs	r1, #18
 800ad10:	f7ff bf86 	b.w	800ac20 <std>
 800ad14:	20000814 	.word	0x20000814
 800ad18:	200006dc 	.word	0x200006dc
 800ad1c:	0800ac8d 	.word	0x0800ac8d

0800ad20 <__sfp_lock_acquire>:
 800ad20:	4801      	ldr	r0, [pc, #4]	@ (800ad28 <__sfp_lock_acquire+0x8>)
 800ad22:	f000 b9b0 	b.w	800b086 <__retarget_lock_acquire_recursive>
 800ad26:	bf00      	nop
 800ad28:	2000081d 	.word	0x2000081d

0800ad2c <__sfp_lock_release>:
 800ad2c:	4801      	ldr	r0, [pc, #4]	@ (800ad34 <__sfp_lock_release+0x8>)
 800ad2e:	f000 b9ab 	b.w	800b088 <__retarget_lock_release_recursive>
 800ad32:	bf00      	nop
 800ad34:	2000081d 	.word	0x2000081d

0800ad38 <__sinit>:
 800ad38:	b510      	push	{r4, lr}
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	f7ff fff0 	bl	800ad20 <__sfp_lock_acquire>
 800ad40:	6a23      	ldr	r3, [r4, #32]
 800ad42:	b11b      	cbz	r3, 800ad4c <__sinit+0x14>
 800ad44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad48:	f7ff bff0 	b.w	800ad2c <__sfp_lock_release>
 800ad4c:	4b04      	ldr	r3, [pc, #16]	@ (800ad60 <__sinit+0x28>)
 800ad4e:	6223      	str	r3, [r4, #32]
 800ad50:	4b04      	ldr	r3, [pc, #16]	@ (800ad64 <__sinit+0x2c>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1f5      	bne.n	800ad44 <__sinit+0xc>
 800ad58:	f7ff ffc4 	bl	800ace4 <global_stdio_init.part.0>
 800ad5c:	e7f2      	b.n	800ad44 <__sinit+0xc>
 800ad5e:	bf00      	nop
 800ad60:	0800aca5 	.word	0x0800aca5
 800ad64:	20000814 	.word	0x20000814

0800ad68 <_fwalk_sglue>:
 800ad68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad6c:	4607      	mov	r7, r0
 800ad6e:	4688      	mov	r8, r1
 800ad70:	4614      	mov	r4, r2
 800ad72:	2600      	movs	r6, #0
 800ad74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad78:	f1b9 0901 	subs.w	r9, r9, #1
 800ad7c:	d505      	bpl.n	800ad8a <_fwalk_sglue+0x22>
 800ad7e:	6824      	ldr	r4, [r4, #0]
 800ad80:	2c00      	cmp	r4, #0
 800ad82:	d1f7      	bne.n	800ad74 <_fwalk_sglue+0xc>
 800ad84:	4630      	mov	r0, r6
 800ad86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad8a:	89ab      	ldrh	r3, [r5, #12]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d907      	bls.n	800ada0 <_fwalk_sglue+0x38>
 800ad90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad94:	3301      	adds	r3, #1
 800ad96:	d003      	beq.n	800ada0 <_fwalk_sglue+0x38>
 800ad98:	4629      	mov	r1, r5
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	47c0      	blx	r8
 800ad9e:	4306      	orrs	r6, r0
 800ada0:	3568      	adds	r5, #104	@ 0x68
 800ada2:	e7e9      	b.n	800ad78 <_fwalk_sglue+0x10>

0800ada4 <sniprintf>:
 800ada4:	b40c      	push	{r2, r3}
 800ada6:	b530      	push	{r4, r5, lr}
 800ada8:	4b17      	ldr	r3, [pc, #92]	@ (800ae08 <sniprintf+0x64>)
 800adaa:	1e0c      	subs	r4, r1, #0
 800adac:	681d      	ldr	r5, [r3, #0]
 800adae:	b09d      	sub	sp, #116	@ 0x74
 800adb0:	da08      	bge.n	800adc4 <sniprintf+0x20>
 800adb2:	238b      	movs	r3, #139	@ 0x8b
 800adb4:	602b      	str	r3, [r5, #0]
 800adb6:	f04f 30ff 	mov.w	r0, #4294967295
 800adba:	b01d      	add	sp, #116	@ 0x74
 800adbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adc0:	b002      	add	sp, #8
 800adc2:	4770      	bx	lr
 800adc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800adc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800adcc:	bf14      	ite	ne
 800adce:	f104 33ff 	addne.w	r3, r4, #4294967295
 800add2:	4623      	moveq	r3, r4
 800add4:	9304      	str	r3, [sp, #16]
 800add6:	9307      	str	r3, [sp, #28]
 800add8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800addc:	9002      	str	r0, [sp, #8]
 800adde:	9006      	str	r0, [sp, #24]
 800ade0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ade4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ade6:	ab21      	add	r3, sp, #132	@ 0x84
 800ade8:	a902      	add	r1, sp, #8
 800adea:	4628      	mov	r0, r5
 800adec:	9301      	str	r3, [sp, #4]
 800adee:	f002 fbd5 	bl	800d59c <_svfiprintf_r>
 800adf2:	1c43      	adds	r3, r0, #1
 800adf4:	bfbc      	itt	lt
 800adf6:	238b      	movlt	r3, #139	@ 0x8b
 800adf8:	602b      	strlt	r3, [r5, #0]
 800adfa:	2c00      	cmp	r4, #0
 800adfc:	d0dd      	beq.n	800adba <sniprintf+0x16>
 800adfe:	9b02      	ldr	r3, [sp, #8]
 800ae00:	2200      	movs	r2, #0
 800ae02:	701a      	strb	r2, [r3, #0]
 800ae04:	e7d9      	b.n	800adba <sniprintf+0x16>
 800ae06:	bf00      	nop
 800ae08:	200000fc 	.word	0x200000fc

0800ae0c <siprintf>:
 800ae0c:	b40e      	push	{r1, r2, r3}
 800ae0e:	b500      	push	{lr}
 800ae10:	b09c      	sub	sp, #112	@ 0x70
 800ae12:	ab1d      	add	r3, sp, #116	@ 0x74
 800ae14:	9002      	str	r0, [sp, #8]
 800ae16:	9006      	str	r0, [sp, #24]
 800ae18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ae1c:	4809      	ldr	r0, [pc, #36]	@ (800ae44 <siprintf+0x38>)
 800ae1e:	9107      	str	r1, [sp, #28]
 800ae20:	9104      	str	r1, [sp, #16]
 800ae22:	4909      	ldr	r1, [pc, #36]	@ (800ae48 <siprintf+0x3c>)
 800ae24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae28:	9105      	str	r1, [sp, #20]
 800ae2a:	6800      	ldr	r0, [r0, #0]
 800ae2c:	9301      	str	r3, [sp, #4]
 800ae2e:	a902      	add	r1, sp, #8
 800ae30:	f002 fbb4 	bl	800d59c <_svfiprintf_r>
 800ae34:	9b02      	ldr	r3, [sp, #8]
 800ae36:	2200      	movs	r2, #0
 800ae38:	701a      	strb	r2, [r3, #0]
 800ae3a:	b01c      	add	sp, #112	@ 0x70
 800ae3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae40:	b003      	add	sp, #12
 800ae42:	4770      	bx	lr
 800ae44:	200000fc 	.word	0x200000fc
 800ae48:	ffff0208 	.word	0xffff0208

0800ae4c <__sread>:
 800ae4c:	b510      	push	{r4, lr}
 800ae4e:	460c      	mov	r4, r1
 800ae50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae54:	f000 f8c8 	bl	800afe8 <_read_r>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	bfab      	itete	ge
 800ae5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae5e:	89a3      	ldrhlt	r3, [r4, #12]
 800ae60:	181b      	addge	r3, r3, r0
 800ae62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae66:	bfac      	ite	ge
 800ae68:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae6a:	81a3      	strhlt	r3, [r4, #12]
 800ae6c:	bd10      	pop	{r4, pc}

0800ae6e <__swrite>:
 800ae6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae72:	461f      	mov	r7, r3
 800ae74:	898b      	ldrh	r3, [r1, #12]
 800ae76:	05db      	lsls	r3, r3, #23
 800ae78:	4605      	mov	r5, r0
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	4616      	mov	r6, r2
 800ae7e:	d505      	bpl.n	800ae8c <__swrite+0x1e>
 800ae80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae84:	2302      	movs	r3, #2
 800ae86:	2200      	movs	r2, #0
 800ae88:	f000 f89c 	bl	800afc4 <_lseek_r>
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae96:	81a3      	strh	r3, [r4, #12]
 800ae98:	4632      	mov	r2, r6
 800ae9a:	463b      	mov	r3, r7
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aea2:	f000 b8b3 	b.w	800b00c <_write_r>

0800aea6 <__sseek>:
 800aea6:	b510      	push	{r4, lr}
 800aea8:	460c      	mov	r4, r1
 800aeaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeae:	f000 f889 	bl	800afc4 <_lseek_r>
 800aeb2:	1c43      	adds	r3, r0, #1
 800aeb4:	89a3      	ldrh	r3, [r4, #12]
 800aeb6:	bf15      	itete	ne
 800aeb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aeba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aebe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aec2:	81a3      	strheq	r3, [r4, #12]
 800aec4:	bf18      	it	ne
 800aec6:	81a3      	strhne	r3, [r4, #12]
 800aec8:	bd10      	pop	{r4, pc}

0800aeca <__sclose>:
 800aeca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aece:	f000 b869 	b.w	800afa4 <_close_r>

0800aed2 <memset>:
 800aed2:	4402      	add	r2, r0
 800aed4:	4603      	mov	r3, r0
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d100      	bne.n	800aedc <memset+0xa>
 800aeda:	4770      	bx	lr
 800aedc:	f803 1b01 	strb.w	r1, [r3], #1
 800aee0:	e7f9      	b.n	800aed6 <memset+0x4>
	...

0800aee4 <strtok>:
 800aee4:	4b16      	ldr	r3, [pc, #88]	@ (800af40 <strtok+0x5c>)
 800aee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeea:	681f      	ldr	r7, [r3, #0]
 800aeec:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800aeee:	4605      	mov	r5, r0
 800aef0:	460e      	mov	r6, r1
 800aef2:	b9ec      	cbnz	r4, 800af30 <strtok+0x4c>
 800aef4:	2050      	movs	r0, #80	@ 0x50
 800aef6:	f000 ff85 	bl	800be04 <malloc>
 800aefa:	4602      	mov	r2, r0
 800aefc:	6478      	str	r0, [r7, #68]	@ 0x44
 800aefe:	b920      	cbnz	r0, 800af0a <strtok+0x26>
 800af00:	4b10      	ldr	r3, [pc, #64]	@ (800af44 <strtok+0x60>)
 800af02:	4811      	ldr	r0, [pc, #68]	@ (800af48 <strtok+0x64>)
 800af04:	215b      	movs	r1, #91	@ 0x5b
 800af06:	f000 f8c7 	bl	800b098 <__assert_func>
 800af0a:	e9c0 4400 	strd	r4, r4, [r0]
 800af0e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800af12:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800af16:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800af1a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800af1e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800af22:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800af26:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800af2a:	6184      	str	r4, [r0, #24]
 800af2c:	7704      	strb	r4, [r0, #28]
 800af2e:	6244      	str	r4, [r0, #36]	@ 0x24
 800af30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af32:	4631      	mov	r1, r6
 800af34:	4628      	mov	r0, r5
 800af36:	2301      	movs	r3, #1
 800af38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af3c:	f000 b806 	b.w	800af4c <__strtok_r>
 800af40:	200000fc 	.word	0x200000fc
 800af44:	0800e8b6 	.word	0x0800e8b6
 800af48:	0800e8cd 	.word	0x0800e8cd

0800af4c <__strtok_r>:
 800af4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af4e:	4604      	mov	r4, r0
 800af50:	b908      	cbnz	r0, 800af56 <__strtok_r+0xa>
 800af52:	6814      	ldr	r4, [r2, #0]
 800af54:	b144      	cbz	r4, 800af68 <__strtok_r+0x1c>
 800af56:	4620      	mov	r0, r4
 800af58:	f814 5b01 	ldrb.w	r5, [r4], #1
 800af5c:	460f      	mov	r7, r1
 800af5e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800af62:	b91e      	cbnz	r6, 800af6c <__strtok_r+0x20>
 800af64:	b965      	cbnz	r5, 800af80 <__strtok_r+0x34>
 800af66:	6015      	str	r5, [r2, #0]
 800af68:	2000      	movs	r0, #0
 800af6a:	e005      	b.n	800af78 <__strtok_r+0x2c>
 800af6c:	42b5      	cmp	r5, r6
 800af6e:	d1f6      	bne.n	800af5e <__strtok_r+0x12>
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1f0      	bne.n	800af56 <__strtok_r+0xa>
 800af74:	6014      	str	r4, [r2, #0]
 800af76:	7003      	strb	r3, [r0, #0]
 800af78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af7a:	461c      	mov	r4, r3
 800af7c:	e00c      	b.n	800af98 <__strtok_r+0x4c>
 800af7e:	b915      	cbnz	r5, 800af86 <__strtok_r+0x3a>
 800af80:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af84:	460e      	mov	r6, r1
 800af86:	f816 5b01 	ldrb.w	r5, [r6], #1
 800af8a:	42ab      	cmp	r3, r5
 800af8c:	d1f7      	bne.n	800af7e <__strtok_r+0x32>
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d0f3      	beq.n	800af7a <__strtok_r+0x2e>
 800af92:	2300      	movs	r3, #0
 800af94:	f804 3c01 	strb.w	r3, [r4, #-1]
 800af98:	6014      	str	r4, [r2, #0]
 800af9a:	e7ed      	b.n	800af78 <__strtok_r+0x2c>

0800af9c <_localeconv_r>:
 800af9c:	4800      	ldr	r0, [pc, #0]	@ (800afa0 <_localeconv_r+0x4>)
 800af9e:	4770      	bx	lr
 800afa0:	2000023c 	.word	0x2000023c

0800afa4 <_close_r>:
 800afa4:	b538      	push	{r3, r4, r5, lr}
 800afa6:	4d06      	ldr	r5, [pc, #24]	@ (800afc0 <_close_r+0x1c>)
 800afa8:	2300      	movs	r3, #0
 800afaa:	4604      	mov	r4, r0
 800afac:	4608      	mov	r0, r1
 800afae:	602b      	str	r3, [r5, #0]
 800afb0:	f7f6 fcf8 	bl	80019a4 <_close>
 800afb4:	1c43      	adds	r3, r0, #1
 800afb6:	d102      	bne.n	800afbe <_close_r+0x1a>
 800afb8:	682b      	ldr	r3, [r5, #0]
 800afba:	b103      	cbz	r3, 800afbe <_close_r+0x1a>
 800afbc:	6023      	str	r3, [r4, #0]
 800afbe:	bd38      	pop	{r3, r4, r5, pc}
 800afc0:	20000818 	.word	0x20000818

0800afc4 <_lseek_r>:
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	4d07      	ldr	r5, [pc, #28]	@ (800afe4 <_lseek_r+0x20>)
 800afc8:	4604      	mov	r4, r0
 800afca:	4608      	mov	r0, r1
 800afcc:	4611      	mov	r1, r2
 800afce:	2200      	movs	r2, #0
 800afd0:	602a      	str	r2, [r5, #0]
 800afd2:	461a      	mov	r2, r3
 800afd4:	f7f6 fd0d 	bl	80019f2 <_lseek>
 800afd8:	1c43      	adds	r3, r0, #1
 800afda:	d102      	bne.n	800afe2 <_lseek_r+0x1e>
 800afdc:	682b      	ldr	r3, [r5, #0]
 800afde:	b103      	cbz	r3, 800afe2 <_lseek_r+0x1e>
 800afe0:	6023      	str	r3, [r4, #0]
 800afe2:	bd38      	pop	{r3, r4, r5, pc}
 800afe4:	20000818 	.word	0x20000818

0800afe8 <_read_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4d07      	ldr	r5, [pc, #28]	@ (800b008 <_read_r+0x20>)
 800afec:	4604      	mov	r4, r0
 800afee:	4608      	mov	r0, r1
 800aff0:	4611      	mov	r1, r2
 800aff2:	2200      	movs	r2, #0
 800aff4:	602a      	str	r2, [r5, #0]
 800aff6:	461a      	mov	r2, r3
 800aff8:	f7f6 fc9b 	bl	8001932 <_read>
 800affc:	1c43      	adds	r3, r0, #1
 800affe:	d102      	bne.n	800b006 <_read_r+0x1e>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	b103      	cbz	r3, 800b006 <_read_r+0x1e>
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	bd38      	pop	{r3, r4, r5, pc}
 800b008:	20000818 	.word	0x20000818

0800b00c <_write_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4d07      	ldr	r5, [pc, #28]	@ (800b02c <_write_r+0x20>)
 800b010:	4604      	mov	r4, r0
 800b012:	4608      	mov	r0, r1
 800b014:	4611      	mov	r1, r2
 800b016:	2200      	movs	r2, #0
 800b018:	602a      	str	r2, [r5, #0]
 800b01a:	461a      	mov	r2, r3
 800b01c:	f7f6 fca6 	bl	800196c <_write>
 800b020:	1c43      	adds	r3, r0, #1
 800b022:	d102      	bne.n	800b02a <_write_r+0x1e>
 800b024:	682b      	ldr	r3, [r5, #0]
 800b026:	b103      	cbz	r3, 800b02a <_write_r+0x1e>
 800b028:	6023      	str	r3, [r4, #0]
 800b02a:	bd38      	pop	{r3, r4, r5, pc}
 800b02c:	20000818 	.word	0x20000818

0800b030 <__errno>:
 800b030:	4b01      	ldr	r3, [pc, #4]	@ (800b038 <__errno+0x8>)
 800b032:	6818      	ldr	r0, [r3, #0]
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	200000fc 	.word	0x200000fc

0800b03c <__libc_init_array>:
 800b03c:	b570      	push	{r4, r5, r6, lr}
 800b03e:	4d0d      	ldr	r5, [pc, #52]	@ (800b074 <__libc_init_array+0x38>)
 800b040:	4c0d      	ldr	r4, [pc, #52]	@ (800b078 <__libc_init_array+0x3c>)
 800b042:	1b64      	subs	r4, r4, r5
 800b044:	10a4      	asrs	r4, r4, #2
 800b046:	2600      	movs	r6, #0
 800b048:	42a6      	cmp	r6, r4
 800b04a:	d109      	bne.n	800b060 <__libc_init_array+0x24>
 800b04c:	4d0b      	ldr	r5, [pc, #44]	@ (800b07c <__libc_init_array+0x40>)
 800b04e:	4c0c      	ldr	r4, [pc, #48]	@ (800b080 <__libc_init_array+0x44>)
 800b050:	f003 faf8 	bl	800e644 <_init>
 800b054:	1b64      	subs	r4, r4, r5
 800b056:	10a4      	asrs	r4, r4, #2
 800b058:	2600      	movs	r6, #0
 800b05a:	42a6      	cmp	r6, r4
 800b05c:	d105      	bne.n	800b06a <__libc_init_array+0x2e>
 800b05e:	bd70      	pop	{r4, r5, r6, pc}
 800b060:	f855 3b04 	ldr.w	r3, [r5], #4
 800b064:	4798      	blx	r3
 800b066:	3601      	adds	r6, #1
 800b068:	e7ee      	b.n	800b048 <__libc_init_array+0xc>
 800b06a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b06e:	4798      	blx	r3
 800b070:	3601      	adds	r6, #1
 800b072:	e7f2      	b.n	800b05a <__libc_init_array+0x1e>
 800b074:	0800ec0c 	.word	0x0800ec0c
 800b078:	0800ec0c 	.word	0x0800ec0c
 800b07c:	0800ec0c 	.word	0x0800ec0c
 800b080:	0800ec10 	.word	0x0800ec10

0800b084 <__retarget_lock_init_recursive>:
 800b084:	4770      	bx	lr

0800b086 <__retarget_lock_acquire_recursive>:
 800b086:	4770      	bx	lr

0800b088 <__retarget_lock_release_recursive>:
 800b088:	4770      	bx	lr
	...

0800b08c <nanf>:
 800b08c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b094 <nanf+0x8>
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	7fc00000 	.word	0x7fc00000

0800b098 <__assert_func>:
 800b098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b09a:	4614      	mov	r4, r2
 800b09c:	461a      	mov	r2, r3
 800b09e:	4b09      	ldr	r3, [pc, #36]	@ (800b0c4 <__assert_func+0x2c>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4605      	mov	r5, r0
 800b0a4:	68d8      	ldr	r0, [r3, #12]
 800b0a6:	b954      	cbnz	r4, 800b0be <__assert_func+0x26>
 800b0a8:	4b07      	ldr	r3, [pc, #28]	@ (800b0c8 <__assert_func+0x30>)
 800b0aa:	461c      	mov	r4, r3
 800b0ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b0b0:	9100      	str	r1, [sp, #0]
 800b0b2:	462b      	mov	r3, r5
 800b0b4:	4905      	ldr	r1, [pc, #20]	@ (800b0cc <__assert_func+0x34>)
 800b0b6:	f002 fc19 	bl	800d8ec <fiprintf>
 800b0ba:	f002 fc7d 	bl	800d9b8 <abort>
 800b0be:	4b04      	ldr	r3, [pc, #16]	@ (800b0d0 <__assert_func+0x38>)
 800b0c0:	e7f4      	b.n	800b0ac <__assert_func+0x14>
 800b0c2:	bf00      	nop
 800b0c4:	200000fc 	.word	0x200000fc
 800b0c8:	0800e962 	.word	0x0800e962
 800b0cc:	0800e934 	.word	0x0800e934
 800b0d0:	0800e927 	.word	0x0800e927

0800b0d4 <quorem>:
 800b0d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d8:	6903      	ldr	r3, [r0, #16]
 800b0da:	690c      	ldr	r4, [r1, #16]
 800b0dc:	42a3      	cmp	r3, r4
 800b0de:	4607      	mov	r7, r0
 800b0e0:	db7e      	blt.n	800b1e0 <quorem+0x10c>
 800b0e2:	3c01      	subs	r4, #1
 800b0e4:	f101 0814 	add.w	r8, r1, #20
 800b0e8:	00a3      	lsls	r3, r4, #2
 800b0ea:	f100 0514 	add.w	r5, r0, #20
 800b0ee:	9300      	str	r3, [sp, #0]
 800b0f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0f4:	9301      	str	r3, [sp, #4]
 800b0f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0fe:	3301      	adds	r3, #1
 800b100:	429a      	cmp	r2, r3
 800b102:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b106:	fbb2 f6f3 	udiv	r6, r2, r3
 800b10a:	d32e      	bcc.n	800b16a <quorem+0x96>
 800b10c:	f04f 0a00 	mov.w	sl, #0
 800b110:	46c4      	mov	ip, r8
 800b112:	46ae      	mov	lr, r5
 800b114:	46d3      	mov	fp, sl
 800b116:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b11a:	b298      	uxth	r0, r3
 800b11c:	fb06 a000 	mla	r0, r6, r0, sl
 800b120:	0c02      	lsrs	r2, r0, #16
 800b122:	0c1b      	lsrs	r3, r3, #16
 800b124:	fb06 2303 	mla	r3, r6, r3, r2
 800b128:	f8de 2000 	ldr.w	r2, [lr]
 800b12c:	b280      	uxth	r0, r0
 800b12e:	b292      	uxth	r2, r2
 800b130:	1a12      	subs	r2, r2, r0
 800b132:	445a      	add	r2, fp
 800b134:	f8de 0000 	ldr.w	r0, [lr]
 800b138:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b142:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b146:	b292      	uxth	r2, r2
 800b148:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b14c:	45e1      	cmp	r9, ip
 800b14e:	f84e 2b04 	str.w	r2, [lr], #4
 800b152:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b156:	d2de      	bcs.n	800b116 <quorem+0x42>
 800b158:	9b00      	ldr	r3, [sp, #0]
 800b15a:	58eb      	ldr	r3, [r5, r3]
 800b15c:	b92b      	cbnz	r3, 800b16a <quorem+0x96>
 800b15e:	9b01      	ldr	r3, [sp, #4]
 800b160:	3b04      	subs	r3, #4
 800b162:	429d      	cmp	r5, r3
 800b164:	461a      	mov	r2, r3
 800b166:	d32f      	bcc.n	800b1c8 <quorem+0xf4>
 800b168:	613c      	str	r4, [r7, #16]
 800b16a:	4638      	mov	r0, r7
 800b16c:	f001 f9c4 	bl	800c4f8 <__mcmp>
 800b170:	2800      	cmp	r0, #0
 800b172:	db25      	blt.n	800b1c0 <quorem+0xec>
 800b174:	4629      	mov	r1, r5
 800b176:	2000      	movs	r0, #0
 800b178:	f858 2b04 	ldr.w	r2, [r8], #4
 800b17c:	f8d1 c000 	ldr.w	ip, [r1]
 800b180:	fa1f fe82 	uxth.w	lr, r2
 800b184:	fa1f f38c 	uxth.w	r3, ip
 800b188:	eba3 030e 	sub.w	r3, r3, lr
 800b18c:	4403      	add	r3, r0
 800b18e:	0c12      	lsrs	r2, r2, #16
 800b190:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b194:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b198:	b29b      	uxth	r3, r3
 800b19a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b19e:	45c1      	cmp	r9, r8
 800b1a0:	f841 3b04 	str.w	r3, [r1], #4
 800b1a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b1a8:	d2e6      	bcs.n	800b178 <quorem+0xa4>
 800b1aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1b2:	b922      	cbnz	r2, 800b1be <quorem+0xea>
 800b1b4:	3b04      	subs	r3, #4
 800b1b6:	429d      	cmp	r5, r3
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	d30b      	bcc.n	800b1d4 <quorem+0x100>
 800b1bc:	613c      	str	r4, [r7, #16]
 800b1be:	3601      	adds	r6, #1
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	b003      	add	sp, #12
 800b1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c8:	6812      	ldr	r2, [r2, #0]
 800b1ca:	3b04      	subs	r3, #4
 800b1cc:	2a00      	cmp	r2, #0
 800b1ce:	d1cb      	bne.n	800b168 <quorem+0x94>
 800b1d0:	3c01      	subs	r4, #1
 800b1d2:	e7c6      	b.n	800b162 <quorem+0x8e>
 800b1d4:	6812      	ldr	r2, [r2, #0]
 800b1d6:	3b04      	subs	r3, #4
 800b1d8:	2a00      	cmp	r2, #0
 800b1da:	d1ef      	bne.n	800b1bc <quorem+0xe8>
 800b1dc:	3c01      	subs	r4, #1
 800b1de:	e7ea      	b.n	800b1b6 <quorem+0xe2>
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	e7ee      	b.n	800b1c2 <quorem+0xee>
 800b1e4:	0000      	movs	r0, r0
	...

0800b1e8 <_dtoa_r>:
 800b1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ec:	69c7      	ldr	r7, [r0, #28]
 800b1ee:	b099      	sub	sp, #100	@ 0x64
 800b1f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b1f4:	ec55 4b10 	vmov	r4, r5, d0
 800b1f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b1fa:	9109      	str	r1, [sp, #36]	@ 0x24
 800b1fc:	4683      	mov	fp, r0
 800b1fe:	920e      	str	r2, [sp, #56]	@ 0x38
 800b200:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b202:	b97f      	cbnz	r7, 800b224 <_dtoa_r+0x3c>
 800b204:	2010      	movs	r0, #16
 800b206:	f000 fdfd 	bl	800be04 <malloc>
 800b20a:	4602      	mov	r2, r0
 800b20c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b210:	b920      	cbnz	r0, 800b21c <_dtoa_r+0x34>
 800b212:	4ba7      	ldr	r3, [pc, #668]	@ (800b4b0 <_dtoa_r+0x2c8>)
 800b214:	21ef      	movs	r1, #239	@ 0xef
 800b216:	48a7      	ldr	r0, [pc, #668]	@ (800b4b4 <_dtoa_r+0x2cc>)
 800b218:	f7ff ff3e 	bl	800b098 <__assert_func>
 800b21c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b220:	6007      	str	r7, [r0, #0]
 800b222:	60c7      	str	r7, [r0, #12]
 800b224:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b228:	6819      	ldr	r1, [r3, #0]
 800b22a:	b159      	cbz	r1, 800b244 <_dtoa_r+0x5c>
 800b22c:	685a      	ldr	r2, [r3, #4]
 800b22e:	604a      	str	r2, [r1, #4]
 800b230:	2301      	movs	r3, #1
 800b232:	4093      	lsls	r3, r2
 800b234:	608b      	str	r3, [r1, #8]
 800b236:	4658      	mov	r0, fp
 800b238:	f000 feda 	bl	800bff0 <_Bfree>
 800b23c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b240:	2200      	movs	r2, #0
 800b242:	601a      	str	r2, [r3, #0]
 800b244:	1e2b      	subs	r3, r5, #0
 800b246:	bfb9      	ittee	lt
 800b248:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b24c:	9303      	strlt	r3, [sp, #12]
 800b24e:	2300      	movge	r3, #0
 800b250:	6033      	strge	r3, [r6, #0]
 800b252:	9f03      	ldr	r7, [sp, #12]
 800b254:	4b98      	ldr	r3, [pc, #608]	@ (800b4b8 <_dtoa_r+0x2d0>)
 800b256:	bfbc      	itt	lt
 800b258:	2201      	movlt	r2, #1
 800b25a:	6032      	strlt	r2, [r6, #0]
 800b25c:	43bb      	bics	r3, r7
 800b25e:	d112      	bne.n	800b286 <_dtoa_r+0x9e>
 800b260:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b262:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b266:	6013      	str	r3, [r2, #0]
 800b268:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b26c:	4323      	orrs	r3, r4
 800b26e:	f000 854d 	beq.w	800bd0c <_dtoa_r+0xb24>
 800b272:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b274:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b4cc <_dtoa_r+0x2e4>
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f000 854f 	beq.w	800bd1c <_dtoa_r+0xb34>
 800b27e:	f10a 0303 	add.w	r3, sl, #3
 800b282:	f000 bd49 	b.w	800bd18 <_dtoa_r+0xb30>
 800b286:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b28a:	2200      	movs	r2, #0
 800b28c:	ec51 0b17 	vmov	r0, r1, d7
 800b290:	2300      	movs	r3, #0
 800b292:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b296:	f7f5 fc4f 	bl	8000b38 <__aeabi_dcmpeq>
 800b29a:	4680      	mov	r8, r0
 800b29c:	b158      	cbz	r0, 800b2b6 <_dtoa_r+0xce>
 800b29e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	6013      	str	r3, [r2, #0]
 800b2a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b2a6:	b113      	cbz	r3, 800b2ae <_dtoa_r+0xc6>
 800b2a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b2aa:	4b84      	ldr	r3, [pc, #528]	@ (800b4bc <_dtoa_r+0x2d4>)
 800b2ac:	6013      	str	r3, [r2, #0]
 800b2ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b4d0 <_dtoa_r+0x2e8>
 800b2b2:	f000 bd33 	b.w	800bd1c <_dtoa_r+0xb34>
 800b2b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b2ba:	aa16      	add	r2, sp, #88	@ 0x58
 800b2bc:	a917      	add	r1, sp, #92	@ 0x5c
 800b2be:	4658      	mov	r0, fp
 800b2c0:	f001 fa3a 	bl	800c738 <__d2b>
 800b2c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b2c8:	4681      	mov	r9, r0
 800b2ca:	2e00      	cmp	r6, #0
 800b2cc:	d077      	beq.n	800b3be <_dtoa_r+0x1d6>
 800b2ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b2d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b2e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b2e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	4b74      	ldr	r3, [pc, #464]	@ (800b4c0 <_dtoa_r+0x2d8>)
 800b2ee:	f7f5 f803 	bl	80002f8 <__aeabi_dsub>
 800b2f2:	a369      	add	r3, pc, #420	@ (adr r3, 800b498 <_dtoa_r+0x2b0>)
 800b2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f8:	f7f5 f9b6 	bl	8000668 <__aeabi_dmul>
 800b2fc:	a368      	add	r3, pc, #416	@ (adr r3, 800b4a0 <_dtoa_r+0x2b8>)
 800b2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b302:	f7f4 fffb 	bl	80002fc <__adddf3>
 800b306:	4604      	mov	r4, r0
 800b308:	4630      	mov	r0, r6
 800b30a:	460d      	mov	r5, r1
 800b30c:	f7f5 f942 	bl	8000594 <__aeabi_i2d>
 800b310:	a365      	add	r3, pc, #404	@ (adr r3, 800b4a8 <_dtoa_r+0x2c0>)
 800b312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b316:	f7f5 f9a7 	bl	8000668 <__aeabi_dmul>
 800b31a:	4602      	mov	r2, r0
 800b31c:	460b      	mov	r3, r1
 800b31e:	4620      	mov	r0, r4
 800b320:	4629      	mov	r1, r5
 800b322:	f7f4 ffeb 	bl	80002fc <__adddf3>
 800b326:	4604      	mov	r4, r0
 800b328:	460d      	mov	r5, r1
 800b32a:	f7f5 fc4d 	bl	8000bc8 <__aeabi_d2iz>
 800b32e:	2200      	movs	r2, #0
 800b330:	4607      	mov	r7, r0
 800b332:	2300      	movs	r3, #0
 800b334:	4620      	mov	r0, r4
 800b336:	4629      	mov	r1, r5
 800b338:	f7f5 fc08 	bl	8000b4c <__aeabi_dcmplt>
 800b33c:	b140      	cbz	r0, 800b350 <_dtoa_r+0x168>
 800b33e:	4638      	mov	r0, r7
 800b340:	f7f5 f928 	bl	8000594 <__aeabi_i2d>
 800b344:	4622      	mov	r2, r4
 800b346:	462b      	mov	r3, r5
 800b348:	f7f5 fbf6 	bl	8000b38 <__aeabi_dcmpeq>
 800b34c:	b900      	cbnz	r0, 800b350 <_dtoa_r+0x168>
 800b34e:	3f01      	subs	r7, #1
 800b350:	2f16      	cmp	r7, #22
 800b352:	d851      	bhi.n	800b3f8 <_dtoa_r+0x210>
 800b354:	4b5b      	ldr	r3, [pc, #364]	@ (800b4c4 <_dtoa_r+0x2dc>)
 800b356:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b362:	f7f5 fbf3 	bl	8000b4c <__aeabi_dcmplt>
 800b366:	2800      	cmp	r0, #0
 800b368:	d048      	beq.n	800b3fc <_dtoa_r+0x214>
 800b36a:	3f01      	subs	r7, #1
 800b36c:	2300      	movs	r3, #0
 800b36e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b370:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b372:	1b9b      	subs	r3, r3, r6
 800b374:	1e5a      	subs	r2, r3, #1
 800b376:	bf44      	itt	mi
 800b378:	f1c3 0801 	rsbmi	r8, r3, #1
 800b37c:	2300      	movmi	r3, #0
 800b37e:	9208      	str	r2, [sp, #32]
 800b380:	bf54      	ite	pl
 800b382:	f04f 0800 	movpl.w	r8, #0
 800b386:	9308      	strmi	r3, [sp, #32]
 800b388:	2f00      	cmp	r7, #0
 800b38a:	db39      	blt.n	800b400 <_dtoa_r+0x218>
 800b38c:	9b08      	ldr	r3, [sp, #32]
 800b38e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b390:	443b      	add	r3, r7
 800b392:	9308      	str	r3, [sp, #32]
 800b394:	2300      	movs	r3, #0
 800b396:	930a      	str	r3, [sp, #40]	@ 0x28
 800b398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b39a:	2b09      	cmp	r3, #9
 800b39c:	d864      	bhi.n	800b468 <_dtoa_r+0x280>
 800b39e:	2b05      	cmp	r3, #5
 800b3a0:	bfc4      	itt	gt
 800b3a2:	3b04      	subgt	r3, #4
 800b3a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b3a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3a8:	f1a3 0302 	sub.w	r3, r3, #2
 800b3ac:	bfcc      	ite	gt
 800b3ae:	2400      	movgt	r4, #0
 800b3b0:	2401      	movle	r4, #1
 800b3b2:	2b03      	cmp	r3, #3
 800b3b4:	d863      	bhi.n	800b47e <_dtoa_r+0x296>
 800b3b6:	e8df f003 	tbb	[pc, r3]
 800b3ba:	372a      	.short	0x372a
 800b3bc:	5535      	.short	0x5535
 800b3be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b3c2:	441e      	add	r6, r3
 800b3c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b3c8:	2b20      	cmp	r3, #32
 800b3ca:	bfc1      	itttt	gt
 800b3cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b3d0:	409f      	lslgt	r7, r3
 800b3d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b3d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b3da:	bfd6      	itet	le
 800b3dc:	f1c3 0320 	rsble	r3, r3, #32
 800b3e0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b3e4:	fa04 f003 	lslle.w	r0, r4, r3
 800b3e8:	f7f5 f8c4 	bl	8000574 <__aeabi_ui2d>
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b3f2:	3e01      	subs	r6, #1
 800b3f4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b3f6:	e777      	b.n	800b2e8 <_dtoa_r+0x100>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e7b8      	b.n	800b36e <_dtoa_r+0x186>
 800b3fc:	9012      	str	r0, [sp, #72]	@ 0x48
 800b3fe:	e7b7      	b.n	800b370 <_dtoa_r+0x188>
 800b400:	427b      	negs	r3, r7
 800b402:	930a      	str	r3, [sp, #40]	@ 0x28
 800b404:	2300      	movs	r3, #0
 800b406:	eba8 0807 	sub.w	r8, r8, r7
 800b40a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b40c:	e7c4      	b.n	800b398 <_dtoa_r+0x1b0>
 800b40e:	2300      	movs	r3, #0
 800b410:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b414:	2b00      	cmp	r3, #0
 800b416:	dc35      	bgt.n	800b484 <_dtoa_r+0x29c>
 800b418:	2301      	movs	r3, #1
 800b41a:	9300      	str	r3, [sp, #0]
 800b41c:	9307      	str	r3, [sp, #28]
 800b41e:	461a      	mov	r2, r3
 800b420:	920e      	str	r2, [sp, #56]	@ 0x38
 800b422:	e00b      	b.n	800b43c <_dtoa_r+0x254>
 800b424:	2301      	movs	r3, #1
 800b426:	e7f3      	b.n	800b410 <_dtoa_r+0x228>
 800b428:	2300      	movs	r3, #0
 800b42a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b42c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b42e:	18fb      	adds	r3, r7, r3
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	3301      	adds	r3, #1
 800b434:	2b01      	cmp	r3, #1
 800b436:	9307      	str	r3, [sp, #28]
 800b438:	bfb8      	it	lt
 800b43a:	2301      	movlt	r3, #1
 800b43c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b440:	2100      	movs	r1, #0
 800b442:	2204      	movs	r2, #4
 800b444:	f102 0514 	add.w	r5, r2, #20
 800b448:	429d      	cmp	r5, r3
 800b44a:	d91f      	bls.n	800b48c <_dtoa_r+0x2a4>
 800b44c:	6041      	str	r1, [r0, #4]
 800b44e:	4658      	mov	r0, fp
 800b450:	f000 fd8e 	bl	800bf70 <_Balloc>
 800b454:	4682      	mov	sl, r0
 800b456:	2800      	cmp	r0, #0
 800b458:	d13c      	bne.n	800b4d4 <_dtoa_r+0x2ec>
 800b45a:	4b1b      	ldr	r3, [pc, #108]	@ (800b4c8 <_dtoa_r+0x2e0>)
 800b45c:	4602      	mov	r2, r0
 800b45e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b462:	e6d8      	b.n	800b216 <_dtoa_r+0x2e>
 800b464:	2301      	movs	r3, #1
 800b466:	e7e0      	b.n	800b42a <_dtoa_r+0x242>
 800b468:	2401      	movs	r4, #1
 800b46a:	2300      	movs	r3, #0
 800b46c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b46e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b470:	f04f 33ff 	mov.w	r3, #4294967295
 800b474:	9300      	str	r3, [sp, #0]
 800b476:	9307      	str	r3, [sp, #28]
 800b478:	2200      	movs	r2, #0
 800b47a:	2312      	movs	r3, #18
 800b47c:	e7d0      	b.n	800b420 <_dtoa_r+0x238>
 800b47e:	2301      	movs	r3, #1
 800b480:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b482:	e7f5      	b.n	800b470 <_dtoa_r+0x288>
 800b484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	9307      	str	r3, [sp, #28]
 800b48a:	e7d7      	b.n	800b43c <_dtoa_r+0x254>
 800b48c:	3101      	adds	r1, #1
 800b48e:	0052      	lsls	r2, r2, #1
 800b490:	e7d8      	b.n	800b444 <_dtoa_r+0x25c>
 800b492:	bf00      	nop
 800b494:	f3af 8000 	nop.w
 800b498:	636f4361 	.word	0x636f4361
 800b49c:	3fd287a7 	.word	0x3fd287a7
 800b4a0:	8b60c8b3 	.word	0x8b60c8b3
 800b4a4:	3fc68a28 	.word	0x3fc68a28
 800b4a8:	509f79fb 	.word	0x509f79fb
 800b4ac:	3fd34413 	.word	0x3fd34413
 800b4b0:	0800e8b6 	.word	0x0800e8b6
 800b4b4:	0800e970 	.word	0x0800e970
 800b4b8:	7ff00000 	.word	0x7ff00000
 800b4bc:	0800e88e 	.word	0x0800e88e
 800b4c0:	3ff80000 	.word	0x3ff80000
 800b4c4:	0800ea68 	.word	0x0800ea68
 800b4c8:	0800e9c8 	.word	0x0800e9c8
 800b4cc:	0800e96c 	.word	0x0800e96c
 800b4d0:	0800e88d 	.word	0x0800e88d
 800b4d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b4d8:	6018      	str	r0, [r3, #0]
 800b4da:	9b07      	ldr	r3, [sp, #28]
 800b4dc:	2b0e      	cmp	r3, #14
 800b4de:	f200 80a4 	bhi.w	800b62a <_dtoa_r+0x442>
 800b4e2:	2c00      	cmp	r4, #0
 800b4e4:	f000 80a1 	beq.w	800b62a <_dtoa_r+0x442>
 800b4e8:	2f00      	cmp	r7, #0
 800b4ea:	dd33      	ble.n	800b554 <_dtoa_r+0x36c>
 800b4ec:	4bad      	ldr	r3, [pc, #692]	@ (800b7a4 <_dtoa_r+0x5bc>)
 800b4ee:	f007 020f 	and.w	r2, r7, #15
 800b4f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4f6:	ed93 7b00 	vldr	d7, [r3]
 800b4fa:	05f8      	lsls	r0, r7, #23
 800b4fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b500:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b504:	d516      	bpl.n	800b534 <_dtoa_r+0x34c>
 800b506:	4ba8      	ldr	r3, [pc, #672]	@ (800b7a8 <_dtoa_r+0x5c0>)
 800b508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b50c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b510:	f7f5 f9d4 	bl	80008bc <__aeabi_ddiv>
 800b514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b518:	f004 040f 	and.w	r4, r4, #15
 800b51c:	2603      	movs	r6, #3
 800b51e:	4da2      	ldr	r5, [pc, #648]	@ (800b7a8 <_dtoa_r+0x5c0>)
 800b520:	b954      	cbnz	r4, 800b538 <_dtoa_r+0x350>
 800b522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b52a:	f7f5 f9c7 	bl	80008bc <__aeabi_ddiv>
 800b52e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b532:	e028      	b.n	800b586 <_dtoa_r+0x39e>
 800b534:	2602      	movs	r6, #2
 800b536:	e7f2      	b.n	800b51e <_dtoa_r+0x336>
 800b538:	07e1      	lsls	r1, r4, #31
 800b53a:	d508      	bpl.n	800b54e <_dtoa_r+0x366>
 800b53c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b540:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b544:	f7f5 f890 	bl	8000668 <__aeabi_dmul>
 800b548:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b54c:	3601      	adds	r6, #1
 800b54e:	1064      	asrs	r4, r4, #1
 800b550:	3508      	adds	r5, #8
 800b552:	e7e5      	b.n	800b520 <_dtoa_r+0x338>
 800b554:	f000 80d2 	beq.w	800b6fc <_dtoa_r+0x514>
 800b558:	427c      	negs	r4, r7
 800b55a:	4b92      	ldr	r3, [pc, #584]	@ (800b7a4 <_dtoa_r+0x5bc>)
 800b55c:	4d92      	ldr	r5, [pc, #584]	@ (800b7a8 <_dtoa_r+0x5c0>)
 800b55e:	f004 020f 	and.w	r2, r4, #15
 800b562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b56e:	f7f5 f87b 	bl	8000668 <__aeabi_dmul>
 800b572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b576:	1124      	asrs	r4, r4, #4
 800b578:	2300      	movs	r3, #0
 800b57a:	2602      	movs	r6, #2
 800b57c:	2c00      	cmp	r4, #0
 800b57e:	f040 80b2 	bne.w	800b6e6 <_dtoa_r+0x4fe>
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1d3      	bne.n	800b52e <_dtoa_r+0x346>
 800b586:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b588:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f000 80b7 	beq.w	800b700 <_dtoa_r+0x518>
 800b592:	4b86      	ldr	r3, [pc, #536]	@ (800b7ac <_dtoa_r+0x5c4>)
 800b594:	2200      	movs	r2, #0
 800b596:	4620      	mov	r0, r4
 800b598:	4629      	mov	r1, r5
 800b59a:	f7f5 fad7 	bl	8000b4c <__aeabi_dcmplt>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	f000 80ae 	beq.w	800b700 <_dtoa_r+0x518>
 800b5a4:	9b07      	ldr	r3, [sp, #28]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f000 80aa 	beq.w	800b700 <_dtoa_r+0x518>
 800b5ac:	9b00      	ldr	r3, [sp, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	dd37      	ble.n	800b622 <_dtoa_r+0x43a>
 800b5b2:	1e7b      	subs	r3, r7, #1
 800b5b4:	9304      	str	r3, [sp, #16]
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	4b7d      	ldr	r3, [pc, #500]	@ (800b7b0 <_dtoa_r+0x5c8>)
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	4629      	mov	r1, r5
 800b5be:	f7f5 f853 	bl	8000668 <__aeabi_dmul>
 800b5c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5c6:	9c00      	ldr	r4, [sp, #0]
 800b5c8:	3601      	adds	r6, #1
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	f7f4 ffe2 	bl	8000594 <__aeabi_i2d>
 800b5d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5d4:	f7f5 f848 	bl	8000668 <__aeabi_dmul>
 800b5d8:	4b76      	ldr	r3, [pc, #472]	@ (800b7b4 <_dtoa_r+0x5cc>)
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f7f4 fe8e 	bl	80002fc <__adddf3>
 800b5e0:	4605      	mov	r5, r0
 800b5e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b5e6:	2c00      	cmp	r4, #0
 800b5e8:	f040 808d 	bne.w	800b706 <_dtoa_r+0x51e>
 800b5ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5f0:	4b71      	ldr	r3, [pc, #452]	@ (800b7b8 <_dtoa_r+0x5d0>)
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f7f4 fe80 	bl	80002f8 <__aeabi_dsub>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b600:	462a      	mov	r2, r5
 800b602:	4633      	mov	r3, r6
 800b604:	f7f5 fac0 	bl	8000b88 <__aeabi_dcmpgt>
 800b608:	2800      	cmp	r0, #0
 800b60a:	f040 828b 	bne.w	800bb24 <_dtoa_r+0x93c>
 800b60e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b612:	462a      	mov	r2, r5
 800b614:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b618:	f7f5 fa98 	bl	8000b4c <__aeabi_dcmplt>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	f040 8128 	bne.w	800b872 <_dtoa_r+0x68a>
 800b622:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b626:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b62a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f2c0 815a 	blt.w	800b8e6 <_dtoa_r+0x6fe>
 800b632:	2f0e      	cmp	r7, #14
 800b634:	f300 8157 	bgt.w	800b8e6 <_dtoa_r+0x6fe>
 800b638:	4b5a      	ldr	r3, [pc, #360]	@ (800b7a4 <_dtoa_r+0x5bc>)
 800b63a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b63e:	ed93 7b00 	vldr	d7, [r3]
 800b642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b644:	2b00      	cmp	r3, #0
 800b646:	ed8d 7b00 	vstr	d7, [sp]
 800b64a:	da03      	bge.n	800b654 <_dtoa_r+0x46c>
 800b64c:	9b07      	ldr	r3, [sp, #28]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f340 8101 	ble.w	800b856 <_dtoa_r+0x66e>
 800b654:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b658:	4656      	mov	r6, sl
 800b65a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b65e:	4620      	mov	r0, r4
 800b660:	4629      	mov	r1, r5
 800b662:	f7f5 f92b 	bl	80008bc <__aeabi_ddiv>
 800b666:	f7f5 faaf 	bl	8000bc8 <__aeabi_d2iz>
 800b66a:	4680      	mov	r8, r0
 800b66c:	f7f4 ff92 	bl	8000594 <__aeabi_i2d>
 800b670:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b674:	f7f4 fff8 	bl	8000668 <__aeabi_dmul>
 800b678:	4602      	mov	r2, r0
 800b67a:	460b      	mov	r3, r1
 800b67c:	4620      	mov	r0, r4
 800b67e:	4629      	mov	r1, r5
 800b680:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b684:	f7f4 fe38 	bl	80002f8 <__aeabi_dsub>
 800b688:	f806 4b01 	strb.w	r4, [r6], #1
 800b68c:	9d07      	ldr	r5, [sp, #28]
 800b68e:	eba6 040a 	sub.w	r4, r6, sl
 800b692:	42a5      	cmp	r5, r4
 800b694:	4602      	mov	r2, r0
 800b696:	460b      	mov	r3, r1
 800b698:	f040 8117 	bne.w	800b8ca <_dtoa_r+0x6e2>
 800b69c:	f7f4 fe2e 	bl	80002fc <__adddf3>
 800b6a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	460d      	mov	r5, r1
 800b6a8:	f7f5 fa6e 	bl	8000b88 <__aeabi_dcmpgt>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	f040 80f9 	bne.w	800b8a4 <_dtoa_r+0x6bc>
 800b6b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	f7f5 fa3d 	bl	8000b38 <__aeabi_dcmpeq>
 800b6be:	b118      	cbz	r0, 800b6c8 <_dtoa_r+0x4e0>
 800b6c0:	f018 0f01 	tst.w	r8, #1
 800b6c4:	f040 80ee 	bne.w	800b8a4 <_dtoa_r+0x6bc>
 800b6c8:	4649      	mov	r1, r9
 800b6ca:	4658      	mov	r0, fp
 800b6cc:	f000 fc90 	bl	800bff0 <_Bfree>
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	7033      	strb	r3, [r6, #0]
 800b6d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b6d6:	3701      	adds	r7, #1
 800b6d8:	601f      	str	r7, [r3, #0]
 800b6da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f000 831d 	beq.w	800bd1c <_dtoa_r+0xb34>
 800b6e2:	601e      	str	r6, [r3, #0]
 800b6e4:	e31a      	b.n	800bd1c <_dtoa_r+0xb34>
 800b6e6:	07e2      	lsls	r2, r4, #31
 800b6e8:	d505      	bpl.n	800b6f6 <_dtoa_r+0x50e>
 800b6ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6ee:	f7f4 ffbb 	bl	8000668 <__aeabi_dmul>
 800b6f2:	3601      	adds	r6, #1
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	1064      	asrs	r4, r4, #1
 800b6f8:	3508      	adds	r5, #8
 800b6fa:	e73f      	b.n	800b57c <_dtoa_r+0x394>
 800b6fc:	2602      	movs	r6, #2
 800b6fe:	e742      	b.n	800b586 <_dtoa_r+0x39e>
 800b700:	9c07      	ldr	r4, [sp, #28]
 800b702:	9704      	str	r7, [sp, #16]
 800b704:	e761      	b.n	800b5ca <_dtoa_r+0x3e2>
 800b706:	4b27      	ldr	r3, [pc, #156]	@ (800b7a4 <_dtoa_r+0x5bc>)
 800b708:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b70a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b70e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b712:	4454      	add	r4, sl
 800b714:	2900      	cmp	r1, #0
 800b716:	d053      	beq.n	800b7c0 <_dtoa_r+0x5d8>
 800b718:	4928      	ldr	r1, [pc, #160]	@ (800b7bc <_dtoa_r+0x5d4>)
 800b71a:	2000      	movs	r0, #0
 800b71c:	f7f5 f8ce 	bl	80008bc <__aeabi_ddiv>
 800b720:	4633      	mov	r3, r6
 800b722:	462a      	mov	r2, r5
 800b724:	f7f4 fde8 	bl	80002f8 <__aeabi_dsub>
 800b728:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b72c:	4656      	mov	r6, sl
 800b72e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b732:	f7f5 fa49 	bl	8000bc8 <__aeabi_d2iz>
 800b736:	4605      	mov	r5, r0
 800b738:	f7f4 ff2c 	bl	8000594 <__aeabi_i2d>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b744:	f7f4 fdd8 	bl	80002f8 <__aeabi_dsub>
 800b748:	3530      	adds	r5, #48	@ 0x30
 800b74a:	4602      	mov	r2, r0
 800b74c:	460b      	mov	r3, r1
 800b74e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b752:	f806 5b01 	strb.w	r5, [r6], #1
 800b756:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b75a:	f7f5 f9f7 	bl	8000b4c <__aeabi_dcmplt>
 800b75e:	2800      	cmp	r0, #0
 800b760:	d171      	bne.n	800b846 <_dtoa_r+0x65e>
 800b762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b766:	4911      	ldr	r1, [pc, #68]	@ (800b7ac <_dtoa_r+0x5c4>)
 800b768:	2000      	movs	r0, #0
 800b76a:	f7f4 fdc5 	bl	80002f8 <__aeabi_dsub>
 800b76e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b772:	f7f5 f9eb 	bl	8000b4c <__aeabi_dcmplt>
 800b776:	2800      	cmp	r0, #0
 800b778:	f040 8095 	bne.w	800b8a6 <_dtoa_r+0x6be>
 800b77c:	42a6      	cmp	r6, r4
 800b77e:	f43f af50 	beq.w	800b622 <_dtoa_r+0x43a>
 800b782:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b786:	4b0a      	ldr	r3, [pc, #40]	@ (800b7b0 <_dtoa_r+0x5c8>)
 800b788:	2200      	movs	r2, #0
 800b78a:	f7f4 ff6d 	bl	8000668 <__aeabi_dmul>
 800b78e:	4b08      	ldr	r3, [pc, #32]	@ (800b7b0 <_dtoa_r+0x5c8>)
 800b790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b794:	2200      	movs	r2, #0
 800b796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b79a:	f7f4 ff65 	bl	8000668 <__aeabi_dmul>
 800b79e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7a2:	e7c4      	b.n	800b72e <_dtoa_r+0x546>
 800b7a4:	0800ea68 	.word	0x0800ea68
 800b7a8:	0800ea40 	.word	0x0800ea40
 800b7ac:	3ff00000 	.word	0x3ff00000
 800b7b0:	40240000 	.word	0x40240000
 800b7b4:	401c0000 	.word	0x401c0000
 800b7b8:	40140000 	.word	0x40140000
 800b7bc:	3fe00000 	.word	0x3fe00000
 800b7c0:	4631      	mov	r1, r6
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	f7f4 ff50 	bl	8000668 <__aeabi_dmul>
 800b7c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b7cc:	9415      	str	r4, [sp, #84]	@ 0x54
 800b7ce:	4656      	mov	r6, sl
 800b7d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7d4:	f7f5 f9f8 	bl	8000bc8 <__aeabi_d2iz>
 800b7d8:	4605      	mov	r5, r0
 800b7da:	f7f4 fedb 	bl	8000594 <__aeabi_i2d>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7e6:	f7f4 fd87 	bl	80002f8 <__aeabi_dsub>
 800b7ea:	3530      	adds	r5, #48	@ 0x30
 800b7ec:	f806 5b01 	strb.w	r5, [r6], #1
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	42a6      	cmp	r6, r4
 800b7f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7fa:	f04f 0200 	mov.w	r2, #0
 800b7fe:	d124      	bne.n	800b84a <_dtoa_r+0x662>
 800b800:	4bac      	ldr	r3, [pc, #688]	@ (800bab4 <_dtoa_r+0x8cc>)
 800b802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b806:	f7f4 fd79 	bl	80002fc <__adddf3>
 800b80a:	4602      	mov	r2, r0
 800b80c:	460b      	mov	r3, r1
 800b80e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b812:	f7f5 f9b9 	bl	8000b88 <__aeabi_dcmpgt>
 800b816:	2800      	cmp	r0, #0
 800b818:	d145      	bne.n	800b8a6 <_dtoa_r+0x6be>
 800b81a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b81e:	49a5      	ldr	r1, [pc, #660]	@ (800bab4 <_dtoa_r+0x8cc>)
 800b820:	2000      	movs	r0, #0
 800b822:	f7f4 fd69 	bl	80002f8 <__aeabi_dsub>
 800b826:	4602      	mov	r2, r0
 800b828:	460b      	mov	r3, r1
 800b82a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b82e:	f7f5 f98d 	bl	8000b4c <__aeabi_dcmplt>
 800b832:	2800      	cmp	r0, #0
 800b834:	f43f aef5 	beq.w	800b622 <_dtoa_r+0x43a>
 800b838:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b83a:	1e73      	subs	r3, r6, #1
 800b83c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b83e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b842:	2b30      	cmp	r3, #48	@ 0x30
 800b844:	d0f8      	beq.n	800b838 <_dtoa_r+0x650>
 800b846:	9f04      	ldr	r7, [sp, #16]
 800b848:	e73e      	b.n	800b6c8 <_dtoa_r+0x4e0>
 800b84a:	4b9b      	ldr	r3, [pc, #620]	@ (800bab8 <_dtoa_r+0x8d0>)
 800b84c:	f7f4 ff0c 	bl	8000668 <__aeabi_dmul>
 800b850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b854:	e7bc      	b.n	800b7d0 <_dtoa_r+0x5e8>
 800b856:	d10c      	bne.n	800b872 <_dtoa_r+0x68a>
 800b858:	4b98      	ldr	r3, [pc, #608]	@ (800babc <_dtoa_r+0x8d4>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b860:	f7f4 ff02 	bl	8000668 <__aeabi_dmul>
 800b864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b868:	f7f5 f984 	bl	8000b74 <__aeabi_dcmpge>
 800b86c:	2800      	cmp	r0, #0
 800b86e:	f000 8157 	beq.w	800bb20 <_dtoa_r+0x938>
 800b872:	2400      	movs	r4, #0
 800b874:	4625      	mov	r5, r4
 800b876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b878:	43db      	mvns	r3, r3
 800b87a:	9304      	str	r3, [sp, #16]
 800b87c:	4656      	mov	r6, sl
 800b87e:	2700      	movs	r7, #0
 800b880:	4621      	mov	r1, r4
 800b882:	4658      	mov	r0, fp
 800b884:	f000 fbb4 	bl	800bff0 <_Bfree>
 800b888:	2d00      	cmp	r5, #0
 800b88a:	d0dc      	beq.n	800b846 <_dtoa_r+0x65e>
 800b88c:	b12f      	cbz	r7, 800b89a <_dtoa_r+0x6b2>
 800b88e:	42af      	cmp	r7, r5
 800b890:	d003      	beq.n	800b89a <_dtoa_r+0x6b2>
 800b892:	4639      	mov	r1, r7
 800b894:	4658      	mov	r0, fp
 800b896:	f000 fbab 	bl	800bff0 <_Bfree>
 800b89a:	4629      	mov	r1, r5
 800b89c:	4658      	mov	r0, fp
 800b89e:	f000 fba7 	bl	800bff0 <_Bfree>
 800b8a2:	e7d0      	b.n	800b846 <_dtoa_r+0x65e>
 800b8a4:	9704      	str	r7, [sp, #16]
 800b8a6:	4633      	mov	r3, r6
 800b8a8:	461e      	mov	r6, r3
 800b8aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8ae:	2a39      	cmp	r2, #57	@ 0x39
 800b8b0:	d107      	bne.n	800b8c2 <_dtoa_r+0x6da>
 800b8b2:	459a      	cmp	sl, r3
 800b8b4:	d1f8      	bne.n	800b8a8 <_dtoa_r+0x6c0>
 800b8b6:	9a04      	ldr	r2, [sp, #16]
 800b8b8:	3201      	adds	r2, #1
 800b8ba:	9204      	str	r2, [sp, #16]
 800b8bc:	2230      	movs	r2, #48	@ 0x30
 800b8be:	f88a 2000 	strb.w	r2, [sl]
 800b8c2:	781a      	ldrb	r2, [r3, #0]
 800b8c4:	3201      	adds	r2, #1
 800b8c6:	701a      	strb	r2, [r3, #0]
 800b8c8:	e7bd      	b.n	800b846 <_dtoa_r+0x65e>
 800b8ca:	4b7b      	ldr	r3, [pc, #492]	@ (800bab8 <_dtoa_r+0x8d0>)
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f7f4 fecb 	bl	8000668 <__aeabi_dmul>
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	460d      	mov	r5, r1
 800b8da:	f7f5 f92d 	bl	8000b38 <__aeabi_dcmpeq>
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	f43f aebb 	beq.w	800b65a <_dtoa_r+0x472>
 800b8e4:	e6f0      	b.n	800b6c8 <_dtoa_r+0x4e0>
 800b8e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b8e8:	2a00      	cmp	r2, #0
 800b8ea:	f000 80db 	beq.w	800baa4 <_dtoa_r+0x8bc>
 800b8ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8f0:	2a01      	cmp	r2, #1
 800b8f2:	f300 80bf 	bgt.w	800ba74 <_dtoa_r+0x88c>
 800b8f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b8f8:	2a00      	cmp	r2, #0
 800b8fa:	f000 80b7 	beq.w	800ba6c <_dtoa_r+0x884>
 800b8fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b902:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b904:	4646      	mov	r6, r8
 800b906:	9a08      	ldr	r2, [sp, #32]
 800b908:	2101      	movs	r1, #1
 800b90a:	441a      	add	r2, r3
 800b90c:	4658      	mov	r0, fp
 800b90e:	4498      	add	r8, r3
 800b910:	9208      	str	r2, [sp, #32]
 800b912:	f000 fc6b 	bl	800c1ec <__i2b>
 800b916:	4605      	mov	r5, r0
 800b918:	b15e      	cbz	r6, 800b932 <_dtoa_r+0x74a>
 800b91a:	9b08      	ldr	r3, [sp, #32]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	dd08      	ble.n	800b932 <_dtoa_r+0x74a>
 800b920:	42b3      	cmp	r3, r6
 800b922:	9a08      	ldr	r2, [sp, #32]
 800b924:	bfa8      	it	ge
 800b926:	4633      	movge	r3, r6
 800b928:	eba8 0803 	sub.w	r8, r8, r3
 800b92c:	1af6      	subs	r6, r6, r3
 800b92e:	1ad3      	subs	r3, r2, r3
 800b930:	9308      	str	r3, [sp, #32]
 800b932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b934:	b1f3      	cbz	r3, 800b974 <_dtoa_r+0x78c>
 800b936:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f000 80b7 	beq.w	800baac <_dtoa_r+0x8c4>
 800b93e:	b18c      	cbz	r4, 800b964 <_dtoa_r+0x77c>
 800b940:	4629      	mov	r1, r5
 800b942:	4622      	mov	r2, r4
 800b944:	4658      	mov	r0, fp
 800b946:	f000 fd11 	bl	800c36c <__pow5mult>
 800b94a:	464a      	mov	r2, r9
 800b94c:	4601      	mov	r1, r0
 800b94e:	4605      	mov	r5, r0
 800b950:	4658      	mov	r0, fp
 800b952:	f000 fc61 	bl	800c218 <__multiply>
 800b956:	4649      	mov	r1, r9
 800b958:	9004      	str	r0, [sp, #16]
 800b95a:	4658      	mov	r0, fp
 800b95c:	f000 fb48 	bl	800bff0 <_Bfree>
 800b960:	9b04      	ldr	r3, [sp, #16]
 800b962:	4699      	mov	r9, r3
 800b964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b966:	1b1a      	subs	r2, r3, r4
 800b968:	d004      	beq.n	800b974 <_dtoa_r+0x78c>
 800b96a:	4649      	mov	r1, r9
 800b96c:	4658      	mov	r0, fp
 800b96e:	f000 fcfd 	bl	800c36c <__pow5mult>
 800b972:	4681      	mov	r9, r0
 800b974:	2101      	movs	r1, #1
 800b976:	4658      	mov	r0, fp
 800b978:	f000 fc38 	bl	800c1ec <__i2b>
 800b97c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b97e:	4604      	mov	r4, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	f000 81cf 	beq.w	800bd24 <_dtoa_r+0xb3c>
 800b986:	461a      	mov	r2, r3
 800b988:	4601      	mov	r1, r0
 800b98a:	4658      	mov	r0, fp
 800b98c:	f000 fcee 	bl	800c36c <__pow5mult>
 800b990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b992:	2b01      	cmp	r3, #1
 800b994:	4604      	mov	r4, r0
 800b996:	f300 8095 	bgt.w	800bac4 <_dtoa_r+0x8dc>
 800b99a:	9b02      	ldr	r3, [sp, #8]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f040 8087 	bne.w	800bab0 <_dtoa_r+0x8c8>
 800b9a2:	9b03      	ldr	r3, [sp, #12]
 800b9a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f040 8089 	bne.w	800bac0 <_dtoa_r+0x8d8>
 800b9ae:	9b03      	ldr	r3, [sp, #12]
 800b9b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b9b4:	0d1b      	lsrs	r3, r3, #20
 800b9b6:	051b      	lsls	r3, r3, #20
 800b9b8:	b12b      	cbz	r3, 800b9c6 <_dtoa_r+0x7de>
 800b9ba:	9b08      	ldr	r3, [sp, #32]
 800b9bc:	3301      	adds	r3, #1
 800b9be:	9308      	str	r3, [sp, #32]
 800b9c0:	f108 0801 	add.w	r8, r8, #1
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	f000 81b0 	beq.w	800bd30 <_dtoa_r+0xb48>
 800b9d0:	6923      	ldr	r3, [r4, #16]
 800b9d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9d6:	6918      	ldr	r0, [r3, #16]
 800b9d8:	f000 fbbc 	bl	800c154 <__hi0bits>
 800b9dc:	f1c0 0020 	rsb	r0, r0, #32
 800b9e0:	9b08      	ldr	r3, [sp, #32]
 800b9e2:	4418      	add	r0, r3
 800b9e4:	f010 001f 	ands.w	r0, r0, #31
 800b9e8:	d077      	beq.n	800bada <_dtoa_r+0x8f2>
 800b9ea:	f1c0 0320 	rsb	r3, r0, #32
 800b9ee:	2b04      	cmp	r3, #4
 800b9f0:	dd6b      	ble.n	800baca <_dtoa_r+0x8e2>
 800b9f2:	9b08      	ldr	r3, [sp, #32]
 800b9f4:	f1c0 001c 	rsb	r0, r0, #28
 800b9f8:	4403      	add	r3, r0
 800b9fa:	4480      	add	r8, r0
 800b9fc:	4406      	add	r6, r0
 800b9fe:	9308      	str	r3, [sp, #32]
 800ba00:	f1b8 0f00 	cmp.w	r8, #0
 800ba04:	dd05      	ble.n	800ba12 <_dtoa_r+0x82a>
 800ba06:	4649      	mov	r1, r9
 800ba08:	4642      	mov	r2, r8
 800ba0a:	4658      	mov	r0, fp
 800ba0c:	f000 fd08 	bl	800c420 <__lshift>
 800ba10:	4681      	mov	r9, r0
 800ba12:	9b08      	ldr	r3, [sp, #32]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	dd05      	ble.n	800ba24 <_dtoa_r+0x83c>
 800ba18:	4621      	mov	r1, r4
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	4658      	mov	r0, fp
 800ba1e:	f000 fcff 	bl	800c420 <__lshift>
 800ba22:	4604      	mov	r4, r0
 800ba24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d059      	beq.n	800bade <_dtoa_r+0x8f6>
 800ba2a:	4621      	mov	r1, r4
 800ba2c:	4648      	mov	r0, r9
 800ba2e:	f000 fd63 	bl	800c4f8 <__mcmp>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	da53      	bge.n	800bade <_dtoa_r+0x8f6>
 800ba36:	1e7b      	subs	r3, r7, #1
 800ba38:	9304      	str	r3, [sp, #16]
 800ba3a:	4649      	mov	r1, r9
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	220a      	movs	r2, #10
 800ba40:	4658      	mov	r0, fp
 800ba42:	f000 faf7 	bl	800c034 <__multadd>
 800ba46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba48:	4681      	mov	r9, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	f000 8172 	beq.w	800bd34 <_dtoa_r+0xb4c>
 800ba50:	2300      	movs	r3, #0
 800ba52:	4629      	mov	r1, r5
 800ba54:	220a      	movs	r2, #10
 800ba56:	4658      	mov	r0, fp
 800ba58:	f000 faec 	bl	800c034 <__multadd>
 800ba5c:	9b00      	ldr	r3, [sp, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	4605      	mov	r5, r0
 800ba62:	dc67      	bgt.n	800bb34 <_dtoa_r+0x94c>
 800ba64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba66:	2b02      	cmp	r3, #2
 800ba68:	dc41      	bgt.n	800baee <_dtoa_r+0x906>
 800ba6a:	e063      	b.n	800bb34 <_dtoa_r+0x94c>
 800ba6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ba72:	e746      	b.n	800b902 <_dtoa_r+0x71a>
 800ba74:	9b07      	ldr	r3, [sp, #28]
 800ba76:	1e5c      	subs	r4, r3, #1
 800ba78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba7a:	42a3      	cmp	r3, r4
 800ba7c:	bfbf      	itttt	lt
 800ba7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ba80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ba82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ba84:	1ae3      	sublt	r3, r4, r3
 800ba86:	bfb4      	ite	lt
 800ba88:	18d2      	addlt	r2, r2, r3
 800ba8a:	1b1c      	subge	r4, r3, r4
 800ba8c:	9b07      	ldr	r3, [sp, #28]
 800ba8e:	bfbc      	itt	lt
 800ba90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ba92:	2400      	movlt	r4, #0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	bfb5      	itete	lt
 800ba98:	eba8 0603 	sublt.w	r6, r8, r3
 800ba9c:	9b07      	ldrge	r3, [sp, #28]
 800ba9e:	2300      	movlt	r3, #0
 800baa0:	4646      	movge	r6, r8
 800baa2:	e730      	b.n	800b906 <_dtoa_r+0x71e>
 800baa4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800baa6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800baa8:	4646      	mov	r6, r8
 800baaa:	e735      	b.n	800b918 <_dtoa_r+0x730>
 800baac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800baae:	e75c      	b.n	800b96a <_dtoa_r+0x782>
 800bab0:	2300      	movs	r3, #0
 800bab2:	e788      	b.n	800b9c6 <_dtoa_r+0x7de>
 800bab4:	3fe00000 	.word	0x3fe00000
 800bab8:	40240000 	.word	0x40240000
 800babc:	40140000 	.word	0x40140000
 800bac0:	9b02      	ldr	r3, [sp, #8]
 800bac2:	e780      	b.n	800b9c6 <_dtoa_r+0x7de>
 800bac4:	2300      	movs	r3, #0
 800bac6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bac8:	e782      	b.n	800b9d0 <_dtoa_r+0x7e8>
 800baca:	d099      	beq.n	800ba00 <_dtoa_r+0x818>
 800bacc:	9a08      	ldr	r2, [sp, #32]
 800bace:	331c      	adds	r3, #28
 800bad0:	441a      	add	r2, r3
 800bad2:	4498      	add	r8, r3
 800bad4:	441e      	add	r6, r3
 800bad6:	9208      	str	r2, [sp, #32]
 800bad8:	e792      	b.n	800ba00 <_dtoa_r+0x818>
 800bada:	4603      	mov	r3, r0
 800badc:	e7f6      	b.n	800bacc <_dtoa_r+0x8e4>
 800bade:	9b07      	ldr	r3, [sp, #28]
 800bae0:	9704      	str	r7, [sp, #16]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	dc20      	bgt.n	800bb28 <_dtoa_r+0x940>
 800bae6:	9300      	str	r3, [sp, #0]
 800bae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baea:	2b02      	cmp	r3, #2
 800baec:	dd1e      	ble.n	800bb2c <_dtoa_r+0x944>
 800baee:	9b00      	ldr	r3, [sp, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f47f aec0 	bne.w	800b876 <_dtoa_r+0x68e>
 800baf6:	4621      	mov	r1, r4
 800baf8:	2205      	movs	r2, #5
 800bafa:	4658      	mov	r0, fp
 800bafc:	f000 fa9a 	bl	800c034 <__multadd>
 800bb00:	4601      	mov	r1, r0
 800bb02:	4604      	mov	r4, r0
 800bb04:	4648      	mov	r0, r9
 800bb06:	f000 fcf7 	bl	800c4f8 <__mcmp>
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	f77f aeb3 	ble.w	800b876 <_dtoa_r+0x68e>
 800bb10:	4656      	mov	r6, sl
 800bb12:	2331      	movs	r3, #49	@ 0x31
 800bb14:	f806 3b01 	strb.w	r3, [r6], #1
 800bb18:	9b04      	ldr	r3, [sp, #16]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	9304      	str	r3, [sp, #16]
 800bb1e:	e6ae      	b.n	800b87e <_dtoa_r+0x696>
 800bb20:	9c07      	ldr	r4, [sp, #28]
 800bb22:	9704      	str	r7, [sp, #16]
 800bb24:	4625      	mov	r5, r4
 800bb26:	e7f3      	b.n	800bb10 <_dtoa_r+0x928>
 800bb28:	9b07      	ldr	r3, [sp, #28]
 800bb2a:	9300      	str	r3, [sp, #0]
 800bb2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f000 8104 	beq.w	800bd3c <_dtoa_r+0xb54>
 800bb34:	2e00      	cmp	r6, #0
 800bb36:	dd05      	ble.n	800bb44 <_dtoa_r+0x95c>
 800bb38:	4629      	mov	r1, r5
 800bb3a:	4632      	mov	r2, r6
 800bb3c:	4658      	mov	r0, fp
 800bb3e:	f000 fc6f 	bl	800c420 <__lshift>
 800bb42:	4605      	mov	r5, r0
 800bb44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d05a      	beq.n	800bc00 <_dtoa_r+0xa18>
 800bb4a:	6869      	ldr	r1, [r5, #4]
 800bb4c:	4658      	mov	r0, fp
 800bb4e:	f000 fa0f 	bl	800bf70 <_Balloc>
 800bb52:	4606      	mov	r6, r0
 800bb54:	b928      	cbnz	r0, 800bb62 <_dtoa_r+0x97a>
 800bb56:	4b84      	ldr	r3, [pc, #528]	@ (800bd68 <_dtoa_r+0xb80>)
 800bb58:	4602      	mov	r2, r0
 800bb5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bb5e:	f7ff bb5a 	b.w	800b216 <_dtoa_r+0x2e>
 800bb62:	692a      	ldr	r2, [r5, #16]
 800bb64:	3202      	adds	r2, #2
 800bb66:	0092      	lsls	r2, r2, #2
 800bb68:	f105 010c 	add.w	r1, r5, #12
 800bb6c:	300c      	adds	r0, #12
 800bb6e:	f001 ff0b 	bl	800d988 <memcpy>
 800bb72:	2201      	movs	r2, #1
 800bb74:	4631      	mov	r1, r6
 800bb76:	4658      	mov	r0, fp
 800bb78:	f000 fc52 	bl	800c420 <__lshift>
 800bb7c:	f10a 0301 	add.w	r3, sl, #1
 800bb80:	9307      	str	r3, [sp, #28]
 800bb82:	9b00      	ldr	r3, [sp, #0]
 800bb84:	4453      	add	r3, sl
 800bb86:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb88:	9b02      	ldr	r3, [sp, #8]
 800bb8a:	f003 0301 	and.w	r3, r3, #1
 800bb8e:	462f      	mov	r7, r5
 800bb90:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb92:	4605      	mov	r5, r0
 800bb94:	9b07      	ldr	r3, [sp, #28]
 800bb96:	4621      	mov	r1, r4
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	4648      	mov	r0, r9
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	f7ff fa99 	bl	800b0d4 <quorem>
 800bba2:	4639      	mov	r1, r7
 800bba4:	9002      	str	r0, [sp, #8]
 800bba6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bbaa:	4648      	mov	r0, r9
 800bbac:	f000 fca4 	bl	800c4f8 <__mcmp>
 800bbb0:	462a      	mov	r2, r5
 800bbb2:	9008      	str	r0, [sp, #32]
 800bbb4:	4621      	mov	r1, r4
 800bbb6:	4658      	mov	r0, fp
 800bbb8:	f000 fcba 	bl	800c530 <__mdiff>
 800bbbc:	68c2      	ldr	r2, [r0, #12]
 800bbbe:	4606      	mov	r6, r0
 800bbc0:	bb02      	cbnz	r2, 800bc04 <_dtoa_r+0xa1c>
 800bbc2:	4601      	mov	r1, r0
 800bbc4:	4648      	mov	r0, r9
 800bbc6:	f000 fc97 	bl	800c4f8 <__mcmp>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	4631      	mov	r1, r6
 800bbce:	4658      	mov	r0, fp
 800bbd0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bbd2:	f000 fa0d 	bl	800bff0 <_Bfree>
 800bbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbda:	9e07      	ldr	r6, [sp, #28]
 800bbdc:	ea43 0102 	orr.w	r1, r3, r2
 800bbe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbe2:	4319      	orrs	r1, r3
 800bbe4:	d110      	bne.n	800bc08 <_dtoa_r+0xa20>
 800bbe6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bbea:	d029      	beq.n	800bc40 <_dtoa_r+0xa58>
 800bbec:	9b08      	ldr	r3, [sp, #32]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	dd02      	ble.n	800bbf8 <_dtoa_r+0xa10>
 800bbf2:	9b02      	ldr	r3, [sp, #8]
 800bbf4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bbf8:	9b00      	ldr	r3, [sp, #0]
 800bbfa:	f883 8000 	strb.w	r8, [r3]
 800bbfe:	e63f      	b.n	800b880 <_dtoa_r+0x698>
 800bc00:	4628      	mov	r0, r5
 800bc02:	e7bb      	b.n	800bb7c <_dtoa_r+0x994>
 800bc04:	2201      	movs	r2, #1
 800bc06:	e7e1      	b.n	800bbcc <_dtoa_r+0x9e4>
 800bc08:	9b08      	ldr	r3, [sp, #32]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	db04      	blt.n	800bc18 <_dtoa_r+0xa30>
 800bc0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc10:	430b      	orrs	r3, r1
 800bc12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bc14:	430b      	orrs	r3, r1
 800bc16:	d120      	bne.n	800bc5a <_dtoa_r+0xa72>
 800bc18:	2a00      	cmp	r2, #0
 800bc1a:	dded      	ble.n	800bbf8 <_dtoa_r+0xa10>
 800bc1c:	4649      	mov	r1, r9
 800bc1e:	2201      	movs	r2, #1
 800bc20:	4658      	mov	r0, fp
 800bc22:	f000 fbfd 	bl	800c420 <__lshift>
 800bc26:	4621      	mov	r1, r4
 800bc28:	4681      	mov	r9, r0
 800bc2a:	f000 fc65 	bl	800c4f8 <__mcmp>
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	dc03      	bgt.n	800bc3a <_dtoa_r+0xa52>
 800bc32:	d1e1      	bne.n	800bbf8 <_dtoa_r+0xa10>
 800bc34:	f018 0f01 	tst.w	r8, #1
 800bc38:	d0de      	beq.n	800bbf8 <_dtoa_r+0xa10>
 800bc3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc3e:	d1d8      	bne.n	800bbf2 <_dtoa_r+0xa0a>
 800bc40:	9a00      	ldr	r2, [sp, #0]
 800bc42:	2339      	movs	r3, #57	@ 0x39
 800bc44:	7013      	strb	r3, [r2, #0]
 800bc46:	4633      	mov	r3, r6
 800bc48:	461e      	mov	r6, r3
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bc50:	2a39      	cmp	r2, #57	@ 0x39
 800bc52:	d052      	beq.n	800bcfa <_dtoa_r+0xb12>
 800bc54:	3201      	adds	r2, #1
 800bc56:	701a      	strb	r2, [r3, #0]
 800bc58:	e612      	b.n	800b880 <_dtoa_r+0x698>
 800bc5a:	2a00      	cmp	r2, #0
 800bc5c:	dd07      	ble.n	800bc6e <_dtoa_r+0xa86>
 800bc5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc62:	d0ed      	beq.n	800bc40 <_dtoa_r+0xa58>
 800bc64:	9a00      	ldr	r2, [sp, #0]
 800bc66:	f108 0301 	add.w	r3, r8, #1
 800bc6a:	7013      	strb	r3, [r2, #0]
 800bc6c:	e608      	b.n	800b880 <_dtoa_r+0x698>
 800bc6e:	9b07      	ldr	r3, [sp, #28]
 800bc70:	9a07      	ldr	r2, [sp, #28]
 800bc72:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bc76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d028      	beq.n	800bcce <_dtoa_r+0xae6>
 800bc7c:	4649      	mov	r1, r9
 800bc7e:	2300      	movs	r3, #0
 800bc80:	220a      	movs	r2, #10
 800bc82:	4658      	mov	r0, fp
 800bc84:	f000 f9d6 	bl	800c034 <__multadd>
 800bc88:	42af      	cmp	r7, r5
 800bc8a:	4681      	mov	r9, r0
 800bc8c:	f04f 0300 	mov.w	r3, #0
 800bc90:	f04f 020a 	mov.w	r2, #10
 800bc94:	4639      	mov	r1, r7
 800bc96:	4658      	mov	r0, fp
 800bc98:	d107      	bne.n	800bcaa <_dtoa_r+0xac2>
 800bc9a:	f000 f9cb 	bl	800c034 <__multadd>
 800bc9e:	4607      	mov	r7, r0
 800bca0:	4605      	mov	r5, r0
 800bca2:	9b07      	ldr	r3, [sp, #28]
 800bca4:	3301      	adds	r3, #1
 800bca6:	9307      	str	r3, [sp, #28]
 800bca8:	e774      	b.n	800bb94 <_dtoa_r+0x9ac>
 800bcaa:	f000 f9c3 	bl	800c034 <__multadd>
 800bcae:	4629      	mov	r1, r5
 800bcb0:	4607      	mov	r7, r0
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	220a      	movs	r2, #10
 800bcb6:	4658      	mov	r0, fp
 800bcb8:	f000 f9bc 	bl	800c034 <__multadd>
 800bcbc:	4605      	mov	r5, r0
 800bcbe:	e7f0      	b.n	800bca2 <_dtoa_r+0xaba>
 800bcc0:	9b00      	ldr	r3, [sp, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	bfcc      	ite	gt
 800bcc6:	461e      	movgt	r6, r3
 800bcc8:	2601      	movle	r6, #1
 800bcca:	4456      	add	r6, sl
 800bccc:	2700      	movs	r7, #0
 800bcce:	4649      	mov	r1, r9
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	4658      	mov	r0, fp
 800bcd4:	f000 fba4 	bl	800c420 <__lshift>
 800bcd8:	4621      	mov	r1, r4
 800bcda:	4681      	mov	r9, r0
 800bcdc:	f000 fc0c 	bl	800c4f8 <__mcmp>
 800bce0:	2800      	cmp	r0, #0
 800bce2:	dcb0      	bgt.n	800bc46 <_dtoa_r+0xa5e>
 800bce4:	d102      	bne.n	800bcec <_dtoa_r+0xb04>
 800bce6:	f018 0f01 	tst.w	r8, #1
 800bcea:	d1ac      	bne.n	800bc46 <_dtoa_r+0xa5e>
 800bcec:	4633      	mov	r3, r6
 800bcee:	461e      	mov	r6, r3
 800bcf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcf4:	2a30      	cmp	r2, #48	@ 0x30
 800bcf6:	d0fa      	beq.n	800bcee <_dtoa_r+0xb06>
 800bcf8:	e5c2      	b.n	800b880 <_dtoa_r+0x698>
 800bcfa:	459a      	cmp	sl, r3
 800bcfc:	d1a4      	bne.n	800bc48 <_dtoa_r+0xa60>
 800bcfe:	9b04      	ldr	r3, [sp, #16]
 800bd00:	3301      	adds	r3, #1
 800bd02:	9304      	str	r3, [sp, #16]
 800bd04:	2331      	movs	r3, #49	@ 0x31
 800bd06:	f88a 3000 	strb.w	r3, [sl]
 800bd0a:	e5b9      	b.n	800b880 <_dtoa_r+0x698>
 800bd0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bd6c <_dtoa_r+0xb84>
 800bd12:	b11b      	cbz	r3, 800bd1c <_dtoa_r+0xb34>
 800bd14:	f10a 0308 	add.w	r3, sl, #8
 800bd18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bd1a:	6013      	str	r3, [r2, #0]
 800bd1c:	4650      	mov	r0, sl
 800bd1e:	b019      	add	sp, #100	@ 0x64
 800bd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	f77f ae37 	ble.w	800b99a <_dtoa_r+0x7b2>
 800bd2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd30:	2001      	movs	r0, #1
 800bd32:	e655      	b.n	800b9e0 <_dtoa_r+0x7f8>
 800bd34:	9b00      	ldr	r3, [sp, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f77f aed6 	ble.w	800bae8 <_dtoa_r+0x900>
 800bd3c:	4656      	mov	r6, sl
 800bd3e:	4621      	mov	r1, r4
 800bd40:	4648      	mov	r0, r9
 800bd42:	f7ff f9c7 	bl	800b0d4 <quorem>
 800bd46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bd4a:	f806 8b01 	strb.w	r8, [r6], #1
 800bd4e:	9b00      	ldr	r3, [sp, #0]
 800bd50:	eba6 020a 	sub.w	r2, r6, sl
 800bd54:	4293      	cmp	r3, r2
 800bd56:	ddb3      	ble.n	800bcc0 <_dtoa_r+0xad8>
 800bd58:	4649      	mov	r1, r9
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	220a      	movs	r2, #10
 800bd5e:	4658      	mov	r0, fp
 800bd60:	f000 f968 	bl	800c034 <__multadd>
 800bd64:	4681      	mov	r9, r0
 800bd66:	e7ea      	b.n	800bd3e <_dtoa_r+0xb56>
 800bd68:	0800e9c8 	.word	0x0800e9c8
 800bd6c:	0800e963 	.word	0x0800e963

0800bd70 <_free_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	4605      	mov	r5, r0
 800bd74:	2900      	cmp	r1, #0
 800bd76:	d041      	beq.n	800bdfc <_free_r+0x8c>
 800bd78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd7c:	1f0c      	subs	r4, r1, #4
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	bfb8      	it	lt
 800bd82:	18e4      	addlt	r4, r4, r3
 800bd84:	f000 f8e8 	bl	800bf58 <__malloc_lock>
 800bd88:	4a1d      	ldr	r2, [pc, #116]	@ (800be00 <_free_r+0x90>)
 800bd8a:	6813      	ldr	r3, [r2, #0]
 800bd8c:	b933      	cbnz	r3, 800bd9c <_free_r+0x2c>
 800bd8e:	6063      	str	r3, [r4, #4]
 800bd90:	6014      	str	r4, [r2, #0]
 800bd92:	4628      	mov	r0, r5
 800bd94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd98:	f000 b8e4 	b.w	800bf64 <__malloc_unlock>
 800bd9c:	42a3      	cmp	r3, r4
 800bd9e:	d908      	bls.n	800bdb2 <_free_r+0x42>
 800bda0:	6820      	ldr	r0, [r4, #0]
 800bda2:	1821      	adds	r1, r4, r0
 800bda4:	428b      	cmp	r3, r1
 800bda6:	bf01      	itttt	eq
 800bda8:	6819      	ldreq	r1, [r3, #0]
 800bdaa:	685b      	ldreq	r3, [r3, #4]
 800bdac:	1809      	addeq	r1, r1, r0
 800bdae:	6021      	streq	r1, [r4, #0]
 800bdb0:	e7ed      	b.n	800bd8e <_free_r+0x1e>
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	b10b      	cbz	r3, 800bdbc <_free_r+0x4c>
 800bdb8:	42a3      	cmp	r3, r4
 800bdba:	d9fa      	bls.n	800bdb2 <_free_r+0x42>
 800bdbc:	6811      	ldr	r1, [r2, #0]
 800bdbe:	1850      	adds	r0, r2, r1
 800bdc0:	42a0      	cmp	r0, r4
 800bdc2:	d10b      	bne.n	800bddc <_free_r+0x6c>
 800bdc4:	6820      	ldr	r0, [r4, #0]
 800bdc6:	4401      	add	r1, r0
 800bdc8:	1850      	adds	r0, r2, r1
 800bdca:	4283      	cmp	r3, r0
 800bdcc:	6011      	str	r1, [r2, #0]
 800bdce:	d1e0      	bne.n	800bd92 <_free_r+0x22>
 800bdd0:	6818      	ldr	r0, [r3, #0]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	6053      	str	r3, [r2, #4]
 800bdd6:	4408      	add	r0, r1
 800bdd8:	6010      	str	r0, [r2, #0]
 800bdda:	e7da      	b.n	800bd92 <_free_r+0x22>
 800bddc:	d902      	bls.n	800bde4 <_free_r+0x74>
 800bdde:	230c      	movs	r3, #12
 800bde0:	602b      	str	r3, [r5, #0]
 800bde2:	e7d6      	b.n	800bd92 <_free_r+0x22>
 800bde4:	6820      	ldr	r0, [r4, #0]
 800bde6:	1821      	adds	r1, r4, r0
 800bde8:	428b      	cmp	r3, r1
 800bdea:	bf04      	itt	eq
 800bdec:	6819      	ldreq	r1, [r3, #0]
 800bdee:	685b      	ldreq	r3, [r3, #4]
 800bdf0:	6063      	str	r3, [r4, #4]
 800bdf2:	bf04      	itt	eq
 800bdf4:	1809      	addeq	r1, r1, r0
 800bdf6:	6021      	streq	r1, [r4, #0]
 800bdf8:	6054      	str	r4, [r2, #4]
 800bdfa:	e7ca      	b.n	800bd92 <_free_r+0x22>
 800bdfc:	bd38      	pop	{r3, r4, r5, pc}
 800bdfe:	bf00      	nop
 800be00:	20000824 	.word	0x20000824

0800be04 <malloc>:
 800be04:	4b02      	ldr	r3, [pc, #8]	@ (800be10 <malloc+0xc>)
 800be06:	4601      	mov	r1, r0
 800be08:	6818      	ldr	r0, [r3, #0]
 800be0a:	f000 b825 	b.w	800be58 <_malloc_r>
 800be0e:	bf00      	nop
 800be10:	200000fc 	.word	0x200000fc

0800be14 <sbrk_aligned>:
 800be14:	b570      	push	{r4, r5, r6, lr}
 800be16:	4e0f      	ldr	r6, [pc, #60]	@ (800be54 <sbrk_aligned+0x40>)
 800be18:	460c      	mov	r4, r1
 800be1a:	6831      	ldr	r1, [r6, #0]
 800be1c:	4605      	mov	r5, r0
 800be1e:	b911      	cbnz	r1, 800be26 <sbrk_aligned+0x12>
 800be20:	f001 fda2 	bl	800d968 <_sbrk_r>
 800be24:	6030      	str	r0, [r6, #0]
 800be26:	4621      	mov	r1, r4
 800be28:	4628      	mov	r0, r5
 800be2a:	f001 fd9d 	bl	800d968 <_sbrk_r>
 800be2e:	1c43      	adds	r3, r0, #1
 800be30:	d103      	bne.n	800be3a <sbrk_aligned+0x26>
 800be32:	f04f 34ff 	mov.w	r4, #4294967295
 800be36:	4620      	mov	r0, r4
 800be38:	bd70      	pop	{r4, r5, r6, pc}
 800be3a:	1cc4      	adds	r4, r0, #3
 800be3c:	f024 0403 	bic.w	r4, r4, #3
 800be40:	42a0      	cmp	r0, r4
 800be42:	d0f8      	beq.n	800be36 <sbrk_aligned+0x22>
 800be44:	1a21      	subs	r1, r4, r0
 800be46:	4628      	mov	r0, r5
 800be48:	f001 fd8e 	bl	800d968 <_sbrk_r>
 800be4c:	3001      	adds	r0, #1
 800be4e:	d1f2      	bne.n	800be36 <sbrk_aligned+0x22>
 800be50:	e7ef      	b.n	800be32 <sbrk_aligned+0x1e>
 800be52:	bf00      	nop
 800be54:	20000820 	.word	0x20000820

0800be58 <_malloc_r>:
 800be58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be5c:	1ccd      	adds	r5, r1, #3
 800be5e:	f025 0503 	bic.w	r5, r5, #3
 800be62:	3508      	adds	r5, #8
 800be64:	2d0c      	cmp	r5, #12
 800be66:	bf38      	it	cc
 800be68:	250c      	movcc	r5, #12
 800be6a:	2d00      	cmp	r5, #0
 800be6c:	4606      	mov	r6, r0
 800be6e:	db01      	blt.n	800be74 <_malloc_r+0x1c>
 800be70:	42a9      	cmp	r1, r5
 800be72:	d904      	bls.n	800be7e <_malloc_r+0x26>
 800be74:	230c      	movs	r3, #12
 800be76:	6033      	str	r3, [r6, #0]
 800be78:	2000      	movs	r0, #0
 800be7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf54 <_malloc_r+0xfc>
 800be82:	f000 f869 	bl	800bf58 <__malloc_lock>
 800be86:	f8d8 3000 	ldr.w	r3, [r8]
 800be8a:	461c      	mov	r4, r3
 800be8c:	bb44      	cbnz	r4, 800bee0 <_malloc_r+0x88>
 800be8e:	4629      	mov	r1, r5
 800be90:	4630      	mov	r0, r6
 800be92:	f7ff ffbf 	bl	800be14 <sbrk_aligned>
 800be96:	1c43      	adds	r3, r0, #1
 800be98:	4604      	mov	r4, r0
 800be9a:	d158      	bne.n	800bf4e <_malloc_r+0xf6>
 800be9c:	f8d8 4000 	ldr.w	r4, [r8]
 800bea0:	4627      	mov	r7, r4
 800bea2:	2f00      	cmp	r7, #0
 800bea4:	d143      	bne.n	800bf2e <_malloc_r+0xd6>
 800bea6:	2c00      	cmp	r4, #0
 800bea8:	d04b      	beq.n	800bf42 <_malloc_r+0xea>
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	4639      	mov	r1, r7
 800beae:	4630      	mov	r0, r6
 800beb0:	eb04 0903 	add.w	r9, r4, r3
 800beb4:	f001 fd58 	bl	800d968 <_sbrk_r>
 800beb8:	4581      	cmp	r9, r0
 800beba:	d142      	bne.n	800bf42 <_malloc_r+0xea>
 800bebc:	6821      	ldr	r1, [r4, #0]
 800bebe:	1a6d      	subs	r5, r5, r1
 800bec0:	4629      	mov	r1, r5
 800bec2:	4630      	mov	r0, r6
 800bec4:	f7ff ffa6 	bl	800be14 <sbrk_aligned>
 800bec8:	3001      	adds	r0, #1
 800beca:	d03a      	beq.n	800bf42 <_malloc_r+0xea>
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	442b      	add	r3, r5
 800bed0:	6023      	str	r3, [r4, #0]
 800bed2:	f8d8 3000 	ldr.w	r3, [r8]
 800bed6:	685a      	ldr	r2, [r3, #4]
 800bed8:	bb62      	cbnz	r2, 800bf34 <_malloc_r+0xdc>
 800beda:	f8c8 7000 	str.w	r7, [r8]
 800bede:	e00f      	b.n	800bf00 <_malloc_r+0xa8>
 800bee0:	6822      	ldr	r2, [r4, #0]
 800bee2:	1b52      	subs	r2, r2, r5
 800bee4:	d420      	bmi.n	800bf28 <_malloc_r+0xd0>
 800bee6:	2a0b      	cmp	r2, #11
 800bee8:	d917      	bls.n	800bf1a <_malloc_r+0xc2>
 800beea:	1961      	adds	r1, r4, r5
 800beec:	42a3      	cmp	r3, r4
 800beee:	6025      	str	r5, [r4, #0]
 800bef0:	bf18      	it	ne
 800bef2:	6059      	strne	r1, [r3, #4]
 800bef4:	6863      	ldr	r3, [r4, #4]
 800bef6:	bf08      	it	eq
 800bef8:	f8c8 1000 	streq.w	r1, [r8]
 800befc:	5162      	str	r2, [r4, r5]
 800befe:	604b      	str	r3, [r1, #4]
 800bf00:	4630      	mov	r0, r6
 800bf02:	f000 f82f 	bl	800bf64 <__malloc_unlock>
 800bf06:	f104 000b 	add.w	r0, r4, #11
 800bf0a:	1d23      	adds	r3, r4, #4
 800bf0c:	f020 0007 	bic.w	r0, r0, #7
 800bf10:	1ac2      	subs	r2, r0, r3
 800bf12:	bf1c      	itt	ne
 800bf14:	1a1b      	subne	r3, r3, r0
 800bf16:	50a3      	strne	r3, [r4, r2]
 800bf18:	e7af      	b.n	800be7a <_malloc_r+0x22>
 800bf1a:	6862      	ldr	r2, [r4, #4]
 800bf1c:	42a3      	cmp	r3, r4
 800bf1e:	bf0c      	ite	eq
 800bf20:	f8c8 2000 	streq.w	r2, [r8]
 800bf24:	605a      	strne	r2, [r3, #4]
 800bf26:	e7eb      	b.n	800bf00 <_malloc_r+0xa8>
 800bf28:	4623      	mov	r3, r4
 800bf2a:	6864      	ldr	r4, [r4, #4]
 800bf2c:	e7ae      	b.n	800be8c <_malloc_r+0x34>
 800bf2e:	463c      	mov	r4, r7
 800bf30:	687f      	ldr	r7, [r7, #4]
 800bf32:	e7b6      	b.n	800bea2 <_malloc_r+0x4a>
 800bf34:	461a      	mov	r2, r3
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	42a3      	cmp	r3, r4
 800bf3a:	d1fb      	bne.n	800bf34 <_malloc_r+0xdc>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	6053      	str	r3, [r2, #4]
 800bf40:	e7de      	b.n	800bf00 <_malloc_r+0xa8>
 800bf42:	230c      	movs	r3, #12
 800bf44:	6033      	str	r3, [r6, #0]
 800bf46:	4630      	mov	r0, r6
 800bf48:	f000 f80c 	bl	800bf64 <__malloc_unlock>
 800bf4c:	e794      	b.n	800be78 <_malloc_r+0x20>
 800bf4e:	6005      	str	r5, [r0, #0]
 800bf50:	e7d6      	b.n	800bf00 <_malloc_r+0xa8>
 800bf52:	bf00      	nop
 800bf54:	20000824 	.word	0x20000824

0800bf58 <__malloc_lock>:
 800bf58:	4801      	ldr	r0, [pc, #4]	@ (800bf60 <__malloc_lock+0x8>)
 800bf5a:	f7ff b894 	b.w	800b086 <__retarget_lock_acquire_recursive>
 800bf5e:	bf00      	nop
 800bf60:	2000081c 	.word	0x2000081c

0800bf64 <__malloc_unlock>:
 800bf64:	4801      	ldr	r0, [pc, #4]	@ (800bf6c <__malloc_unlock+0x8>)
 800bf66:	f7ff b88f 	b.w	800b088 <__retarget_lock_release_recursive>
 800bf6a:	bf00      	nop
 800bf6c:	2000081c 	.word	0x2000081c

0800bf70 <_Balloc>:
 800bf70:	b570      	push	{r4, r5, r6, lr}
 800bf72:	69c6      	ldr	r6, [r0, #28]
 800bf74:	4604      	mov	r4, r0
 800bf76:	460d      	mov	r5, r1
 800bf78:	b976      	cbnz	r6, 800bf98 <_Balloc+0x28>
 800bf7a:	2010      	movs	r0, #16
 800bf7c:	f7ff ff42 	bl	800be04 <malloc>
 800bf80:	4602      	mov	r2, r0
 800bf82:	61e0      	str	r0, [r4, #28]
 800bf84:	b920      	cbnz	r0, 800bf90 <_Balloc+0x20>
 800bf86:	4b18      	ldr	r3, [pc, #96]	@ (800bfe8 <_Balloc+0x78>)
 800bf88:	4818      	ldr	r0, [pc, #96]	@ (800bfec <_Balloc+0x7c>)
 800bf8a:	216b      	movs	r1, #107	@ 0x6b
 800bf8c:	f7ff f884 	bl	800b098 <__assert_func>
 800bf90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf94:	6006      	str	r6, [r0, #0]
 800bf96:	60c6      	str	r6, [r0, #12]
 800bf98:	69e6      	ldr	r6, [r4, #28]
 800bf9a:	68f3      	ldr	r3, [r6, #12]
 800bf9c:	b183      	cbz	r3, 800bfc0 <_Balloc+0x50>
 800bf9e:	69e3      	ldr	r3, [r4, #28]
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bfa6:	b9b8      	cbnz	r0, 800bfd8 <_Balloc+0x68>
 800bfa8:	2101      	movs	r1, #1
 800bfaa:	fa01 f605 	lsl.w	r6, r1, r5
 800bfae:	1d72      	adds	r2, r6, #5
 800bfb0:	0092      	lsls	r2, r2, #2
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f001 fd07 	bl	800d9c6 <_calloc_r>
 800bfb8:	b160      	cbz	r0, 800bfd4 <_Balloc+0x64>
 800bfba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bfbe:	e00e      	b.n	800bfde <_Balloc+0x6e>
 800bfc0:	2221      	movs	r2, #33	@ 0x21
 800bfc2:	2104      	movs	r1, #4
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f001 fcfe 	bl	800d9c6 <_calloc_r>
 800bfca:	69e3      	ldr	r3, [r4, #28]
 800bfcc:	60f0      	str	r0, [r6, #12]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1e4      	bne.n	800bf9e <_Balloc+0x2e>
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	bd70      	pop	{r4, r5, r6, pc}
 800bfd8:	6802      	ldr	r2, [r0, #0]
 800bfda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bfde:	2300      	movs	r3, #0
 800bfe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bfe4:	e7f7      	b.n	800bfd6 <_Balloc+0x66>
 800bfe6:	bf00      	nop
 800bfe8:	0800e8b6 	.word	0x0800e8b6
 800bfec:	0800e9d9 	.word	0x0800e9d9

0800bff0 <_Bfree>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	69c6      	ldr	r6, [r0, #28]
 800bff4:	4605      	mov	r5, r0
 800bff6:	460c      	mov	r4, r1
 800bff8:	b976      	cbnz	r6, 800c018 <_Bfree+0x28>
 800bffa:	2010      	movs	r0, #16
 800bffc:	f7ff ff02 	bl	800be04 <malloc>
 800c000:	4602      	mov	r2, r0
 800c002:	61e8      	str	r0, [r5, #28]
 800c004:	b920      	cbnz	r0, 800c010 <_Bfree+0x20>
 800c006:	4b09      	ldr	r3, [pc, #36]	@ (800c02c <_Bfree+0x3c>)
 800c008:	4809      	ldr	r0, [pc, #36]	@ (800c030 <_Bfree+0x40>)
 800c00a:	218f      	movs	r1, #143	@ 0x8f
 800c00c:	f7ff f844 	bl	800b098 <__assert_func>
 800c010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c014:	6006      	str	r6, [r0, #0]
 800c016:	60c6      	str	r6, [r0, #12]
 800c018:	b13c      	cbz	r4, 800c02a <_Bfree+0x3a>
 800c01a:	69eb      	ldr	r3, [r5, #28]
 800c01c:	6862      	ldr	r2, [r4, #4]
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c024:	6021      	str	r1, [r4, #0]
 800c026:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c02a:	bd70      	pop	{r4, r5, r6, pc}
 800c02c:	0800e8b6 	.word	0x0800e8b6
 800c030:	0800e9d9 	.word	0x0800e9d9

0800c034 <__multadd>:
 800c034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c038:	690d      	ldr	r5, [r1, #16]
 800c03a:	4607      	mov	r7, r0
 800c03c:	460c      	mov	r4, r1
 800c03e:	461e      	mov	r6, r3
 800c040:	f101 0c14 	add.w	ip, r1, #20
 800c044:	2000      	movs	r0, #0
 800c046:	f8dc 3000 	ldr.w	r3, [ip]
 800c04a:	b299      	uxth	r1, r3
 800c04c:	fb02 6101 	mla	r1, r2, r1, r6
 800c050:	0c1e      	lsrs	r6, r3, #16
 800c052:	0c0b      	lsrs	r3, r1, #16
 800c054:	fb02 3306 	mla	r3, r2, r6, r3
 800c058:	b289      	uxth	r1, r1
 800c05a:	3001      	adds	r0, #1
 800c05c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c060:	4285      	cmp	r5, r0
 800c062:	f84c 1b04 	str.w	r1, [ip], #4
 800c066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c06a:	dcec      	bgt.n	800c046 <__multadd+0x12>
 800c06c:	b30e      	cbz	r6, 800c0b2 <__multadd+0x7e>
 800c06e:	68a3      	ldr	r3, [r4, #8]
 800c070:	42ab      	cmp	r3, r5
 800c072:	dc19      	bgt.n	800c0a8 <__multadd+0x74>
 800c074:	6861      	ldr	r1, [r4, #4]
 800c076:	4638      	mov	r0, r7
 800c078:	3101      	adds	r1, #1
 800c07a:	f7ff ff79 	bl	800bf70 <_Balloc>
 800c07e:	4680      	mov	r8, r0
 800c080:	b928      	cbnz	r0, 800c08e <__multadd+0x5a>
 800c082:	4602      	mov	r2, r0
 800c084:	4b0c      	ldr	r3, [pc, #48]	@ (800c0b8 <__multadd+0x84>)
 800c086:	480d      	ldr	r0, [pc, #52]	@ (800c0bc <__multadd+0x88>)
 800c088:	21ba      	movs	r1, #186	@ 0xba
 800c08a:	f7ff f805 	bl	800b098 <__assert_func>
 800c08e:	6922      	ldr	r2, [r4, #16]
 800c090:	3202      	adds	r2, #2
 800c092:	f104 010c 	add.w	r1, r4, #12
 800c096:	0092      	lsls	r2, r2, #2
 800c098:	300c      	adds	r0, #12
 800c09a:	f001 fc75 	bl	800d988 <memcpy>
 800c09e:	4621      	mov	r1, r4
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	f7ff ffa5 	bl	800bff0 <_Bfree>
 800c0a6:	4644      	mov	r4, r8
 800c0a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c0ac:	3501      	adds	r5, #1
 800c0ae:	615e      	str	r6, [r3, #20]
 800c0b0:	6125      	str	r5, [r4, #16]
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b8:	0800e9c8 	.word	0x0800e9c8
 800c0bc:	0800e9d9 	.word	0x0800e9d9

0800c0c0 <__s2b>:
 800c0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0c4:	460c      	mov	r4, r1
 800c0c6:	4615      	mov	r5, r2
 800c0c8:	461f      	mov	r7, r3
 800c0ca:	2209      	movs	r2, #9
 800c0cc:	3308      	adds	r3, #8
 800c0ce:	4606      	mov	r6, r0
 800c0d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	db09      	blt.n	800c0f0 <__s2b+0x30>
 800c0dc:	4630      	mov	r0, r6
 800c0de:	f7ff ff47 	bl	800bf70 <_Balloc>
 800c0e2:	b940      	cbnz	r0, 800c0f6 <__s2b+0x36>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	4b19      	ldr	r3, [pc, #100]	@ (800c14c <__s2b+0x8c>)
 800c0e8:	4819      	ldr	r0, [pc, #100]	@ (800c150 <__s2b+0x90>)
 800c0ea:	21d3      	movs	r1, #211	@ 0xd3
 800c0ec:	f7fe ffd4 	bl	800b098 <__assert_func>
 800c0f0:	0052      	lsls	r2, r2, #1
 800c0f2:	3101      	adds	r1, #1
 800c0f4:	e7f0      	b.n	800c0d8 <__s2b+0x18>
 800c0f6:	9b08      	ldr	r3, [sp, #32]
 800c0f8:	6143      	str	r3, [r0, #20]
 800c0fa:	2d09      	cmp	r5, #9
 800c0fc:	f04f 0301 	mov.w	r3, #1
 800c100:	6103      	str	r3, [r0, #16]
 800c102:	dd16      	ble.n	800c132 <__s2b+0x72>
 800c104:	f104 0909 	add.w	r9, r4, #9
 800c108:	46c8      	mov	r8, r9
 800c10a:	442c      	add	r4, r5
 800c10c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c110:	4601      	mov	r1, r0
 800c112:	3b30      	subs	r3, #48	@ 0x30
 800c114:	220a      	movs	r2, #10
 800c116:	4630      	mov	r0, r6
 800c118:	f7ff ff8c 	bl	800c034 <__multadd>
 800c11c:	45a0      	cmp	r8, r4
 800c11e:	d1f5      	bne.n	800c10c <__s2b+0x4c>
 800c120:	f1a5 0408 	sub.w	r4, r5, #8
 800c124:	444c      	add	r4, r9
 800c126:	1b2d      	subs	r5, r5, r4
 800c128:	1963      	adds	r3, r4, r5
 800c12a:	42bb      	cmp	r3, r7
 800c12c:	db04      	blt.n	800c138 <__s2b+0x78>
 800c12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c132:	340a      	adds	r4, #10
 800c134:	2509      	movs	r5, #9
 800c136:	e7f6      	b.n	800c126 <__s2b+0x66>
 800c138:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c13c:	4601      	mov	r1, r0
 800c13e:	3b30      	subs	r3, #48	@ 0x30
 800c140:	220a      	movs	r2, #10
 800c142:	4630      	mov	r0, r6
 800c144:	f7ff ff76 	bl	800c034 <__multadd>
 800c148:	e7ee      	b.n	800c128 <__s2b+0x68>
 800c14a:	bf00      	nop
 800c14c:	0800e9c8 	.word	0x0800e9c8
 800c150:	0800e9d9 	.word	0x0800e9d9

0800c154 <__hi0bits>:
 800c154:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c158:	4603      	mov	r3, r0
 800c15a:	bf36      	itet	cc
 800c15c:	0403      	lslcc	r3, r0, #16
 800c15e:	2000      	movcs	r0, #0
 800c160:	2010      	movcc	r0, #16
 800c162:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c166:	bf3c      	itt	cc
 800c168:	021b      	lslcc	r3, r3, #8
 800c16a:	3008      	addcc	r0, #8
 800c16c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c170:	bf3c      	itt	cc
 800c172:	011b      	lslcc	r3, r3, #4
 800c174:	3004      	addcc	r0, #4
 800c176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c17a:	bf3c      	itt	cc
 800c17c:	009b      	lslcc	r3, r3, #2
 800c17e:	3002      	addcc	r0, #2
 800c180:	2b00      	cmp	r3, #0
 800c182:	db05      	blt.n	800c190 <__hi0bits+0x3c>
 800c184:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c188:	f100 0001 	add.w	r0, r0, #1
 800c18c:	bf08      	it	eq
 800c18e:	2020      	moveq	r0, #32
 800c190:	4770      	bx	lr

0800c192 <__lo0bits>:
 800c192:	6803      	ldr	r3, [r0, #0]
 800c194:	4602      	mov	r2, r0
 800c196:	f013 0007 	ands.w	r0, r3, #7
 800c19a:	d00b      	beq.n	800c1b4 <__lo0bits+0x22>
 800c19c:	07d9      	lsls	r1, r3, #31
 800c19e:	d421      	bmi.n	800c1e4 <__lo0bits+0x52>
 800c1a0:	0798      	lsls	r0, r3, #30
 800c1a2:	bf49      	itett	mi
 800c1a4:	085b      	lsrmi	r3, r3, #1
 800c1a6:	089b      	lsrpl	r3, r3, #2
 800c1a8:	2001      	movmi	r0, #1
 800c1aa:	6013      	strmi	r3, [r2, #0]
 800c1ac:	bf5c      	itt	pl
 800c1ae:	6013      	strpl	r3, [r2, #0]
 800c1b0:	2002      	movpl	r0, #2
 800c1b2:	4770      	bx	lr
 800c1b4:	b299      	uxth	r1, r3
 800c1b6:	b909      	cbnz	r1, 800c1bc <__lo0bits+0x2a>
 800c1b8:	0c1b      	lsrs	r3, r3, #16
 800c1ba:	2010      	movs	r0, #16
 800c1bc:	b2d9      	uxtb	r1, r3
 800c1be:	b909      	cbnz	r1, 800c1c4 <__lo0bits+0x32>
 800c1c0:	3008      	adds	r0, #8
 800c1c2:	0a1b      	lsrs	r3, r3, #8
 800c1c4:	0719      	lsls	r1, r3, #28
 800c1c6:	bf04      	itt	eq
 800c1c8:	091b      	lsreq	r3, r3, #4
 800c1ca:	3004      	addeq	r0, #4
 800c1cc:	0799      	lsls	r1, r3, #30
 800c1ce:	bf04      	itt	eq
 800c1d0:	089b      	lsreq	r3, r3, #2
 800c1d2:	3002      	addeq	r0, #2
 800c1d4:	07d9      	lsls	r1, r3, #31
 800c1d6:	d403      	bmi.n	800c1e0 <__lo0bits+0x4e>
 800c1d8:	085b      	lsrs	r3, r3, #1
 800c1da:	f100 0001 	add.w	r0, r0, #1
 800c1de:	d003      	beq.n	800c1e8 <__lo0bits+0x56>
 800c1e0:	6013      	str	r3, [r2, #0]
 800c1e2:	4770      	bx	lr
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	4770      	bx	lr
 800c1e8:	2020      	movs	r0, #32
 800c1ea:	4770      	bx	lr

0800c1ec <__i2b>:
 800c1ec:	b510      	push	{r4, lr}
 800c1ee:	460c      	mov	r4, r1
 800c1f0:	2101      	movs	r1, #1
 800c1f2:	f7ff febd 	bl	800bf70 <_Balloc>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	b928      	cbnz	r0, 800c206 <__i2b+0x1a>
 800c1fa:	4b05      	ldr	r3, [pc, #20]	@ (800c210 <__i2b+0x24>)
 800c1fc:	4805      	ldr	r0, [pc, #20]	@ (800c214 <__i2b+0x28>)
 800c1fe:	f240 1145 	movw	r1, #325	@ 0x145
 800c202:	f7fe ff49 	bl	800b098 <__assert_func>
 800c206:	2301      	movs	r3, #1
 800c208:	6144      	str	r4, [r0, #20]
 800c20a:	6103      	str	r3, [r0, #16]
 800c20c:	bd10      	pop	{r4, pc}
 800c20e:	bf00      	nop
 800c210:	0800e9c8 	.word	0x0800e9c8
 800c214:	0800e9d9 	.word	0x0800e9d9

0800c218 <__multiply>:
 800c218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c21c:	4614      	mov	r4, r2
 800c21e:	690a      	ldr	r2, [r1, #16]
 800c220:	6923      	ldr	r3, [r4, #16]
 800c222:	429a      	cmp	r2, r3
 800c224:	bfa8      	it	ge
 800c226:	4623      	movge	r3, r4
 800c228:	460f      	mov	r7, r1
 800c22a:	bfa4      	itt	ge
 800c22c:	460c      	movge	r4, r1
 800c22e:	461f      	movge	r7, r3
 800c230:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c234:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c238:	68a3      	ldr	r3, [r4, #8]
 800c23a:	6861      	ldr	r1, [r4, #4]
 800c23c:	eb0a 0609 	add.w	r6, sl, r9
 800c240:	42b3      	cmp	r3, r6
 800c242:	b085      	sub	sp, #20
 800c244:	bfb8      	it	lt
 800c246:	3101      	addlt	r1, #1
 800c248:	f7ff fe92 	bl	800bf70 <_Balloc>
 800c24c:	b930      	cbnz	r0, 800c25c <__multiply+0x44>
 800c24e:	4602      	mov	r2, r0
 800c250:	4b44      	ldr	r3, [pc, #272]	@ (800c364 <__multiply+0x14c>)
 800c252:	4845      	ldr	r0, [pc, #276]	@ (800c368 <__multiply+0x150>)
 800c254:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c258:	f7fe ff1e 	bl	800b098 <__assert_func>
 800c25c:	f100 0514 	add.w	r5, r0, #20
 800c260:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c264:	462b      	mov	r3, r5
 800c266:	2200      	movs	r2, #0
 800c268:	4543      	cmp	r3, r8
 800c26a:	d321      	bcc.n	800c2b0 <__multiply+0x98>
 800c26c:	f107 0114 	add.w	r1, r7, #20
 800c270:	f104 0214 	add.w	r2, r4, #20
 800c274:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c278:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c27c:	9302      	str	r3, [sp, #8]
 800c27e:	1b13      	subs	r3, r2, r4
 800c280:	3b15      	subs	r3, #21
 800c282:	f023 0303 	bic.w	r3, r3, #3
 800c286:	3304      	adds	r3, #4
 800c288:	f104 0715 	add.w	r7, r4, #21
 800c28c:	42ba      	cmp	r2, r7
 800c28e:	bf38      	it	cc
 800c290:	2304      	movcc	r3, #4
 800c292:	9301      	str	r3, [sp, #4]
 800c294:	9b02      	ldr	r3, [sp, #8]
 800c296:	9103      	str	r1, [sp, #12]
 800c298:	428b      	cmp	r3, r1
 800c29a:	d80c      	bhi.n	800c2b6 <__multiply+0x9e>
 800c29c:	2e00      	cmp	r6, #0
 800c29e:	dd03      	ble.n	800c2a8 <__multiply+0x90>
 800c2a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d05b      	beq.n	800c360 <__multiply+0x148>
 800c2a8:	6106      	str	r6, [r0, #16]
 800c2aa:	b005      	add	sp, #20
 800c2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b0:	f843 2b04 	str.w	r2, [r3], #4
 800c2b4:	e7d8      	b.n	800c268 <__multiply+0x50>
 800c2b6:	f8b1 a000 	ldrh.w	sl, [r1]
 800c2ba:	f1ba 0f00 	cmp.w	sl, #0
 800c2be:	d024      	beq.n	800c30a <__multiply+0xf2>
 800c2c0:	f104 0e14 	add.w	lr, r4, #20
 800c2c4:	46a9      	mov	r9, r5
 800c2c6:	f04f 0c00 	mov.w	ip, #0
 800c2ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c2ce:	f8d9 3000 	ldr.w	r3, [r9]
 800c2d2:	fa1f fb87 	uxth.w	fp, r7
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800c2dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c2e0:	f8d9 7000 	ldr.w	r7, [r9]
 800c2e4:	4463      	add	r3, ip
 800c2e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c2ea:	fb0a c70b 	mla	r7, sl, fp, ip
 800c2ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c2f8:	4572      	cmp	r2, lr
 800c2fa:	f849 3b04 	str.w	r3, [r9], #4
 800c2fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c302:	d8e2      	bhi.n	800c2ca <__multiply+0xb2>
 800c304:	9b01      	ldr	r3, [sp, #4]
 800c306:	f845 c003 	str.w	ip, [r5, r3]
 800c30a:	9b03      	ldr	r3, [sp, #12]
 800c30c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c310:	3104      	adds	r1, #4
 800c312:	f1b9 0f00 	cmp.w	r9, #0
 800c316:	d021      	beq.n	800c35c <__multiply+0x144>
 800c318:	682b      	ldr	r3, [r5, #0]
 800c31a:	f104 0c14 	add.w	ip, r4, #20
 800c31e:	46ae      	mov	lr, r5
 800c320:	f04f 0a00 	mov.w	sl, #0
 800c324:	f8bc b000 	ldrh.w	fp, [ip]
 800c328:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c32c:	fb09 770b 	mla	r7, r9, fp, r7
 800c330:	4457      	add	r7, sl
 800c332:	b29b      	uxth	r3, r3
 800c334:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c338:	f84e 3b04 	str.w	r3, [lr], #4
 800c33c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c340:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c344:	f8be 3000 	ldrh.w	r3, [lr]
 800c348:	fb09 330a 	mla	r3, r9, sl, r3
 800c34c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c350:	4562      	cmp	r2, ip
 800c352:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c356:	d8e5      	bhi.n	800c324 <__multiply+0x10c>
 800c358:	9f01      	ldr	r7, [sp, #4]
 800c35a:	51eb      	str	r3, [r5, r7]
 800c35c:	3504      	adds	r5, #4
 800c35e:	e799      	b.n	800c294 <__multiply+0x7c>
 800c360:	3e01      	subs	r6, #1
 800c362:	e79b      	b.n	800c29c <__multiply+0x84>
 800c364:	0800e9c8 	.word	0x0800e9c8
 800c368:	0800e9d9 	.word	0x0800e9d9

0800c36c <__pow5mult>:
 800c36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c370:	4615      	mov	r5, r2
 800c372:	f012 0203 	ands.w	r2, r2, #3
 800c376:	4607      	mov	r7, r0
 800c378:	460e      	mov	r6, r1
 800c37a:	d007      	beq.n	800c38c <__pow5mult+0x20>
 800c37c:	4c25      	ldr	r4, [pc, #148]	@ (800c414 <__pow5mult+0xa8>)
 800c37e:	3a01      	subs	r2, #1
 800c380:	2300      	movs	r3, #0
 800c382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c386:	f7ff fe55 	bl	800c034 <__multadd>
 800c38a:	4606      	mov	r6, r0
 800c38c:	10ad      	asrs	r5, r5, #2
 800c38e:	d03d      	beq.n	800c40c <__pow5mult+0xa0>
 800c390:	69fc      	ldr	r4, [r7, #28]
 800c392:	b97c      	cbnz	r4, 800c3b4 <__pow5mult+0x48>
 800c394:	2010      	movs	r0, #16
 800c396:	f7ff fd35 	bl	800be04 <malloc>
 800c39a:	4602      	mov	r2, r0
 800c39c:	61f8      	str	r0, [r7, #28]
 800c39e:	b928      	cbnz	r0, 800c3ac <__pow5mult+0x40>
 800c3a0:	4b1d      	ldr	r3, [pc, #116]	@ (800c418 <__pow5mult+0xac>)
 800c3a2:	481e      	ldr	r0, [pc, #120]	@ (800c41c <__pow5mult+0xb0>)
 800c3a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c3a8:	f7fe fe76 	bl	800b098 <__assert_func>
 800c3ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3b0:	6004      	str	r4, [r0, #0]
 800c3b2:	60c4      	str	r4, [r0, #12]
 800c3b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c3b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3bc:	b94c      	cbnz	r4, 800c3d2 <__pow5mult+0x66>
 800c3be:	f240 2171 	movw	r1, #625	@ 0x271
 800c3c2:	4638      	mov	r0, r7
 800c3c4:	f7ff ff12 	bl	800c1ec <__i2b>
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	6003      	str	r3, [r0, #0]
 800c3d2:	f04f 0900 	mov.w	r9, #0
 800c3d6:	07eb      	lsls	r3, r5, #31
 800c3d8:	d50a      	bpl.n	800c3f0 <__pow5mult+0x84>
 800c3da:	4631      	mov	r1, r6
 800c3dc:	4622      	mov	r2, r4
 800c3de:	4638      	mov	r0, r7
 800c3e0:	f7ff ff1a 	bl	800c218 <__multiply>
 800c3e4:	4631      	mov	r1, r6
 800c3e6:	4680      	mov	r8, r0
 800c3e8:	4638      	mov	r0, r7
 800c3ea:	f7ff fe01 	bl	800bff0 <_Bfree>
 800c3ee:	4646      	mov	r6, r8
 800c3f0:	106d      	asrs	r5, r5, #1
 800c3f2:	d00b      	beq.n	800c40c <__pow5mult+0xa0>
 800c3f4:	6820      	ldr	r0, [r4, #0]
 800c3f6:	b938      	cbnz	r0, 800c408 <__pow5mult+0x9c>
 800c3f8:	4622      	mov	r2, r4
 800c3fa:	4621      	mov	r1, r4
 800c3fc:	4638      	mov	r0, r7
 800c3fe:	f7ff ff0b 	bl	800c218 <__multiply>
 800c402:	6020      	str	r0, [r4, #0]
 800c404:	f8c0 9000 	str.w	r9, [r0]
 800c408:	4604      	mov	r4, r0
 800c40a:	e7e4      	b.n	800c3d6 <__pow5mult+0x6a>
 800c40c:	4630      	mov	r0, r6
 800c40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c412:	bf00      	nop
 800c414:	0800ea34 	.word	0x0800ea34
 800c418:	0800e8b6 	.word	0x0800e8b6
 800c41c:	0800e9d9 	.word	0x0800e9d9

0800c420 <__lshift>:
 800c420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c424:	460c      	mov	r4, r1
 800c426:	6849      	ldr	r1, [r1, #4]
 800c428:	6923      	ldr	r3, [r4, #16]
 800c42a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c42e:	68a3      	ldr	r3, [r4, #8]
 800c430:	4607      	mov	r7, r0
 800c432:	4691      	mov	r9, r2
 800c434:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c438:	f108 0601 	add.w	r6, r8, #1
 800c43c:	42b3      	cmp	r3, r6
 800c43e:	db0b      	blt.n	800c458 <__lshift+0x38>
 800c440:	4638      	mov	r0, r7
 800c442:	f7ff fd95 	bl	800bf70 <_Balloc>
 800c446:	4605      	mov	r5, r0
 800c448:	b948      	cbnz	r0, 800c45e <__lshift+0x3e>
 800c44a:	4602      	mov	r2, r0
 800c44c:	4b28      	ldr	r3, [pc, #160]	@ (800c4f0 <__lshift+0xd0>)
 800c44e:	4829      	ldr	r0, [pc, #164]	@ (800c4f4 <__lshift+0xd4>)
 800c450:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c454:	f7fe fe20 	bl	800b098 <__assert_func>
 800c458:	3101      	adds	r1, #1
 800c45a:	005b      	lsls	r3, r3, #1
 800c45c:	e7ee      	b.n	800c43c <__lshift+0x1c>
 800c45e:	2300      	movs	r3, #0
 800c460:	f100 0114 	add.w	r1, r0, #20
 800c464:	f100 0210 	add.w	r2, r0, #16
 800c468:	4618      	mov	r0, r3
 800c46a:	4553      	cmp	r3, sl
 800c46c:	db33      	blt.n	800c4d6 <__lshift+0xb6>
 800c46e:	6920      	ldr	r0, [r4, #16]
 800c470:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c474:	f104 0314 	add.w	r3, r4, #20
 800c478:	f019 091f 	ands.w	r9, r9, #31
 800c47c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c480:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c484:	d02b      	beq.n	800c4de <__lshift+0xbe>
 800c486:	f1c9 0e20 	rsb	lr, r9, #32
 800c48a:	468a      	mov	sl, r1
 800c48c:	2200      	movs	r2, #0
 800c48e:	6818      	ldr	r0, [r3, #0]
 800c490:	fa00 f009 	lsl.w	r0, r0, r9
 800c494:	4310      	orrs	r0, r2
 800c496:	f84a 0b04 	str.w	r0, [sl], #4
 800c49a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c49e:	459c      	cmp	ip, r3
 800c4a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c4a4:	d8f3      	bhi.n	800c48e <__lshift+0x6e>
 800c4a6:	ebac 0304 	sub.w	r3, ip, r4
 800c4aa:	3b15      	subs	r3, #21
 800c4ac:	f023 0303 	bic.w	r3, r3, #3
 800c4b0:	3304      	adds	r3, #4
 800c4b2:	f104 0015 	add.w	r0, r4, #21
 800c4b6:	4584      	cmp	ip, r0
 800c4b8:	bf38      	it	cc
 800c4ba:	2304      	movcc	r3, #4
 800c4bc:	50ca      	str	r2, [r1, r3]
 800c4be:	b10a      	cbz	r2, 800c4c4 <__lshift+0xa4>
 800c4c0:	f108 0602 	add.w	r6, r8, #2
 800c4c4:	3e01      	subs	r6, #1
 800c4c6:	4638      	mov	r0, r7
 800c4c8:	612e      	str	r6, [r5, #16]
 800c4ca:	4621      	mov	r1, r4
 800c4cc:	f7ff fd90 	bl	800bff0 <_Bfree>
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c4da:	3301      	adds	r3, #1
 800c4dc:	e7c5      	b.n	800c46a <__lshift+0x4a>
 800c4de:	3904      	subs	r1, #4
 800c4e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c4e8:	459c      	cmp	ip, r3
 800c4ea:	d8f9      	bhi.n	800c4e0 <__lshift+0xc0>
 800c4ec:	e7ea      	b.n	800c4c4 <__lshift+0xa4>
 800c4ee:	bf00      	nop
 800c4f0:	0800e9c8 	.word	0x0800e9c8
 800c4f4:	0800e9d9 	.word	0x0800e9d9

0800c4f8 <__mcmp>:
 800c4f8:	690a      	ldr	r2, [r1, #16]
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	6900      	ldr	r0, [r0, #16]
 800c4fe:	1a80      	subs	r0, r0, r2
 800c500:	b530      	push	{r4, r5, lr}
 800c502:	d10e      	bne.n	800c522 <__mcmp+0x2a>
 800c504:	3314      	adds	r3, #20
 800c506:	3114      	adds	r1, #20
 800c508:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c50c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c510:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c514:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c518:	4295      	cmp	r5, r2
 800c51a:	d003      	beq.n	800c524 <__mcmp+0x2c>
 800c51c:	d205      	bcs.n	800c52a <__mcmp+0x32>
 800c51e:	f04f 30ff 	mov.w	r0, #4294967295
 800c522:	bd30      	pop	{r4, r5, pc}
 800c524:	42a3      	cmp	r3, r4
 800c526:	d3f3      	bcc.n	800c510 <__mcmp+0x18>
 800c528:	e7fb      	b.n	800c522 <__mcmp+0x2a>
 800c52a:	2001      	movs	r0, #1
 800c52c:	e7f9      	b.n	800c522 <__mcmp+0x2a>
	...

0800c530 <__mdiff>:
 800c530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c534:	4689      	mov	r9, r1
 800c536:	4606      	mov	r6, r0
 800c538:	4611      	mov	r1, r2
 800c53a:	4648      	mov	r0, r9
 800c53c:	4614      	mov	r4, r2
 800c53e:	f7ff ffdb 	bl	800c4f8 <__mcmp>
 800c542:	1e05      	subs	r5, r0, #0
 800c544:	d112      	bne.n	800c56c <__mdiff+0x3c>
 800c546:	4629      	mov	r1, r5
 800c548:	4630      	mov	r0, r6
 800c54a:	f7ff fd11 	bl	800bf70 <_Balloc>
 800c54e:	4602      	mov	r2, r0
 800c550:	b928      	cbnz	r0, 800c55e <__mdiff+0x2e>
 800c552:	4b3f      	ldr	r3, [pc, #252]	@ (800c650 <__mdiff+0x120>)
 800c554:	f240 2137 	movw	r1, #567	@ 0x237
 800c558:	483e      	ldr	r0, [pc, #248]	@ (800c654 <__mdiff+0x124>)
 800c55a:	f7fe fd9d 	bl	800b098 <__assert_func>
 800c55e:	2301      	movs	r3, #1
 800c560:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c564:	4610      	mov	r0, r2
 800c566:	b003      	add	sp, #12
 800c568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c56c:	bfbc      	itt	lt
 800c56e:	464b      	movlt	r3, r9
 800c570:	46a1      	movlt	r9, r4
 800c572:	4630      	mov	r0, r6
 800c574:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c578:	bfba      	itte	lt
 800c57a:	461c      	movlt	r4, r3
 800c57c:	2501      	movlt	r5, #1
 800c57e:	2500      	movge	r5, #0
 800c580:	f7ff fcf6 	bl	800bf70 <_Balloc>
 800c584:	4602      	mov	r2, r0
 800c586:	b918      	cbnz	r0, 800c590 <__mdiff+0x60>
 800c588:	4b31      	ldr	r3, [pc, #196]	@ (800c650 <__mdiff+0x120>)
 800c58a:	f240 2145 	movw	r1, #581	@ 0x245
 800c58e:	e7e3      	b.n	800c558 <__mdiff+0x28>
 800c590:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c594:	6926      	ldr	r6, [r4, #16]
 800c596:	60c5      	str	r5, [r0, #12]
 800c598:	f109 0310 	add.w	r3, r9, #16
 800c59c:	f109 0514 	add.w	r5, r9, #20
 800c5a0:	f104 0e14 	add.w	lr, r4, #20
 800c5a4:	f100 0b14 	add.w	fp, r0, #20
 800c5a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c5ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c5b0:	9301      	str	r3, [sp, #4]
 800c5b2:	46d9      	mov	r9, fp
 800c5b4:	f04f 0c00 	mov.w	ip, #0
 800c5b8:	9b01      	ldr	r3, [sp, #4]
 800c5ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c5be:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c5c2:	9301      	str	r3, [sp, #4]
 800c5c4:	fa1f f38a 	uxth.w	r3, sl
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	b283      	uxth	r3, r0
 800c5cc:	1acb      	subs	r3, r1, r3
 800c5ce:	0c00      	lsrs	r0, r0, #16
 800c5d0:	4463      	add	r3, ip
 800c5d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c5d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c5e0:	4576      	cmp	r6, lr
 800c5e2:	f849 3b04 	str.w	r3, [r9], #4
 800c5e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c5ea:	d8e5      	bhi.n	800c5b8 <__mdiff+0x88>
 800c5ec:	1b33      	subs	r3, r6, r4
 800c5ee:	3b15      	subs	r3, #21
 800c5f0:	f023 0303 	bic.w	r3, r3, #3
 800c5f4:	3415      	adds	r4, #21
 800c5f6:	3304      	adds	r3, #4
 800c5f8:	42a6      	cmp	r6, r4
 800c5fa:	bf38      	it	cc
 800c5fc:	2304      	movcc	r3, #4
 800c5fe:	441d      	add	r5, r3
 800c600:	445b      	add	r3, fp
 800c602:	461e      	mov	r6, r3
 800c604:	462c      	mov	r4, r5
 800c606:	4544      	cmp	r4, r8
 800c608:	d30e      	bcc.n	800c628 <__mdiff+0xf8>
 800c60a:	f108 0103 	add.w	r1, r8, #3
 800c60e:	1b49      	subs	r1, r1, r5
 800c610:	f021 0103 	bic.w	r1, r1, #3
 800c614:	3d03      	subs	r5, #3
 800c616:	45a8      	cmp	r8, r5
 800c618:	bf38      	it	cc
 800c61a:	2100      	movcc	r1, #0
 800c61c:	440b      	add	r3, r1
 800c61e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c622:	b191      	cbz	r1, 800c64a <__mdiff+0x11a>
 800c624:	6117      	str	r7, [r2, #16]
 800c626:	e79d      	b.n	800c564 <__mdiff+0x34>
 800c628:	f854 1b04 	ldr.w	r1, [r4], #4
 800c62c:	46e6      	mov	lr, ip
 800c62e:	0c08      	lsrs	r0, r1, #16
 800c630:	fa1c fc81 	uxtah	ip, ip, r1
 800c634:	4471      	add	r1, lr
 800c636:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c63a:	b289      	uxth	r1, r1
 800c63c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c640:	f846 1b04 	str.w	r1, [r6], #4
 800c644:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c648:	e7dd      	b.n	800c606 <__mdiff+0xd6>
 800c64a:	3f01      	subs	r7, #1
 800c64c:	e7e7      	b.n	800c61e <__mdiff+0xee>
 800c64e:	bf00      	nop
 800c650:	0800e9c8 	.word	0x0800e9c8
 800c654:	0800e9d9 	.word	0x0800e9d9

0800c658 <__ulp>:
 800c658:	b082      	sub	sp, #8
 800c65a:	ed8d 0b00 	vstr	d0, [sp]
 800c65e:	9a01      	ldr	r2, [sp, #4]
 800c660:	4b0f      	ldr	r3, [pc, #60]	@ (800c6a0 <__ulp+0x48>)
 800c662:	4013      	ands	r3, r2
 800c664:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c668:	2b00      	cmp	r3, #0
 800c66a:	dc08      	bgt.n	800c67e <__ulp+0x26>
 800c66c:	425b      	negs	r3, r3
 800c66e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c672:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c676:	da04      	bge.n	800c682 <__ulp+0x2a>
 800c678:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c67c:	4113      	asrs	r3, r2
 800c67e:	2200      	movs	r2, #0
 800c680:	e008      	b.n	800c694 <__ulp+0x3c>
 800c682:	f1a2 0314 	sub.w	r3, r2, #20
 800c686:	2b1e      	cmp	r3, #30
 800c688:	bfda      	itte	le
 800c68a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c68e:	40da      	lsrle	r2, r3
 800c690:	2201      	movgt	r2, #1
 800c692:	2300      	movs	r3, #0
 800c694:	4619      	mov	r1, r3
 800c696:	4610      	mov	r0, r2
 800c698:	ec41 0b10 	vmov	d0, r0, r1
 800c69c:	b002      	add	sp, #8
 800c69e:	4770      	bx	lr
 800c6a0:	7ff00000 	.word	0x7ff00000

0800c6a4 <__b2d>:
 800c6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a8:	6906      	ldr	r6, [r0, #16]
 800c6aa:	f100 0814 	add.w	r8, r0, #20
 800c6ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c6b2:	1f37      	subs	r7, r6, #4
 800c6b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c6b8:	4610      	mov	r0, r2
 800c6ba:	f7ff fd4b 	bl	800c154 <__hi0bits>
 800c6be:	f1c0 0320 	rsb	r3, r0, #32
 800c6c2:	280a      	cmp	r0, #10
 800c6c4:	600b      	str	r3, [r1, #0]
 800c6c6:	491b      	ldr	r1, [pc, #108]	@ (800c734 <__b2d+0x90>)
 800c6c8:	dc15      	bgt.n	800c6f6 <__b2d+0x52>
 800c6ca:	f1c0 0c0b 	rsb	ip, r0, #11
 800c6ce:	fa22 f30c 	lsr.w	r3, r2, ip
 800c6d2:	45b8      	cmp	r8, r7
 800c6d4:	ea43 0501 	orr.w	r5, r3, r1
 800c6d8:	bf34      	ite	cc
 800c6da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c6de:	2300      	movcs	r3, #0
 800c6e0:	3015      	adds	r0, #21
 800c6e2:	fa02 f000 	lsl.w	r0, r2, r0
 800c6e6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c6ea:	4303      	orrs	r3, r0
 800c6ec:	461c      	mov	r4, r3
 800c6ee:	ec45 4b10 	vmov	d0, r4, r5
 800c6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f6:	45b8      	cmp	r8, r7
 800c6f8:	bf3a      	itte	cc
 800c6fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c6fe:	f1a6 0708 	subcc.w	r7, r6, #8
 800c702:	2300      	movcs	r3, #0
 800c704:	380b      	subs	r0, #11
 800c706:	d012      	beq.n	800c72e <__b2d+0x8a>
 800c708:	f1c0 0120 	rsb	r1, r0, #32
 800c70c:	fa23 f401 	lsr.w	r4, r3, r1
 800c710:	4082      	lsls	r2, r0
 800c712:	4322      	orrs	r2, r4
 800c714:	4547      	cmp	r7, r8
 800c716:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c71a:	bf8c      	ite	hi
 800c71c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c720:	2200      	movls	r2, #0
 800c722:	4083      	lsls	r3, r0
 800c724:	40ca      	lsrs	r2, r1
 800c726:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c72a:	4313      	orrs	r3, r2
 800c72c:	e7de      	b.n	800c6ec <__b2d+0x48>
 800c72e:	ea42 0501 	orr.w	r5, r2, r1
 800c732:	e7db      	b.n	800c6ec <__b2d+0x48>
 800c734:	3ff00000 	.word	0x3ff00000

0800c738 <__d2b>:
 800c738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c73c:	460f      	mov	r7, r1
 800c73e:	2101      	movs	r1, #1
 800c740:	ec59 8b10 	vmov	r8, r9, d0
 800c744:	4616      	mov	r6, r2
 800c746:	f7ff fc13 	bl	800bf70 <_Balloc>
 800c74a:	4604      	mov	r4, r0
 800c74c:	b930      	cbnz	r0, 800c75c <__d2b+0x24>
 800c74e:	4602      	mov	r2, r0
 800c750:	4b23      	ldr	r3, [pc, #140]	@ (800c7e0 <__d2b+0xa8>)
 800c752:	4824      	ldr	r0, [pc, #144]	@ (800c7e4 <__d2b+0xac>)
 800c754:	f240 310f 	movw	r1, #783	@ 0x30f
 800c758:	f7fe fc9e 	bl	800b098 <__assert_func>
 800c75c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c764:	b10d      	cbz	r5, 800c76a <__d2b+0x32>
 800c766:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c76a:	9301      	str	r3, [sp, #4]
 800c76c:	f1b8 0300 	subs.w	r3, r8, #0
 800c770:	d023      	beq.n	800c7ba <__d2b+0x82>
 800c772:	4668      	mov	r0, sp
 800c774:	9300      	str	r3, [sp, #0]
 800c776:	f7ff fd0c 	bl	800c192 <__lo0bits>
 800c77a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c77e:	b1d0      	cbz	r0, 800c7b6 <__d2b+0x7e>
 800c780:	f1c0 0320 	rsb	r3, r0, #32
 800c784:	fa02 f303 	lsl.w	r3, r2, r3
 800c788:	430b      	orrs	r3, r1
 800c78a:	40c2      	lsrs	r2, r0
 800c78c:	6163      	str	r3, [r4, #20]
 800c78e:	9201      	str	r2, [sp, #4]
 800c790:	9b01      	ldr	r3, [sp, #4]
 800c792:	61a3      	str	r3, [r4, #24]
 800c794:	2b00      	cmp	r3, #0
 800c796:	bf0c      	ite	eq
 800c798:	2201      	moveq	r2, #1
 800c79a:	2202      	movne	r2, #2
 800c79c:	6122      	str	r2, [r4, #16]
 800c79e:	b1a5      	cbz	r5, 800c7ca <__d2b+0x92>
 800c7a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c7a4:	4405      	add	r5, r0
 800c7a6:	603d      	str	r5, [r7, #0]
 800c7a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c7ac:	6030      	str	r0, [r6, #0]
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	b003      	add	sp, #12
 800c7b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7b6:	6161      	str	r1, [r4, #20]
 800c7b8:	e7ea      	b.n	800c790 <__d2b+0x58>
 800c7ba:	a801      	add	r0, sp, #4
 800c7bc:	f7ff fce9 	bl	800c192 <__lo0bits>
 800c7c0:	9b01      	ldr	r3, [sp, #4]
 800c7c2:	6163      	str	r3, [r4, #20]
 800c7c4:	3020      	adds	r0, #32
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	e7e8      	b.n	800c79c <__d2b+0x64>
 800c7ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c7ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c7d2:	6038      	str	r0, [r7, #0]
 800c7d4:	6918      	ldr	r0, [r3, #16]
 800c7d6:	f7ff fcbd 	bl	800c154 <__hi0bits>
 800c7da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c7de:	e7e5      	b.n	800c7ac <__d2b+0x74>
 800c7e0:	0800e9c8 	.word	0x0800e9c8
 800c7e4:	0800e9d9 	.word	0x0800e9d9

0800c7e8 <__ratio>:
 800c7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ec:	b085      	sub	sp, #20
 800c7ee:	e9cd 1000 	strd	r1, r0, [sp]
 800c7f2:	a902      	add	r1, sp, #8
 800c7f4:	f7ff ff56 	bl	800c6a4 <__b2d>
 800c7f8:	9800      	ldr	r0, [sp, #0]
 800c7fa:	a903      	add	r1, sp, #12
 800c7fc:	ec55 4b10 	vmov	r4, r5, d0
 800c800:	f7ff ff50 	bl	800c6a4 <__b2d>
 800c804:	9b01      	ldr	r3, [sp, #4]
 800c806:	6919      	ldr	r1, [r3, #16]
 800c808:	9b00      	ldr	r3, [sp, #0]
 800c80a:	691b      	ldr	r3, [r3, #16]
 800c80c:	1ac9      	subs	r1, r1, r3
 800c80e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c812:	1a9b      	subs	r3, r3, r2
 800c814:	ec5b ab10 	vmov	sl, fp, d0
 800c818:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	bfce      	itee	gt
 800c820:	462a      	movgt	r2, r5
 800c822:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c826:	465a      	movle	r2, fp
 800c828:	462f      	mov	r7, r5
 800c82a:	46d9      	mov	r9, fp
 800c82c:	bfcc      	ite	gt
 800c82e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c832:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c836:	464b      	mov	r3, r9
 800c838:	4652      	mov	r2, sl
 800c83a:	4620      	mov	r0, r4
 800c83c:	4639      	mov	r1, r7
 800c83e:	f7f4 f83d 	bl	80008bc <__aeabi_ddiv>
 800c842:	ec41 0b10 	vmov	d0, r0, r1
 800c846:	b005      	add	sp, #20
 800c848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c84c <__copybits>:
 800c84c:	3901      	subs	r1, #1
 800c84e:	b570      	push	{r4, r5, r6, lr}
 800c850:	1149      	asrs	r1, r1, #5
 800c852:	6914      	ldr	r4, [r2, #16]
 800c854:	3101      	adds	r1, #1
 800c856:	f102 0314 	add.w	r3, r2, #20
 800c85a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c85e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c862:	1f05      	subs	r5, r0, #4
 800c864:	42a3      	cmp	r3, r4
 800c866:	d30c      	bcc.n	800c882 <__copybits+0x36>
 800c868:	1aa3      	subs	r3, r4, r2
 800c86a:	3b11      	subs	r3, #17
 800c86c:	f023 0303 	bic.w	r3, r3, #3
 800c870:	3211      	adds	r2, #17
 800c872:	42a2      	cmp	r2, r4
 800c874:	bf88      	it	hi
 800c876:	2300      	movhi	r3, #0
 800c878:	4418      	add	r0, r3
 800c87a:	2300      	movs	r3, #0
 800c87c:	4288      	cmp	r0, r1
 800c87e:	d305      	bcc.n	800c88c <__copybits+0x40>
 800c880:	bd70      	pop	{r4, r5, r6, pc}
 800c882:	f853 6b04 	ldr.w	r6, [r3], #4
 800c886:	f845 6f04 	str.w	r6, [r5, #4]!
 800c88a:	e7eb      	b.n	800c864 <__copybits+0x18>
 800c88c:	f840 3b04 	str.w	r3, [r0], #4
 800c890:	e7f4      	b.n	800c87c <__copybits+0x30>

0800c892 <__any_on>:
 800c892:	f100 0214 	add.w	r2, r0, #20
 800c896:	6900      	ldr	r0, [r0, #16]
 800c898:	114b      	asrs	r3, r1, #5
 800c89a:	4298      	cmp	r0, r3
 800c89c:	b510      	push	{r4, lr}
 800c89e:	db11      	blt.n	800c8c4 <__any_on+0x32>
 800c8a0:	dd0a      	ble.n	800c8b8 <__any_on+0x26>
 800c8a2:	f011 011f 	ands.w	r1, r1, #31
 800c8a6:	d007      	beq.n	800c8b8 <__any_on+0x26>
 800c8a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c8ac:	fa24 f001 	lsr.w	r0, r4, r1
 800c8b0:	fa00 f101 	lsl.w	r1, r0, r1
 800c8b4:	428c      	cmp	r4, r1
 800c8b6:	d10b      	bne.n	800c8d0 <__any_on+0x3e>
 800c8b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d803      	bhi.n	800c8c8 <__any_on+0x36>
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	bd10      	pop	{r4, pc}
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	e7f7      	b.n	800c8b8 <__any_on+0x26>
 800c8c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c8cc:	2900      	cmp	r1, #0
 800c8ce:	d0f5      	beq.n	800c8bc <__any_on+0x2a>
 800c8d0:	2001      	movs	r0, #1
 800c8d2:	e7f6      	b.n	800c8c2 <__any_on+0x30>

0800c8d4 <sulp>:
 800c8d4:	b570      	push	{r4, r5, r6, lr}
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	460d      	mov	r5, r1
 800c8da:	ec45 4b10 	vmov	d0, r4, r5
 800c8de:	4616      	mov	r6, r2
 800c8e0:	f7ff feba 	bl	800c658 <__ulp>
 800c8e4:	ec51 0b10 	vmov	r0, r1, d0
 800c8e8:	b17e      	cbz	r6, 800c90a <sulp+0x36>
 800c8ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c8ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	dd09      	ble.n	800c90a <sulp+0x36>
 800c8f6:	051b      	lsls	r3, r3, #20
 800c8f8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c8fc:	2400      	movs	r4, #0
 800c8fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c902:	4622      	mov	r2, r4
 800c904:	462b      	mov	r3, r5
 800c906:	f7f3 feaf 	bl	8000668 <__aeabi_dmul>
 800c90a:	ec41 0b10 	vmov	d0, r0, r1
 800c90e:	bd70      	pop	{r4, r5, r6, pc}

0800c910 <_strtod_l>:
 800c910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c914:	b09f      	sub	sp, #124	@ 0x7c
 800c916:	460c      	mov	r4, r1
 800c918:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c91a:	2200      	movs	r2, #0
 800c91c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c91e:	9005      	str	r0, [sp, #20]
 800c920:	f04f 0a00 	mov.w	sl, #0
 800c924:	f04f 0b00 	mov.w	fp, #0
 800c928:	460a      	mov	r2, r1
 800c92a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c92c:	7811      	ldrb	r1, [r2, #0]
 800c92e:	292b      	cmp	r1, #43	@ 0x2b
 800c930:	d04a      	beq.n	800c9c8 <_strtod_l+0xb8>
 800c932:	d838      	bhi.n	800c9a6 <_strtod_l+0x96>
 800c934:	290d      	cmp	r1, #13
 800c936:	d832      	bhi.n	800c99e <_strtod_l+0x8e>
 800c938:	2908      	cmp	r1, #8
 800c93a:	d832      	bhi.n	800c9a2 <_strtod_l+0x92>
 800c93c:	2900      	cmp	r1, #0
 800c93e:	d03b      	beq.n	800c9b8 <_strtod_l+0xa8>
 800c940:	2200      	movs	r2, #0
 800c942:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c944:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c946:	782a      	ldrb	r2, [r5, #0]
 800c948:	2a30      	cmp	r2, #48	@ 0x30
 800c94a:	f040 80b3 	bne.w	800cab4 <_strtod_l+0x1a4>
 800c94e:	786a      	ldrb	r2, [r5, #1]
 800c950:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c954:	2a58      	cmp	r2, #88	@ 0x58
 800c956:	d16e      	bne.n	800ca36 <_strtod_l+0x126>
 800c958:	9302      	str	r3, [sp, #8]
 800c95a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c95c:	9301      	str	r3, [sp, #4]
 800c95e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	4a8e      	ldr	r2, [pc, #568]	@ (800cb9c <_strtod_l+0x28c>)
 800c964:	9805      	ldr	r0, [sp, #20]
 800c966:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c968:	a919      	add	r1, sp, #100	@ 0x64
 800c96a:	f001 f8a7 	bl	800dabc <__gethex>
 800c96e:	f010 060f 	ands.w	r6, r0, #15
 800c972:	4604      	mov	r4, r0
 800c974:	d005      	beq.n	800c982 <_strtod_l+0x72>
 800c976:	2e06      	cmp	r6, #6
 800c978:	d128      	bne.n	800c9cc <_strtod_l+0xbc>
 800c97a:	3501      	adds	r5, #1
 800c97c:	2300      	movs	r3, #0
 800c97e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c980:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c982:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c984:	2b00      	cmp	r3, #0
 800c986:	f040 858e 	bne.w	800d4a6 <_strtod_l+0xb96>
 800c98a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c98c:	b1cb      	cbz	r3, 800c9c2 <_strtod_l+0xb2>
 800c98e:	4652      	mov	r2, sl
 800c990:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c994:	ec43 2b10 	vmov	d0, r2, r3
 800c998:	b01f      	add	sp, #124	@ 0x7c
 800c99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c99e:	2920      	cmp	r1, #32
 800c9a0:	d1ce      	bne.n	800c940 <_strtod_l+0x30>
 800c9a2:	3201      	adds	r2, #1
 800c9a4:	e7c1      	b.n	800c92a <_strtod_l+0x1a>
 800c9a6:	292d      	cmp	r1, #45	@ 0x2d
 800c9a8:	d1ca      	bne.n	800c940 <_strtod_l+0x30>
 800c9aa:	2101      	movs	r1, #1
 800c9ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c9ae:	1c51      	adds	r1, r2, #1
 800c9b0:	9119      	str	r1, [sp, #100]	@ 0x64
 800c9b2:	7852      	ldrb	r2, [r2, #1]
 800c9b4:	2a00      	cmp	r2, #0
 800c9b6:	d1c5      	bne.n	800c944 <_strtod_l+0x34>
 800c9b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c9ba:	9419      	str	r4, [sp, #100]	@ 0x64
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f040 8570 	bne.w	800d4a2 <_strtod_l+0xb92>
 800c9c2:	4652      	mov	r2, sl
 800c9c4:	465b      	mov	r3, fp
 800c9c6:	e7e5      	b.n	800c994 <_strtod_l+0x84>
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	e7ef      	b.n	800c9ac <_strtod_l+0x9c>
 800c9cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c9ce:	b13a      	cbz	r2, 800c9e0 <_strtod_l+0xd0>
 800c9d0:	2135      	movs	r1, #53	@ 0x35
 800c9d2:	a81c      	add	r0, sp, #112	@ 0x70
 800c9d4:	f7ff ff3a 	bl	800c84c <__copybits>
 800c9d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9da:	9805      	ldr	r0, [sp, #20]
 800c9dc:	f7ff fb08 	bl	800bff0 <_Bfree>
 800c9e0:	3e01      	subs	r6, #1
 800c9e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c9e4:	2e04      	cmp	r6, #4
 800c9e6:	d806      	bhi.n	800c9f6 <_strtod_l+0xe6>
 800c9e8:	e8df f006 	tbb	[pc, r6]
 800c9ec:	201d0314 	.word	0x201d0314
 800c9f0:	14          	.byte	0x14
 800c9f1:	00          	.byte	0x00
 800c9f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c9f6:	05e1      	lsls	r1, r4, #23
 800c9f8:	bf48      	it	mi
 800c9fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c9fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca02:	0d1b      	lsrs	r3, r3, #20
 800ca04:	051b      	lsls	r3, r3, #20
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1bb      	bne.n	800c982 <_strtod_l+0x72>
 800ca0a:	f7fe fb11 	bl	800b030 <__errno>
 800ca0e:	2322      	movs	r3, #34	@ 0x22
 800ca10:	6003      	str	r3, [r0, #0]
 800ca12:	e7b6      	b.n	800c982 <_strtod_l+0x72>
 800ca14:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ca18:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ca1c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ca20:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ca24:	e7e7      	b.n	800c9f6 <_strtod_l+0xe6>
 800ca26:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cba4 <_strtod_l+0x294>
 800ca2a:	e7e4      	b.n	800c9f6 <_strtod_l+0xe6>
 800ca2c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ca30:	f04f 3aff 	mov.w	sl, #4294967295
 800ca34:	e7df      	b.n	800c9f6 <_strtod_l+0xe6>
 800ca36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca38:	1c5a      	adds	r2, r3, #1
 800ca3a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca3c:	785b      	ldrb	r3, [r3, #1]
 800ca3e:	2b30      	cmp	r3, #48	@ 0x30
 800ca40:	d0f9      	beq.n	800ca36 <_strtod_l+0x126>
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d09d      	beq.n	800c982 <_strtod_l+0x72>
 800ca46:	2301      	movs	r3, #1
 800ca48:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca4c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca4e:	2300      	movs	r3, #0
 800ca50:	9308      	str	r3, [sp, #32]
 800ca52:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca54:	461f      	mov	r7, r3
 800ca56:	220a      	movs	r2, #10
 800ca58:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ca5a:	7805      	ldrb	r5, [r0, #0]
 800ca5c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ca60:	b2d9      	uxtb	r1, r3
 800ca62:	2909      	cmp	r1, #9
 800ca64:	d928      	bls.n	800cab8 <_strtod_l+0x1a8>
 800ca66:	494e      	ldr	r1, [pc, #312]	@ (800cba0 <_strtod_l+0x290>)
 800ca68:	2201      	movs	r2, #1
 800ca6a:	f000 ff6b 	bl	800d944 <strncmp>
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	d032      	beq.n	800cad8 <_strtod_l+0x1c8>
 800ca72:	2000      	movs	r0, #0
 800ca74:	462a      	mov	r2, r5
 800ca76:	4681      	mov	r9, r0
 800ca78:	463d      	mov	r5, r7
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2a65      	cmp	r2, #101	@ 0x65
 800ca7e:	d001      	beq.n	800ca84 <_strtod_l+0x174>
 800ca80:	2a45      	cmp	r2, #69	@ 0x45
 800ca82:	d114      	bne.n	800caae <_strtod_l+0x19e>
 800ca84:	b91d      	cbnz	r5, 800ca8e <_strtod_l+0x17e>
 800ca86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca88:	4302      	orrs	r2, r0
 800ca8a:	d095      	beq.n	800c9b8 <_strtod_l+0xa8>
 800ca8c:	2500      	movs	r5, #0
 800ca8e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ca90:	1c62      	adds	r2, r4, #1
 800ca92:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca94:	7862      	ldrb	r2, [r4, #1]
 800ca96:	2a2b      	cmp	r2, #43	@ 0x2b
 800ca98:	d077      	beq.n	800cb8a <_strtod_l+0x27a>
 800ca9a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ca9c:	d07b      	beq.n	800cb96 <_strtod_l+0x286>
 800ca9e:	f04f 0c00 	mov.w	ip, #0
 800caa2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800caa6:	2909      	cmp	r1, #9
 800caa8:	f240 8082 	bls.w	800cbb0 <_strtod_l+0x2a0>
 800caac:	9419      	str	r4, [sp, #100]	@ 0x64
 800caae:	f04f 0800 	mov.w	r8, #0
 800cab2:	e0a2      	b.n	800cbfa <_strtod_l+0x2ea>
 800cab4:	2300      	movs	r3, #0
 800cab6:	e7c7      	b.n	800ca48 <_strtod_l+0x138>
 800cab8:	2f08      	cmp	r7, #8
 800caba:	bfd5      	itete	le
 800cabc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cabe:	9908      	ldrgt	r1, [sp, #32]
 800cac0:	fb02 3301 	mlale	r3, r2, r1, r3
 800cac4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cac8:	f100 0001 	add.w	r0, r0, #1
 800cacc:	bfd4      	ite	le
 800cace:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cad0:	9308      	strgt	r3, [sp, #32]
 800cad2:	3701      	adds	r7, #1
 800cad4:	9019      	str	r0, [sp, #100]	@ 0x64
 800cad6:	e7bf      	b.n	800ca58 <_strtod_l+0x148>
 800cad8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cada:	1c5a      	adds	r2, r3, #1
 800cadc:	9219      	str	r2, [sp, #100]	@ 0x64
 800cade:	785a      	ldrb	r2, [r3, #1]
 800cae0:	b37f      	cbz	r7, 800cb42 <_strtod_l+0x232>
 800cae2:	4681      	mov	r9, r0
 800cae4:	463d      	mov	r5, r7
 800cae6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800caea:	2b09      	cmp	r3, #9
 800caec:	d912      	bls.n	800cb14 <_strtod_l+0x204>
 800caee:	2301      	movs	r3, #1
 800caf0:	e7c4      	b.n	800ca7c <_strtod_l+0x16c>
 800caf2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800caf4:	1c5a      	adds	r2, r3, #1
 800caf6:	9219      	str	r2, [sp, #100]	@ 0x64
 800caf8:	785a      	ldrb	r2, [r3, #1]
 800cafa:	3001      	adds	r0, #1
 800cafc:	2a30      	cmp	r2, #48	@ 0x30
 800cafe:	d0f8      	beq.n	800caf2 <_strtod_l+0x1e2>
 800cb00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cb04:	2b08      	cmp	r3, #8
 800cb06:	f200 84d3 	bhi.w	800d4b0 <_strtod_l+0xba0>
 800cb0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb0c:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb0e:	4681      	mov	r9, r0
 800cb10:	2000      	movs	r0, #0
 800cb12:	4605      	mov	r5, r0
 800cb14:	3a30      	subs	r2, #48	@ 0x30
 800cb16:	f100 0301 	add.w	r3, r0, #1
 800cb1a:	d02a      	beq.n	800cb72 <_strtod_l+0x262>
 800cb1c:	4499      	add	r9, r3
 800cb1e:	eb00 0c05 	add.w	ip, r0, r5
 800cb22:	462b      	mov	r3, r5
 800cb24:	210a      	movs	r1, #10
 800cb26:	4563      	cmp	r3, ip
 800cb28:	d10d      	bne.n	800cb46 <_strtod_l+0x236>
 800cb2a:	1c69      	adds	r1, r5, #1
 800cb2c:	4401      	add	r1, r0
 800cb2e:	4428      	add	r0, r5
 800cb30:	2808      	cmp	r0, #8
 800cb32:	dc16      	bgt.n	800cb62 <_strtod_l+0x252>
 800cb34:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cb36:	230a      	movs	r3, #10
 800cb38:	fb03 2300 	mla	r3, r3, r0, r2
 800cb3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb3e:	2300      	movs	r3, #0
 800cb40:	e018      	b.n	800cb74 <_strtod_l+0x264>
 800cb42:	4638      	mov	r0, r7
 800cb44:	e7da      	b.n	800cafc <_strtod_l+0x1ec>
 800cb46:	2b08      	cmp	r3, #8
 800cb48:	f103 0301 	add.w	r3, r3, #1
 800cb4c:	dc03      	bgt.n	800cb56 <_strtod_l+0x246>
 800cb4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cb50:	434e      	muls	r6, r1
 800cb52:	960a      	str	r6, [sp, #40]	@ 0x28
 800cb54:	e7e7      	b.n	800cb26 <_strtod_l+0x216>
 800cb56:	2b10      	cmp	r3, #16
 800cb58:	bfde      	ittt	le
 800cb5a:	9e08      	ldrle	r6, [sp, #32]
 800cb5c:	434e      	mulle	r6, r1
 800cb5e:	9608      	strle	r6, [sp, #32]
 800cb60:	e7e1      	b.n	800cb26 <_strtod_l+0x216>
 800cb62:	280f      	cmp	r0, #15
 800cb64:	dceb      	bgt.n	800cb3e <_strtod_l+0x22e>
 800cb66:	9808      	ldr	r0, [sp, #32]
 800cb68:	230a      	movs	r3, #10
 800cb6a:	fb03 2300 	mla	r3, r3, r0, r2
 800cb6e:	9308      	str	r3, [sp, #32]
 800cb70:	e7e5      	b.n	800cb3e <_strtod_l+0x22e>
 800cb72:	4629      	mov	r1, r5
 800cb74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb76:	1c50      	adds	r0, r2, #1
 800cb78:	9019      	str	r0, [sp, #100]	@ 0x64
 800cb7a:	7852      	ldrb	r2, [r2, #1]
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	460d      	mov	r5, r1
 800cb80:	e7b1      	b.n	800cae6 <_strtod_l+0x1d6>
 800cb82:	f04f 0900 	mov.w	r9, #0
 800cb86:	2301      	movs	r3, #1
 800cb88:	e77d      	b.n	800ca86 <_strtod_l+0x176>
 800cb8a:	f04f 0c00 	mov.w	ip, #0
 800cb8e:	1ca2      	adds	r2, r4, #2
 800cb90:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb92:	78a2      	ldrb	r2, [r4, #2]
 800cb94:	e785      	b.n	800caa2 <_strtod_l+0x192>
 800cb96:	f04f 0c01 	mov.w	ip, #1
 800cb9a:	e7f8      	b.n	800cb8e <_strtod_l+0x27e>
 800cb9c:	0800eb48 	.word	0x0800eb48
 800cba0:	0800eb30 	.word	0x0800eb30
 800cba4:	7ff00000 	.word	0x7ff00000
 800cba8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cbaa:	1c51      	adds	r1, r2, #1
 800cbac:	9119      	str	r1, [sp, #100]	@ 0x64
 800cbae:	7852      	ldrb	r2, [r2, #1]
 800cbb0:	2a30      	cmp	r2, #48	@ 0x30
 800cbb2:	d0f9      	beq.n	800cba8 <_strtod_l+0x298>
 800cbb4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cbb8:	2908      	cmp	r1, #8
 800cbba:	f63f af78 	bhi.w	800caae <_strtod_l+0x19e>
 800cbbe:	3a30      	subs	r2, #48	@ 0x30
 800cbc0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cbc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cbc4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cbc6:	f04f 080a 	mov.w	r8, #10
 800cbca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cbcc:	1c56      	adds	r6, r2, #1
 800cbce:	9619      	str	r6, [sp, #100]	@ 0x64
 800cbd0:	7852      	ldrb	r2, [r2, #1]
 800cbd2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cbd6:	f1be 0f09 	cmp.w	lr, #9
 800cbda:	d939      	bls.n	800cc50 <_strtod_l+0x340>
 800cbdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cbde:	1a76      	subs	r6, r6, r1
 800cbe0:	2e08      	cmp	r6, #8
 800cbe2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cbe6:	dc03      	bgt.n	800cbf0 <_strtod_l+0x2e0>
 800cbe8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cbea:	4588      	cmp	r8, r1
 800cbec:	bfa8      	it	ge
 800cbee:	4688      	movge	r8, r1
 800cbf0:	f1bc 0f00 	cmp.w	ip, #0
 800cbf4:	d001      	beq.n	800cbfa <_strtod_l+0x2ea>
 800cbf6:	f1c8 0800 	rsb	r8, r8, #0
 800cbfa:	2d00      	cmp	r5, #0
 800cbfc:	d14e      	bne.n	800cc9c <_strtod_l+0x38c>
 800cbfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cc00:	4308      	orrs	r0, r1
 800cc02:	f47f aebe 	bne.w	800c982 <_strtod_l+0x72>
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	f47f aed6 	bne.w	800c9b8 <_strtod_l+0xa8>
 800cc0c:	2a69      	cmp	r2, #105	@ 0x69
 800cc0e:	d028      	beq.n	800cc62 <_strtod_l+0x352>
 800cc10:	dc25      	bgt.n	800cc5e <_strtod_l+0x34e>
 800cc12:	2a49      	cmp	r2, #73	@ 0x49
 800cc14:	d025      	beq.n	800cc62 <_strtod_l+0x352>
 800cc16:	2a4e      	cmp	r2, #78	@ 0x4e
 800cc18:	f47f aece 	bne.w	800c9b8 <_strtod_l+0xa8>
 800cc1c:	499b      	ldr	r1, [pc, #620]	@ (800ce8c <_strtod_l+0x57c>)
 800cc1e:	a819      	add	r0, sp, #100	@ 0x64
 800cc20:	f001 f96e 	bl	800df00 <__match>
 800cc24:	2800      	cmp	r0, #0
 800cc26:	f43f aec7 	beq.w	800c9b8 <_strtod_l+0xa8>
 800cc2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	2b28      	cmp	r3, #40	@ 0x28
 800cc30:	d12e      	bne.n	800cc90 <_strtod_l+0x380>
 800cc32:	4997      	ldr	r1, [pc, #604]	@ (800ce90 <_strtod_l+0x580>)
 800cc34:	aa1c      	add	r2, sp, #112	@ 0x70
 800cc36:	a819      	add	r0, sp, #100	@ 0x64
 800cc38:	f001 f976 	bl	800df28 <__hexnan>
 800cc3c:	2805      	cmp	r0, #5
 800cc3e:	d127      	bne.n	800cc90 <_strtod_l+0x380>
 800cc40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cc42:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cc46:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cc4a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cc4e:	e698      	b.n	800c982 <_strtod_l+0x72>
 800cc50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cc52:	fb08 2101 	mla	r1, r8, r1, r2
 800cc56:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cc5a:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc5c:	e7b5      	b.n	800cbca <_strtod_l+0x2ba>
 800cc5e:	2a6e      	cmp	r2, #110	@ 0x6e
 800cc60:	e7da      	b.n	800cc18 <_strtod_l+0x308>
 800cc62:	498c      	ldr	r1, [pc, #560]	@ (800ce94 <_strtod_l+0x584>)
 800cc64:	a819      	add	r0, sp, #100	@ 0x64
 800cc66:	f001 f94b 	bl	800df00 <__match>
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	f43f aea4 	beq.w	800c9b8 <_strtod_l+0xa8>
 800cc70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc72:	4989      	ldr	r1, [pc, #548]	@ (800ce98 <_strtod_l+0x588>)
 800cc74:	3b01      	subs	r3, #1
 800cc76:	a819      	add	r0, sp, #100	@ 0x64
 800cc78:	9319      	str	r3, [sp, #100]	@ 0x64
 800cc7a:	f001 f941 	bl	800df00 <__match>
 800cc7e:	b910      	cbnz	r0, 800cc86 <_strtod_l+0x376>
 800cc80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc82:	3301      	adds	r3, #1
 800cc84:	9319      	str	r3, [sp, #100]	@ 0x64
 800cc86:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cea8 <_strtod_l+0x598>
 800cc8a:	f04f 0a00 	mov.w	sl, #0
 800cc8e:	e678      	b.n	800c982 <_strtod_l+0x72>
 800cc90:	4882      	ldr	r0, [pc, #520]	@ (800ce9c <_strtod_l+0x58c>)
 800cc92:	f000 fe89 	bl	800d9a8 <nan>
 800cc96:	ec5b ab10 	vmov	sl, fp, d0
 800cc9a:	e672      	b.n	800c982 <_strtod_l+0x72>
 800cc9c:	eba8 0309 	sub.w	r3, r8, r9
 800cca0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cca2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cca4:	2f00      	cmp	r7, #0
 800cca6:	bf08      	it	eq
 800cca8:	462f      	moveq	r7, r5
 800ccaa:	2d10      	cmp	r5, #16
 800ccac:	462c      	mov	r4, r5
 800ccae:	bfa8      	it	ge
 800ccb0:	2410      	movge	r4, #16
 800ccb2:	f7f3 fc5f 	bl	8000574 <__aeabi_ui2d>
 800ccb6:	2d09      	cmp	r5, #9
 800ccb8:	4682      	mov	sl, r0
 800ccba:	468b      	mov	fp, r1
 800ccbc:	dc13      	bgt.n	800cce6 <_strtod_l+0x3d6>
 800ccbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f43f ae5e 	beq.w	800c982 <_strtod_l+0x72>
 800ccc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccc8:	dd78      	ble.n	800cdbc <_strtod_l+0x4ac>
 800ccca:	2b16      	cmp	r3, #22
 800cccc:	dc5f      	bgt.n	800cd8e <_strtod_l+0x47e>
 800ccce:	4974      	ldr	r1, [pc, #464]	@ (800cea0 <_strtod_l+0x590>)
 800ccd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ccd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccd8:	4652      	mov	r2, sl
 800ccda:	465b      	mov	r3, fp
 800ccdc:	f7f3 fcc4 	bl	8000668 <__aeabi_dmul>
 800cce0:	4682      	mov	sl, r0
 800cce2:	468b      	mov	fp, r1
 800cce4:	e64d      	b.n	800c982 <_strtod_l+0x72>
 800cce6:	4b6e      	ldr	r3, [pc, #440]	@ (800cea0 <_strtod_l+0x590>)
 800cce8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ccec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ccf0:	f7f3 fcba 	bl	8000668 <__aeabi_dmul>
 800ccf4:	4682      	mov	sl, r0
 800ccf6:	9808      	ldr	r0, [sp, #32]
 800ccf8:	468b      	mov	fp, r1
 800ccfa:	f7f3 fc3b 	bl	8000574 <__aeabi_ui2d>
 800ccfe:	4602      	mov	r2, r0
 800cd00:	460b      	mov	r3, r1
 800cd02:	4650      	mov	r0, sl
 800cd04:	4659      	mov	r1, fp
 800cd06:	f7f3 faf9 	bl	80002fc <__adddf3>
 800cd0a:	2d0f      	cmp	r5, #15
 800cd0c:	4682      	mov	sl, r0
 800cd0e:	468b      	mov	fp, r1
 800cd10:	ddd5      	ble.n	800ccbe <_strtod_l+0x3ae>
 800cd12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd14:	1b2c      	subs	r4, r5, r4
 800cd16:	441c      	add	r4, r3
 800cd18:	2c00      	cmp	r4, #0
 800cd1a:	f340 8096 	ble.w	800ce4a <_strtod_l+0x53a>
 800cd1e:	f014 030f 	ands.w	r3, r4, #15
 800cd22:	d00a      	beq.n	800cd3a <_strtod_l+0x42a>
 800cd24:	495e      	ldr	r1, [pc, #376]	@ (800cea0 <_strtod_l+0x590>)
 800cd26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cd2a:	4652      	mov	r2, sl
 800cd2c:	465b      	mov	r3, fp
 800cd2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd32:	f7f3 fc99 	bl	8000668 <__aeabi_dmul>
 800cd36:	4682      	mov	sl, r0
 800cd38:	468b      	mov	fp, r1
 800cd3a:	f034 040f 	bics.w	r4, r4, #15
 800cd3e:	d073      	beq.n	800ce28 <_strtod_l+0x518>
 800cd40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cd44:	dd48      	ble.n	800cdd8 <_strtod_l+0x4c8>
 800cd46:	2400      	movs	r4, #0
 800cd48:	46a0      	mov	r8, r4
 800cd4a:	940a      	str	r4, [sp, #40]	@ 0x28
 800cd4c:	46a1      	mov	r9, r4
 800cd4e:	9a05      	ldr	r2, [sp, #20]
 800cd50:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cea8 <_strtod_l+0x598>
 800cd54:	2322      	movs	r3, #34	@ 0x22
 800cd56:	6013      	str	r3, [r2, #0]
 800cd58:	f04f 0a00 	mov.w	sl, #0
 800cd5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	f43f ae0f 	beq.w	800c982 <_strtod_l+0x72>
 800cd64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd66:	9805      	ldr	r0, [sp, #20]
 800cd68:	f7ff f942 	bl	800bff0 <_Bfree>
 800cd6c:	9805      	ldr	r0, [sp, #20]
 800cd6e:	4649      	mov	r1, r9
 800cd70:	f7ff f93e 	bl	800bff0 <_Bfree>
 800cd74:	9805      	ldr	r0, [sp, #20]
 800cd76:	4641      	mov	r1, r8
 800cd78:	f7ff f93a 	bl	800bff0 <_Bfree>
 800cd7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cd7e:	9805      	ldr	r0, [sp, #20]
 800cd80:	f7ff f936 	bl	800bff0 <_Bfree>
 800cd84:	9805      	ldr	r0, [sp, #20]
 800cd86:	4621      	mov	r1, r4
 800cd88:	f7ff f932 	bl	800bff0 <_Bfree>
 800cd8c:	e5f9      	b.n	800c982 <_strtod_l+0x72>
 800cd8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cd94:	4293      	cmp	r3, r2
 800cd96:	dbbc      	blt.n	800cd12 <_strtod_l+0x402>
 800cd98:	4c41      	ldr	r4, [pc, #260]	@ (800cea0 <_strtod_l+0x590>)
 800cd9a:	f1c5 050f 	rsb	r5, r5, #15
 800cd9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cda2:	4652      	mov	r2, sl
 800cda4:	465b      	mov	r3, fp
 800cda6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdaa:	f7f3 fc5d 	bl	8000668 <__aeabi_dmul>
 800cdae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdb0:	1b5d      	subs	r5, r3, r5
 800cdb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cdb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cdba:	e78f      	b.n	800ccdc <_strtod_l+0x3cc>
 800cdbc:	3316      	adds	r3, #22
 800cdbe:	dba8      	blt.n	800cd12 <_strtod_l+0x402>
 800cdc0:	4b37      	ldr	r3, [pc, #220]	@ (800cea0 <_strtod_l+0x590>)
 800cdc2:	eba9 0808 	sub.w	r8, r9, r8
 800cdc6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cdca:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cdce:	4650      	mov	r0, sl
 800cdd0:	4659      	mov	r1, fp
 800cdd2:	f7f3 fd73 	bl	80008bc <__aeabi_ddiv>
 800cdd6:	e783      	b.n	800cce0 <_strtod_l+0x3d0>
 800cdd8:	4b32      	ldr	r3, [pc, #200]	@ (800cea4 <_strtod_l+0x594>)
 800cdda:	9308      	str	r3, [sp, #32]
 800cddc:	2300      	movs	r3, #0
 800cdde:	1124      	asrs	r4, r4, #4
 800cde0:	4650      	mov	r0, sl
 800cde2:	4659      	mov	r1, fp
 800cde4:	461e      	mov	r6, r3
 800cde6:	2c01      	cmp	r4, #1
 800cde8:	dc21      	bgt.n	800ce2e <_strtod_l+0x51e>
 800cdea:	b10b      	cbz	r3, 800cdf0 <_strtod_l+0x4e0>
 800cdec:	4682      	mov	sl, r0
 800cdee:	468b      	mov	fp, r1
 800cdf0:	492c      	ldr	r1, [pc, #176]	@ (800cea4 <_strtod_l+0x594>)
 800cdf2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cdf6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cdfa:	4652      	mov	r2, sl
 800cdfc:	465b      	mov	r3, fp
 800cdfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce02:	f7f3 fc31 	bl	8000668 <__aeabi_dmul>
 800ce06:	4b28      	ldr	r3, [pc, #160]	@ (800cea8 <_strtod_l+0x598>)
 800ce08:	460a      	mov	r2, r1
 800ce0a:	400b      	ands	r3, r1
 800ce0c:	4927      	ldr	r1, [pc, #156]	@ (800ceac <_strtod_l+0x59c>)
 800ce0e:	428b      	cmp	r3, r1
 800ce10:	4682      	mov	sl, r0
 800ce12:	d898      	bhi.n	800cd46 <_strtod_l+0x436>
 800ce14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ce18:	428b      	cmp	r3, r1
 800ce1a:	bf86      	itte	hi
 800ce1c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ceb0 <_strtod_l+0x5a0>
 800ce20:	f04f 3aff 	movhi.w	sl, #4294967295
 800ce24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ce28:	2300      	movs	r3, #0
 800ce2a:	9308      	str	r3, [sp, #32]
 800ce2c:	e07a      	b.n	800cf24 <_strtod_l+0x614>
 800ce2e:	07e2      	lsls	r2, r4, #31
 800ce30:	d505      	bpl.n	800ce3e <_strtod_l+0x52e>
 800ce32:	9b08      	ldr	r3, [sp, #32]
 800ce34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce38:	f7f3 fc16 	bl	8000668 <__aeabi_dmul>
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	9a08      	ldr	r2, [sp, #32]
 800ce40:	3208      	adds	r2, #8
 800ce42:	3601      	adds	r6, #1
 800ce44:	1064      	asrs	r4, r4, #1
 800ce46:	9208      	str	r2, [sp, #32]
 800ce48:	e7cd      	b.n	800cde6 <_strtod_l+0x4d6>
 800ce4a:	d0ed      	beq.n	800ce28 <_strtod_l+0x518>
 800ce4c:	4264      	negs	r4, r4
 800ce4e:	f014 020f 	ands.w	r2, r4, #15
 800ce52:	d00a      	beq.n	800ce6a <_strtod_l+0x55a>
 800ce54:	4b12      	ldr	r3, [pc, #72]	@ (800cea0 <_strtod_l+0x590>)
 800ce56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce5a:	4650      	mov	r0, sl
 800ce5c:	4659      	mov	r1, fp
 800ce5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce62:	f7f3 fd2b 	bl	80008bc <__aeabi_ddiv>
 800ce66:	4682      	mov	sl, r0
 800ce68:	468b      	mov	fp, r1
 800ce6a:	1124      	asrs	r4, r4, #4
 800ce6c:	d0dc      	beq.n	800ce28 <_strtod_l+0x518>
 800ce6e:	2c1f      	cmp	r4, #31
 800ce70:	dd20      	ble.n	800ceb4 <_strtod_l+0x5a4>
 800ce72:	2400      	movs	r4, #0
 800ce74:	46a0      	mov	r8, r4
 800ce76:	940a      	str	r4, [sp, #40]	@ 0x28
 800ce78:	46a1      	mov	r9, r4
 800ce7a:	9a05      	ldr	r2, [sp, #20]
 800ce7c:	2322      	movs	r3, #34	@ 0x22
 800ce7e:	f04f 0a00 	mov.w	sl, #0
 800ce82:	f04f 0b00 	mov.w	fp, #0
 800ce86:	6013      	str	r3, [r2, #0]
 800ce88:	e768      	b.n	800cd5c <_strtod_l+0x44c>
 800ce8a:	bf00      	nop
 800ce8c:	0800e88a 	.word	0x0800e88a
 800ce90:	0800eb34 	.word	0x0800eb34
 800ce94:	0800e882 	.word	0x0800e882
 800ce98:	0800e966 	.word	0x0800e966
 800ce9c:	0800e962 	.word	0x0800e962
 800cea0:	0800ea68 	.word	0x0800ea68
 800cea4:	0800ea40 	.word	0x0800ea40
 800cea8:	7ff00000 	.word	0x7ff00000
 800ceac:	7ca00000 	.word	0x7ca00000
 800ceb0:	7fefffff 	.word	0x7fefffff
 800ceb4:	f014 0310 	ands.w	r3, r4, #16
 800ceb8:	bf18      	it	ne
 800ceba:	236a      	movne	r3, #106	@ 0x6a
 800cebc:	4ea9      	ldr	r6, [pc, #676]	@ (800d164 <_strtod_l+0x854>)
 800cebe:	9308      	str	r3, [sp, #32]
 800cec0:	4650      	mov	r0, sl
 800cec2:	4659      	mov	r1, fp
 800cec4:	2300      	movs	r3, #0
 800cec6:	07e2      	lsls	r2, r4, #31
 800cec8:	d504      	bpl.n	800ced4 <_strtod_l+0x5c4>
 800ceca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cece:	f7f3 fbcb 	bl	8000668 <__aeabi_dmul>
 800ced2:	2301      	movs	r3, #1
 800ced4:	1064      	asrs	r4, r4, #1
 800ced6:	f106 0608 	add.w	r6, r6, #8
 800ceda:	d1f4      	bne.n	800cec6 <_strtod_l+0x5b6>
 800cedc:	b10b      	cbz	r3, 800cee2 <_strtod_l+0x5d2>
 800cede:	4682      	mov	sl, r0
 800cee0:	468b      	mov	fp, r1
 800cee2:	9b08      	ldr	r3, [sp, #32]
 800cee4:	b1b3      	cbz	r3, 800cf14 <_strtod_l+0x604>
 800cee6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ceea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	4659      	mov	r1, fp
 800cef2:	dd0f      	ble.n	800cf14 <_strtod_l+0x604>
 800cef4:	2b1f      	cmp	r3, #31
 800cef6:	dd55      	ble.n	800cfa4 <_strtod_l+0x694>
 800cef8:	2b34      	cmp	r3, #52	@ 0x34
 800cefa:	bfde      	ittt	le
 800cefc:	f04f 33ff 	movle.w	r3, #4294967295
 800cf00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cf04:	4093      	lslle	r3, r2
 800cf06:	f04f 0a00 	mov.w	sl, #0
 800cf0a:	bfcc      	ite	gt
 800cf0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cf10:	ea03 0b01 	andle.w	fp, r3, r1
 800cf14:	2200      	movs	r2, #0
 800cf16:	2300      	movs	r3, #0
 800cf18:	4650      	mov	r0, sl
 800cf1a:	4659      	mov	r1, fp
 800cf1c:	f7f3 fe0c 	bl	8000b38 <__aeabi_dcmpeq>
 800cf20:	2800      	cmp	r0, #0
 800cf22:	d1a6      	bne.n	800ce72 <_strtod_l+0x562>
 800cf24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf26:	9300      	str	r3, [sp, #0]
 800cf28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cf2a:	9805      	ldr	r0, [sp, #20]
 800cf2c:	462b      	mov	r3, r5
 800cf2e:	463a      	mov	r2, r7
 800cf30:	f7ff f8c6 	bl	800c0c0 <__s2b>
 800cf34:	900a      	str	r0, [sp, #40]	@ 0x28
 800cf36:	2800      	cmp	r0, #0
 800cf38:	f43f af05 	beq.w	800cd46 <_strtod_l+0x436>
 800cf3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf3e:	2a00      	cmp	r2, #0
 800cf40:	eba9 0308 	sub.w	r3, r9, r8
 800cf44:	bfa8      	it	ge
 800cf46:	2300      	movge	r3, #0
 800cf48:	9312      	str	r3, [sp, #72]	@ 0x48
 800cf4a:	2400      	movs	r4, #0
 800cf4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cf50:	9316      	str	r3, [sp, #88]	@ 0x58
 800cf52:	46a0      	mov	r8, r4
 800cf54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf56:	9805      	ldr	r0, [sp, #20]
 800cf58:	6859      	ldr	r1, [r3, #4]
 800cf5a:	f7ff f809 	bl	800bf70 <_Balloc>
 800cf5e:	4681      	mov	r9, r0
 800cf60:	2800      	cmp	r0, #0
 800cf62:	f43f aef4 	beq.w	800cd4e <_strtod_l+0x43e>
 800cf66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf68:	691a      	ldr	r2, [r3, #16]
 800cf6a:	3202      	adds	r2, #2
 800cf6c:	f103 010c 	add.w	r1, r3, #12
 800cf70:	0092      	lsls	r2, r2, #2
 800cf72:	300c      	adds	r0, #12
 800cf74:	f000 fd08 	bl	800d988 <memcpy>
 800cf78:	ec4b ab10 	vmov	d0, sl, fp
 800cf7c:	9805      	ldr	r0, [sp, #20]
 800cf7e:	aa1c      	add	r2, sp, #112	@ 0x70
 800cf80:	a91b      	add	r1, sp, #108	@ 0x6c
 800cf82:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cf86:	f7ff fbd7 	bl	800c738 <__d2b>
 800cf8a:	901a      	str	r0, [sp, #104]	@ 0x68
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	f43f aede 	beq.w	800cd4e <_strtod_l+0x43e>
 800cf92:	9805      	ldr	r0, [sp, #20]
 800cf94:	2101      	movs	r1, #1
 800cf96:	f7ff f929 	bl	800c1ec <__i2b>
 800cf9a:	4680      	mov	r8, r0
 800cf9c:	b948      	cbnz	r0, 800cfb2 <_strtod_l+0x6a2>
 800cf9e:	f04f 0800 	mov.w	r8, #0
 800cfa2:	e6d4      	b.n	800cd4e <_strtod_l+0x43e>
 800cfa4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa8:	fa02 f303 	lsl.w	r3, r2, r3
 800cfac:	ea03 0a0a 	and.w	sl, r3, sl
 800cfb0:	e7b0      	b.n	800cf14 <_strtod_l+0x604>
 800cfb2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cfb4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cfb6:	2d00      	cmp	r5, #0
 800cfb8:	bfab      	itete	ge
 800cfba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cfbc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cfbe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cfc0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cfc2:	bfac      	ite	ge
 800cfc4:	18ef      	addge	r7, r5, r3
 800cfc6:	1b5e      	sublt	r6, r3, r5
 800cfc8:	9b08      	ldr	r3, [sp, #32]
 800cfca:	1aed      	subs	r5, r5, r3
 800cfcc:	4415      	add	r5, r2
 800cfce:	4b66      	ldr	r3, [pc, #408]	@ (800d168 <_strtod_l+0x858>)
 800cfd0:	3d01      	subs	r5, #1
 800cfd2:	429d      	cmp	r5, r3
 800cfd4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cfd8:	da50      	bge.n	800d07c <_strtod_l+0x76c>
 800cfda:	1b5b      	subs	r3, r3, r5
 800cfdc:	2b1f      	cmp	r3, #31
 800cfde:	eba2 0203 	sub.w	r2, r2, r3
 800cfe2:	f04f 0101 	mov.w	r1, #1
 800cfe6:	dc3d      	bgt.n	800d064 <_strtod_l+0x754>
 800cfe8:	fa01 f303 	lsl.w	r3, r1, r3
 800cfec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cfee:	2300      	movs	r3, #0
 800cff0:	9310      	str	r3, [sp, #64]	@ 0x40
 800cff2:	18bd      	adds	r5, r7, r2
 800cff4:	9b08      	ldr	r3, [sp, #32]
 800cff6:	42af      	cmp	r7, r5
 800cff8:	4416      	add	r6, r2
 800cffa:	441e      	add	r6, r3
 800cffc:	463b      	mov	r3, r7
 800cffe:	bfa8      	it	ge
 800d000:	462b      	movge	r3, r5
 800d002:	42b3      	cmp	r3, r6
 800d004:	bfa8      	it	ge
 800d006:	4633      	movge	r3, r6
 800d008:	2b00      	cmp	r3, #0
 800d00a:	bfc2      	ittt	gt
 800d00c:	1aed      	subgt	r5, r5, r3
 800d00e:	1af6      	subgt	r6, r6, r3
 800d010:	1aff      	subgt	r7, r7, r3
 800d012:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d014:	2b00      	cmp	r3, #0
 800d016:	dd16      	ble.n	800d046 <_strtod_l+0x736>
 800d018:	4641      	mov	r1, r8
 800d01a:	9805      	ldr	r0, [sp, #20]
 800d01c:	461a      	mov	r2, r3
 800d01e:	f7ff f9a5 	bl	800c36c <__pow5mult>
 800d022:	4680      	mov	r8, r0
 800d024:	2800      	cmp	r0, #0
 800d026:	d0ba      	beq.n	800cf9e <_strtod_l+0x68e>
 800d028:	4601      	mov	r1, r0
 800d02a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d02c:	9805      	ldr	r0, [sp, #20]
 800d02e:	f7ff f8f3 	bl	800c218 <__multiply>
 800d032:	900e      	str	r0, [sp, #56]	@ 0x38
 800d034:	2800      	cmp	r0, #0
 800d036:	f43f ae8a 	beq.w	800cd4e <_strtod_l+0x43e>
 800d03a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d03c:	9805      	ldr	r0, [sp, #20]
 800d03e:	f7fe ffd7 	bl	800bff0 <_Bfree>
 800d042:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d044:	931a      	str	r3, [sp, #104]	@ 0x68
 800d046:	2d00      	cmp	r5, #0
 800d048:	dc1d      	bgt.n	800d086 <_strtod_l+0x776>
 800d04a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	dd23      	ble.n	800d098 <_strtod_l+0x788>
 800d050:	4649      	mov	r1, r9
 800d052:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d054:	9805      	ldr	r0, [sp, #20]
 800d056:	f7ff f989 	bl	800c36c <__pow5mult>
 800d05a:	4681      	mov	r9, r0
 800d05c:	b9e0      	cbnz	r0, 800d098 <_strtod_l+0x788>
 800d05e:	f04f 0900 	mov.w	r9, #0
 800d062:	e674      	b.n	800cd4e <_strtod_l+0x43e>
 800d064:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d068:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d06c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d070:	35e2      	adds	r5, #226	@ 0xe2
 800d072:	fa01 f305 	lsl.w	r3, r1, r5
 800d076:	9310      	str	r3, [sp, #64]	@ 0x40
 800d078:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d07a:	e7ba      	b.n	800cff2 <_strtod_l+0x6e2>
 800d07c:	2300      	movs	r3, #0
 800d07e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d080:	2301      	movs	r3, #1
 800d082:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d084:	e7b5      	b.n	800cff2 <_strtod_l+0x6e2>
 800d086:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d088:	9805      	ldr	r0, [sp, #20]
 800d08a:	462a      	mov	r2, r5
 800d08c:	f7ff f9c8 	bl	800c420 <__lshift>
 800d090:	901a      	str	r0, [sp, #104]	@ 0x68
 800d092:	2800      	cmp	r0, #0
 800d094:	d1d9      	bne.n	800d04a <_strtod_l+0x73a>
 800d096:	e65a      	b.n	800cd4e <_strtod_l+0x43e>
 800d098:	2e00      	cmp	r6, #0
 800d09a:	dd07      	ble.n	800d0ac <_strtod_l+0x79c>
 800d09c:	4649      	mov	r1, r9
 800d09e:	9805      	ldr	r0, [sp, #20]
 800d0a0:	4632      	mov	r2, r6
 800d0a2:	f7ff f9bd 	bl	800c420 <__lshift>
 800d0a6:	4681      	mov	r9, r0
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	d0d8      	beq.n	800d05e <_strtod_l+0x74e>
 800d0ac:	2f00      	cmp	r7, #0
 800d0ae:	dd08      	ble.n	800d0c2 <_strtod_l+0x7b2>
 800d0b0:	4641      	mov	r1, r8
 800d0b2:	9805      	ldr	r0, [sp, #20]
 800d0b4:	463a      	mov	r2, r7
 800d0b6:	f7ff f9b3 	bl	800c420 <__lshift>
 800d0ba:	4680      	mov	r8, r0
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	f43f ae46 	beq.w	800cd4e <_strtod_l+0x43e>
 800d0c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0c4:	9805      	ldr	r0, [sp, #20]
 800d0c6:	464a      	mov	r2, r9
 800d0c8:	f7ff fa32 	bl	800c530 <__mdiff>
 800d0cc:	4604      	mov	r4, r0
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	f43f ae3d 	beq.w	800cd4e <_strtod_l+0x43e>
 800d0d4:	68c3      	ldr	r3, [r0, #12]
 800d0d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d0d8:	2300      	movs	r3, #0
 800d0da:	60c3      	str	r3, [r0, #12]
 800d0dc:	4641      	mov	r1, r8
 800d0de:	f7ff fa0b 	bl	800c4f8 <__mcmp>
 800d0e2:	2800      	cmp	r0, #0
 800d0e4:	da46      	bge.n	800d174 <_strtod_l+0x864>
 800d0e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0e8:	ea53 030a 	orrs.w	r3, r3, sl
 800d0ec:	d16c      	bne.n	800d1c8 <_strtod_l+0x8b8>
 800d0ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d168      	bne.n	800d1c8 <_strtod_l+0x8b8>
 800d0f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d0fa:	0d1b      	lsrs	r3, r3, #20
 800d0fc:	051b      	lsls	r3, r3, #20
 800d0fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d102:	d961      	bls.n	800d1c8 <_strtod_l+0x8b8>
 800d104:	6963      	ldr	r3, [r4, #20]
 800d106:	b913      	cbnz	r3, 800d10e <_strtod_l+0x7fe>
 800d108:	6923      	ldr	r3, [r4, #16]
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	dd5c      	ble.n	800d1c8 <_strtod_l+0x8b8>
 800d10e:	4621      	mov	r1, r4
 800d110:	2201      	movs	r2, #1
 800d112:	9805      	ldr	r0, [sp, #20]
 800d114:	f7ff f984 	bl	800c420 <__lshift>
 800d118:	4641      	mov	r1, r8
 800d11a:	4604      	mov	r4, r0
 800d11c:	f7ff f9ec 	bl	800c4f8 <__mcmp>
 800d120:	2800      	cmp	r0, #0
 800d122:	dd51      	ble.n	800d1c8 <_strtod_l+0x8b8>
 800d124:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d128:	9a08      	ldr	r2, [sp, #32]
 800d12a:	0d1b      	lsrs	r3, r3, #20
 800d12c:	051b      	lsls	r3, r3, #20
 800d12e:	2a00      	cmp	r2, #0
 800d130:	d06b      	beq.n	800d20a <_strtod_l+0x8fa>
 800d132:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d136:	d868      	bhi.n	800d20a <_strtod_l+0x8fa>
 800d138:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d13c:	f67f ae9d 	bls.w	800ce7a <_strtod_l+0x56a>
 800d140:	4b0a      	ldr	r3, [pc, #40]	@ (800d16c <_strtod_l+0x85c>)
 800d142:	4650      	mov	r0, sl
 800d144:	4659      	mov	r1, fp
 800d146:	2200      	movs	r2, #0
 800d148:	f7f3 fa8e 	bl	8000668 <__aeabi_dmul>
 800d14c:	4b08      	ldr	r3, [pc, #32]	@ (800d170 <_strtod_l+0x860>)
 800d14e:	400b      	ands	r3, r1
 800d150:	4682      	mov	sl, r0
 800d152:	468b      	mov	fp, r1
 800d154:	2b00      	cmp	r3, #0
 800d156:	f47f ae05 	bne.w	800cd64 <_strtod_l+0x454>
 800d15a:	9a05      	ldr	r2, [sp, #20]
 800d15c:	2322      	movs	r3, #34	@ 0x22
 800d15e:	6013      	str	r3, [r2, #0]
 800d160:	e600      	b.n	800cd64 <_strtod_l+0x454>
 800d162:	bf00      	nop
 800d164:	0800eb60 	.word	0x0800eb60
 800d168:	fffffc02 	.word	0xfffffc02
 800d16c:	39500000 	.word	0x39500000
 800d170:	7ff00000 	.word	0x7ff00000
 800d174:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d178:	d165      	bne.n	800d246 <_strtod_l+0x936>
 800d17a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d17c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d180:	b35a      	cbz	r2, 800d1da <_strtod_l+0x8ca>
 800d182:	4a9f      	ldr	r2, [pc, #636]	@ (800d400 <_strtod_l+0xaf0>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d12b      	bne.n	800d1e0 <_strtod_l+0x8d0>
 800d188:	9b08      	ldr	r3, [sp, #32]
 800d18a:	4651      	mov	r1, sl
 800d18c:	b303      	cbz	r3, 800d1d0 <_strtod_l+0x8c0>
 800d18e:	4b9d      	ldr	r3, [pc, #628]	@ (800d404 <_strtod_l+0xaf4>)
 800d190:	465a      	mov	r2, fp
 800d192:	4013      	ands	r3, r2
 800d194:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d198:	f04f 32ff 	mov.w	r2, #4294967295
 800d19c:	d81b      	bhi.n	800d1d6 <_strtod_l+0x8c6>
 800d19e:	0d1b      	lsrs	r3, r3, #20
 800d1a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1a8:	4299      	cmp	r1, r3
 800d1aa:	d119      	bne.n	800d1e0 <_strtod_l+0x8d0>
 800d1ac:	4b96      	ldr	r3, [pc, #600]	@ (800d408 <_strtod_l+0xaf8>)
 800d1ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d102      	bne.n	800d1ba <_strtod_l+0x8aa>
 800d1b4:	3101      	adds	r1, #1
 800d1b6:	f43f adca 	beq.w	800cd4e <_strtod_l+0x43e>
 800d1ba:	4b92      	ldr	r3, [pc, #584]	@ (800d404 <_strtod_l+0xaf4>)
 800d1bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1be:	401a      	ands	r2, r3
 800d1c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d1c4:	f04f 0a00 	mov.w	sl, #0
 800d1c8:	9b08      	ldr	r3, [sp, #32]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d1b8      	bne.n	800d140 <_strtod_l+0x830>
 800d1ce:	e5c9      	b.n	800cd64 <_strtod_l+0x454>
 800d1d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1d4:	e7e8      	b.n	800d1a8 <_strtod_l+0x898>
 800d1d6:	4613      	mov	r3, r2
 800d1d8:	e7e6      	b.n	800d1a8 <_strtod_l+0x898>
 800d1da:	ea53 030a 	orrs.w	r3, r3, sl
 800d1de:	d0a1      	beq.n	800d124 <_strtod_l+0x814>
 800d1e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d1e2:	b1db      	cbz	r3, 800d21c <_strtod_l+0x90c>
 800d1e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1e6:	4213      	tst	r3, r2
 800d1e8:	d0ee      	beq.n	800d1c8 <_strtod_l+0x8b8>
 800d1ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1ec:	9a08      	ldr	r2, [sp, #32]
 800d1ee:	4650      	mov	r0, sl
 800d1f0:	4659      	mov	r1, fp
 800d1f2:	b1bb      	cbz	r3, 800d224 <_strtod_l+0x914>
 800d1f4:	f7ff fb6e 	bl	800c8d4 <sulp>
 800d1f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1fc:	ec53 2b10 	vmov	r2, r3, d0
 800d200:	f7f3 f87c 	bl	80002fc <__adddf3>
 800d204:	4682      	mov	sl, r0
 800d206:	468b      	mov	fp, r1
 800d208:	e7de      	b.n	800d1c8 <_strtod_l+0x8b8>
 800d20a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d20e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d212:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d216:	f04f 3aff 	mov.w	sl, #4294967295
 800d21a:	e7d5      	b.n	800d1c8 <_strtod_l+0x8b8>
 800d21c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d21e:	ea13 0f0a 	tst.w	r3, sl
 800d222:	e7e1      	b.n	800d1e8 <_strtod_l+0x8d8>
 800d224:	f7ff fb56 	bl	800c8d4 <sulp>
 800d228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d22c:	ec53 2b10 	vmov	r2, r3, d0
 800d230:	f7f3 f862 	bl	80002f8 <__aeabi_dsub>
 800d234:	2200      	movs	r2, #0
 800d236:	2300      	movs	r3, #0
 800d238:	4682      	mov	sl, r0
 800d23a:	468b      	mov	fp, r1
 800d23c:	f7f3 fc7c 	bl	8000b38 <__aeabi_dcmpeq>
 800d240:	2800      	cmp	r0, #0
 800d242:	d0c1      	beq.n	800d1c8 <_strtod_l+0x8b8>
 800d244:	e619      	b.n	800ce7a <_strtod_l+0x56a>
 800d246:	4641      	mov	r1, r8
 800d248:	4620      	mov	r0, r4
 800d24a:	f7ff facd 	bl	800c7e8 <__ratio>
 800d24e:	ec57 6b10 	vmov	r6, r7, d0
 800d252:	2200      	movs	r2, #0
 800d254:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d258:	4630      	mov	r0, r6
 800d25a:	4639      	mov	r1, r7
 800d25c:	f7f3 fc80 	bl	8000b60 <__aeabi_dcmple>
 800d260:	2800      	cmp	r0, #0
 800d262:	d06f      	beq.n	800d344 <_strtod_l+0xa34>
 800d264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d266:	2b00      	cmp	r3, #0
 800d268:	d17a      	bne.n	800d360 <_strtod_l+0xa50>
 800d26a:	f1ba 0f00 	cmp.w	sl, #0
 800d26e:	d158      	bne.n	800d322 <_strtod_l+0xa12>
 800d270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d272:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d276:	2b00      	cmp	r3, #0
 800d278:	d15a      	bne.n	800d330 <_strtod_l+0xa20>
 800d27a:	4b64      	ldr	r3, [pc, #400]	@ (800d40c <_strtod_l+0xafc>)
 800d27c:	2200      	movs	r2, #0
 800d27e:	4630      	mov	r0, r6
 800d280:	4639      	mov	r1, r7
 800d282:	f7f3 fc63 	bl	8000b4c <__aeabi_dcmplt>
 800d286:	2800      	cmp	r0, #0
 800d288:	d159      	bne.n	800d33e <_strtod_l+0xa2e>
 800d28a:	4630      	mov	r0, r6
 800d28c:	4639      	mov	r1, r7
 800d28e:	4b60      	ldr	r3, [pc, #384]	@ (800d410 <_strtod_l+0xb00>)
 800d290:	2200      	movs	r2, #0
 800d292:	f7f3 f9e9 	bl	8000668 <__aeabi_dmul>
 800d296:	4606      	mov	r6, r0
 800d298:	460f      	mov	r7, r1
 800d29a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d29e:	9606      	str	r6, [sp, #24]
 800d2a0:	9307      	str	r3, [sp, #28]
 800d2a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2a6:	4d57      	ldr	r5, [pc, #348]	@ (800d404 <_strtod_l+0xaf4>)
 800d2a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d2ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2ae:	401d      	ands	r5, r3
 800d2b0:	4b58      	ldr	r3, [pc, #352]	@ (800d414 <_strtod_l+0xb04>)
 800d2b2:	429d      	cmp	r5, r3
 800d2b4:	f040 80b2 	bne.w	800d41c <_strtod_l+0xb0c>
 800d2b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d2be:	ec4b ab10 	vmov	d0, sl, fp
 800d2c2:	f7ff f9c9 	bl	800c658 <__ulp>
 800d2c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2ca:	ec51 0b10 	vmov	r0, r1, d0
 800d2ce:	f7f3 f9cb 	bl	8000668 <__aeabi_dmul>
 800d2d2:	4652      	mov	r2, sl
 800d2d4:	465b      	mov	r3, fp
 800d2d6:	f7f3 f811 	bl	80002fc <__adddf3>
 800d2da:	460b      	mov	r3, r1
 800d2dc:	4949      	ldr	r1, [pc, #292]	@ (800d404 <_strtod_l+0xaf4>)
 800d2de:	4a4e      	ldr	r2, [pc, #312]	@ (800d418 <_strtod_l+0xb08>)
 800d2e0:	4019      	ands	r1, r3
 800d2e2:	4291      	cmp	r1, r2
 800d2e4:	4682      	mov	sl, r0
 800d2e6:	d942      	bls.n	800d36e <_strtod_l+0xa5e>
 800d2e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d2ea:	4b47      	ldr	r3, [pc, #284]	@ (800d408 <_strtod_l+0xaf8>)
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d103      	bne.n	800d2f8 <_strtod_l+0x9e8>
 800d2f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	f43f ad2b 	beq.w	800cd4e <_strtod_l+0x43e>
 800d2f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d408 <_strtod_l+0xaf8>
 800d2fc:	f04f 3aff 	mov.w	sl, #4294967295
 800d300:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d302:	9805      	ldr	r0, [sp, #20]
 800d304:	f7fe fe74 	bl	800bff0 <_Bfree>
 800d308:	9805      	ldr	r0, [sp, #20]
 800d30a:	4649      	mov	r1, r9
 800d30c:	f7fe fe70 	bl	800bff0 <_Bfree>
 800d310:	9805      	ldr	r0, [sp, #20]
 800d312:	4641      	mov	r1, r8
 800d314:	f7fe fe6c 	bl	800bff0 <_Bfree>
 800d318:	9805      	ldr	r0, [sp, #20]
 800d31a:	4621      	mov	r1, r4
 800d31c:	f7fe fe68 	bl	800bff0 <_Bfree>
 800d320:	e618      	b.n	800cf54 <_strtod_l+0x644>
 800d322:	f1ba 0f01 	cmp.w	sl, #1
 800d326:	d103      	bne.n	800d330 <_strtod_l+0xa20>
 800d328:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f43f ada5 	beq.w	800ce7a <_strtod_l+0x56a>
 800d330:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d3e0 <_strtod_l+0xad0>
 800d334:	4f35      	ldr	r7, [pc, #212]	@ (800d40c <_strtod_l+0xafc>)
 800d336:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d33a:	2600      	movs	r6, #0
 800d33c:	e7b1      	b.n	800d2a2 <_strtod_l+0x992>
 800d33e:	4f34      	ldr	r7, [pc, #208]	@ (800d410 <_strtod_l+0xb00>)
 800d340:	2600      	movs	r6, #0
 800d342:	e7aa      	b.n	800d29a <_strtod_l+0x98a>
 800d344:	4b32      	ldr	r3, [pc, #200]	@ (800d410 <_strtod_l+0xb00>)
 800d346:	4630      	mov	r0, r6
 800d348:	4639      	mov	r1, r7
 800d34a:	2200      	movs	r2, #0
 800d34c:	f7f3 f98c 	bl	8000668 <__aeabi_dmul>
 800d350:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d352:	4606      	mov	r6, r0
 800d354:	460f      	mov	r7, r1
 800d356:	2b00      	cmp	r3, #0
 800d358:	d09f      	beq.n	800d29a <_strtod_l+0x98a>
 800d35a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d35e:	e7a0      	b.n	800d2a2 <_strtod_l+0x992>
 800d360:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d3e8 <_strtod_l+0xad8>
 800d364:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d368:	ec57 6b17 	vmov	r6, r7, d7
 800d36c:	e799      	b.n	800d2a2 <_strtod_l+0x992>
 800d36e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d372:	9b08      	ldr	r3, [sp, #32]
 800d374:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1c1      	bne.n	800d300 <_strtod_l+0x9f0>
 800d37c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d380:	0d1b      	lsrs	r3, r3, #20
 800d382:	051b      	lsls	r3, r3, #20
 800d384:	429d      	cmp	r5, r3
 800d386:	d1bb      	bne.n	800d300 <_strtod_l+0x9f0>
 800d388:	4630      	mov	r0, r6
 800d38a:	4639      	mov	r1, r7
 800d38c:	f7f3 fccc 	bl	8000d28 <__aeabi_d2lz>
 800d390:	f7f3 f93c 	bl	800060c <__aeabi_l2d>
 800d394:	4602      	mov	r2, r0
 800d396:	460b      	mov	r3, r1
 800d398:	4630      	mov	r0, r6
 800d39a:	4639      	mov	r1, r7
 800d39c:	f7f2 ffac 	bl	80002f8 <__aeabi_dsub>
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d3a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d3ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3ae:	ea46 060a 	orr.w	r6, r6, sl
 800d3b2:	431e      	orrs	r6, r3
 800d3b4:	d06f      	beq.n	800d496 <_strtod_l+0xb86>
 800d3b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d3f0 <_strtod_l+0xae0>)
 800d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3bc:	f7f3 fbc6 	bl	8000b4c <__aeabi_dcmplt>
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	f47f accf 	bne.w	800cd64 <_strtod_l+0x454>
 800d3c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800d3f8 <_strtod_l+0xae8>)
 800d3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3d0:	f7f3 fbda 	bl	8000b88 <__aeabi_dcmpgt>
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	d093      	beq.n	800d300 <_strtod_l+0x9f0>
 800d3d8:	e4c4      	b.n	800cd64 <_strtod_l+0x454>
 800d3da:	bf00      	nop
 800d3dc:	f3af 8000 	nop.w
 800d3e0:	00000000 	.word	0x00000000
 800d3e4:	bff00000 	.word	0xbff00000
 800d3e8:	00000000 	.word	0x00000000
 800d3ec:	3ff00000 	.word	0x3ff00000
 800d3f0:	94a03595 	.word	0x94a03595
 800d3f4:	3fdfffff 	.word	0x3fdfffff
 800d3f8:	35afe535 	.word	0x35afe535
 800d3fc:	3fe00000 	.word	0x3fe00000
 800d400:	000fffff 	.word	0x000fffff
 800d404:	7ff00000 	.word	0x7ff00000
 800d408:	7fefffff 	.word	0x7fefffff
 800d40c:	3ff00000 	.word	0x3ff00000
 800d410:	3fe00000 	.word	0x3fe00000
 800d414:	7fe00000 	.word	0x7fe00000
 800d418:	7c9fffff 	.word	0x7c9fffff
 800d41c:	9b08      	ldr	r3, [sp, #32]
 800d41e:	b323      	cbz	r3, 800d46a <_strtod_l+0xb5a>
 800d420:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d424:	d821      	bhi.n	800d46a <_strtod_l+0xb5a>
 800d426:	a328      	add	r3, pc, #160	@ (adr r3, 800d4c8 <_strtod_l+0xbb8>)
 800d428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42c:	4630      	mov	r0, r6
 800d42e:	4639      	mov	r1, r7
 800d430:	f7f3 fb96 	bl	8000b60 <__aeabi_dcmple>
 800d434:	b1a0      	cbz	r0, 800d460 <_strtod_l+0xb50>
 800d436:	4639      	mov	r1, r7
 800d438:	4630      	mov	r0, r6
 800d43a:	f7f3 fbed 	bl	8000c18 <__aeabi_d2uiz>
 800d43e:	2801      	cmp	r0, #1
 800d440:	bf38      	it	cc
 800d442:	2001      	movcc	r0, #1
 800d444:	f7f3 f896 	bl	8000574 <__aeabi_ui2d>
 800d448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d44a:	4606      	mov	r6, r0
 800d44c:	460f      	mov	r7, r1
 800d44e:	b9fb      	cbnz	r3, 800d490 <_strtod_l+0xb80>
 800d450:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d454:	9014      	str	r0, [sp, #80]	@ 0x50
 800d456:	9315      	str	r3, [sp, #84]	@ 0x54
 800d458:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d45c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d460:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d462:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d466:	1b5b      	subs	r3, r3, r5
 800d468:	9311      	str	r3, [sp, #68]	@ 0x44
 800d46a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d46e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d472:	f7ff f8f1 	bl	800c658 <__ulp>
 800d476:	4650      	mov	r0, sl
 800d478:	ec53 2b10 	vmov	r2, r3, d0
 800d47c:	4659      	mov	r1, fp
 800d47e:	f7f3 f8f3 	bl	8000668 <__aeabi_dmul>
 800d482:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d486:	f7f2 ff39 	bl	80002fc <__adddf3>
 800d48a:	4682      	mov	sl, r0
 800d48c:	468b      	mov	fp, r1
 800d48e:	e770      	b.n	800d372 <_strtod_l+0xa62>
 800d490:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d494:	e7e0      	b.n	800d458 <_strtod_l+0xb48>
 800d496:	a30e      	add	r3, pc, #56	@ (adr r3, 800d4d0 <_strtod_l+0xbc0>)
 800d498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49c:	f7f3 fb56 	bl	8000b4c <__aeabi_dcmplt>
 800d4a0:	e798      	b.n	800d3d4 <_strtod_l+0xac4>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d4a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d4aa:	6013      	str	r3, [r2, #0]
 800d4ac:	f7ff ba6d 	b.w	800c98a <_strtod_l+0x7a>
 800d4b0:	2a65      	cmp	r2, #101	@ 0x65
 800d4b2:	f43f ab66 	beq.w	800cb82 <_strtod_l+0x272>
 800d4b6:	2a45      	cmp	r2, #69	@ 0x45
 800d4b8:	f43f ab63 	beq.w	800cb82 <_strtod_l+0x272>
 800d4bc:	2301      	movs	r3, #1
 800d4be:	f7ff bb9e 	b.w	800cbfe <_strtod_l+0x2ee>
 800d4c2:	bf00      	nop
 800d4c4:	f3af 8000 	nop.w
 800d4c8:	ffc00000 	.word	0xffc00000
 800d4cc:	41dfffff 	.word	0x41dfffff
 800d4d0:	94a03595 	.word	0x94a03595
 800d4d4:	3fcfffff 	.word	0x3fcfffff

0800d4d8 <_strtod_r>:
 800d4d8:	4b01      	ldr	r3, [pc, #4]	@ (800d4e0 <_strtod_r+0x8>)
 800d4da:	f7ff ba19 	b.w	800c910 <_strtod_l>
 800d4de:	bf00      	nop
 800d4e0:	2000014c 	.word	0x2000014c

0800d4e4 <__ssputs_r>:
 800d4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4e8:	688e      	ldr	r6, [r1, #8]
 800d4ea:	461f      	mov	r7, r3
 800d4ec:	42be      	cmp	r6, r7
 800d4ee:	680b      	ldr	r3, [r1, #0]
 800d4f0:	4682      	mov	sl, r0
 800d4f2:	460c      	mov	r4, r1
 800d4f4:	4690      	mov	r8, r2
 800d4f6:	d82d      	bhi.n	800d554 <__ssputs_r+0x70>
 800d4f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d500:	d026      	beq.n	800d550 <__ssputs_r+0x6c>
 800d502:	6965      	ldr	r5, [r4, #20]
 800d504:	6909      	ldr	r1, [r1, #16]
 800d506:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d50a:	eba3 0901 	sub.w	r9, r3, r1
 800d50e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d512:	1c7b      	adds	r3, r7, #1
 800d514:	444b      	add	r3, r9
 800d516:	106d      	asrs	r5, r5, #1
 800d518:	429d      	cmp	r5, r3
 800d51a:	bf38      	it	cc
 800d51c:	461d      	movcc	r5, r3
 800d51e:	0553      	lsls	r3, r2, #21
 800d520:	d527      	bpl.n	800d572 <__ssputs_r+0x8e>
 800d522:	4629      	mov	r1, r5
 800d524:	f7fe fc98 	bl	800be58 <_malloc_r>
 800d528:	4606      	mov	r6, r0
 800d52a:	b360      	cbz	r0, 800d586 <__ssputs_r+0xa2>
 800d52c:	6921      	ldr	r1, [r4, #16]
 800d52e:	464a      	mov	r2, r9
 800d530:	f000 fa2a 	bl	800d988 <memcpy>
 800d534:	89a3      	ldrh	r3, [r4, #12]
 800d536:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d53a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d53e:	81a3      	strh	r3, [r4, #12]
 800d540:	6126      	str	r6, [r4, #16]
 800d542:	6165      	str	r5, [r4, #20]
 800d544:	444e      	add	r6, r9
 800d546:	eba5 0509 	sub.w	r5, r5, r9
 800d54a:	6026      	str	r6, [r4, #0]
 800d54c:	60a5      	str	r5, [r4, #8]
 800d54e:	463e      	mov	r6, r7
 800d550:	42be      	cmp	r6, r7
 800d552:	d900      	bls.n	800d556 <__ssputs_r+0x72>
 800d554:	463e      	mov	r6, r7
 800d556:	6820      	ldr	r0, [r4, #0]
 800d558:	4632      	mov	r2, r6
 800d55a:	4641      	mov	r1, r8
 800d55c:	f000 f9d8 	bl	800d910 <memmove>
 800d560:	68a3      	ldr	r3, [r4, #8]
 800d562:	1b9b      	subs	r3, r3, r6
 800d564:	60a3      	str	r3, [r4, #8]
 800d566:	6823      	ldr	r3, [r4, #0]
 800d568:	4433      	add	r3, r6
 800d56a:	6023      	str	r3, [r4, #0]
 800d56c:	2000      	movs	r0, #0
 800d56e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d572:	462a      	mov	r2, r5
 800d574:	f000 fd85 	bl	800e082 <_realloc_r>
 800d578:	4606      	mov	r6, r0
 800d57a:	2800      	cmp	r0, #0
 800d57c:	d1e0      	bne.n	800d540 <__ssputs_r+0x5c>
 800d57e:	6921      	ldr	r1, [r4, #16]
 800d580:	4650      	mov	r0, sl
 800d582:	f7fe fbf5 	bl	800bd70 <_free_r>
 800d586:	230c      	movs	r3, #12
 800d588:	f8ca 3000 	str.w	r3, [sl]
 800d58c:	89a3      	ldrh	r3, [r4, #12]
 800d58e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d592:	81a3      	strh	r3, [r4, #12]
 800d594:	f04f 30ff 	mov.w	r0, #4294967295
 800d598:	e7e9      	b.n	800d56e <__ssputs_r+0x8a>
	...

0800d59c <_svfiprintf_r>:
 800d59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a0:	4698      	mov	r8, r3
 800d5a2:	898b      	ldrh	r3, [r1, #12]
 800d5a4:	061b      	lsls	r3, r3, #24
 800d5a6:	b09d      	sub	sp, #116	@ 0x74
 800d5a8:	4607      	mov	r7, r0
 800d5aa:	460d      	mov	r5, r1
 800d5ac:	4614      	mov	r4, r2
 800d5ae:	d510      	bpl.n	800d5d2 <_svfiprintf_r+0x36>
 800d5b0:	690b      	ldr	r3, [r1, #16]
 800d5b2:	b973      	cbnz	r3, 800d5d2 <_svfiprintf_r+0x36>
 800d5b4:	2140      	movs	r1, #64	@ 0x40
 800d5b6:	f7fe fc4f 	bl	800be58 <_malloc_r>
 800d5ba:	6028      	str	r0, [r5, #0]
 800d5bc:	6128      	str	r0, [r5, #16]
 800d5be:	b930      	cbnz	r0, 800d5ce <_svfiprintf_r+0x32>
 800d5c0:	230c      	movs	r3, #12
 800d5c2:	603b      	str	r3, [r7, #0]
 800d5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c8:	b01d      	add	sp, #116	@ 0x74
 800d5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ce:	2340      	movs	r3, #64	@ 0x40
 800d5d0:	616b      	str	r3, [r5, #20]
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5d6:	2320      	movs	r3, #32
 800d5d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5e0:	2330      	movs	r3, #48	@ 0x30
 800d5e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d780 <_svfiprintf_r+0x1e4>
 800d5e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5ea:	f04f 0901 	mov.w	r9, #1
 800d5ee:	4623      	mov	r3, r4
 800d5f0:	469a      	mov	sl, r3
 800d5f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5f6:	b10a      	cbz	r2, 800d5fc <_svfiprintf_r+0x60>
 800d5f8:	2a25      	cmp	r2, #37	@ 0x25
 800d5fa:	d1f9      	bne.n	800d5f0 <_svfiprintf_r+0x54>
 800d5fc:	ebba 0b04 	subs.w	fp, sl, r4
 800d600:	d00b      	beq.n	800d61a <_svfiprintf_r+0x7e>
 800d602:	465b      	mov	r3, fp
 800d604:	4622      	mov	r2, r4
 800d606:	4629      	mov	r1, r5
 800d608:	4638      	mov	r0, r7
 800d60a:	f7ff ff6b 	bl	800d4e4 <__ssputs_r>
 800d60e:	3001      	adds	r0, #1
 800d610:	f000 80a7 	beq.w	800d762 <_svfiprintf_r+0x1c6>
 800d614:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d616:	445a      	add	r2, fp
 800d618:	9209      	str	r2, [sp, #36]	@ 0x24
 800d61a:	f89a 3000 	ldrb.w	r3, [sl]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	f000 809f 	beq.w	800d762 <_svfiprintf_r+0x1c6>
 800d624:	2300      	movs	r3, #0
 800d626:	f04f 32ff 	mov.w	r2, #4294967295
 800d62a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d62e:	f10a 0a01 	add.w	sl, sl, #1
 800d632:	9304      	str	r3, [sp, #16]
 800d634:	9307      	str	r3, [sp, #28]
 800d636:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d63a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d63c:	4654      	mov	r4, sl
 800d63e:	2205      	movs	r2, #5
 800d640:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d644:	484e      	ldr	r0, [pc, #312]	@ (800d780 <_svfiprintf_r+0x1e4>)
 800d646:	f7f2 fdfb 	bl	8000240 <memchr>
 800d64a:	9a04      	ldr	r2, [sp, #16]
 800d64c:	b9d8      	cbnz	r0, 800d686 <_svfiprintf_r+0xea>
 800d64e:	06d0      	lsls	r0, r2, #27
 800d650:	bf44      	itt	mi
 800d652:	2320      	movmi	r3, #32
 800d654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d658:	0711      	lsls	r1, r2, #28
 800d65a:	bf44      	itt	mi
 800d65c:	232b      	movmi	r3, #43	@ 0x2b
 800d65e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d662:	f89a 3000 	ldrb.w	r3, [sl]
 800d666:	2b2a      	cmp	r3, #42	@ 0x2a
 800d668:	d015      	beq.n	800d696 <_svfiprintf_r+0xfa>
 800d66a:	9a07      	ldr	r2, [sp, #28]
 800d66c:	4654      	mov	r4, sl
 800d66e:	2000      	movs	r0, #0
 800d670:	f04f 0c0a 	mov.w	ip, #10
 800d674:	4621      	mov	r1, r4
 800d676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d67a:	3b30      	subs	r3, #48	@ 0x30
 800d67c:	2b09      	cmp	r3, #9
 800d67e:	d94b      	bls.n	800d718 <_svfiprintf_r+0x17c>
 800d680:	b1b0      	cbz	r0, 800d6b0 <_svfiprintf_r+0x114>
 800d682:	9207      	str	r2, [sp, #28]
 800d684:	e014      	b.n	800d6b0 <_svfiprintf_r+0x114>
 800d686:	eba0 0308 	sub.w	r3, r0, r8
 800d68a:	fa09 f303 	lsl.w	r3, r9, r3
 800d68e:	4313      	orrs	r3, r2
 800d690:	9304      	str	r3, [sp, #16]
 800d692:	46a2      	mov	sl, r4
 800d694:	e7d2      	b.n	800d63c <_svfiprintf_r+0xa0>
 800d696:	9b03      	ldr	r3, [sp, #12]
 800d698:	1d19      	adds	r1, r3, #4
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	9103      	str	r1, [sp, #12]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	bfbb      	ittet	lt
 800d6a2:	425b      	neglt	r3, r3
 800d6a4:	f042 0202 	orrlt.w	r2, r2, #2
 800d6a8:	9307      	strge	r3, [sp, #28]
 800d6aa:	9307      	strlt	r3, [sp, #28]
 800d6ac:	bfb8      	it	lt
 800d6ae:	9204      	strlt	r2, [sp, #16]
 800d6b0:	7823      	ldrb	r3, [r4, #0]
 800d6b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6b4:	d10a      	bne.n	800d6cc <_svfiprintf_r+0x130>
 800d6b6:	7863      	ldrb	r3, [r4, #1]
 800d6b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6ba:	d132      	bne.n	800d722 <_svfiprintf_r+0x186>
 800d6bc:	9b03      	ldr	r3, [sp, #12]
 800d6be:	1d1a      	adds	r2, r3, #4
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	9203      	str	r2, [sp, #12]
 800d6c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6c8:	3402      	adds	r4, #2
 800d6ca:	9305      	str	r3, [sp, #20]
 800d6cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d790 <_svfiprintf_r+0x1f4>
 800d6d0:	7821      	ldrb	r1, [r4, #0]
 800d6d2:	2203      	movs	r2, #3
 800d6d4:	4650      	mov	r0, sl
 800d6d6:	f7f2 fdb3 	bl	8000240 <memchr>
 800d6da:	b138      	cbz	r0, 800d6ec <_svfiprintf_r+0x150>
 800d6dc:	9b04      	ldr	r3, [sp, #16]
 800d6de:	eba0 000a 	sub.w	r0, r0, sl
 800d6e2:	2240      	movs	r2, #64	@ 0x40
 800d6e4:	4082      	lsls	r2, r0
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	3401      	adds	r4, #1
 800d6ea:	9304      	str	r3, [sp, #16]
 800d6ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6f0:	4824      	ldr	r0, [pc, #144]	@ (800d784 <_svfiprintf_r+0x1e8>)
 800d6f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6f6:	2206      	movs	r2, #6
 800d6f8:	f7f2 fda2 	bl	8000240 <memchr>
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d036      	beq.n	800d76e <_svfiprintf_r+0x1d2>
 800d700:	4b21      	ldr	r3, [pc, #132]	@ (800d788 <_svfiprintf_r+0x1ec>)
 800d702:	bb1b      	cbnz	r3, 800d74c <_svfiprintf_r+0x1b0>
 800d704:	9b03      	ldr	r3, [sp, #12]
 800d706:	3307      	adds	r3, #7
 800d708:	f023 0307 	bic.w	r3, r3, #7
 800d70c:	3308      	adds	r3, #8
 800d70e:	9303      	str	r3, [sp, #12]
 800d710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d712:	4433      	add	r3, r6
 800d714:	9309      	str	r3, [sp, #36]	@ 0x24
 800d716:	e76a      	b.n	800d5ee <_svfiprintf_r+0x52>
 800d718:	fb0c 3202 	mla	r2, ip, r2, r3
 800d71c:	460c      	mov	r4, r1
 800d71e:	2001      	movs	r0, #1
 800d720:	e7a8      	b.n	800d674 <_svfiprintf_r+0xd8>
 800d722:	2300      	movs	r3, #0
 800d724:	3401      	adds	r4, #1
 800d726:	9305      	str	r3, [sp, #20]
 800d728:	4619      	mov	r1, r3
 800d72a:	f04f 0c0a 	mov.w	ip, #10
 800d72e:	4620      	mov	r0, r4
 800d730:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d734:	3a30      	subs	r2, #48	@ 0x30
 800d736:	2a09      	cmp	r2, #9
 800d738:	d903      	bls.n	800d742 <_svfiprintf_r+0x1a6>
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d0c6      	beq.n	800d6cc <_svfiprintf_r+0x130>
 800d73e:	9105      	str	r1, [sp, #20]
 800d740:	e7c4      	b.n	800d6cc <_svfiprintf_r+0x130>
 800d742:	fb0c 2101 	mla	r1, ip, r1, r2
 800d746:	4604      	mov	r4, r0
 800d748:	2301      	movs	r3, #1
 800d74a:	e7f0      	b.n	800d72e <_svfiprintf_r+0x192>
 800d74c:	ab03      	add	r3, sp, #12
 800d74e:	9300      	str	r3, [sp, #0]
 800d750:	462a      	mov	r2, r5
 800d752:	4b0e      	ldr	r3, [pc, #56]	@ (800d78c <_svfiprintf_r+0x1f0>)
 800d754:	a904      	add	r1, sp, #16
 800d756:	4638      	mov	r0, r7
 800d758:	f7fc fc96 	bl	800a088 <_printf_float>
 800d75c:	1c42      	adds	r2, r0, #1
 800d75e:	4606      	mov	r6, r0
 800d760:	d1d6      	bne.n	800d710 <_svfiprintf_r+0x174>
 800d762:	89ab      	ldrh	r3, [r5, #12]
 800d764:	065b      	lsls	r3, r3, #25
 800d766:	f53f af2d 	bmi.w	800d5c4 <_svfiprintf_r+0x28>
 800d76a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d76c:	e72c      	b.n	800d5c8 <_svfiprintf_r+0x2c>
 800d76e:	ab03      	add	r3, sp, #12
 800d770:	9300      	str	r3, [sp, #0]
 800d772:	462a      	mov	r2, r5
 800d774:	4b05      	ldr	r3, [pc, #20]	@ (800d78c <_svfiprintf_r+0x1f0>)
 800d776:	a904      	add	r1, sp, #16
 800d778:	4638      	mov	r0, r7
 800d77a:	f7fc ff1d 	bl	800a5b8 <_printf_i>
 800d77e:	e7ed      	b.n	800d75c <_svfiprintf_r+0x1c0>
 800d780:	0800eb88 	.word	0x0800eb88
 800d784:	0800eb92 	.word	0x0800eb92
 800d788:	0800a089 	.word	0x0800a089
 800d78c:	0800d4e5 	.word	0x0800d4e5
 800d790:	0800eb8e 	.word	0x0800eb8e

0800d794 <__sflush_r>:
 800d794:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d79c:	0716      	lsls	r6, r2, #28
 800d79e:	4605      	mov	r5, r0
 800d7a0:	460c      	mov	r4, r1
 800d7a2:	d454      	bmi.n	800d84e <__sflush_r+0xba>
 800d7a4:	684b      	ldr	r3, [r1, #4]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	dc02      	bgt.n	800d7b0 <__sflush_r+0x1c>
 800d7aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	dd48      	ble.n	800d842 <__sflush_r+0xae>
 800d7b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7b2:	2e00      	cmp	r6, #0
 800d7b4:	d045      	beq.n	800d842 <__sflush_r+0xae>
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d7bc:	682f      	ldr	r7, [r5, #0]
 800d7be:	6a21      	ldr	r1, [r4, #32]
 800d7c0:	602b      	str	r3, [r5, #0]
 800d7c2:	d030      	beq.n	800d826 <__sflush_r+0x92>
 800d7c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d7c6:	89a3      	ldrh	r3, [r4, #12]
 800d7c8:	0759      	lsls	r1, r3, #29
 800d7ca:	d505      	bpl.n	800d7d8 <__sflush_r+0x44>
 800d7cc:	6863      	ldr	r3, [r4, #4]
 800d7ce:	1ad2      	subs	r2, r2, r3
 800d7d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7d2:	b10b      	cbz	r3, 800d7d8 <__sflush_r+0x44>
 800d7d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7d6:	1ad2      	subs	r2, r2, r3
 800d7d8:	2300      	movs	r3, #0
 800d7da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7dc:	6a21      	ldr	r1, [r4, #32]
 800d7de:	4628      	mov	r0, r5
 800d7e0:	47b0      	blx	r6
 800d7e2:	1c43      	adds	r3, r0, #1
 800d7e4:	89a3      	ldrh	r3, [r4, #12]
 800d7e6:	d106      	bne.n	800d7f6 <__sflush_r+0x62>
 800d7e8:	6829      	ldr	r1, [r5, #0]
 800d7ea:	291d      	cmp	r1, #29
 800d7ec:	d82b      	bhi.n	800d846 <__sflush_r+0xb2>
 800d7ee:	4a2a      	ldr	r2, [pc, #168]	@ (800d898 <__sflush_r+0x104>)
 800d7f0:	410a      	asrs	r2, r1
 800d7f2:	07d6      	lsls	r6, r2, #31
 800d7f4:	d427      	bmi.n	800d846 <__sflush_r+0xb2>
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	6062      	str	r2, [r4, #4]
 800d7fa:	04d9      	lsls	r1, r3, #19
 800d7fc:	6922      	ldr	r2, [r4, #16]
 800d7fe:	6022      	str	r2, [r4, #0]
 800d800:	d504      	bpl.n	800d80c <__sflush_r+0x78>
 800d802:	1c42      	adds	r2, r0, #1
 800d804:	d101      	bne.n	800d80a <__sflush_r+0x76>
 800d806:	682b      	ldr	r3, [r5, #0]
 800d808:	b903      	cbnz	r3, 800d80c <__sflush_r+0x78>
 800d80a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d80c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d80e:	602f      	str	r7, [r5, #0]
 800d810:	b1b9      	cbz	r1, 800d842 <__sflush_r+0xae>
 800d812:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d816:	4299      	cmp	r1, r3
 800d818:	d002      	beq.n	800d820 <__sflush_r+0x8c>
 800d81a:	4628      	mov	r0, r5
 800d81c:	f7fe faa8 	bl	800bd70 <_free_r>
 800d820:	2300      	movs	r3, #0
 800d822:	6363      	str	r3, [r4, #52]	@ 0x34
 800d824:	e00d      	b.n	800d842 <__sflush_r+0xae>
 800d826:	2301      	movs	r3, #1
 800d828:	4628      	mov	r0, r5
 800d82a:	47b0      	blx	r6
 800d82c:	4602      	mov	r2, r0
 800d82e:	1c50      	adds	r0, r2, #1
 800d830:	d1c9      	bne.n	800d7c6 <__sflush_r+0x32>
 800d832:	682b      	ldr	r3, [r5, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d0c6      	beq.n	800d7c6 <__sflush_r+0x32>
 800d838:	2b1d      	cmp	r3, #29
 800d83a:	d001      	beq.n	800d840 <__sflush_r+0xac>
 800d83c:	2b16      	cmp	r3, #22
 800d83e:	d11e      	bne.n	800d87e <__sflush_r+0xea>
 800d840:	602f      	str	r7, [r5, #0]
 800d842:	2000      	movs	r0, #0
 800d844:	e022      	b.n	800d88c <__sflush_r+0xf8>
 800d846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d84a:	b21b      	sxth	r3, r3
 800d84c:	e01b      	b.n	800d886 <__sflush_r+0xf2>
 800d84e:	690f      	ldr	r7, [r1, #16]
 800d850:	2f00      	cmp	r7, #0
 800d852:	d0f6      	beq.n	800d842 <__sflush_r+0xae>
 800d854:	0793      	lsls	r3, r2, #30
 800d856:	680e      	ldr	r6, [r1, #0]
 800d858:	bf08      	it	eq
 800d85a:	694b      	ldreq	r3, [r1, #20]
 800d85c:	600f      	str	r7, [r1, #0]
 800d85e:	bf18      	it	ne
 800d860:	2300      	movne	r3, #0
 800d862:	eba6 0807 	sub.w	r8, r6, r7
 800d866:	608b      	str	r3, [r1, #8]
 800d868:	f1b8 0f00 	cmp.w	r8, #0
 800d86c:	dde9      	ble.n	800d842 <__sflush_r+0xae>
 800d86e:	6a21      	ldr	r1, [r4, #32]
 800d870:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d872:	4643      	mov	r3, r8
 800d874:	463a      	mov	r2, r7
 800d876:	4628      	mov	r0, r5
 800d878:	47b0      	blx	r6
 800d87a:	2800      	cmp	r0, #0
 800d87c:	dc08      	bgt.n	800d890 <__sflush_r+0xfc>
 800d87e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d886:	81a3      	strh	r3, [r4, #12]
 800d888:	f04f 30ff 	mov.w	r0, #4294967295
 800d88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d890:	4407      	add	r7, r0
 800d892:	eba8 0800 	sub.w	r8, r8, r0
 800d896:	e7e7      	b.n	800d868 <__sflush_r+0xd4>
 800d898:	dfbffffe 	.word	0xdfbffffe

0800d89c <_fflush_r>:
 800d89c:	b538      	push	{r3, r4, r5, lr}
 800d89e:	690b      	ldr	r3, [r1, #16]
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	460c      	mov	r4, r1
 800d8a4:	b913      	cbnz	r3, 800d8ac <_fflush_r+0x10>
 800d8a6:	2500      	movs	r5, #0
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	bd38      	pop	{r3, r4, r5, pc}
 800d8ac:	b118      	cbz	r0, 800d8b6 <_fflush_r+0x1a>
 800d8ae:	6a03      	ldr	r3, [r0, #32]
 800d8b0:	b90b      	cbnz	r3, 800d8b6 <_fflush_r+0x1a>
 800d8b2:	f7fd fa41 	bl	800ad38 <__sinit>
 800d8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d0f3      	beq.n	800d8a6 <_fflush_r+0xa>
 800d8be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d8c0:	07d0      	lsls	r0, r2, #31
 800d8c2:	d404      	bmi.n	800d8ce <_fflush_r+0x32>
 800d8c4:	0599      	lsls	r1, r3, #22
 800d8c6:	d402      	bmi.n	800d8ce <_fflush_r+0x32>
 800d8c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8ca:	f7fd fbdc 	bl	800b086 <__retarget_lock_acquire_recursive>
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	4621      	mov	r1, r4
 800d8d2:	f7ff ff5f 	bl	800d794 <__sflush_r>
 800d8d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8d8:	07da      	lsls	r2, r3, #31
 800d8da:	4605      	mov	r5, r0
 800d8dc:	d4e4      	bmi.n	800d8a8 <_fflush_r+0xc>
 800d8de:	89a3      	ldrh	r3, [r4, #12]
 800d8e0:	059b      	lsls	r3, r3, #22
 800d8e2:	d4e1      	bmi.n	800d8a8 <_fflush_r+0xc>
 800d8e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8e6:	f7fd fbcf 	bl	800b088 <__retarget_lock_release_recursive>
 800d8ea:	e7dd      	b.n	800d8a8 <_fflush_r+0xc>

0800d8ec <fiprintf>:
 800d8ec:	b40e      	push	{r1, r2, r3}
 800d8ee:	b503      	push	{r0, r1, lr}
 800d8f0:	4601      	mov	r1, r0
 800d8f2:	ab03      	add	r3, sp, #12
 800d8f4:	4805      	ldr	r0, [pc, #20]	@ (800d90c <fiprintf+0x20>)
 800d8f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8fa:	6800      	ldr	r0, [r0, #0]
 800d8fc:	9301      	str	r3, [sp, #4]
 800d8fe:	f000 fc25 	bl	800e14c <_vfiprintf_r>
 800d902:	b002      	add	sp, #8
 800d904:	f85d eb04 	ldr.w	lr, [sp], #4
 800d908:	b003      	add	sp, #12
 800d90a:	4770      	bx	lr
 800d90c:	200000fc 	.word	0x200000fc

0800d910 <memmove>:
 800d910:	4288      	cmp	r0, r1
 800d912:	b510      	push	{r4, lr}
 800d914:	eb01 0402 	add.w	r4, r1, r2
 800d918:	d902      	bls.n	800d920 <memmove+0x10>
 800d91a:	4284      	cmp	r4, r0
 800d91c:	4623      	mov	r3, r4
 800d91e:	d807      	bhi.n	800d930 <memmove+0x20>
 800d920:	1e43      	subs	r3, r0, #1
 800d922:	42a1      	cmp	r1, r4
 800d924:	d008      	beq.n	800d938 <memmove+0x28>
 800d926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d92a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d92e:	e7f8      	b.n	800d922 <memmove+0x12>
 800d930:	4402      	add	r2, r0
 800d932:	4601      	mov	r1, r0
 800d934:	428a      	cmp	r2, r1
 800d936:	d100      	bne.n	800d93a <memmove+0x2a>
 800d938:	bd10      	pop	{r4, pc}
 800d93a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d93e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d942:	e7f7      	b.n	800d934 <memmove+0x24>

0800d944 <strncmp>:
 800d944:	b510      	push	{r4, lr}
 800d946:	b16a      	cbz	r2, 800d964 <strncmp+0x20>
 800d948:	3901      	subs	r1, #1
 800d94a:	1884      	adds	r4, r0, r2
 800d94c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d950:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d954:	429a      	cmp	r2, r3
 800d956:	d103      	bne.n	800d960 <strncmp+0x1c>
 800d958:	42a0      	cmp	r0, r4
 800d95a:	d001      	beq.n	800d960 <strncmp+0x1c>
 800d95c:	2a00      	cmp	r2, #0
 800d95e:	d1f5      	bne.n	800d94c <strncmp+0x8>
 800d960:	1ad0      	subs	r0, r2, r3
 800d962:	bd10      	pop	{r4, pc}
 800d964:	4610      	mov	r0, r2
 800d966:	e7fc      	b.n	800d962 <strncmp+0x1e>

0800d968 <_sbrk_r>:
 800d968:	b538      	push	{r3, r4, r5, lr}
 800d96a:	4d06      	ldr	r5, [pc, #24]	@ (800d984 <_sbrk_r+0x1c>)
 800d96c:	2300      	movs	r3, #0
 800d96e:	4604      	mov	r4, r0
 800d970:	4608      	mov	r0, r1
 800d972:	602b      	str	r3, [r5, #0]
 800d974:	f7f4 f84a 	bl	8001a0c <_sbrk>
 800d978:	1c43      	adds	r3, r0, #1
 800d97a:	d102      	bne.n	800d982 <_sbrk_r+0x1a>
 800d97c:	682b      	ldr	r3, [r5, #0]
 800d97e:	b103      	cbz	r3, 800d982 <_sbrk_r+0x1a>
 800d980:	6023      	str	r3, [r4, #0]
 800d982:	bd38      	pop	{r3, r4, r5, pc}
 800d984:	20000818 	.word	0x20000818

0800d988 <memcpy>:
 800d988:	440a      	add	r2, r1
 800d98a:	4291      	cmp	r1, r2
 800d98c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d990:	d100      	bne.n	800d994 <memcpy+0xc>
 800d992:	4770      	bx	lr
 800d994:	b510      	push	{r4, lr}
 800d996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d99a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d99e:	4291      	cmp	r1, r2
 800d9a0:	d1f9      	bne.n	800d996 <memcpy+0xe>
 800d9a2:	bd10      	pop	{r4, pc}
 800d9a4:	0000      	movs	r0, r0
	...

0800d9a8 <nan>:
 800d9a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d9b0 <nan+0x8>
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop
 800d9b0:	00000000 	.word	0x00000000
 800d9b4:	7ff80000 	.word	0x7ff80000

0800d9b8 <abort>:
 800d9b8:	b508      	push	{r3, lr}
 800d9ba:	2006      	movs	r0, #6
 800d9bc:	f000 fd9a 	bl	800e4f4 <raise>
 800d9c0:	2001      	movs	r0, #1
 800d9c2:	f7f3 ffab 	bl	800191c <_exit>

0800d9c6 <_calloc_r>:
 800d9c6:	b570      	push	{r4, r5, r6, lr}
 800d9c8:	fba1 5402 	umull	r5, r4, r1, r2
 800d9cc:	b93c      	cbnz	r4, 800d9de <_calloc_r+0x18>
 800d9ce:	4629      	mov	r1, r5
 800d9d0:	f7fe fa42 	bl	800be58 <_malloc_r>
 800d9d4:	4606      	mov	r6, r0
 800d9d6:	b928      	cbnz	r0, 800d9e4 <_calloc_r+0x1e>
 800d9d8:	2600      	movs	r6, #0
 800d9da:	4630      	mov	r0, r6
 800d9dc:	bd70      	pop	{r4, r5, r6, pc}
 800d9de:	220c      	movs	r2, #12
 800d9e0:	6002      	str	r2, [r0, #0]
 800d9e2:	e7f9      	b.n	800d9d8 <_calloc_r+0x12>
 800d9e4:	462a      	mov	r2, r5
 800d9e6:	4621      	mov	r1, r4
 800d9e8:	f7fd fa73 	bl	800aed2 <memset>
 800d9ec:	e7f5      	b.n	800d9da <_calloc_r+0x14>

0800d9ee <rshift>:
 800d9ee:	6903      	ldr	r3, [r0, #16]
 800d9f0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d9f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9f8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d9fc:	f100 0414 	add.w	r4, r0, #20
 800da00:	dd45      	ble.n	800da8e <rshift+0xa0>
 800da02:	f011 011f 	ands.w	r1, r1, #31
 800da06:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800da0a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800da0e:	d10c      	bne.n	800da2a <rshift+0x3c>
 800da10:	f100 0710 	add.w	r7, r0, #16
 800da14:	4629      	mov	r1, r5
 800da16:	42b1      	cmp	r1, r6
 800da18:	d334      	bcc.n	800da84 <rshift+0x96>
 800da1a:	1a9b      	subs	r3, r3, r2
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	1eea      	subs	r2, r5, #3
 800da20:	4296      	cmp	r6, r2
 800da22:	bf38      	it	cc
 800da24:	2300      	movcc	r3, #0
 800da26:	4423      	add	r3, r4
 800da28:	e015      	b.n	800da56 <rshift+0x68>
 800da2a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800da2e:	f1c1 0820 	rsb	r8, r1, #32
 800da32:	40cf      	lsrs	r7, r1
 800da34:	f105 0e04 	add.w	lr, r5, #4
 800da38:	46a1      	mov	r9, r4
 800da3a:	4576      	cmp	r6, lr
 800da3c:	46f4      	mov	ip, lr
 800da3e:	d815      	bhi.n	800da6c <rshift+0x7e>
 800da40:	1a9a      	subs	r2, r3, r2
 800da42:	0092      	lsls	r2, r2, #2
 800da44:	3a04      	subs	r2, #4
 800da46:	3501      	adds	r5, #1
 800da48:	42ae      	cmp	r6, r5
 800da4a:	bf38      	it	cc
 800da4c:	2200      	movcc	r2, #0
 800da4e:	18a3      	adds	r3, r4, r2
 800da50:	50a7      	str	r7, [r4, r2]
 800da52:	b107      	cbz	r7, 800da56 <rshift+0x68>
 800da54:	3304      	adds	r3, #4
 800da56:	1b1a      	subs	r2, r3, r4
 800da58:	42a3      	cmp	r3, r4
 800da5a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800da5e:	bf08      	it	eq
 800da60:	2300      	moveq	r3, #0
 800da62:	6102      	str	r2, [r0, #16]
 800da64:	bf08      	it	eq
 800da66:	6143      	streq	r3, [r0, #20]
 800da68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da6c:	f8dc c000 	ldr.w	ip, [ip]
 800da70:	fa0c fc08 	lsl.w	ip, ip, r8
 800da74:	ea4c 0707 	orr.w	r7, ip, r7
 800da78:	f849 7b04 	str.w	r7, [r9], #4
 800da7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da80:	40cf      	lsrs	r7, r1
 800da82:	e7da      	b.n	800da3a <rshift+0x4c>
 800da84:	f851 cb04 	ldr.w	ip, [r1], #4
 800da88:	f847 cf04 	str.w	ip, [r7, #4]!
 800da8c:	e7c3      	b.n	800da16 <rshift+0x28>
 800da8e:	4623      	mov	r3, r4
 800da90:	e7e1      	b.n	800da56 <rshift+0x68>

0800da92 <__hexdig_fun>:
 800da92:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800da96:	2b09      	cmp	r3, #9
 800da98:	d802      	bhi.n	800daa0 <__hexdig_fun+0xe>
 800da9a:	3820      	subs	r0, #32
 800da9c:	b2c0      	uxtb	r0, r0
 800da9e:	4770      	bx	lr
 800daa0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800daa4:	2b05      	cmp	r3, #5
 800daa6:	d801      	bhi.n	800daac <__hexdig_fun+0x1a>
 800daa8:	3847      	subs	r0, #71	@ 0x47
 800daaa:	e7f7      	b.n	800da9c <__hexdig_fun+0xa>
 800daac:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dab0:	2b05      	cmp	r3, #5
 800dab2:	d801      	bhi.n	800dab8 <__hexdig_fun+0x26>
 800dab4:	3827      	subs	r0, #39	@ 0x27
 800dab6:	e7f1      	b.n	800da9c <__hexdig_fun+0xa>
 800dab8:	2000      	movs	r0, #0
 800daba:	4770      	bx	lr

0800dabc <__gethex>:
 800dabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac0:	b085      	sub	sp, #20
 800dac2:	468a      	mov	sl, r1
 800dac4:	9302      	str	r3, [sp, #8]
 800dac6:	680b      	ldr	r3, [r1, #0]
 800dac8:	9001      	str	r0, [sp, #4]
 800daca:	4690      	mov	r8, r2
 800dacc:	1c9c      	adds	r4, r3, #2
 800dace:	46a1      	mov	r9, r4
 800dad0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dad4:	2830      	cmp	r0, #48	@ 0x30
 800dad6:	d0fa      	beq.n	800dace <__gethex+0x12>
 800dad8:	eba9 0303 	sub.w	r3, r9, r3
 800dadc:	f1a3 0b02 	sub.w	fp, r3, #2
 800dae0:	f7ff ffd7 	bl	800da92 <__hexdig_fun>
 800dae4:	4605      	mov	r5, r0
 800dae6:	2800      	cmp	r0, #0
 800dae8:	d168      	bne.n	800dbbc <__gethex+0x100>
 800daea:	49a0      	ldr	r1, [pc, #640]	@ (800dd6c <__gethex+0x2b0>)
 800daec:	2201      	movs	r2, #1
 800daee:	4648      	mov	r0, r9
 800daf0:	f7ff ff28 	bl	800d944 <strncmp>
 800daf4:	4607      	mov	r7, r0
 800daf6:	2800      	cmp	r0, #0
 800daf8:	d167      	bne.n	800dbca <__gethex+0x10e>
 800dafa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dafe:	4626      	mov	r6, r4
 800db00:	f7ff ffc7 	bl	800da92 <__hexdig_fun>
 800db04:	2800      	cmp	r0, #0
 800db06:	d062      	beq.n	800dbce <__gethex+0x112>
 800db08:	4623      	mov	r3, r4
 800db0a:	7818      	ldrb	r0, [r3, #0]
 800db0c:	2830      	cmp	r0, #48	@ 0x30
 800db0e:	4699      	mov	r9, r3
 800db10:	f103 0301 	add.w	r3, r3, #1
 800db14:	d0f9      	beq.n	800db0a <__gethex+0x4e>
 800db16:	f7ff ffbc 	bl	800da92 <__hexdig_fun>
 800db1a:	fab0 f580 	clz	r5, r0
 800db1e:	096d      	lsrs	r5, r5, #5
 800db20:	f04f 0b01 	mov.w	fp, #1
 800db24:	464a      	mov	r2, r9
 800db26:	4616      	mov	r6, r2
 800db28:	3201      	adds	r2, #1
 800db2a:	7830      	ldrb	r0, [r6, #0]
 800db2c:	f7ff ffb1 	bl	800da92 <__hexdig_fun>
 800db30:	2800      	cmp	r0, #0
 800db32:	d1f8      	bne.n	800db26 <__gethex+0x6a>
 800db34:	498d      	ldr	r1, [pc, #564]	@ (800dd6c <__gethex+0x2b0>)
 800db36:	2201      	movs	r2, #1
 800db38:	4630      	mov	r0, r6
 800db3a:	f7ff ff03 	bl	800d944 <strncmp>
 800db3e:	2800      	cmp	r0, #0
 800db40:	d13f      	bne.n	800dbc2 <__gethex+0x106>
 800db42:	b944      	cbnz	r4, 800db56 <__gethex+0x9a>
 800db44:	1c74      	adds	r4, r6, #1
 800db46:	4622      	mov	r2, r4
 800db48:	4616      	mov	r6, r2
 800db4a:	3201      	adds	r2, #1
 800db4c:	7830      	ldrb	r0, [r6, #0]
 800db4e:	f7ff ffa0 	bl	800da92 <__hexdig_fun>
 800db52:	2800      	cmp	r0, #0
 800db54:	d1f8      	bne.n	800db48 <__gethex+0x8c>
 800db56:	1ba4      	subs	r4, r4, r6
 800db58:	00a7      	lsls	r7, r4, #2
 800db5a:	7833      	ldrb	r3, [r6, #0]
 800db5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800db60:	2b50      	cmp	r3, #80	@ 0x50
 800db62:	d13e      	bne.n	800dbe2 <__gethex+0x126>
 800db64:	7873      	ldrb	r3, [r6, #1]
 800db66:	2b2b      	cmp	r3, #43	@ 0x2b
 800db68:	d033      	beq.n	800dbd2 <__gethex+0x116>
 800db6a:	2b2d      	cmp	r3, #45	@ 0x2d
 800db6c:	d034      	beq.n	800dbd8 <__gethex+0x11c>
 800db6e:	1c71      	adds	r1, r6, #1
 800db70:	2400      	movs	r4, #0
 800db72:	7808      	ldrb	r0, [r1, #0]
 800db74:	f7ff ff8d 	bl	800da92 <__hexdig_fun>
 800db78:	1e43      	subs	r3, r0, #1
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	2b18      	cmp	r3, #24
 800db7e:	d830      	bhi.n	800dbe2 <__gethex+0x126>
 800db80:	f1a0 0210 	sub.w	r2, r0, #16
 800db84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800db88:	f7ff ff83 	bl	800da92 <__hexdig_fun>
 800db8c:	f100 3cff 	add.w	ip, r0, #4294967295
 800db90:	fa5f fc8c 	uxtb.w	ip, ip
 800db94:	f1bc 0f18 	cmp.w	ip, #24
 800db98:	f04f 030a 	mov.w	r3, #10
 800db9c:	d91e      	bls.n	800dbdc <__gethex+0x120>
 800db9e:	b104      	cbz	r4, 800dba2 <__gethex+0xe6>
 800dba0:	4252      	negs	r2, r2
 800dba2:	4417      	add	r7, r2
 800dba4:	f8ca 1000 	str.w	r1, [sl]
 800dba8:	b1ed      	cbz	r5, 800dbe6 <__gethex+0x12a>
 800dbaa:	f1bb 0f00 	cmp.w	fp, #0
 800dbae:	bf0c      	ite	eq
 800dbb0:	2506      	moveq	r5, #6
 800dbb2:	2500      	movne	r5, #0
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	b005      	add	sp, #20
 800dbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbbc:	2500      	movs	r5, #0
 800dbbe:	462c      	mov	r4, r5
 800dbc0:	e7b0      	b.n	800db24 <__gethex+0x68>
 800dbc2:	2c00      	cmp	r4, #0
 800dbc4:	d1c7      	bne.n	800db56 <__gethex+0x9a>
 800dbc6:	4627      	mov	r7, r4
 800dbc8:	e7c7      	b.n	800db5a <__gethex+0x9e>
 800dbca:	464e      	mov	r6, r9
 800dbcc:	462f      	mov	r7, r5
 800dbce:	2501      	movs	r5, #1
 800dbd0:	e7c3      	b.n	800db5a <__gethex+0x9e>
 800dbd2:	2400      	movs	r4, #0
 800dbd4:	1cb1      	adds	r1, r6, #2
 800dbd6:	e7cc      	b.n	800db72 <__gethex+0xb6>
 800dbd8:	2401      	movs	r4, #1
 800dbda:	e7fb      	b.n	800dbd4 <__gethex+0x118>
 800dbdc:	fb03 0002 	mla	r0, r3, r2, r0
 800dbe0:	e7ce      	b.n	800db80 <__gethex+0xc4>
 800dbe2:	4631      	mov	r1, r6
 800dbe4:	e7de      	b.n	800dba4 <__gethex+0xe8>
 800dbe6:	eba6 0309 	sub.w	r3, r6, r9
 800dbea:	3b01      	subs	r3, #1
 800dbec:	4629      	mov	r1, r5
 800dbee:	2b07      	cmp	r3, #7
 800dbf0:	dc0a      	bgt.n	800dc08 <__gethex+0x14c>
 800dbf2:	9801      	ldr	r0, [sp, #4]
 800dbf4:	f7fe f9bc 	bl	800bf70 <_Balloc>
 800dbf8:	4604      	mov	r4, r0
 800dbfa:	b940      	cbnz	r0, 800dc0e <__gethex+0x152>
 800dbfc:	4b5c      	ldr	r3, [pc, #368]	@ (800dd70 <__gethex+0x2b4>)
 800dbfe:	4602      	mov	r2, r0
 800dc00:	21e4      	movs	r1, #228	@ 0xe4
 800dc02:	485c      	ldr	r0, [pc, #368]	@ (800dd74 <__gethex+0x2b8>)
 800dc04:	f7fd fa48 	bl	800b098 <__assert_func>
 800dc08:	3101      	adds	r1, #1
 800dc0a:	105b      	asrs	r3, r3, #1
 800dc0c:	e7ef      	b.n	800dbee <__gethex+0x132>
 800dc0e:	f100 0a14 	add.w	sl, r0, #20
 800dc12:	2300      	movs	r3, #0
 800dc14:	4655      	mov	r5, sl
 800dc16:	469b      	mov	fp, r3
 800dc18:	45b1      	cmp	r9, r6
 800dc1a:	d337      	bcc.n	800dc8c <__gethex+0x1d0>
 800dc1c:	f845 bb04 	str.w	fp, [r5], #4
 800dc20:	eba5 050a 	sub.w	r5, r5, sl
 800dc24:	10ad      	asrs	r5, r5, #2
 800dc26:	6125      	str	r5, [r4, #16]
 800dc28:	4658      	mov	r0, fp
 800dc2a:	f7fe fa93 	bl	800c154 <__hi0bits>
 800dc2e:	016d      	lsls	r5, r5, #5
 800dc30:	f8d8 6000 	ldr.w	r6, [r8]
 800dc34:	1a2d      	subs	r5, r5, r0
 800dc36:	42b5      	cmp	r5, r6
 800dc38:	dd54      	ble.n	800dce4 <__gethex+0x228>
 800dc3a:	1bad      	subs	r5, r5, r6
 800dc3c:	4629      	mov	r1, r5
 800dc3e:	4620      	mov	r0, r4
 800dc40:	f7fe fe27 	bl	800c892 <__any_on>
 800dc44:	4681      	mov	r9, r0
 800dc46:	b178      	cbz	r0, 800dc68 <__gethex+0x1ac>
 800dc48:	1e6b      	subs	r3, r5, #1
 800dc4a:	1159      	asrs	r1, r3, #5
 800dc4c:	f003 021f 	and.w	r2, r3, #31
 800dc50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dc54:	f04f 0901 	mov.w	r9, #1
 800dc58:	fa09 f202 	lsl.w	r2, r9, r2
 800dc5c:	420a      	tst	r2, r1
 800dc5e:	d003      	beq.n	800dc68 <__gethex+0x1ac>
 800dc60:	454b      	cmp	r3, r9
 800dc62:	dc36      	bgt.n	800dcd2 <__gethex+0x216>
 800dc64:	f04f 0902 	mov.w	r9, #2
 800dc68:	4629      	mov	r1, r5
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f7ff febf 	bl	800d9ee <rshift>
 800dc70:	442f      	add	r7, r5
 800dc72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc76:	42bb      	cmp	r3, r7
 800dc78:	da42      	bge.n	800dd00 <__gethex+0x244>
 800dc7a:	9801      	ldr	r0, [sp, #4]
 800dc7c:	4621      	mov	r1, r4
 800dc7e:	f7fe f9b7 	bl	800bff0 <_Bfree>
 800dc82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc84:	2300      	movs	r3, #0
 800dc86:	6013      	str	r3, [r2, #0]
 800dc88:	25a3      	movs	r5, #163	@ 0xa3
 800dc8a:	e793      	b.n	800dbb4 <__gethex+0xf8>
 800dc8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dc90:	2a2e      	cmp	r2, #46	@ 0x2e
 800dc92:	d012      	beq.n	800dcba <__gethex+0x1fe>
 800dc94:	2b20      	cmp	r3, #32
 800dc96:	d104      	bne.n	800dca2 <__gethex+0x1e6>
 800dc98:	f845 bb04 	str.w	fp, [r5], #4
 800dc9c:	f04f 0b00 	mov.w	fp, #0
 800dca0:	465b      	mov	r3, fp
 800dca2:	7830      	ldrb	r0, [r6, #0]
 800dca4:	9303      	str	r3, [sp, #12]
 800dca6:	f7ff fef4 	bl	800da92 <__hexdig_fun>
 800dcaa:	9b03      	ldr	r3, [sp, #12]
 800dcac:	f000 000f 	and.w	r0, r0, #15
 800dcb0:	4098      	lsls	r0, r3
 800dcb2:	ea4b 0b00 	orr.w	fp, fp, r0
 800dcb6:	3304      	adds	r3, #4
 800dcb8:	e7ae      	b.n	800dc18 <__gethex+0x15c>
 800dcba:	45b1      	cmp	r9, r6
 800dcbc:	d8ea      	bhi.n	800dc94 <__gethex+0x1d8>
 800dcbe:	492b      	ldr	r1, [pc, #172]	@ (800dd6c <__gethex+0x2b0>)
 800dcc0:	9303      	str	r3, [sp, #12]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	4630      	mov	r0, r6
 800dcc6:	f7ff fe3d 	bl	800d944 <strncmp>
 800dcca:	9b03      	ldr	r3, [sp, #12]
 800dccc:	2800      	cmp	r0, #0
 800dcce:	d1e1      	bne.n	800dc94 <__gethex+0x1d8>
 800dcd0:	e7a2      	b.n	800dc18 <__gethex+0x15c>
 800dcd2:	1ea9      	subs	r1, r5, #2
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	f7fe fddc 	bl	800c892 <__any_on>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d0c2      	beq.n	800dc64 <__gethex+0x1a8>
 800dcde:	f04f 0903 	mov.w	r9, #3
 800dce2:	e7c1      	b.n	800dc68 <__gethex+0x1ac>
 800dce4:	da09      	bge.n	800dcfa <__gethex+0x23e>
 800dce6:	1b75      	subs	r5, r6, r5
 800dce8:	4621      	mov	r1, r4
 800dcea:	9801      	ldr	r0, [sp, #4]
 800dcec:	462a      	mov	r2, r5
 800dcee:	f7fe fb97 	bl	800c420 <__lshift>
 800dcf2:	1b7f      	subs	r7, r7, r5
 800dcf4:	4604      	mov	r4, r0
 800dcf6:	f100 0a14 	add.w	sl, r0, #20
 800dcfa:	f04f 0900 	mov.w	r9, #0
 800dcfe:	e7b8      	b.n	800dc72 <__gethex+0x1b6>
 800dd00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dd04:	42bd      	cmp	r5, r7
 800dd06:	dd6f      	ble.n	800dde8 <__gethex+0x32c>
 800dd08:	1bed      	subs	r5, r5, r7
 800dd0a:	42ae      	cmp	r6, r5
 800dd0c:	dc34      	bgt.n	800dd78 <__gethex+0x2bc>
 800dd0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd12:	2b02      	cmp	r3, #2
 800dd14:	d022      	beq.n	800dd5c <__gethex+0x2a0>
 800dd16:	2b03      	cmp	r3, #3
 800dd18:	d024      	beq.n	800dd64 <__gethex+0x2a8>
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d115      	bne.n	800dd4a <__gethex+0x28e>
 800dd1e:	42ae      	cmp	r6, r5
 800dd20:	d113      	bne.n	800dd4a <__gethex+0x28e>
 800dd22:	2e01      	cmp	r6, #1
 800dd24:	d10b      	bne.n	800dd3e <__gethex+0x282>
 800dd26:	9a02      	ldr	r2, [sp, #8]
 800dd28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dd2c:	6013      	str	r3, [r2, #0]
 800dd2e:	2301      	movs	r3, #1
 800dd30:	6123      	str	r3, [r4, #16]
 800dd32:	f8ca 3000 	str.w	r3, [sl]
 800dd36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd38:	2562      	movs	r5, #98	@ 0x62
 800dd3a:	601c      	str	r4, [r3, #0]
 800dd3c:	e73a      	b.n	800dbb4 <__gethex+0xf8>
 800dd3e:	1e71      	subs	r1, r6, #1
 800dd40:	4620      	mov	r0, r4
 800dd42:	f7fe fda6 	bl	800c892 <__any_on>
 800dd46:	2800      	cmp	r0, #0
 800dd48:	d1ed      	bne.n	800dd26 <__gethex+0x26a>
 800dd4a:	9801      	ldr	r0, [sp, #4]
 800dd4c:	4621      	mov	r1, r4
 800dd4e:	f7fe f94f 	bl	800bff0 <_Bfree>
 800dd52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd54:	2300      	movs	r3, #0
 800dd56:	6013      	str	r3, [r2, #0]
 800dd58:	2550      	movs	r5, #80	@ 0x50
 800dd5a:	e72b      	b.n	800dbb4 <__gethex+0xf8>
 800dd5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d1f3      	bne.n	800dd4a <__gethex+0x28e>
 800dd62:	e7e0      	b.n	800dd26 <__gethex+0x26a>
 800dd64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d1dd      	bne.n	800dd26 <__gethex+0x26a>
 800dd6a:	e7ee      	b.n	800dd4a <__gethex+0x28e>
 800dd6c:	0800eb30 	.word	0x0800eb30
 800dd70:	0800e9c8 	.word	0x0800e9c8
 800dd74:	0800eba1 	.word	0x0800eba1
 800dd78:	1e6f      	subs	r7, r5, #1
 800dd7a:	f1b9 0f00 	cmp.w	r9, #0
 800dd7e:	d130      	bne.n	800dde2 <__gethex+0x326>
 800dd80:	b127      	cbz	r7, 800dd8c <__gethex+0x2d0>
 800dd82:	4639      	mov	r1, r7
 800dd84:	4620      	mov	r0, r4
 800dd86:	f7fe fd84 	bl	800c892 <__any_on>
 800dd8a:	4681      	mov	r9, r0
 800dd8c:	117a      	asrs	r2, r7, #5
 800dd8e:	2301      	movs	r3, #1
 800dd90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dd94:	f007 071f 	and.w	r7, r7, #31
 800dd98:	40bb      	lsls	r3, r7
 800dd9a:	4213      	tst	r3, r2
 800dd9c:	4629      	mov	r1, r5
 800dd9e:	4620      	mov	r0, r4
 800dda0:	bf18      	it	ne
 800dda2:	f049 0902 	orrne.w	r9, r9, #2
 800dda6:	f7ff fe22 	bl	800d9ee <rshift>
 800ddaa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ddae:	1b76      	subs	r6, r6, r5
 800ddb0:	2502      	movs	r5, #2
 800ddb2:	f1b9 0f00 	cmp.w	r9, #0
 800ddb6:	d047      	beq.n	800de48 <__gethex+0x38c>
 800ddb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ddbc:	2b02      	cmp	r3, #2
 800ddbe:	d015      	beq.n	800ddec <__gethex+0x330>
 800ddc0:	2b03      	cmp	r3, #3
 800ddc2:	d017      	beq.n	800ddf4 <__gethex+0x338>
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d109      	bne.n	800dddc <__gethex+0x320>
 800ddc8:	f019 0f02 	tst.w	r9, #2
 800ddcc:	d006      	beq.n	800dddc <__gethex+0x320>
 800ddce:	f8da 3000 	ldr.w	r3, [sl]
 800ddd2:	ea49 0903 	orr.w	r9, r9, r3
 800ddd6:	f019 0f01 	tst.w	r9, #1
 800ddda:	d10e      	bne.n	800ddfa <__gethex+0x33e>
 800dddc:	f045 0510 	orr.w	r5, r5, #16
 800dde0:	e032      	b.n	800de48 <__gethex+0x38c>
 800dde2:	f04f 0901 	mov.w	r9, #1
 800dde6:	e7d1      	b.n	800dd8c <__gethex+0x2d0>
 800dde8:	2501      	movs	r5, #1
 800ddea:	e7e2      	b.n	800ddb2 <__gethex+0x2f6>
 800ddec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddee:	f1c3 0301 	rsb	r3, r3, #1
 800ddf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ddf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d0f0      	beq.n	800dddc <__gethex+0x320>
 800ddfa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ddfe:	f104 0314 	add.w	r3, r4, #20
 800de02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800de06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800de0a:	f04f 0c00 	mov.w	ip, #0
 800de0e:	4618      	mov	r0, r3
 800de10:	f853 2b04 	ldr.w	r2, [r3], #4
 800de14:	f1b2 3fff 	cmp.w	r2, #4294967295
 800de18:	d01b      	beq.n	800de52 <__gethex+0x396>
 800de1a:	3201      	adds	r2, #1
 800de1c:	6002      	str	r2, [r0, #0]
 800de1e:	2d02      	cmp	r5, #2
 800de20:	f104 0314 	add.w	r3, r4, #20
 800de24:	d13c      	bne.n	800dea0 <__gethex+0x3e4>
 800de26:	f8d8 2000 	ldr.w	r2, [r8]
 800de2a:	3a01      	subs	r2, #1
 800de2c:	42b2      	cmp	r2, r6
 800de2e:	d109      	bne.n	800de44 <__gethex+0x388>
 800de30:	1171      	asrs	r1, r6, #5
 800de32:	2201      	movs	r2, #1
 800de34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de38:	f006 061f 	and.w	r6, r6, #31
 800de3c:	fa02 f606 	lsl.w	r6, r2, r6
 800de40:	421e      	tst	r6, r3
 800de42:	d13a      	bne.n	800deba <__gethex+0x3fe>
 800de44:	f045 0520 	orr.w	r5, r5, #32
 800de48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de4a:	601c      	str	r4, [r3, #0]
 800de4c:	9b02      	ldr	r3, [sp, #8]
 800de4e:	601f      	str	r7, [r3, #0]
 800de50:	e6b0      	b.n	800dbb4 <__gethex+0xf8>
 800de52:	4299      	cmp	r1, r3
 800de54:	f843 cc04 	str.w	ip, [r3, #-4]
 800de58:	d8d9      	bhi.n	800de0e <__gethex+0x352>
 800de5a:	68a3      	ldr	r3, [r4, #8]
 800de5c:	459b      	cmp	fp, r3
 800de5e:	db17      	blt.n	800de90 <__gethex+0x3d4>
 800de60:	6861      	ldr	r1, [r4, #4]
 800de62:	9801      	ldr	r0, [sp, #4]
 800de64:	3101      	adds	r1, #1
 800de66:	f7fe f883 	bl	800bf70 <_Balloc>
 800de6a:	4681      	mov	r9, r0
 800de6c:	b918      	cbnz	r0, 800de76 <__gethex+0x3ba>
 800de6e:	4b1a      	ldr	r3, [pc, #104]	@ (800ded8 <__gethex+0x41c>)
 800de70:	4602      	mov	r2, r0
 800de72:	2184      	movs	r1, #132	@ 0x84
 800de74:	e6c5      	b.n	800dc02 <__gethex+0x146>
 800de76:	6922      	ldr	r2, [r4, #16]
 800de78:	3202      	adds	r2, #2
 800de7a:	f104 010c 	add.w	r1, r4, #12
 800de7e:	0092      	lsls	r2, r2, #2
 800de80:	300c      	adds	r0, #12
 800de82:	f7ff fd81 	bl	800d988 <memcpy>
 800de86:	4621      	mov	r1, r4
 800de88:	9801      	ldr	r0, [sp, #4]
 800de8a:	f7fe f8b1 	bl	800bff0 <_Bfree>
 800de8e:	464c      	mov	r4, r9
 800de90:	6923      	ldr	r3, [r4, #16]
 800de92:	1c5a      	adds	r2, r3, #1
 800de94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800de98:	6122      	str	r2, [r4, #16]
 800de9a:	2201      	movs	r2, #1
 800de9c:	615a      	str	r2, [r3, #20]
 800de9e:	e7be      	b.n	800de1e <__gethex+0x362>
 800dea0:	6922      	ldr	r2, [r4, #16]
 800dea2:	455a      	cmp	r2, fp
 800dea4:	dd0b      	ble.n	800debe <__gethex+0x402>
 800dea6:	2101      	movs	r1, #1
 800dea8:	4620      	mov	r0, r4
 800deaa:	f7ff fda0 	bl	800d9ee <rshift>
 800deae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800deb2:	3701      	adds	r7, #1
 800deb4:	42bb      	cmp	r3, r7
 800deb6:	f6ff aee0 	blt.w	800dc7a <__gethex+0x1be>
 800deba:	2501      	movs	r5, #1
 800debc:	e7c2      	b.n	800de44 <__gethex+0x388>
 800debe:	f016 061f 	ands.w	r6, r6, #31
 800dec2:	d0fa      	beq.n	800deba <__gethex+0x3fe>
 800dec4:	4453      	add	r3, sl
 800dec6:	f1c6 0620 	rsb	r6, r6, #32
 800deca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dece:	f7fe f941 	bl	800c154 <__hi0bits>
 800ded2:	42b0      	cmp	r0, r6
 800ded4:	dbe7      	blt.n	800dea6 <__gethex+0x3ea>
 800ded6:	e7f0      	b.n	800deba <__gethex+0x3fe>
 800ded8:	0800e9c8 	.word	0x0800e9c8

0800dedc <L_shift>:
 800dedc:	f1c2 0208 	rsb	r2, r2, #8
 800dee0:	0092      	lsls	r2, r2, #2
 800dee2:	b570      	push	{r4, r5, r6, lr}
 800dee4:	f1c2 0620 	rsb	r6, r2, #32
 800dee8:	6843      	ldr	r3, [r0, #4]
 800deea:	6804      	ldr	r4, [r0, #0]
 800deec:	fa03 f506 	lsl.w	r5, r3, r6
 800def0:	432c      	orrs	r4, r5
 800def2:	40d3      	lsrs	r3, r2
 800def4:	6004      	str	r4, [r0, #0]
 800def6:	f840 3f04 	str.w	r3, [r0, #4]!
 800defa:	4288      	cmp	r0, r1
 800defc:	d3f4      	bcc.n	800dee8 <L_shift+0xc>
 800defe:	bd70      	pop	{r4, r5, r6, pc}

0800df00 <__match>:
 800df00:	b530      	push	{r4, r5, lr}
 800df02:	6803      	ldr	r3, [r0, #0]
 800df04:	3301      	adds	r3, #1
 800df06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df0a:	b914      	cbnz	r4, 800df12 <__match+0x12>
 800df0c:	6003      	str	r3, [r0, #0]
 800df0e:	2001      	movs	r0, #1
 800df10:	bd30      	pop	{r4, r5, pc}
 800df12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800df1a:	2d19      	cmp	r5, #25
 800df1c:	bf98      	it	ls
 800df1e:	3220      	addls	r2, #32
 800df20:	42a2      	cmp	r2, r4
 800df22:	d0f0      	beq.n	800df06 <__match+0x6>
 800df24:	2000      	movs	r0, #0
 800df26:	e7f3      	b.n	800df10 <__match+0x10>

0800df28 <__hexnan>:
 800df28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df2c:	680b      	ldr	r3, [r1, #0]
 800df2e:	6801      	ldr	r1, [r0, #0]
 800df30:	115e      	asrs	r6, r3, #5
 800df32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800df36:	f013 031f 	ands.w	r3, r3, #31
 800df3a:	b087      	sub	sp, #28
 800df3c:	bf18      	it	ne
 800df3e:	3604      	addne	r6, #4
 800df40:	2500      	movs	r5, #0
 800df42:	1f37      	subs	r7, r6, #4
 800df44:	4682      	mov	sl, r0
 800df46:	4690      	mov	r8, r2
 800df48:	9301      	str	r3, [sp, #4]
 800df4a:	f846 5c04 	str.w	r5, [r6, #-4]
 800df4e:	46b9      	mov	r9, r7
 800df50:	463c      	mov	r4, r7
 800df52:	9502      	str	r5, [sp, #8]
 800df54:	46ab      	mov	fp, r5
 800df56:	784a      	ldrb	r2, [r1, #1]
 800df58:	1c4b      	adds	r3, r1, #1
 800df5a:	9303      	str	r3, [sp, #12]
 800df5c:	b342      	cbz	r2, 800dfb0 <__hexnan+0x88>
 800df5e:	4610      	mov	r0, r2
 800df60:	9105      	str	r1, [sp, #20]
 800df62:	9204      	str	r2, [sp, #16]
 800df64:	f7ff fd95 	bl	800da92 <__hexdig_fun>
 800df68:	2800      	cmp	r0, #0
 800df6a:	d151      	bne.n	800e010 <__hexnan+0xe8>
 800df6c:	9a04      	ldr	r2, [sp, #16]
 800df6e:	9905      	ldr	r1, [sp, #20]
 800df70:	2a20      	cmp	r2, #32
 800df72:	d818      	bhi.n	800dfa6 <__hexnan+0x7e>
 800df74:	9b02      	ldr	r3, [sp, #8]
 800df76:	459b      	cmp	fp, r3
 800df78:	dd13      	ble.n	800dfa2 <__hexnan+0x7a>
 800df7a:	454c      	cmp	r4, r9
 800df7c:	d206      	bcs.n	800df8c <__hexnan+0x64>
 800df7e:	2d07      	cmp	r5, #7
 800df80:	dc04      	bgt.n	800df8c <__hexnan+0x64>
 800df82:	462a      	mov	r2, r5
 800df84:	4649      	mov	r1, r9
 800df86:	4620      	mov	r0, r4
 800df88:	f7ff ffa8 	bl	800dedc <L_shift>
 800df8c:	4544      	cmp	r4, r8
 800df8e:	d952      	bls.n	800e036 <__hexnan+0x10e>
 800df90:	2300      	movs	r3, #0
 800df92:	f1a4 0904 	sub.w	r9, r4, #4
 800df96:	f844 3c04 	str.w	r3, [r4, #-4]
 800df9a:	f8cd b008 	str.w	fp, [sp, #8]
 800df9e:	464c      	mov	r4, r9
 800dfa0:	461d      	mov	r5, r3
 800dfa2:	9903      	ldr	r1, [sp, #12]
 800dfa4:	e7d7      	b.n	800df56 <__hexnan+0x2e>
 800dfa6:	2a29      	cmp	r2, #41	@ 0x29
 800dfa8:	d157      	bne.n	800e05a <__hexnan+0x132>
 800dfaa:	3102      	adds	r1, #2
 800dfac:	f8ca 1000 	str.w	r1, [sl]
 800dfb0:	f1bb 0f00 	cmp.w	fp, #0
 800dfb4:	d051      	beq.n	800e05a <__hexnan+0x132>
 800dfb6:	454c      	cmp	r4, r9
 800dfb8:	d206      	bcs.n	800dfc8 <__hexnan+0xa0>
 800dfba:	2d07      	cmp	r5, #7
 800dfbc:	dc04      	bgt.n	800dfc8 <__hexnan+0xa0>
 800dfbe:	462a      	mov	r2, r5
 800dfc0:	4649      	mov	r1, r9
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f7ff ff8a 	bl	800dedc <L_shift>
 800dfc8:	4544      	cmp	r4, r8
 800dfca:	d936      	bls.n	800e03a <__hexnan+0x112>
 800dfcc:	f1a8 0204 	sub.w	r2, r8, #4
 800dfd0:	4623      	mov	r3, r4
 800dfd2:	f853 1b04 	ldr.w	r1, [r3], #4
 800dfd6:	f842 1f04 	str.w	r1, [r2, #4]!
 800dfda:	429f      	cmp	r7, r3
 800dfdc:	d2f9      	bcs.n	800dfd2 <__hexnan+0xaa>
 800dfde:	1b3b      	subs	r3, r7, r4
 800dfe0:	f023 0303 	bic.w	r3, r3, #3
 800dfe4:	3304      	adds	r3, #4
 800dfe6:	3401      	adds	r4, #1
 800dfe8:	3e03      	subs	r6, #3
 800dfea:	42b4      	cmp	r4, r6
 800dfec:	bf88      	it	hi
 800dfee:	2304      	movhi	r3, #4
 800dff0:	4443      	add	r3, r8
 800dff2:	2200      	movs	r2, #0
 800dff4:	f843 2b04 	str.w	r2, [r3], #4
 800dff8:	429f      	cmp	r7, r3
 800dffa:	d2fb      	bcs.n	800dff4 <__hexnan+0xcc>
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	b91b      	cbnz	r3, 800e008 <__hexnan+0xe0>
 800e000:	4547      	cmp	r7, r8
 800e002:	d128      	bne.n	800e056 <__hexnan+0x12e>
 800e004:	2301      	movs	r3, #1
 800e006:	603b      	str	r3, [r7, #0]
 800e008:	2005      	movs	r0, #5
 800e00a:	b007      	add	sp, #28
 800e00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e010:	3501      	adds	r5, #1
 800e012:	2d08      	cmp	r5, #8
 800e014:	f10b 0b01 	add.w	fp, fp, #1
 800e018:	dd06      	ble.n	800e028 <__hexnan+0x100>
 800e01a:	4544      	cmp	r4, r8
 800e01c:	d9c1      	bls.n	800dfa2 <__hexnan+0x7a>
 800e01e:	2300      	movs	r3, #0
 800e020:	f844 3c04 	str.w	r3, [r4, #-4]
 800e024:	2501      	movs	r5, #1
 800e026:	3c04      	subs	r4, #4
 800e028:	6822      	ldr	r2, [r4, #0]
 800e02a:	f000 000f 	and.w	r0, r0, #15
 800e02e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e032:	6020      	str	r0, [r4, #0]
 800e034:	e7b5      	b.n	800dfa2 <__hexnan+0x7a>
 800e036:	2508      	movs	r5, #8
 800e038:	e7b3      	b.n	800dfa2 <__hexnan+0x7a>
 800e03a:	9b01      	ldr	r3, [sp, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d0dd      	beq.n	800dffc <__hexnan+0xd4>
 800e040:	f1c3 0320 	rsb	r3, r3, #32
 800e044:	f04f 32ff 	mov.w	r2, #4294967295
 800e048:	40da      	lsrs	r2, r3
 800e04a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e04e:	4013      	ands	r3, r2
 800e050:	f846 3c04 	str.w	r3, [r6, #-4]
 800e054:	e7d2      	b.n	800dffc <__hexnan+0xd4>
 800e056:	3f04      	subs	r7, #4
 800e058:	e7d0      	b.n	800dffc <__hexnan+0xd4>
 800e05a:	2004      	movs	r0, #4
 800e05c:	e7d5      	b.n	800e00a <__hexnan+0xe2>

0800e05e <__ascii_mbtowc>:
 800e05e:	b082      	sub	sp, #8
 800e060:	b901      	cbnz	r1, 800e064 <__ascii_mbtowc+0x6>
 800e062:	a901      	add	r1, sp, #4
 800e064:	b142      	cbz	r2, 800e078 <__ascii_mbtowc+0x1a>
 800e066:	b14b      	cbz	r3, 800e07c <__ascii_mbtowc+0x1e>
 800e068:	7813      	ldrb	r3, [r2, #0]
 800e06a:	600b      	str	r3, [r1, #0]
 800e06c:	7812      	ldrb	r2, [r2, #0]
 800e06e:	1e10      	subs	r0, r2, #0
 800e070:	bf18      	it	ne
 800e072:	2001      	movne	r0, #1
 800e074:	b002      	add	sp, #8
 800e076:	4770      	bx	lr
 800e078:	4610      	mov	r0, r2
 800e07a:	e7fb      	b.n	800e074 <__ascii_mbtowc+0x16>
 800e07c:	f06f 0001 	mvn.w	r0, #1
 800e080:	e7f8      	b.n	800e074 <__ascii_mbtowc+0x16>

0800e082 <_realloc_r>:
 800e082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e086:	4680      	mov	r8, r0
 800e088:	4615      	mov	r5, r2
 800e08a:	460c      	mov	r4, r1
 800e08c:	b921      	cbnz	r1, 800e098 <_realloc_r+0x16>
 800e08e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e092:	4611      	mov	r1, r2
 800e094:	f7fd bee0 	b.w	800be58 <_malloc_r>
 800e098:	b92a      	cbnz	r2, 800e0a6 <_realloc_r+0x24>
 800e09a:	f7fd fe69 	bl	800bd70 <_free_r>
 800e09e:	2400      	movs	r4, #0
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0a6:	f000 fa41 	bl	800e52c <_malloc_usable_size_r>
 800e0aa:	4285      	cmp	r5, r0
 800e0ac:	4606      	mov	r6, r0
 800e0ae:	d802      	bhi.n	800e0b6 <_realloc_r+0x34>
 800e0b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e0b4:	d8f4      	bhi.n	800e0a0 <_realloc_r+0x1e>
 800e0b6:	4629      	mov	r1, r5
 800e0b8:	4640      	mov	r0, r8
 800e0ba:	f7fd fecd 	bl	800be58 <_malloc_r>
 800e0be:	4607      	mov	r7, r0
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	d0ec      	beq.n	800e09e <_realloc_r+0x1c>
 800e0c4:	42b5      	cmp	r5, r6
 800e0c6:	462a      	mov	r2, r5
 800e0c8:	4621      	mov	r1, r4
 800e0ca:	bf28      	it	cs
 800e0cc:	4632      	movcs	r2, r6
 800e0ce:	f7ff fc5b 	bl	800d988 <memcpy>
 800e0d2:	4621      	mov	r1, r4
 800e0d4:	4640      	mov	r0, r8
 800e0d6:	f7fd fe4b 	bl	800bd70 <_free_r>
 800e0da:	463c      	mov	r4, r7
 800e0dc:	e7e0      	b.n	800e0a0 <_realloc_r+0x1e>

0800e0de <__ascii_wctomb>:
 800e0de:	4603      	mov	r3, r0
 800e0e0:	4608      	mov	r0, r1
 800e0e2:	b141      	cbz	r1, 800e0f6 <__ascii_wctomb+0x18>
 800e0e4:	2aff      	cmp	r2, #255	@ 0xff
 800e0e6:	d904      	bls.n	800e0f2 <__ascii_wctomb+0x14>
 800e0e8:	228a      	movs	r2, #138	@ 0x8a
 800e0ea:	601a      	str	r2, [r3, #0]
 800e0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e0f0:	4770      	bx	lr
 800e0f2:	700a      	strb	r2, [r1, #0]
 800e0f4:	2001      	movs	r0, #1
 800e0f6:	4770      	bx	lr

0800e0f8 <__sfputc_r>:
 800e0f8:	6893      	ldr	r3, [r2, #8]
 800e0fa:	3b01      	subs	r3, #1
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	b410      	push	{r4}
 800e100:	6093      	str	r3, [r2, #8]
 800e102:	da08      	bge.n	800e116 <__sfputc_r+0x1e>
 800e104:	6994      	ldr	r4, [r2, #24]
 800e106:	42a3      	cmp	r3, r4
 800e108:	db01      	blt.n	800e10e <__sfputc_r+0x16>
 800e10a:	290a      	cmp	r1, #10
 800e10c:	d103      	bne.n	800e116 <__sfputc_r+0x1e>
 800e10e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e112:	f000 b933 	b.w	800e37c <__swbuf_r>
 800e116:	6813      	ldr	r3, [r2, #0]
 800e118:	1c58      	adds	r0, r3, #1
 800e11a:	6010      	str	r0, [r2, #0]
 800e11c:	7019      	strb	r1, [r3, #0]
 800e11e:	4608      	mov	r0, r1
 800e120:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e124:	4770      	bx	lr

0800e126 <__sfputs_r>:
 800e126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e128:	4606      	mov	r6, r0
 800e12a:	460f      	mov	r7, r1
 800e12c:	4614      	mov	r4, r2
 800e12e:	18d5      	adds	r5, r2, r3
 800e130:	42ac      	cmp	r4, r5
 800e132:	d101      	bne.n	800e138 <__sfputs_r+0x12>
 800e134:	2000      	movs	r0, #0
 800e136:	e007      	b.n	800e148 <__sfputs_r+0x22>
 800e138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e13c:	463a      	mov	r2, r7
 800e13e:	4630      	mov	r0, r6
 800e140:	f7ff ffda 	bl	800e0f8 <__sfputc_r>
 800e144:	1c43      	adds	r3, r0, #1
 800e146:	d1f3      	bne.n	800e130 <__sfputs_r+0xa>
 800e148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e14c <_vfiprintf_r>:
 800e14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e150:	460d      	mov	r5, r1
 800e152:	b09d      	sub	sp, #116	@ 0x74
 800e154:	4614      	mov	r4, r2
 800e156:	4698      	mov	r8, r3
 800e158:	4606      	mov	r6, r0
 800e15a:	b118      	cbz	r0, 800e164 <_vfiprintf_r+0x18>
 800e15c:	6a03      	ldr	r3, [r0, #32]
 800e15e:	b90b      	cbnz	r3, 800e164 <_vfiprintf_r+0x18>
 800e160:	f7fc fdea 	bl	800ad38 <__sinit>
 800e164:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e166:	07d9      	lsls	r1, r3, #31
 800e168:	d405      	bmi.n	800e176 <_vfiprintf_r+0x2a>
 800e16a:	89ab      	ldrh	r3, [r5, #12]
 800e16c:	059a      	lsls	r2, r3, #22
 800e16e:	d402      	bmi.n	800e176 <_vfiprintf_r+0x2a>
 800e170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e172:	f7fc ff88 	bl	800b086 <__retarget_lock_acquire_recursive>
 800e176:	89ab      	ldrh	r3, [r5, #12]
 800e178:	071b      	lsls	r3, r3, #28
 800e17a:	d501      	bpl.n	800e180 <_vfiprintf_r+0x34>
 800e17c:	692b      	ldr	r3, [r5, #16]
 800e17e:	b99b      	cbnz	r3, 800e1a8 <_vfiprintf_r+0x5c>
 800e180:	4629      	mov	r1, r5
 800e182:	4630      	mov	r0, r6
 800e184:	f000 f938 	bl	800e3f8 <__swsetup_r>
 800e188:	b170      	cbz	r0, 800e1a8 <_vfiprintf_r+0x5c>
 800e18a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e18c:	07dc      	lsls	r4, r3, #31
 800e18e:	d504      	bpl.n	800e19a <_vfiprintf_r+0x4e>
 800e190:	f04f 30ff 	mov.w	r0, #4294967295
 800e194:	b01d      	add	sp, #116	@ 0x74
 800e196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19a:	89ab      	ldrh	r3, [r5, #12]
 800e19c:	0598      	lsls	r0, r3, #22
 800e19e:	d4f7      	bmi.n	800e190 <_vfiprintf_r+0x44>
 800e1a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1a2:	f7fc ff71 	bl	800b088 <__retarget_lock_release_recursive>
 800e1a6:	e7f3      	b.n	800e190 <_vfiprintf_r+0x44>
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1ac:	2320      	movs	r3, #32
 800e1ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e1b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1b6:	2330      	movs	r3, #48	@ 0x30
 800e1b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e368 <_vfiprintf_r+0x21c>
 800e1bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e1c0:	f04f 0901 	mov.w	r9, #1
 800e1c4:	4623      	mov	r3, r4
 800e1c6:	469a      	mov	sl, r3
 800e1c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1cc:	b10a      	cbz	r2, 800e1d2 <_vfiprintf_r+0x86>
 800e1ce:	2a25      	cmp	r2, #37	@ 0x25
 800e1d0:	d1f9      	bne.n	800e1c6 <_vfiprintf_r+0x7a>
 800e1d2:	ebba 0b04 	subs.w	fp, sl, r4
 800e1d6:	d00b      	beq.n	800e1f0 <_vfiprintf_r+0xa4>
 800e1d8:	465b      	mov	r3, fp
 800e1da:	4622      	mov	r2, r4
 800e1dc:	4629      	mov	r1, r5
 800e1de:	4630      	mov	r0, r6
 800e1e0:	f7ff ffa1 	bl	800e126 <__sfputs_r>
 800e1e4:	3001      	adds	r0, #1
 800e1e6:	f000 80a7 	beq.w	800e338 <_vfiprintf_r+0x1ec>
 800e1ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1ec:	445a      	add	r2, fp
 800e1ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1f0:	f89a 3000 	ldrb.w	r3, [sl]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	f000 809f 	beq.w	800e338 <_vfiprintf_r+0x1ec>
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	f04f 32ff 	mov.w	r2, #4294967295
 800e200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e204:	f10a 0a01 	add.w	sl, sl, #1
 800e208:	9304      	str	r3, [sp, #16]
 800e20a:	9307      	str	r3, [sp, #28]
 800e20c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e210:	931a      	str	r3, [sp, #104]	@ 0x68
 800e212:	4654      	mov	r4, sl
 800e214:	2205      	movs	r2, #5
 800e216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e21a:	4853      	ldr	r0, [pc, #332]	@ (800e368 <_vfiprintf_r+0x21c>)
 800e21c:	f7f2 f810 	bl	8000240 <memchr>
 800e220:	9a04      	ldr	r2, [sp, #16]
 800e222:	b9d8      	cbnz	r0, 800e25c <_vfiprintf_r+0x110>
 800e224:	06d1      	lsls	r1, r2, #27
 800e226:	bf44      	itt	mi
 800e228:	2320      	movmi	r3, #32
 800e22a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e22e:	0713      	lsls	r3, r2, #28
 800e230:	bf44      	itt	mi
 800e232:	232b      	movmi	r3, #43	@ 0x2b
 800e234:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e238:	f89a 3000 	ldrb.w	r3, [sl]
 800e23c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e23e:	d015      	beq.n	800e26c <_vfiprintf_r+0x120>
 800e240:	9a07      	ldr	r2, [sp, #28]
 800e242:	4654      	mov	r4, sl
 800e244:	2000      	movs	r0, #0
 800e246:	f04f 0c0a 	mov.w	ip, #10
 800e24a:	4621      	mov	r1, r4
 800e24c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e250:	3b30      	subs	r3, #48	@ 0x30
 800e252:	2b09      	cmp	r3, #9
 800e254:	d94b      	bls.n	800e2ee <_vfiprintf_r+0x1a2>
 800e256:	b1b0      	cbz	r0, 800e286 <_vfiprintf_r+0x13a>
 800e258:	9207      	str	r2, [sp, #28]
 800e25a:	e014      	b.n	800e286 <_vfiprintf_r+0x13a>
 800e25c:	eba0 0308 	sub.w	r3, r0, r8
 800e260:	fa09 f303 	lsl.w	r3, r9, r3
 800e264:	4313      	orrs	r3, r2
 800e266:	9304      	str	r3, [sp, #16]
 800e268:	46a2      	mov	sl, r4
 800e26a:	e7d2      	b.n	800e212 <_vfiprintf_r+0xc6>
 800e26c:	9b03      	ldr	r3, [sp, #12]
 800e26e:	1d19      	adds	r1, r3, #4
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	9103      	str	r1, [sp, #12]
 800e274:	2b00      	cmp	r3, #0
 800e276:	bfbb      	ittet	lt
 800e278:	425b      	neglt	r3, r3
 800e27a:	f042 0202 	orrlt.w	r2, r2, #2
 800e27e:	9307      	strge	r3, [sp, #28]
 800e280:	9307      	strlt	r3, [sp, #28]
 800e282:	bfb8      	it	lt
 800e284:	9204      	strlt	r2, [sp, #16]
 800e286:	7823      	ldrb	r3, [r4, #0]
 800e288:	2b2e      	cmp	r3, #46	@ 0x2e
 800e28a:	d10a      	bne.n	800e2a2 <_vfiprintf_r+0x156>
 800e28c:	7863      	ldrb	r3, [r4, #1]
 800e28e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e290:	d132      	bne.n	800e2f8 <_vfiprintf_r+0x1ac>
 800e292:	9b03      	ldr	r3, [sp, #12]
 800e294:	1d1a      	adds	r2, r3, #4
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	9203      	str	r2, [sp, #12]
 800e29a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e29e:	3402      	adds	r4, #2
 800e2a0:	9305      	str	r3, [sp, #20]
 800e2a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e378 <_vfiprintf_r+0x22c>
 800e2a6:	7821      	ldrb	r1, [r4, #0]
 800e2a8:	2203      	movs	r2, #3
 800e2aa:	4650      	mov	r0, sl
 800e2ac:	f7f1 ffc8 	bl	8000240 <memchr>
 800e2b0:	b138      	cbz	r0, 800e2c2 <_vfiprintf_r+0x176>
 800e2b2:	9b04      	ldr	r3, [sp, #16]
 800e2b4:	eba0 000a 	sub.w	r0, r0, sl
 800e2b8:	2240      	movs	r2, #64	@ 0x40
 800e2ba:	4082      	lsls	r2, r0
 800e2bc:	4313      	orrs	r3, r2
 800e2be:	3401      	adds	r4, #1
 800e2c0:	9304      	str	r3, [sp, #16]
 800e2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2c6:	4829      	ldr	r0, [pc, #164]	@ (800e36c <_vfiprintf_r+0x220>)
 800e2c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e2cc:	2206      	movs	r2, #6
 800e2ce:	f7f1 ffb7 	bl	8000240 <memchr>
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	d03f      	beq.n	800e356 <_vfiprintf_r+0x20a>
 800e2d6:	4b26      	ldr	r3, [pc, #152]	@ (800e370 <_vfiprintf_r+0x224>)
 800e2d8:	bb1b      	cbnz	r3, 800e322 <_vfiprintf_r+0x1d6>
 800e2da:	9b03      	ldr	r3, [sp, #12]
 800e2dc:	3307      	adds	r3, #7
 800e2de:	f023 0307 	bic.w	r3, r3, #7
 800e2e2:	3308      	adds	r3, #8
 800e2e4:	9303      	str	r3, [sp, #12]
 800e2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2e8:	443b      	add	r3, r7
 800e2ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2ec:	e76a      	b.n	800e1c4 <_vfiprintf_r+0x78>
 800e2ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2f2:	460c      	mov	r4, r1
 800e2f4:	2001      	movs	r0, #1
 800e2f6:	e7a8      	b.n	800e24a <_vfiprintf_r+0xfe>
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	3401      	adds	r4, #1
 800e2fc:	9305      	str	r3, [sp, #20]
 800e2fe:	4619      	mov	r1, r3
 800e300:	f04f 0c0a 	mov.w	ip, #10
 800e304:	4620      	mov	r0, r4
 800e306:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e30a:	3a30      	subs	r2, #48	@ 0x30
 800e30c:	2a09      	cmp	r2, #9
 800e30e:	d903      	bls.n	800e318 <_vfiprintf_r+0x1cc>
 800e310:	2b00      	cmp	r3, #0
 800e312:	d0c6      	beq.n	800e2a2 <_vfiprintf_r+0x156>
 800e314:	9105      	str	r1, [sp, #20]
 800e316:	e7c4      	b.n	800e2a2 <_vfiprintf_r+0x156>
 800e318:	fb0c 2101 	mla	r1, ip, r1, r2
 800e31c:	4604      	mov	r4, r0
 800e31e:	2301      	movs	r3, #1
 800e320:	e7f0      	b.n	800e304 <_vfiprintf_r+0x1b8>
 800e322:	ab03      	add	r3, sp, #12
 800e324:	9300      	str	r3, [sp, #0]
 800e326:	462a      	mov	r2, r5
 800e328:	4b12      	ldr	r3, [pc, #72]	@ (800e374 <_vfiprintf_r+0x228>)
 800e32a:	a904      	add	r1, sp, #16
 800e32c:	4630      	mov	r0, r6
 800e32e:	f7fb feab 	bl	800a088 <_printf_float>
 800e332:	4607      	mov	r7, r0
 800e334:	1c78      	adds	r0, r7, #1
 800e336:	d1d6      	bne.n	800e2e6 <_vfiprintf_r+0x19a>
 800e338:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e33a:	07d9      	lsls	r1, r3, #31
 800e33c:	d405      	bmi.n	800e34a <_vfiprintf_r+0x1fe>
 800e33e:	89ab      	ldrh	r3, [r5, #12]
 800e340:	059a      	lsls	r2, r3, #22
 800e342:	d402      	bmi.n	800e34a <_vfiprintf_r+0x1fe>
 800e344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e346:	f7fc fe9f 	bl	800b088 <__retarget_lock_release_recursive>
 800e34a:	89ab      	ldrh	r3, [r5, #12]
 800e34c:	065b      	lsls	r3, r3, #25
 800e34e:	f53f af1f 	bmi.w	800e190 <_vfiprintf_r+0x44>
 800e352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e354:	e71e      	b.n	800e194 <_vfiprintf_r+0x48>
 800e356:	ab03      	add	r3, sp, #12
 800e358:	9300      	str	r3, [sp, #0]
 800e35a:	462a      	mov	r2, r5
 800e35c:	4b05      	ldr	r3, [pc, #20]	@ (800e374 <_vfiprintf_r+0x228>)
 800e35e:	a904      	add	r1, sp, #16
 800e360:	4630      	mov	r0, r6
 800e362:	f7fc f929 	bl	800a5b8 <_printf_i>
 800e366:	e7e4      	b.n	800e332 <_vfiprintf_r+0x1e6>
 800e368:	0800eb88 	.word	0x0800eb88
 800e36c:	0800eb92 	.word	0x0800eb92
 800e370:	0800a089 	.word	0x0800a089
 800e374:	0800e127 	.word	0x0800e127
 800e378:	0800eb8e 	.word	0x0800eb8e

0800e37c <__swbuf_r>:
 800e37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37e:	460e      	mov	r6, r1
 800e380:	4614      	mov	r4, r2
 800e382:	4605      	mov	r5, r0
 800e384:	b118      	cbz	r0, 800e38e <__swbuf_r+0x12>
 800e386:	6a03      	ldr	r3, [r0, #32]
 800e388:	b90b      	cbnz	r3, 800e38e <__swbuf_r+0x12>
 800e38a:	f7fc fcd5 	bl	800ad38 <__sinit>
 800e38e:	69a3      	ldr	r3, [r4, #24]
 800e390:	60a3      	str	r3, [r4, #8]
 800e392:	89a3      	ldrh	r3, [r4, #12]
 800e394:	071a      	lsls	r2, r3, #28
 800e396:	d501      	bpl.n	800e39c <__swbuf_r+0x20>
 800e398:	6923      	ldr	r3, [r4, #16]
 800e39a:	b943      	cbnz	r3, 800e3ae <__swbuf_r+0x32>
 800e39c:	4621      	mov	r1, r4
 800e39e:	4628      	mov	r0, r5
 800e3a0:	f000 f82a 	bl	800e3f8 <__swsetup_r>
 800e3a4:	b118      	cbz	r0, 800e3ae <__swbuf_r+0x32>
 800e3a6:	f04f 37ff 	mov.w	r7, #4294967295
 800e3aa:	4638      	mov	r0, r7
 800e3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3ae:	6823      	ldr	r3, [r4, #0]
 800e3b0:	6922      	ldr	r2, [r4, #16]
 800e3b2:	1a98      	subs	r0, r3, r2
 800e3b4:	6963      	ldr	r3, [r4, #20]
 800e3b6:	b2f6      	uxtb	r6, r6
 800e3b8:	4283      	cmp	r3, r0
 800e3ba:	4637      	mov	r7, r6
 800e3bc:	dc05      	bgt.n	800e3ca <__swbuf_r+0x4e>
 800e3be:	4621      	mov	r1, r4
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	f7ff fa6b 	bl	800d89c <_fflush_r>
 800e3c6:	2800      	cmp	r0, #0
 800e3c8:	d1ed      	bne.n	800e3a6 <__swbuf_r+0x2a>
 800e3ca:	68a3      	ldr	r3, [r4, #8]
 800e3cc:	3b01      	subs	r3, #1
 800e3ce:	60a3      	str	r3, [r4, #8]
 800e3d0:	6823      	ldr	r3, [r4, #0]
 800e3d2:	1c5a      	adds	r2, r3, #1
 800e3d4:	6022      	str	r2, [r4, #0]
 800e3d6:	701e      	strb	r6, [r3, #0]
 800e3d8:	6962      	ldr	r2, [r4, #20]
 800e3da:	1c43      	adds	r3, r0, #1
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d004      	beq.n	800e3ea <__swbuf_r+0x6e>
 800e3e0:	89a3      	ldrh	r3, [r4, #12]
 800e3e2:	07db      	lsls	r3, r3, #31
 800e3e4:	d5e1      	bpl.n	800e3aa <__swbuf_r+0x2e>
 800e3e6:	2e0a      	cmp	r6, #10
 800e3e8:	d1df      	bne.n	800e3aa <__swbuf_r+0x2e>
 800e3ea:	4621      	mov	r1, r4
 800e3ec:	4628      	mov	r0, r5
 800e3ee:	f7ff fa55 	bl	800d89c <_fflush_r>
 800e3f2:	2800      	cmp	r0, #0
 800e3f4:	d0d9      	beq.n	800e3aa <__swbuf_r+0x2e>
 800e3f6:	e7d6      	b.n	800e3a6 <__swbuf_r+0x2a>

0800e3f8 <__swsetup_r>:
 800e3f8:	b538      	push	{r3, r4, r5, lr}
 800e3fa:	4b29      	ldr	r3, [pc, #164]	@ (800e4a0 <__swsetup_r+0xa8>)
 800e3fc:	4605      	mov	r5, r0
 800e3fe:	6818      	ldr	r0, [r3, #0]
 800e400:	460c      	mov	r4, r1
 800e402:	b118      	cbz	r0, 800e40c <__swsetup_r+0x14>
 800e404:	6a03      	ldr	r3, [r0, #32]
 800e406:	b90b      	cbnz	r3, 800e40c <__swsetup_r+0x14>
 800e408:	f7fc fc96 	bl	800ad38 <__sinit>
 800e40c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e410:	0719      	lsls	r1, r3, #28
 800e412:	d422      	bmi.n	800e45a <__swsetup_r+0x62>
 800e414:	06da      	lsls	r2, r3, #27
 800e416:	d407      	bmi.n	800e428 <__swsetup_r+0x30>
 800e418:	2209      	movs	r2, #9
 800e41a:	602a      	str	r2, [r5, #0]
 800e41c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e420:	81a3      	strh	r3, [r4, #12]
 800e422:	f04f 30ff 	mov.w	r0, #4294967295
 800e426:	e033      	b.n	800e490 <__swsetup_r+0x98>
 800e428:	0758      	lsls	r0, r3, #29
 800e42a:	d512      	bpl.n	800e452 <__swsetup_r+0x5a>
 800e42c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e42e:	b141      	cbz	r1, 800e442 <__swsetup_r+0x4a>
 800e430:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e434:	4299      	cmp	r1, r3
 800e436:	d002      	beq.n	800e43e <__swsetup_r+0x46>
 800e438:	4628      	mov	r0, r5
 800e43a:	f7fd fc99 	bl	800bd70 <_free_r>
 800e43e:	2300      	movs	r3, #0
 800e440:	6363      	str	r3, [r4, #52]	@ 0x34
 800e442:	89a3      	ldrh	r3, [r4, #12]
 800e444:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e448:	81a3      	strh	r3, [r4, #12]
 800e44a:	2300      	movs	r3, #0
 800e44c:	6063      	str	r3, [r4, #4]
 800e44e:	6923      	ldr	r3, [r4, #16]
 800e450:	6023      	str	r3, [r4, #0]
 800e452:	89a3      	ldrh	r3, [r4, #12]
 800e454:	f043 0308 	orr.w	r3, r3, #8
 800e458:	81a3      	strh	r3, [r4, #12]
 800e45a:	6923      	ldr	r3, [r4, #16]
 800e45c:	b94b      	cbnz	r3, 800e472 <__swsetup_r+0x7a>
 800e45e:	89a3      	ldrh	r3, [r4, #12]
 800e460:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e468:	d003      	beq.n	800e472 <__swsetup_r+0x7a>
 800e46a:	4621      	mov	r1, r4
 800e46c:	4628      	mov	r0, r5
 800e46e:	f000 f88b 	bl	800e588 <__smakebuf_r>
 800e472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e476:	f013 0201 	ands.w	r2, r3, #1
 800e47a:	d00a      	beq.n	800e492 <__swsetup_r+0x9a>
 800e47c:	2200      	movs	r2, #0
 800e47e:	60a2      	str	r2, [r4, #8]
 800e480:	6962      	ldr	r2, [r4, #20]
 800e482:	4252      	negs	r2, r2
 800e484:	61a2      	str	r2, [r4, #24]
 800e486:	6922      	ldr	r2, [r4, #16]
 800e488:	b942      	cbnz	r2, 800e49c <__swsetup_r+0xa4>
 800e48a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e48e:	d1c5      	bne.n	800e41c <__swsetup_r+0x24>
 800e490:	bd38      	pop	{r3, r4, r5, pc}
 800e492:	0799      	lsls	r1, r3, #30
 800e494:	bf58      	it	pl
 800e496:	6962      	ldrpl	r2, [r4, #20]
 800e498:	60a2      	str	r2, [r4, #8]
 800e49a:	e7f4      	b.n	800e486 <__swsetup_r+0x8e>
 800e49c:	2000      	movs	r0, #0
 800e49e:	e7f7      	b.n	800e490 <__swsetup_r+0x98>
 800e4a0:	200000fc 	.word	0x200000fc

0800e4a4 <_raise_r>:
 800e4a4:	291f      	cmp	r1, #31
 800e4a6:	b538      	push	{r3, r4, r5, lr}
 800e4a8:	4605      	mov	r5, r0
 800e4aa:	460c      	mov	r4, r1
 800e4ac:	d904      	bls.n	800e4b8 <_raise_r+0x14>
 800e4ae:	2316      	movs	r3, #22
 800e4b0:	6003      	str	r3, [r0, #0]
 800e4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e4b6:	bd38      	pop	{r3, r4, r5, pc}
 800e4b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e4ba:	b112      	cbz	r2, 800e4c2 <_raise_r+0x1e>
 800e4bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4c0:	b94b      	cbnz	r3, 800e4d6 <_raise_r+0x32>
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	f000 f830 	bl	800e528 <_getpid_r>
 800e4c8:	4622      	mov	r2, r4
 800e4ca:	4601      	mov	r1, r0
 800e4cc:	4628      	mov	r0, r5
 800e4ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4d2:	f000 b817 	b.w	800e504 <_kill_r>
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d00a      	beq.n	800e4f0 <_raise_r+0x4c>
 800e4da:	1c59      	adds	r1, r3, #1
 800e4dc:	d103      	bne.n	800e4e6 <_raise_r+0x42>
 800e4de:	2316      	movs	r3, #22
 800e4e0:	6003      	str	r3, [r0, #0]
 800e4e2:	2001      	movs	r0, #1
 800e4e4:	e7e7      	b.n	800e4b6 <_raise_r+0x12>
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	4798      	blx	r3
 800e4f0:	2000      	movs	r0, #0
 800e4f2:	e7e0      	b.n	800e4b6 <_raise_r+0x12>

0800e4f4 <raise>:
 800e4f4:	4b02      	ldr	r3, [pc, #8]	@ (800e500 <raise+0xc>)
 800e4f6:	4601      	mov	r1, r0
 800e4f8:	6818      	ldr	r0, [r3, #0]
 800e4fa:	f7ff bfd3 	b.w	800e4a4 <_raise_r>
 800e4fe:	bf00      	nop
 800e500:	200000fc 	.word	0x200000fc

0800e504 <_kill_r>:
 800e504:	b538      	push	{r3, r4, r5, lr}
 800e506:	4d07      	ldr	r5, [pc, #28]	@ (800e524 <_kill_r+0x20>)
 800e508:	2300      	movs	r3, #0
 800e50a:	4604      	mov	r4, r0
 800e50c:	4608      	mov	r0, r1
 800e50e:	4611      	mov	r1, r2
 800e510:	602b      	str	r3, [r5, #0]
 800e512:	f7f3 f9f3 	bl	80018fc <_kill>
 800e516:	1c43      	adds	r3, r0, #1
 800e518:	d102      	bne.n	800e520 <_kill_r+0x1c>
 800e51a:	682b      	ldr	r3, [r5, #0]
 800e51c:	b103      	cbz	r3, 800e520 <_kill_r+0x1c>
 800e51e:	6023      	str	r3, [r4, #0]
 800e520:	bd38      	pop	{r3, r4, r5, pc}
 800e522:	bf00      	nop
 800e524:	20000818 	.word	0x20000818

0800e528 <_getpid_r>:
 800e528:	f7f3 b9e0 	b.w	80018ec <_getpid>

0800e52c <_malloc_usable_size_r>:
 800e52c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e530:	1f18      	subs	r0, r3, #4
 800e532:	2b00      	cmp	r3, #0
 800e534:	bfbc      	itt	lt
 800e536:	580b      	ldrlt	r3, [r1, r0]
 800e538:	18c0      	addlt	r0, r0, r3
 800e53a:	4770      	bx	lr

0800e53c <__swhatbuf_r>:
 800e53c:	b570      	push	{r4, r5, r6, lr}
 800e53e:	460c      	mov	r4, r1
 800e540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e544:	2900      	cmp	r1, #0
 800e546:	b096      	sub	sp, #88	@ 0x58
 800e548:	4615      	mov	r5, r2
 800e54a:	461e      	mov	r6, r3
 800e54c:	da0d      	bge.n	800e56a <__swhatbuf_r+0x2e>
 800e54e:	89a3      	ldrh	r3, [r4, #12]
 800e550:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e554:	f04f 0100 	mov.w	r1, #0
 800e558:	bf14      	ite	ne
 800e55a:	2340      	movne	r3, #64	@ 0x40
 800e55c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e560:	2000      	movs	r0, #0
 800e562:	6031      	str	r1, [r6, #0]
 800e564:	602b      	str	r3, [r5, #0]
 800e566:	b016      	add	sp, #88	@ 0x58
 800e568:	bd70      	pop	{r4, r5, r6, pc}
 800e56a:	466a      	mov	r2, sp
 800e56c:	f000 f848 	bl	800e600 <_fstat_r>
 800e570:	2800      	cmp	r0, #0
 800e572:	dbec      	blt.n	800e54e <__swhatbuf_r+0x12>
 800e574:	9901      	ldr	r1, [sp, #4]
 800e576:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e57a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e57e:	4259      	negs	r1, r3
 800e580:	4159      	adcs	r1, r3
 800e582:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e586:	e7eb      	b.n	800e560 <__swhatbuf_r+0x24>

0800e588 <__smakebuf_r>:
 800e588:	898b      	ldrh	r3, [r1, #12]
 800e58a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e58c:	079d      	lsls	r5, r3, #30
 800e58e:	4606      	mov	r6, r0
 800e590:	460c      	mov	r4, r1
 800e592:	d507      	bpl.n	800e5a4 <__smakebuf_r+0x1c>
 800e594:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e598:	6023      	str	r3, [r4, #0]
 800e59a:	6123      	str	r3, [r4, #16]
 800e59c:	2301      	movs	r3, #1
 800e59e:	6163      	str	r3, [r4, #20]
 800e5a0:	b003      	add	sp, #12
 800e5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5a4:	ab01      	add	r3, sp, #4
 800e5a6:	466a      	mov	r2, sp
 800e5a8:	f7ff ffc8 	bl	800e53c <__swhatbuf_r>
 800e5ac:	9f00      	ldr	r7, [sp, #0]
 800e5ae:	4605      	mov	r5, r0
 800e5b0:	4639      	mov	r1, r7
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	f7fd fc50 	bl	800be58 <_malloc_r>
 800e5b8:	b948      	cbnz	r0, 800e5ce <__smakebuf_r+0x46>
 800e5ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5be:	059a      	lsls	r2, r3, #22
 800e5c0:	d4ee      	bmi.n	800e5a0 <__smakebuf_r+0x18>
 800e5c2:	f023 0303 	bic.w	r3, r3, #3
 800e5c6:	f043 0302 	orr.w	r3, r3, #2
 800e5ca:	81a3      	strh	r3, [r4, #12]
 800e5cc:	e7e2      	b.n	800e594 <__smakebuf_r+0xc>
 800e5ce:	89a3      	ldrh	r3, [r4, #12]
 800e5d0:	6020      	str	r0, [r4, #0]
 800e5d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5d6:	81a3      	strh	r3, [r4, #12]
 800e5d8:	9b01      	ldr	r3, [sp, #4]
 800e5da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e5de:	b15b      	cbz	r3, 800e5f8 <__smakebuf_r+0x70>
 800e5e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5e4:	4630      	mov	r0, r6
 800e5e6:	f000 f81d 	bl	800e624 <_isatty_r>
 800e5ea:	b128      	cbz	r0, 800e5f8 <__smakebuf_r+0x70>
 800e5ec:	89a3      	ldrh	r3, [r4, #12]
 800e5ee:	f023 0303 	bic.w	r3, r3, #3
 800e5f2:	f043 0301 	orr.w	r3, r3, #1
 800e5f6:	81a3      	strh	r3, [r4, #12]
 800e5f8:	89a3      	ldrh	r3, [r4, #12]
 800e5fa:	431d      	orrs	r5, r3
 800e5fc:	81a5      	strh	r5, [r4, #12]
 800e5fe:	e7cf      	b.n	800e5a0 <__smakebuf_r+0x18>

0800e600 <_fstat_r>:
 800e600:	b538      	push	{r3, r4, r5, lr}
 800e602:	4d07      	ldr	r5, [pc, #28]	@ (800e620 <_fstat_r+0x20>)
 800e604:	2300      	movs	r3, #0
 800e606:	4604      	mov	r4, r0
 800e608:	4608      	mov	r0, r1
 800e60a:	4611      	mov	r1, r2
 800e60c:	602b      	str	r3, [r5, #0]
 800e60e:	f7f3 f9d5 	bl	80019bc <_fstat>
 800e612:	1c43      	adds	r3, r0, #1
 800e614:	d102      	bne.n	800e61c <_fstat_r+0x1c>
 800e616:	682b      	ldr	r3, [r5, #0]
 800e618:	b103      	cbz	r3, 800e61c <_fstat_r+0x1c>
 800e61a:	6023      	str	r3, [r4, #0]
 800e61c:	bd38      	pop	{r3, r4, r5, pc}
 800e61e:	bf00      	nop
 800e620:	20000818 	.word	0x20000818

0800e624 <_isatty_r>:
 800e624:	b538      	push	{r3, r4, r5, lr}
 800e626:	4d06      	ldr	r5, [pc, #24]	@ (800e640 <_isatty_r+0x1c>)
 800e628:	2300      	movs	r3, #0
 800e62a:	4604      	mov	r4, r0
 800e62c:	4608      	mov	r0, r1
 800e62e:	602b      	str	r3, [r5, #0]
 800e630:	f7f3 f9d4 	bl	80019dc <_isatty>
 800e634:	1c43      	adds	r3, r0, #1
 800e636:	d102      	bne.n	800e63e <_isatty_r+0x1a>
 800e638:	682b      	ldr	r3, [r5, #0]
 800e63a:	b103      	cbz	r3, 800e63e <_isatty_r+0x1a>
 800e63c:	6023      	str	r3, [r4, #0]
 800e63e:	bd38      	pop	{r3, r4, r5, pc}
 800e640:	20000818 	.word	0x20000818

0800e644 <_init>:
 800e644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e646:	bf00      	nop
 800e648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e64a:	bc08      	pop	{r3}
 800e64c:	469e      	mov	lr, r3
 800e64e:	4770      	bx	lr

0800e650 <_fini>:
 800e650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e652:	bf00      	nop
 800e654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e656:	bc08      	pop	{r3}
 800e658:	469e      	mov	lr, r3
 800e65a:	4770      	bx	lr
>>>>>>> 5ae1790f59c1e0a054503f676b1bbd094b8ee208
